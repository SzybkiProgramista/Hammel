//=================================== POLSKI TRUCK ROZRYWKI==================================
//===========================================================================================
//                  8 888888888o   8888888 8888888888 8 888888888o.                         |
//                  8 8888    `88.       8 8888       8 8888    `88.                        |
//                  8 8888     `88       8 8888       8 8888     `88                        |
//                  8 8888     ,88       8 8888       8 8888     ,88                        |
//                  8 8888.   ,88'       8 8888       8 8888.   ,88'                        |
//                  8 888888888P'        8 8888       8 888888888P'                         |
//                  8 8888               8 8888       8 8888`8b                             |
//                  8 8888               8 8888       8 8888 `8b.                           |
//                  8 8888               8 8888       8 8888   `8b.                         |
//                  8 8888               8 8888       8 8888     `88.                       |
//                                                                                          |
//               __                ...                                              __   	|
//      .-----. |  |_  .----.  ______  .-----. .-----. .----. .--.--.      .-----. |  |     |
//      |  _  | |   _| |   _| |______| |__ --| |  -__| |   _| |  |  |  __  |  _  | |  |     |
//      |   __| |____| |__|            |_____| |_____| |__|   \_ __/  |__| |   __| |__|     |
//      |__|                                                               |__|             |
//                                                                                          |
//                            Autor: Szybki(Hammel) i NitrO                          		|
//                             Wszeklkie prawa zastrzezone!                                 |
//===========================================================================================
//=================================== POLSKI TRUCK ROZRYWKI==================================


#include <a_samp>
#include <sscanf2>
#include <kolory>
#include <zcmd>
#include <streamer>
#include <mysql>
#include <progress>
#include <wybieralka>	
#include <tires>		
#include <navigation>
#include <fade_screen>
#include <actor_ex>
#include <a_http>
#include <mSelection>
#include <nfunk>
#include <dutils>
#include <audio>
#include <crashdetect>
#include <cp>
#include <dini>

//#include <colandreas>
//#include <acp-panel>
#pragma dynamic 13000
#define MAX_LABELS                                 500
// Save labels file location
#define Label_Save                                 "textury/%i.ini"
// Colors
#define lightgreen                                                    0x23FF00FF
#define lgreen 							      "{6EF83C}"
#define lwhite 							      "{FFFFFF}"
#define lyellow                                                       "{FFFF22}"
#define lblue                                                         "{2255FF}"
#define lpink                                                         "{FF0077}"
#define lorange                                                       "{FF6622}"
#define lred                                                          "{FF0000}"
#define lgrey                                                         "{BEBEBE}"
#define lyellow2   

#pragma tabsize 0

#pragma unused ret_memcpy

//Newy dodane przeze mnie
new Text:hud1;
new pacholek[5]={-1,...};
/////////////////////////
new Float:handbrake_pos[MAX_VEHICLES][4];
new bool:handbrake[MAX_VEHICLES] = {false, ...};

new resp = -1;
new RespTimerTImer;

new DzMatResetTimer;



 //----------------------------------------------
#define SCM SendClientMessage
#define SCMToAll SendClientMessageToAll
//-----------------------------------------------
#define Komendy 104
/*
				- System rejestracji oraz logowania
				- System banowania (ip, nick, gpci)
				- System zapisu oraz odczytu statystyk gracza (mysql)
				- System dynamicznych towarow (w tym tworzenie ingame oraz edycja ingame)
				- System dynamicznych prywatnych pojazdow (zapis oraz odczyt automatycznie do mysql)
				- System dynamicznych pickupow (tworzenie ingame oraz edycja ingame)
				- System dynamicznych budynkow (tworzenie ingame oraz edycja ingame - domy, silownie, stacje benzynowe, kasyna, sklepy spozywcze, sklepy z ubraniami itd.)
				- System banow (ip, nick, gpci)
				- System czasowego konta vip/supervip (wykorzystanie czasu unix)
				- System glodu
				- System zmeczenia
				- System frakcji
				- System wypadku
				- System dokumentow
				- System poziomow (im wiecej score tym wiekszy poziom)
				- System kierunkowskazow
				- System pasow bezpieczenstwa
				- System dynamicznych przedmiotow 
				- System panelu frakcji (dodaj, zwolnij, wyplata, info - liderowanie)
				- System panelu firmy (dodaj, zwolnij, wyplata, lista pracownikow, lista pojazdow firmowych)
				- System dynamicznych fotoradarow
				- System dynamicznego lotto (zmiana puli, zmiana godziny, zmiana minuty losowania)
				- System dynamicznych obiektow (tworzenie, edycja, poruszanie ingame)
				- System zarzadzania pojazdami
				- System licznika predkosci
				- System stanu opon
				- System licznika dla taksowkarzy
				- System dynamicznego wybierania typu towarow
				- System dynamicznych viatoll
				- System dynamicznych napadow
				- System kasyna (/kasyno)
				- System automatycznych wiadomosci na czacie
============================================================================================================================================================
				NOWOSCI NA SERWERZE:
				-Hydraulika dla pomocy drogowej
				-Nitro dla Pomocy drogowej
				-Nowy wyglÂad komend
				-Komenda na pacholki dla Pomocy Drogowej
				-Zmiana kolorow dla Pomocy Drogowej
*/		

#undef MAX_PLAYERS
#define MAX_PLAYERS 120
#define MAX_ADDITION 200

#define LRED 0xFF6347AA 
#define f( format(string, sizeof(string), 
#define SCMTA( SendClientMessageToAll( 
#define Admin(%1) if(PlayerInfo[playerid][pAdmin] < %1) return SCM(playerid, LRED, "Вам недоступна эта команда") 


#define PRESSED(%0)  (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define HOLDING(%0)  ((newkeys & (%0)) == (%0))
#define RELEASED(%0) (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
	
	
//Ustawienia dla gracza, ktore otrzyma przy rejestracji.
#define START_PLAYER_SKIN	1
#define START_PLAYER_HP 	75.0
#define START_PLAYER_CASH 	10000
#define START_PLAYER_SCORE 	0
#define START_PLAYER_SILA   0
#define START_PLAYER_POS_X  2438.0369
#define START_PLAYER_POS_Y 	2376.1670
#define START_PLAYER_POS_Z 	10.8203
#define START_PLAYER_POS_A 	93.3973
#define START_PLAYER_VW     0
#define START_PLAYER_INT    0

new bramyid = mS_INVALID_LISTID;


//Ustawienia dla gracza inne
#define SETTINGS_PLAYER_MAX_PING 	300
#define SETTINGS_PLAYER_HP_AFTER_BW 30
#define SETTINGS_PLAYER_MAX_ITEMS	12

//Ustawienia przedmiotow
#define TYPE_ITEM_TELEFON 1
#define TYPE_ITEM_TELEFON_VIP 2
#define TYPE_ITEM_NAPRAWCZY 3
#define TYPE_ITEM_OPONA 4
#define TYPE_ITEM_SPADOCHRON 5
#define TYPE_ITEM_KASK 6
#define TYPE_ITEM_CZAPKA 7
#define TYPE_ITEM_GBS 8
#define TYPE_ITEM_DOLADOWANIE_25 9
#define TYPE_ITEM_DOLADOWANIE_150 10
#define TYPE_ITEM_CBRADIO 11
#define TYPE_ITEM_JEDZENIE 12
#define TYPE_ITEM_BRON 13
#define TYPE_ITEM_UBRANIE 14
#define TYPE_ITEM_DISCMAN 15
#define TYPE_ITEM_KAMIZELKA 16
#define TYPE_ITEM_NARKOTYK	17

//Ustawienia serwerowe.

#define SETTINGS_PLANT_NARKO_GODZINY 12
#define MAX_SCRIPT_PICKUPS	500
#define MAX_ZAWIADOMIEN 	500
#define MAX_KOLCZATEK		100
#define MAX_FOTORADARY 		500
#define MAX_TOWARY 	    	100
#define MAX_BUDYNKI    		500
#define MAX_OBJECT_DATA	    30000
#define MAX_FIRMY 	    	100
#define MAX_FIRMA_LEVEL 	30
#define MAX_NARKOTYKI		100
#define MAX_VIATOLL			100
#define MAX_KLODY			100
#define MAX_POZARY			100
#define MAX_GYM 			100
#define MAX_GATES 			250
#define MAX_TELEPORTOW 	    1024 
#define PICKUPMODEL         1559
#define MAX_PLAMY 			100

//==========[DEFINICJE SILOWNI]==========	

#define BENCH_PRESS_INDEX (1)	

//==========[DEFINICJE TESTU MAT]==========		
#define PLUS_MIN 10
#define PLUS_MAX 1000
#define MINUS_MIN 10
#define MINUS_MAX 1000
#define RAZY_MIN 1 
#define RAZY_MAX 10
#define MATTIMER 600000
#define MATTIMERRESET 20000
#define WYGRANA_MIN 100
#define WYGRANA_MAX 1000
#define EXP_MIN 10
#define EXP_MAX 100

/*
new SkinyPolicji[] = { 20005, 20006, 20007, 20008, 284, 20009, 20010, 76, 211, 150, 20011, 20012, 20013, 307, 20014, 302, 20015, 285, 303, 304, 305 };
new SkinyPogotowie[] = { 20016, 20017, 20018, 20019, 20020 };
new SkinyStrazMiejska[] = { 288,71,191,311,309 };
new SkinyStrazGraniczna[] = { 288,71,191,311,309 };
//new SkinyStrazPozarna[] = { 20004, 20001, 20002, 20003 };
new SkinyStrazPozarna[] = { 277,278,279 };
new SkinyPomocDrogowa[] = { 69,50,8,16,27,42,260,268 };
new SkinySanNews[] = { 217,290,295,296,289 };
new SkinyTaxi[] = { 7,220,221,233,234,250,253,255 };
new SkinyWultanClan[] = { 280, 281, 283, 284, 286, 76, 211, 150, 265, 267, 310, 307, 300, 302, 301, 285, 303, 304, 305 };
new SkinyMakaveli[] = { 280, 281, 283, 284, 286, 76, 211, 150, 265, 267, 310, 307, 300, 302, 301, 285, 303, 304, 305 };
new SkinySklepSkins[] = {
*/		

new SkinyPolicji[] = { 280, 281, 283, 284, 286, 76, 211, 150, 265, 267, 310, 307, 300, 302, 301, 285, 303, 304, 305 };
new SkinyPogotowie[] = { 70,274,275,276, 308 };
new SkinyStrazMiejska[] = { 288,71,191,311,309 };
new SkinyStrazGraniczna[] = { 288,71,191,311,309 };
new SkinyStrazPozarna[] = { 277,278,279 };
new SkinyPomocDrogowa[] = { 69,50,8,16,27,42,260,268 };
new SkinySanNews[] = { 217,290,295,296,289 };
new SkinyTaxi[] = { 7,220,221,233,234,250,253,255 };
new SkinyWultanClan[] = { 280, 281, 283, 284, 286, 76, 211, 150, 265, 267, 310, 307, 300, 302, 301, 285, 303, 304, 305 };
new SkinyMakaveli[] = { 280, 281, 283, 284, 286, 76, 211, 150, 265, 267, 310, 307, 300, 302, 301, 285, 303, 304, 305 };
new SkinySklepSkins[] = {
		1,2,3,4,5,6,9,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,28,29,30,31,32,
		33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,59,60,
		61,62,63,64,65,66,67,68,72,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,
		93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,
		114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
		134,135,136,137,138,139,140,141,142,143,145,146,147,148,149,151,152,153,154,155,
		156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,
		176,177,178,180,181,182,183,184,185,186,187,188,189,192,193,194,195,196,197,
		198,199,200,201,202,203,204,205,206,207,208,209,210,212,213,214,215,216,218,219,
		221,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,
		244,245,246,247,248,249,251,252,254,256,257,258,259,261,262,263,264,269,270,
		271,272,273,297,298,299};
		
		
//Ceny:

//Reszta
#define SETTINGS_PRICE_SKIN					15
#define SETTINGS_PRICE_HOTEL				20
#define SETTINGS_PRICE_LOTTO_NUMER 			200
#define SETTINGS_PRICE_NARKOTYK				5000

//Urzad:
#define SETTINGS_PRICE_DOWOD_OSOBISTY		2000
#define SETTINGS_PRICE_DOWOD_REJESTRACYJNY	2500
#define SETTINGS_PRICE_UBEZPIECZENIE		5000
#define SETTINGS_PRICE_PASZPORT				3000
#define SETTINGS_PRICE_ADR					700000


//Sklep elektroniczny
#define SETTINGS_PRICE_TELEFON				1500
#define SETTINGS_PRICE_TELEFON_VIP			1200
#define SETTINGS_PRICE_NAPRAWCZY			500
#define SETTINGS_PRICE_OPONA				500
#define SETTINGS_PRICE_SPADOCHRON			650
#define SETTINGS_PRICE_KASK					250
#define SETTINGS_PRICE_CZAPKA				150
#define SETTINGS_PRICE_GBS					50
#define SETTINGS_PRICE_CBRADIO				7000
#define SETTINGS_PRICE_DISCMAN				1500

//Sklep spozywczy (24/7)
#define SETTINGS_PRICE_DOLADOWANIE_25		25
#define SETTINGS_PRICE_DOLADOWANIE_150 		150
#define SETTINGS_PRICE_ENE1					25
#define SETTINGS_PRICE_ENE2					63
#define SETTINGS_PRICE_ENE3					39
#define SETTINGS_PRICE_DONER				66
#define SETTINGS_PRICE_CIASTKA				55
#define SETTINGS_PRICE_CHIPSY				35
#define SETTINGS_PRICE_PIZZA				25
#define SETTINGS_PRICE_BULKA				18


//Burgershot:
#define SETTINGS_PRICE_HAMBURGER			22
#define SETTINGS_PRICE_DONUT				26
#define SETTINGS_PRICE_HOTDOG				23
#define SETTINGS_PRICE_KEBAB				34
#define SETTINGS_PRICE_LASANGE				36
#define SETTINGS_PRICE_NALESNIK				32
#define SETTINGS_PRICE_NUGGETSY				21
#define SETTINGS_PRICE_SAJGONKI				36
#define SETTINGS_PRICE_ZAPIENAKA			39
#define SETTINGS_PRICE_SPAGHETTI			31
	
//Dialogi:
#define DIALOG_LOGIN 1
#define DIALOG_REGISTER 2
#define DIALOG_HOUSE_BUY 3
#define DIALOG_HOUSE_SELL 4
#define DIALOG_MOTEL_ASK 5
#define DIALOG_URZAD_DOKUMENTY 6
#define DIALOG_BURGER_BUY 7
#define DIALOG_START_TELEPORT 8
#define DIALOG_TWORZENIE_TOWARU 9
#define DIALOG_TWORZENIE_TOWARU_NAZWA 10
#define DIALOG_TWORZENIE_TOWARU_KG 11
#define DIALOG_TWORZENIE_TOWARU_KV 12
#define DIALOG_TWORZENIE_TOWARU_ZW 13
#define DIALOG_TOWARY 15
#define DIALOG_TWORZENIE_TOWARU_RW 14
#define DIALOG_TOWARY_AKCEPT 16
#define DIALOG_POJAZDY_PRYWATNE 17
#define DIALOG_247_BUY 18
#define DIALOG_ELEKT_BUY 19
#define DIALOG_EKWIPUNEK 20
#define DIALOG_NAPRAW_OPONE 21
#define DIALOG_PRZEDMIOTY 22
#define DIALOG_PRZEDMIOTY2 23
#define DIALOG_LOTTO 24
#define DIALOG_GODZINA_LOTTO 25
#define DIALOG_MINUTA_LOTTO 26
#define DIALOG_PULA_LOTTO 27
#define DIALOG_PANEL_ADMINA 28
#define DIALOG_VEHICLE_KLUCZE_DAJ 29
#define DIALOG_VEHICLE_KLUCZE_ZABIERZ 30
#define DIALOG_VEHICLE 31
#define DIALOG_VEHICLE_SPRZEDAJ 32
#define DIALOG_VEHICLE_SPRZEDAJ2 33
#define DIALOG_VEHICLE_SPRZEDAJ3 34
#define DIALOG_VEHICLE_SPRZEDAJ4 35
#define DIALOG_PRZEDMIOTY_VEHICLE 36
#define DIALOG_PRZEDMIOTY3 37
#define DIALOG_ZBROJOWNIA 38
#define DIALOG_PANEL_FRAKCJI_DODAJ 39
#define DIALOG_PANEL_FRAKCJI_ZWOLNIJ 40
#define DIALOG_PANEL_FRAKCJI_INFO 41
#define DIALOG_PANEL_FRAKCJI_LISTA 42
#define DIALOG_PANEL_FRAKCJI_WYPLATA 43
#define DIALOG_DISCMAN_STACJE 44
#define DIALOG_BANK 45
#define DIALOG_BANK_WPLAC 46
#define DIALOG_BANK_WYPLAC 47
#define DIALOG_BANK_PRZELEW 48
#define DIALOG_FIRMA_TWORZ 49
#define DIALOG_PANEL_FIRMY_DODAJ 50
#define DIALOG_PANEL_FIRMY_ZWOLNIJ 51
#define DIALOG_PANEL_FIRMY_LISTA 52
#define DIALOG_PANEL_FIRMY_WPLAC 53
#define DIALOG_PANEL_FIRMY_WYPLAC 54
#define DIALOG_TWORZENIE_EXP 55 
#define DIALOG_PANEL_FIRMY_WYPLATAP 56
#define DIALOG_PANEL_FIRMY_RANGA 57
#define DIALOG_PANEL_FIRMY_RANGA_SET 58
#define DIALOG_TWORZENIE_KASA_FIRMA 59
#define DIALOG_PANEL_FIRMY_VEHICLES 60
#define DIALOG_TELEFON_MENU 61
#define DIALOG_TELEFON_SMS 62
#define DIALOG_TELEFON_ALARMOWE 63
#define DIALOG_TELEFON_ALARMOWE_WYBRAL 64
#define DIALOG_ANIMACJE 65
#define DIALOG_PANEL_FRAKCJI_VEHICLES 66
#define DIALOG_VEHICLE_NAMIERZ 67
#define DIALOG_PANEL_FIRMY_STATY_MEMBER 68
#define DIALOG_PANEL_FIRMA_AKCEPT 69
#define DIALOG_PANEL_FRAKCJA_AKCEPT 70
#define DIALOG_TWORZENIE_GODZINY 71
#define DIALOG_OPINIE_LISTA 72
#define DIALOG_OPINIE_DODAJ 73
#define DIALOG_OPINIE_AKCJA 74
#define DIALOG_VEHICLES_MENU 75
#define DIALOG_VEHICLES_LISTA 76
#define DIALOG_PANEL_OGOL_VEHICLE3S 77
#define DIALOG_MANDAT_MENU 78
#define DIALOG_PRZEDMIOTY_ZABIERZ 79
#define DIALOG_SET_CASH_FRAKCJA 80
#define DIALOG_KASYNO_OWOCE_CYFRY 81
#define DIALOG_SPEC_KICK 82
#define DIALOG_SPEC_WARN 83
#define DIALOG_SPEC_BAN 84
#define DIALOG_SPEC_BAN_LISTA 85
#define DIALOG_PRAWO_JAZDY_SELECT 86
#define DIALOG_PRAWKO_TEORIA 87
#define DIALOG_INFO 88
#define DIALOG_RADIO 89
#define DIALOG_SPRZET_PSP 90
#define DIALOG_ZDARZENIA 91
#define DIALOG_WYBIERZ_SPAWN_VIP 92
#define DIALOG_WYBIERZ_SPAWN_GRACZ 93

//========== [ PANEL TUNINGU PD] ==========

#define KOLORYPD 94
#define FELGIPD 95
#define NEONYPD 96
#define MENUPD 	97
#define TUNING 98
#define TUNINGBLADE 99
#define TUNINGBROADWAY 100
#define TUNINGELEGY	101
#define TUNINGFLASH 102
#define TUNINGJESTER 103
#define TUNINGREMINGTON 104
#define TUNINGSAVANNA 105
#define TUNINGSLAMVAN 106
#define TUNINGSULTAN 107
#define TUNINGSTRATUM 108
#define TUNINGTORNADO 109
#define TUNINGURANUS 110

//========== [ SYSTEM SADOWNICTWA ] ==========

#define DIALOG_ROZPRAWA_MENU 111
#define DIALOG_ROZPRAWA_MENU_ROZPRAWA 112
#define DIALOG_ROZPRAWA_OSKARZONY 113
#define DIALOG_ROZPRAWA_SWIADEK 114
#define DIALOG_ROZPRAWA_WYROK 115
#define DIALOG_ROZPRAWA_WIEZIENIE 116
#define DIALOG_ROZPRAWA_GRZYWNA 117
#define DIALOG_ROZPRAWA_SWIADKOWIE 117
#define DIALOG_ROZPRAWA_SWIADKOWIE_PRZE 118

//========== [ PANEL DJ'A ] ==========

#define DIALOG_DJ 119

//========== [ PANEL ADMINA ] ==========

#define DIALOG_TAP_PANEL_ADMINA 120
#define DIALOG_TAP_PANEL_ADMINA1 121
#define DIALOG_TAP_PANEL_ADMINA01 121

//========== [ PANEL MAPER'A ] ==========

#define DIALOG_MAPER_MAIN 122
#define DIALOG_MAPER_BUDYNEK_MAIN 123
#define DIALOG_MAPER_BRAMY_MAIN 124
#define DIALOG_MAPER_SILOWNIA_MAIN 125
#define DIALOG_MAPER_OBIEKT_NEW_TYPE 126
#define DIALOG_MAPER_OBIEKT_EDIT_MAIN 127


#define ZMIANAHOSTNAME 2000
#define ZMIANAMAPNAME 2000


//Definicne dodane przeze mnie
#define autor "NitrO, Hammel"
#define windowsv "10"
#define version "1.1"
/////////////////////////////
#define CZASDONASTEPNEJWIADOMOSCI 30000
/////////////////////////////
#define C_BIALY "{FFFFFF}"
//#define COLOR_GREY	0xC0C0C0FF
#define C_CZARNY "{000000}"
#define C_ZOLTY "{FFFF00}"
#define C_POMARANCZOWY "{FF7F50}"
#define C_CZERWONY "{FF0000}"
#define C_ROZOWY "{FF1493}"
#define C_NIEBIESKI "{4169E1}"
#define C_BRAZOWY "{A0522D}"
#define C_ZIELONY "{ADFF2F}"
#define C_TURKUSOWY "{00FFFF}"
#define C_SZARY "{C0C0C0}"
#define C_FILOETOWY "{BA55D3}"
#define C_BEZOWY "{FFDEAD}"
#define C_BORDOWY "{B22222}"
#define HEX_COLOR_CREW_ADMIN "{3399CC}"
#define KOLOR_LIGHTGREEN        "{00F23D}"
/////////////////////////////

new PrzypText[][] =
{
	"• Zapraszamy do rejestracji na PTR-SERW.PL",
	"• Chcesz aby serwer byÂl Popularny? Zapraszaj swoich znajomych ",
	"• Serwerowy Team Speak 3 [IP: 91.228.198.149]",
	"• Widzisz Cheatera? Zglos go na  /RAPORT | Chron serwer razem z nami!",
    "• Wpisz /konto aby zobaczyc statystyki swojego konta",
	"• Chcesz pracowac w frakcji? Napisz podanie na naszym forum!",
	"• VIPA kupisz za jedyne 6,15zl za miesiac!",
	"• Aby rozpoczac rozwozenie towarow wpisz /towary",
	"• Podstawowe komendy Serwerowe pod /komendy"
};


new HostNames[][] =
{
	"[PTR-Serv] Polski Truck Rozrywki™[TRUCK][PL]",
	"[PTR-Serv] Powracamy na arene Polska[TRUCK][PL]",
	"[PTR-Serv] Dla nas liczysz ty[TRUCK][PL]",
	"[PTR-Serv] [0.3.7]Polski Truck Rozrywki[TRUCK][PL]",
	"[PTR-Serv] Zapraszamy na TS!IP:[TRUCK][PL]",
	"[PTR-Serv] Powracamy z dawnych czasow[TRUCK][PL]"
};
/*

new HostNames[][] =
{
	"[TRUCK]•••»Polski Truck Rozrywki™•••»[PL]",
	"[TRUCK]•••»Powracamy na arene Polską«•••»[PL]",
	"[TRUCK]•••»Dla nas liczysz ty«•••[PL]",
	"[TRUCK]•••»[0.3.7]Polski Truck Rozrywki«•••»[PL]",
	"[TRUCK]•••»Zapraszamy na TS!IP:PTR-SERW.GA«•••»[PL]",
	"[TRUCK]•••»Powracamy z dawnych czasow«•••»[PL]"
};

new Mapname[][] =
{
	"•••PTR V0.9beta•••",
	"•••Tworzenie•••",
	"•••PTRozrywki•••"
};
*/
new Mapname[][] =
{
	"PTR-SERV",
	"PTR V1.4",
	"Tworzenie",
	"PTRozrywki"
};



//Rangi:
#define RANGA_LEVEL_991		"VIP"
#define RANGA_LEVEL_992		"Technik TS3"
#define RANGA_LEVEL_993		"Zasluzony"
#define RANGA_LEVEL_994		"Mapper"
#define RANGA_LEVEL_995		"Pomocnik"
#define RANGA_LEVEL_996		"Moderator"
#define RANGA_LEVEL_997		"Junior Admin"
#define RANGA_LEVEL_998		"Administrator"
#define RANGA_LEVEL_999		"Wspolwlasciciel"
#define RANGA_LEVEL_1000	"Head-Admin"
#define RANGA_LEVEL_1001	"Programista"


#define RANGA_VIP				991
#define RANGA_TECHNIK_TS3		992		
#define RANGA_ZASLUZONY			993
#define RANGA_MAPER				994
#define RANGA_POMOCNIK			995
#define RANGA_MODERATOR			996
#define RANGA_JUNIORADMIN		997
#define RANGA_ADMINISTRATOR		998
#define RANGA_WSPOLWLASCICIEL	999
#define RANGA_WLASCICIEL		1000
#define RANGA_PROGRAMISTA		1001

//Grupy:
#define GRUPA_LEVEL_0	"Gracz"
#define GRUPA_LEVEL_1	"Policja"
#define GRUPA_LEVEL_2	"Pogotowie"
#define GRUPA_LEVEL_3	"Frakcja-Wolna"
#define GRUPA_LEVEL_4	"Straz Graniczna"
#define GRUPA_LEVEL_5	"Straz Pozarna"
#define GRUPA_LEVEL_6	"Pomoc Drogowa"
#define GRUPA_LEVEL_7	"San News"
#define GRUPA_LEVEL_8	"Taxi"
#define GRUPA_LEVEL_9	"Frakcja-gang"
#define GRUPA_LEVEL_10	"Frakcja-Wolna"


#define FRAKCJA_POLICJI 1
#define FRAKCJA_POGOTOWIA 2
#define FRAKCJA_STRAZ_MIEJSKA 3
#define FRAKCJA_STRAZ_GRANICZNA 4
#define FRAKCJA_STRAZ_POZARNA 5
#define FRAKCJA_POMOC_DROGOWA 6
#define FRAKCJA_SAN_NEWS 7
#define FRAKCJA_TAXI 8
#define FRAKCJA_GANG_OLSENA 9
#define FRAKCJA_MAKAVELI 10


#define GATE_STATE_CLOSE 1
#define GATE_STATE_OPEN 2


//Budynki:
#define BUDYNEK_LEVEL_1	"Kasyno"
#define BUDYNEK_LEVEL_2	"Wesole Miasteczko"
#define BUDYNEK_LEVEL_3	"Drink Bar"
#define BUDYNEK_LEVEL_4	"Sklep elektryczny"
#define BUDYNEK_LEVEL_5	"Motel"
#define BUDYNEK_LEVEL_6	"Urzad"
#define BUDYNEK_LEVEL_7	"Bank"
#define BUDYNEK_LEVEL_8	"Salon Samochodowy"
#define BUDYNEK_LEVEL_9	"Silownia"




new pula_wygranej, pula_zakup_players, lotto_godzina, lotto_minuta;
new frakcja_szef_info[11][150];
new VehKierunki[MAX_VEHICLES][6];
new Float:ev_pos[3], ev_interior, ev_vw, ev_czas;
new PlayerText:Txdraw_Logged[MAX_PLAYERS][15];
new PlayerText:Txdraw_Gym[MAX_PLAYERS][7]; 
new PlayerText:Txdraw_BuildInfo[MAX_PLAYERS][4];
new PlayerText:Txdraw_StatyBox[MAX_PLAYERS][23];
new PlayerText:Txdraw_StacjaBenzInfo[MAX_PLAYERS][3];
new PlayerText:Txdraw_SalonInfo[MAX_PLAYERS][15];
new PlayerText:Txdraw_InfoTXD[MAX_PLAYERS][9];
new PlayerText:Txd_others_txds[MAX_PLAYERS][1];
new PlayerText:Txd_vinfo[MAX_PLAYERS][2];
new PlayerText:Txd_panelfrakcji[MAX_PLAYERS][22];
new PlayerText:Txd_panelfirmy[MAX_PLAYERS][21];
new PlayerText:Txd_infozlecenie[MAX_PLAYERS][4];
new PlayerText:Txdraw_licznikv[MAX_PLAYERS][17];
new PlayerText:Txd_lczniktaxi[MAX_PLAYERS][7];
new PlayerText:Txd_newsreporta[MAX_PLAYERS][2];
new PlayerText:Txd_towarwybierz[MAX_PLAYERS][5];
new PlayerText:Txd_realtime[MAX_PLAYERS][1];
new PlayerText:Txd_ptelefon[MAX_PLAYERS][19];
new PlayerText:Txd_panelkasyno[MAX_PLAYERS][15];
new PlayerText:Txd_spec_info[MAX_PLAYERS][7];
new PlayerText:Txd_obiekttxd[MAX_PLAYERS][5];
new PlayerText:Txd_napadp[MAX_PLAYERS][4];


//========== [ ZMIENNE GLOBALNE ] ==========
new sg = 0; // do systemy granic

//========== [ SYSTEM SĄDOWNICTWA ] ==========

new bool: rozprawa_trwa = false; 
new zeznania[MAX_PLAYERS][1000];


//Typ 1  = jednoslady
//Typ 2 = sportowe
//Typ 3 = osobowe
//Typ 4 = dostawcze
//Typ 5 = reszta nienadajaca sie do salonu (auta lspd itp)


// TYP,  CENA,  POZIOM, CENA
new SalonInfo[212][] = {
		{3, 0, 0, "Landstalker"},
		{3, 0, 0, "Bravura"},
		{2, 0, 0, "Buffalo"},
		{4, 0, 0, "Linerunner"},
		{3, 0, 0, "Perrenial"},
		{3, 0, 0, "Sentinel"},
		{5, 0, 0, "Dumper"},
		{5, 0, 0, "Fire Truck"},
		{5, 0, 0, "Trashmaster"},
		{3, 0, 0, "Stretch"},
		{3, 0, 0, "Manana"},
		{2, 0, 0, "Infernus"},
		{3, 0, 0, "Voodoo"},
		{4, 0, 0, "Pony"},
		{4, 0, 0, "Mule"},
		{2, 0, 0, "Cheetah"},
		{5, 0, 0, "Ambulance"},
		{5, 0, 0, "Leviathan"},
		{5, 0, 0, "Moonbeam"},
		{3, 0, 0, "Esperanto"},
		{5, 0, 0, "Taxi"},
		{3, 0, 0, "Washington"},
		{3, 0, 0, "Bobcat"},
		{5, 0, 0, "Mr Whoopee"},
		{2, 0, 0, "BF Injection"},
		{5, 0, 0, "Hunter"},
		{3, 0, 0, "Premier"},
		{5, 0, 0, "Enforcer"},
		{5, 0, 0, "Securicar"},
		{2, 0, 0, "Banshee"},
		{5, 0, 0, "Predator"},
		{5, 0, 0, "Bus"},
		{5, 0, 0, "Rhino"},
		{5, 0, 0, "Barracks"},
		{2, 0, 0, "Hotknife"},
		{4, 0, 0, "Trailer 1"},
		{3, 0, 0, "Previon"},
		{5, 0, 0, "Coach"},
		{5, 0, 0, "Cabbie"},
		{3, 0, 0, "Stallion"},
		{4, 0, 0, "Rumpo"},
		{5, 0, 0, "RC Bandit"},
		{3, 0, 0, "Romero"},
		{5, 0, 0, "Packer"},
		{5, 0, 0, "Monster"},
		{3, 0, 0, "Admiral"},
		{5, 0, 0, "Squalo"},
		{5, 0, 0, "Seaspar"},
		{5, 0, 0, "Pizzaboy"},
		{5, 0, 0, "Tram"},
		{4, 0, 0, "Trailer 2"},
		{2, 0, 0, "Turismo"},
		{5, 0, 0, "Speeder"},
		{5, 0, 0, "Reefer"},
		{5, 0, 0, "Tropic"},
		{4, 0, 0, "Flatbed"},
		{4, 0, 0, "Yankee"},
		{5, 0, 0, "Caddy"},
		{3, 0, 0, "Solair"},
		{4, 0, 0, "Berkleys RC Van"},
		{5, 0, 0, "Skimmer"},
		{1, 0, 0, "PCJ-600"},
		{1, 1200, 1, "Faggio"},
		{1, 4500, 2, "Freeway"},
		{5, 0, 0, "RC Baron"},
		{5, 0, 0, "RC Raider"},
		{3, 0, 0, "Glendale"},
		{3, 0, 0, "Oceanic"},
		{1, 0, 0, "Sanchez"},
		{5, 0, 0, "Sparroww"},
		{3, 0, 0, "Patriot"},
		{1, 0, 0, "Quad"},
		{5, 0, 0, "Coastguard"},
		{5, 0, 0, "Dinghy"},
		{3, 0, 0, "Hermes"},
		{3, 0, 0, "Sabre"},
		{5, 0, 0, "Rustler"},
		{2, 0, 0, "ZR-350"},
		{3, 0, 0, "Walton"},
		{3, 0, 0, "Regina"},
		{2, 0, 0, "Comet"},
		{1, 0, 0, "BMX"},
		{4, 0, 0, "Burrito"},
		{5, 0, 0, "Camper"},
		{5, 0, 0, "Marquis"},
		{5, 0, 0, "Baggage"},
		{5, 0, 0, "Dozer"},
		{5, 0, 0, "Maverick"},
		{5, 0, 0, "News Maverick"},
		{3, 0, 0, "Rancher"},
		{5, 0, 0, "FBI Rancher"},
		{5, 0, 0, "Virgo"},
		{3, 0, 0, "Greenwood"},
		{5, 0, 0, "Jetmax"},
		{3, 0, 0, "Hotring"},
		{3, 0, 0, "Sandking"},
		{3, 0, 0, "Blista Compact"},
		{5, 0, 0, "Police Maverick"},
		{4, 0, 0, "Boxville"},
		{4, 0, 0, "Benson"},
		{3, 0, 0, "Mesa"},
		{5, 0, 0, "RC Goblin"},
		{5, 0, 0, "Hotring A"},
		{5, 0, 0, "Hotring B"},
		{5, 0, 0, "Bloodring Banger"},
		{3, 0, 0, "Rancher"},
		{2, 0, 0, "Super GT"},
		{3, 0, 0, "Elegant"},
		{5, 0, 0, "Journey"},
		{1, 0, 0, "Rower wiejski"},
		{1, 0, 0, "Mountain Bike"},
		{5, 0, 0, "Beagle"},
		{5, 0, 0, "Cropdust"},
		{5, 0, 0, "Stunt"},
		{4, 0, 0, "Tanker"},
		{4, 0, 0, "Roadtrain"},
		{3, 0, 0, "Nebula"},
		{3, 0, 0, "Majestic"},
		{5, 0, 0, "Buccaneer"},
		{5, 0, 0, "Shamal"},
		{5, 0, 0, "Hydra"},
		{1, 0, 0, "FCR-900"},
		{1, 0, 0, "NRG-500"},
		{5, 0, 0, "HPV1000"},
		{5, 0, 0, "Cement Truck"},
		{5, 0, 0, "Tow Truck"},
		{5, 0, 0, "Fortune"},
		{5, 0, 0, "Cadrona"},
		{5, 0, 0, "FBI Truck"},
		{5, 0, 0, "Willard"},
		{5, 0, 0, "Forklift"},
		{3, 0, 0, "Tractor"},
		{5, 0, 0, "Combine"},
		{3, 0, 0, "Feltzer"},
		{3, 0, 0, "Remington"},
		{3, 0, 0, "Slamvan"},
		{3, 0, 0, "Blade"},
		{5, 0, 0, "Freight"},
		{5, 0, 0, "Streak"},
		{5, 0, 0, "Vortex"},
		{5, 0, 0, "Vincent"},
		{2, 0, 0, "Bullet"},
		{3, 0, 0, "Clover"},
		{5, 0, 0, "Sadler"},
		{5, 0, 0, "Firetruck LA"},
		{3, 0, 0, "Hustler"},
		{3, 0, 0, "Intruder"},
		{3, 0, 0, "Primo"},
		{5, 0, 0, "Cargobob"},
		{3, 0, 0, "Tampa"},
		{3, 0, 0, "Sunrise"},
		{3, 0, 0, "Merit"},
		{5, 0, 0, "Utility"},
		{5, 0, 0, "Nevada"},
		{4, 0, 0, "Yosemite"},
		{3, 0, 0, "Windsor"},
		{5, 0, 0, "Monster A"},
		{5, 0, 0, "Monster B"},
		{2, 0, 0, "Uranus"},
		{2, 0, 0, "Jester"},
		{2, 0, 0, "Sultan"},
		{3, 0, 0, "Stratum"},
		{2, 0, 0, "Elegy"},
		{5, 0, 0, "Raindance"},
		{5, 0, 0, "RC Tiger"},
		{2, 0, 0, "Flash"},
		{3, 0, 0, "Tahoma"},
		{3, 0, 0, "Savanna"},
		{5, 0, 0, "Bandito"},
		{5, 0, 0, "Freight Flat"},
		{5, 0, 0, "Streak Carriage"},
		{5, 0, 0, "Kart"},
		{5, 0, 0, "Mower"},
		{5, 0, 0, "Duneride"},
		{5, 0, 0, "Sweeper"},
		{5, 0, 0, "Broadway"},
		{5, 0, 0, "Tornado"},
		{5, 0, 0, "AT-400"},
		{4, 0, 0, "DFT-30"},
		{3, 0, 0, "Huntley"},
		{5, 0, 0, "Stafford"},
		{1, 0, 0, "BF-400"},
		{5, 0, 0, "Newsvan"},
		{5, 0, 0, "Tug"},
		{4, 0, 0, "Trailer 3"},
		{3, 0, 0, "Emperor"},
		{1, 0, 0, "Wayfarer"},
		{2, 0, 0, "Euros"},
		{5, 0, 0, "Hotdog"},
		{2, 0, 0, "Club"},
		{5, 0, 0, "Freight Carriage"},
		{4, 0, 0, "Trailer 4"},
		{5, 0, 0, "Andromada"},
		{5, 0, 0, "Dodo"},
		{5, 0, 0, "RC Cam"},
		{5, 0, 0, "Launch"},
		{5, 0, 0, "Police car LSPD"},
		{5, 0, 0, "Police car SFPD"},
		{5, 0, 0, "Police car LVPD"},
		{5, 0, 0, "Police Ranger"},
		{3, 0, 0, "Picador"},
		{5, 0, 0, "SWAT Van"},
		{2, 0, 0, "Alpha"},
		{2, 0, 0, "Phoenix"},
		{3, 0, 0, "Glendale"},
		{5, 0, 0, "Sadler"},
		{5, 0, 0, "Luggage Trailer A"},
		{5, 0, 0, "Luggage Trailer B"},
		{5, 0, 0, "Stair Trailer"},
		{4, 0, 0, "Boxville"},
		{5, 0, 0, "Farm Plow"},
		{5, 0, 0, "Utility Trailer"}
};
	
	
	
	

#define PRAWKO_TYPE_B	1
#define PRAWKO_TYPE_C	2
#define PRAWKO_TYPE_D	3
#define PRAWKO_TYPE_A	4
#define PRAWKO_TYPE_L	5

#define PRAWKO_ODP_A	0
#define PRAWKO_ODP_B	1
#define PRAWKO_ODP_C	2
#define PRAWKO_ODP_D	3

enum e_prawojazdyt
{
	id_p,
	type_prawko,
    pytanie[150],
	dobra_odp,
	pytA[150],
	pytB[150],
	pytC[150],
	pytD[150]
};

new PJ_Teoria[][e_prawojazdyt] = {
    // KATEGORIA A
	{0, 99999999, "unbug", 999999999, "unbug", "unbug", "unbug", "unbug"},
	{1, PRAWKO_TYPE_A,  "Kategoria A2 daje prawo do jazdy motocyklami o pojemnosci nie przekraczajacej: ", PRAWKO_ODP_B, "A: 50 cm/3", "B: 250 cm/3", "C: 125 cm/3", "D: Bez ograniczen"},
	{2, PRAWKO_TYPE_A, "Jak nalezy umiescic bagaz o masie 20kg na motocyklu?" ,PRAWKO_ODP_A, "A: Rozlozyc go rownomiernie", "B: Umiescic wylacznie z prawej strony pojazdu", "C: Umiescic wylacznie z lewej strony pojazdu", "D: Gdziekolwiek"},
	{3, PRAWKO_TYPE_A, "Ktora z wymienionych usterek uniemozliwia uzywanie motocykla w ruchu drogowym?" ,PRAWKO_ODP_A, "A: Nadmiernie zuzyte klicki hamulcowe", "B: Kazda z wymienionych usterek", "C: Nieczytelna tabliczna znamionowa", "D: Uszkodzenie powloki lakierniczej"},
	{4, PRAWKO_TYPE_A, "Czy motocyklista ma obowiazek nosic stroj motocyklowy (kombinezon, rekawice, buty)?" ,PRAWKO_ODP_C, "A: Tak", "B: Nie", "C: Nie musi ale powinien", "D: ---"},
	{5, PRAWKO_TYPE_A, "Za ochrone termiczna poszkodowanego odpowiada strona folii zycia koloru(widok z gory):" ,PRAWKO_ODP_A, "A: Zlotego", "B: Srebrnego", "C: Obojetnie", "D: ---"},
    {6, PRAWKO_TYPE_A, "Co to jest strefa zamieszkania" ,PRAWKO_ODP_C, "A: Droga miedzy blokowiskami", "B: Czesc drogi nalezacej do szpitala", "C: Obowiazuje tam ograniczenie do 20 km/h i pierwszenstwo pieszych", ""},
	{7, PRAWKO_TYPE_A, "W strefie zabudowanej, po godzinie 23-5, obowiazuje ograniczenie predkosci do:" ,PRAWKO_ODP_D, "A: 40 km/h", "B: 40 km/h", "C: 90 km/h", "D: 60 km/h"},
	{8, PRAWKO_TYPE_A, "Jak czesto nalezy obracac poszkodowanego na drugi bok w pozycji bocznej ustalonej?" ,PRAWKO_ODP_C, "A: co 60 minut", "B: co 15 minut", "C: co 30 minut", "D: nie trzeba obracac"},
	{9, PRAWKO_TYPE_A, "Badanie ABC wykonujemy przez:" ,PRAWKO_ODP_A, "A: 10 sekund", "B: 1 minute", "C: 2 sekundy", "D: Wedlug uznania"},
	{10, PRAWKO_TYPE_A, "W jakich warunkach droga hamowania jest najdluzsza?" ,PRAWKO_ODP_C, "A: Na drodze suchej", "B: na drodze mokrej", "C: na drodze oblodzonej", "D: na zadnej z wymienionych"},
    // KATEGORIA B
	{0, 99999999, "unbug", 999999999, "unbug", "unbug", "unbug", "unbug"},
	{1, PRAWKO_TYPE_B,  "Samochodami osobowymi kategorii B mozemy przewozic maksymalnie(bez kierowcy): ", PRAWKO_ODP_D, "A: 2 osoby", "B:4 osoby", "C: 5 osob", "D: 8 osob"},
	{2, PRAWKO_TYPE_B, "Kategoria B uprawnia kierowce do kierowania pojazdem o DMC nie przekraczajacej: " ,PRAWKO_ODP_A, "A: 3,5t", "B: 12t", "C: 2t", "D: Bez ograniczej w DMC pojazdu"},
	{3, PRAWKO_TYPE_B, "Co nalezy zastosowac do opatrzenia silnie krwawiacej rany?" ,PRAWKO_ODP_B, "A: Wylacznie gaze jalowa", "B: Opatrunek uciskowy", "C: Jodyne i genicyne", ""},
	{4, PRAWKO_TYPE_B, "Jaki moze byc skutek niewywazenia kol jezdnych w pojezdzie?" ,PRAWKO_ODP_B, "A: Zwiekszenie przyczepnosci kol", "B: Zmniejszenie przyczepnosci kol i sterownosci pojazdu", "C:Zwiekszenie skutecznosci hamowania", ""},
	{5, PRAWKO_TYPE_B, "Za ochrone termiczna poszkodowanego odpowiada strona folii zycia koloru(widok z gory):" ,PRAWKO_ODP_A, "A: Zlotego", "B: Srebrnego", "C: Obojetnie", "D: ---"},
    {6, PRAWKO_TYPE_B, "Co to jest strefa zamieszkania" ,PRAWKO_ODP_C, "A: Droga miedzy blokowiskami", "B: Czesc drogi nalezacej do szpitala", "C: Obowiazuje tam ograniczenie do 20 km/h i pierwszenstwo pieszych", ""},
	{7, PRAWKO_TYPE_B, "W strefie zabudowanej, po godzinie 23-5, obowiazuje ograniczenie predkosci do:" ,PRAWKO_ODP_D, "A: 40 km/h", "B: 40 km/h", "C: 90 km/h", "D: 60 km/h"},
	{8, PRAWKO_TYPE_B, "Jekie jest ryzyko poslizgu pojazdu podczas jazdy w czasie deszczu?" ,PRAWKO_ODP_A, "A: Najwieksze w poczatkowej fazie deszczu", "B: Najmniejsze w poczatkowej fazie deszczu", "C: Takie samo we wszystkich fazach deszczu", "D: Najwieksze w koncowej fazie deszczu"},
	{9, PRAWKO_TYPE_B, "Jak powienienes postapic w czasie przejazdu przez rozlegla kaluze?" ,PRAWKO_ODP_C, "A: Nic nie robic", "B: Zdecydowanie przyspieszyc", "C: Plynnie zmniejszyc predkosc", "D: Gwaltownie przyhamowac"},
	{10, PRAWKO_TYPE_B, "Ktory z wymienionych elementow stanowi obowiazkowe wyposazenie kazdego samochodu osobowego?" ,PRAWKO_ODP_C, "A: Trojkat ostrzegawczy", "B: Wszystkie wymienione elementy", "C: Apteczka", "D: Kolo zapasowe"},
    // KATEGORIA C
	{0, 99999999, "unbug", 999999999, "unbug", "unbug", "unbug", "unbug"},
	{1, PRAWKO_TYPE_C,  "Do egzaminu na kat. C/C+E mozna przystapic po ukonczeniu: ", PRAWKO_ODP_A, "A: 21 roku zycia", "B: 18 roku zycia", "C: 24 roku zycia", "D: Nie ma to znaczenia"},
	{2, PRAWKO_TYPE_C, "DMC zestawu(ciagnik + naczepa) wynosi w Polsce:  " ,PRAWKO_ODP_A, "A: 42 T", "B: 40 T", "C: 38 T", "D: Bez ograniczenia w DMC zestawu"},
	{3, PRAWKO_TYPE_C, "Jaka jest maksymalna dopuszczalna wysokosc samochodu ciezarowego z ladunkiem?" ,PRAWKO_ODP_C, "A: 3,5 m", "B: 4,5 m", "C: 4 m", ""},
	{4, PRAWKO_TYPE_C, "Ktory z wymienionych czynnikow, moze byc przyczyna zmiejszenia poziomy plynu w ukladzie chlodzenia?" ,PRAWKO_ODP_B, "A: Praca silnika na wysokich obrotach", "B: Nieszczelnosc ukladu chlodzenia", "C: Uszkodzenie paska napedu pompy wody", ""},
	{5, PRAWKO_TYPE_C, "Pod ktory z podanych numerow powinenes zadzwonic, aby wezwac karetke pogotowia?" ,PRAWKO_ODP_D, "A: 997", "B: 998", "C: 911", "D: 999"},
    {6, PRAWKO_TYPE_C, "Czy ladunek przewozony samochodem ciezarowym moze powodowac przekroczenie dopuszczalnej ladownosci?" ,PRAWKO_ODP_C, "A: Tak, ale nie wiecej niz o 20%", "B: Tak, o ile nie zostana przekroczone dopuszczalen naciski osi na jezdnie", "C: Nie", ""},
	{7, PRAWKO_TYPE_C, "W strefie zabudowanej, po godzinie 23-5, obowiazuje ograniczenie predkosci do:" ,PRAWKO_ODP_D, "A: 40 km/h", "B: 40 km/h", "C: 90 km/h", "D: 60 km/h"},
	{8, PRAWKO_TYPE_C, "Czy wolno Ci kierowac pojazdem, ktorego tablica rejestracyjna jest niewidoczna?" ,PRAWKO_ODP_C, "A: Tak, bez zadnych ograniczen", "B: Tak, gdy tablica przyslonieta jest przez wystajacy ladunek", "C: Nie, jest to zabronione", ""},
	{9, PRAWKO_TYPE_C, "Gdzie na pojezdzie powinny znajdowac sie tablice wskazujace, ze przewozi on materialy niebezpieczne?" ,PRAWKO_ODP_C, "A: Tylko z tylu", "B: Tylko z przodu", "C: Z tyli i z przodu", ""},
	{10, PRAWKO_TYPE_C, "Do czego sluzy mata uzywana przy mocowaniu ladunku w samochodzie ciezarowym?" ,PRAWKO_ODP_B, "A: Do zmniejszenia halasu powodowanego przez ladunek", "B: Do zwiekszenia tarcia", "C: Do zmniejszenia tarcia", ""},
    // KATEGORIA D
	{0, 99999999, "unbug", 999999999, "unbug", "unbug", "unbug", "unbug"},
	{1, PRAWKO_TYPE_C,  "Czy wolno Ci holowaÄ‡ autobusem samochĂld ciÄ™ĹĽarowy z przyczepÄ…?", PRAWKO_ODP_C, "A: Tak ale tylko poza autostrada", "B: Tak, bez ograniczen", "C: Nie", ""},
	{2, PRAWKO_TYPE_C, "KtĂlrÄ… z czynnoĹ›ci naleĹĽy wykonaÄ‡, przystÄ™pujÄ…c do wymiany koĹ‚a w autobusie?" ,PRAWKO_ODP_A, "A: Podlozyc kliny zabezpieczajece pod przeciwlegle kolo", "B: Zwolic hamulec postojowy", "C: Ustawic dzwignie zmiany biegow w polozeniu neutralnym", ""},
	{3, PRAWKO_TYPE_C, "KtĂlry z poniĹĽszych czynnikĂlw ma negatywny wpĹ‚yw na obserwacjÄ™ drogi przez kierujÄ…cego autobusem?" ,PRAWKO_ODP_A, "A: Zmeczenie", "B: Przewozeni na siedzeniach pasazerowie", "C: Ergonomia fotele pasazera", ""},
	{4, PRAWKO_TYPE_C, "Jak siÄ™ powinieneĹ› zachowaÄ‡, gdy wewnÄ…trz autokaru, ktĂlrym kierujesz, wybuchĹ‚ poĹĽar?" ,PRAWKO_ODP_B, "A: Dojechac do najblizszego parkingu i rozpoczac ewakuacje pasazerow", "B: Zatrzymac pojazd i probowac samodzielnie ugasic ogien", "C: Zatrzymac pojazd, wylaczyc silnik i rozpoczac ewakuacje pasazerow", ""},
	{5, PRAWKO_TYPE_C, "Jaki objaw Ĺ›wiadczy o nieprawidĹ‚owym dziaĹ‚aniu urzÄ…dzenia wspomagajÄ…cego ukĹ‚adu kierowniczego w autobusie?" ,PRAWKO_ODP_C, "A: Znacznie zmniejszony opor ruchu kola kierownicy", "B: Boczne znoszenie kol osi przedniej podczas jazdy po luku drogi", "C: Znaczenie zwiekszony opor kola kierownicy", ""},
    {6, PRAWKO_TYPE_C, "Od czego, w zasadniczy sposĂlb, zaleĹĽy przyczepnoĹ›Ä‡ opon autobusu do suchej jezdni?" ,PRAWKO_ODP_A, "A: Od rodzaju nawierzchni tej jezdni", "B: Od mocy silnika", "C: Od sprawnosci ukladu kierowniczego", ""},
	{7, PRAWKO_TYPE_C, "W strefie zabudowanej, po godzinie 23-5, obowiazuje ograniczenie predkosci do:" ,PRAWKO_ODP_D, "A: 40 km/h", "B: 40 km/h", "C: 90 km/h", "D: 60 km/h"},
	{8, PRAWKO_TYPE_C, "Jaki odstÄ™p naleĹĽy zachowaÄ‡ podczas wymijania samochodem osobowym innego pojazdu?" ,PRAWKO_ODP_B, "A: Bezpieczny, ale nie mniejszy niz 1,5m", "B: Bezpieczny, uzalezniony od szerokosci jezdni i warunkow ruchu", "C: Bezpieczny, czyli zawsze taki sam", ""},
	{9, PRAWKO_TYPE_C, "Jakie paliwo naleĹĽy stosowaÄ‡ do silnikĂlw wysokoprÄ™ĹĽnych w autobusach?" ,PRAWKO_ODP_B, "A: Olej opalowy", "B: Olej napedowy spelniajacy odpowiednia norme", "C: Olej napedowy z nafta", ""},
	{10, PRAWKO_TYPE_C, "Czy wolno Ci spoĹĽywaÄ‡ posiĹ‚ek podczas kierowania autobusem?" ,PRAWKO_ODP_B, "A: Nie, jest to zawsze zabronione", "B: Tak, jesli w autobusie nie jest przewozona inna osoba", "C: Tak, zawsze", ""}
};


//System silowni

new bool:BENCH_IN_USE[MAX_GYM]=false;
new PLAYER_CURRECT_BENCH[MAX_PLAYERS],
	bool:PLAYER_INBENCH[MAX_PLAYERS]=false;
    new PLAYER_TREAM_DIS_COUNT[MAX_PLAYERS];
new bool:TREAM_IN_USE[MAX_GYM]=false;
new PLAYER_CURRECT_TREAD[MAX_PLAYERS],
 	bool:PLAYER_INTREAM[MAX_PLAYERS]=false;
    
new bool:BAR_CAN_BE_USED[MAX_PLAYERS]=false;
    


new PLAYER_BENCH_TIMER[MAX_PLAYERS];

new PLAYER_TREAD_TIMER[MAX_PLAYERS];

new PLAYER_BENCH_COUNT[MAX_PLAYERS];
//new PLAYER_TREAD_COUNT[MAX_PLAYERS];






enum e_viatoll
{
	vUID,
	vAktywny,
	vPkt,
	vKwota,
	Float:vPos[6],
	vObject,
	Text3D:vText3D,
	vVW,
	vInt
};
new ViatollData[MAX_VIATOLL][e_viatoll];
new viatoll_value = 1;


enum e_napad
{
	bool:nAktywny,
	nFrakcjaSTR[24],
	nFrakcja,
	nCzas,
	nTimer,
	nBudynek[24],
	nBudynekUID,
	nLudzieOrg,
	nLudzieLSPD
	
};
new NapadData[e_napad];


enum e_narkotyki
{
	nUID,
	nAktywny,
	nTworca[24],
	nFrakcja,
	nCzas,
	nType,
	nVW,
	nInt,
	Text3D:nText3D,
	Float:nPos[4]
};
new NarkotykiData[MAX_NARKOTYKI][e_narkotyki];
new narko_value = 1;


enum e_zawiadomenia
{
	bool:zAktywny,
	zFrakcja,
	zGracz[24],
	zGraczID,
	zTresc[50],
	zGPS[50],
	Float: zX,
	Float: zY,
	Float: zZ,
	zType
};
new ZawiadomieniaData[MAX_ZAWIADOMIEN][e_zawiadomenia];


enum e_kolczatki
{
	Float:kPos[4],
    kObject,
	Text3D:kText3D
};
new KolczatkiData[MAX_KOLCZATEK][e_kolczatki];


enum e_server
{
	sGodzina,
	sPogoda
	
};
new ServerData[e_server];



enum e_firmy
{
	fUID,
	fAktywny,
	fName[30],
	fOwnerUID,
	fOwner[24],
	fSaldo,
	fLevel,
	fExp,
	fTowary,
	fPeople
};

new FirmaData[MAX_FIRMY][e_firmy];
new firma_value = 1;




enum e_objects
{
	bUID,
	bAktywny,
	oModel,
	oType,
	oRequisteFirma,
	oRequisteFrakcja,
	oCanMoved,
	oMoved,
	Text3D:oText3D,
	Float:oPosMove[6],
	Float:bPos[6],
	oObject,
	oVW,
	oInt,
	oTimer,
	oOpen
};

new ObjectData[MAX_OBJECT_DATA][e_objects];
new obiekt_value = 1;


enum e_klody
{
	kUID,
	kAktywny,
	kModelid,
	kStatus,
	Float:kHP,
	Float:kPos[6],
	kObject,
	Text3D:kText3D,
	kVW,
	kInt
};

new KlodaData[MAX_KLODY][e_klody];
new kloda_value = 1;
new kloda_activity = -1;

enum e_plamy
{
	plUID,
	plAktywny,
	plModelid,
	plStatus,
	Float:plHP,
	Float:plPos[6],
	plObject,
	Text3D:plText3D,
	plVW,
	plInt
};

new PlamaData[MAX_PLAMY][e_plamy];
new plama_value = 1;
new plama_activity = -1;


enum e_pozar
{
	pfUID,
	pfAktywny,
	pfType,
	pfStatus,
	Float:pfHP,
	Float:pfPos[6],
	pfTimer,
	pfObject,
	Text3D:pfText3D,
	pfVW,
	pfInt
};

new PozarData[MAX_POZARY][e_pozar];
new pozar_value = 1;
new pozar_activity = -1;



enum e_foto
{
	fUID,
	fAktywny,
	fKara,
	fMaxKM,
	Float:fPos[6],
	fObject,
	Text3D:fText3D,
	fVW,
	fInt
};	

new FotoData[MAX_FOTORADARY][e_foto];
new foto_value = 1;

enum e_gym
{
	gUID,
    gType,
	gAktywny,
	Float: gPos[15],
	gObject,
	gPlayerObject,
	Text3D: gText3D,
	gVW,
	gInt,
	bool: gUse
};

new GymData[MAX_GYM][e_gym];
new gym_value = 1;

enum e_gates
{
    gUID,
    gFrakcja,
    gBramaID,
    gAktywny,
    Float: gPos[20],
    gObject,
    Text3D: gText3D,
    gVW,
    gInt,
    gGateState,
    gPickup
};

new GateData[MAX_GATES][e_gates];
new gates_value = 1;

enum e_Teleports{
	bool: tp_created,
	tp_id,
	Float: tp_from[3],
	Float: tp_to[3],
	tp_PU[2],
	Text3D: tp_info[2]
};

new Teleporty[MAX_TELEPORTOW][e_Teleports];

enum e_towary
{
	tTowarUID,
	tTowarStan,
	tNazwa[30],
	tTowarRequiste,
	tScorePlayer,
	tScoreVip,
	tKasaPlayer,
	tKasaVip,
	Float:tZaladunek[3],
	Float:tRozladunek[3],
	tZaladunekW[30],
	tRozladunekW[30],
	tADR,
	tExp,
	tKasaFirma,
	tLegalny,
	tOdGodz,
	tDoGodz,
	Text3D:tText3D,
	tMapIcon,
	tPickup,
	un_bug_towary
};
new TowarData[MAX_TOWARY][e_towary];
new towar_value = 1;


enum e_pickups
{
	pUID,
	pAktywny,
	pPickup,
	Text3D:pText3D,
	pMapIcon,
	pMapIcon_PWN_ID,
	pPickup_PWN_ID,
	pType,
	pVW,
	pInt,
	pCena,
	Float:pPos[3]
	
};
new PickupData[MAX_SCRIPT_PICKUPS][e_pickups];
new pickup_value = 1;






enum e_budynki
{
	bUID,
	bAktywny,
	bName[30+1],
	bOwnerUID,
	bOwnerNick[MAX_PLAYER_NAME],
	bPickup,
	bPickup2,
	bMapIcon,
	bType,
	Float:bPos_IN[3],
	Float:bPos_OUT[3],
	bVW,
	bInt_IN,
	bPrice,
	bEnterCash,
	bEnterPeople,
	bLocked,
	bPickup_PWN_ID,
	bMapIcon_PWN_ID,
	
	//Dom
	bHouseInterior,
	Text3D:bText3D,
	bHouseLevel,
	bHouseOpis[50]
	
};
new BudynekData[MAX_BUDYNKI][e_budynki];
new build_value = 1;



enum e_players
{
	pUID,
	bool:pLogged,
	pName[MAX_PLAYER_NAME],
	pPassword[128],
	pSalt[11],
	pIP[24],
	pGPCI[40],
    pLogin[30],
    pHaslo[30],
	Float:pHP,
	pPrivCars,
	pPrivHouse,
	pCash,
	pCashBank,
	pScore,
	pJetPack,
	Float:pPos[4],
	pVW,
	pInt,
	pLevelRanga[24],
	pLevel,
	pLider,
	pFrakcja,
	pFirma,
	pFirmaRanga,
	pRanga,
	pWarns,
	pPickupUID,
	pBuildEnterUID,
	pBlockCMD,
	pWybieraAlarmowe,
	pWybieraOpinieUID,
	pWybieraOpinie[100],
	pTimerNewsReportera,
	pTimerLicznikTaxi,
	pTimerZlecenieInfo,
	pTimerSpec,
	pTimerBuildInfo,
	pTimerInfoTXD,
	pTimerNapadActive,
	pTimerKloda,
	pTimerPozar,
	pTimerPlama,
	bool: pRadioOn,
	
	CheckNowSobeit,
	CheckNowSobeitL,
	CheckNowSobeitB,
	CheckNowSobeitV,
	CheckNowFreeze,
	CheckNowFreezeVehicle,
	CheckNowFreezeSeat,
	Float:CheckNowFreezePos[3],
	bool:CheckNowPut,
	pAC_Interior,
	pAC_VirtualWorld,
	
	
	pPktViatoll,
	pViaEdit,
	
	pNowPrawkoID,
	pNowPrawkoLicz,
	pNowPrawkoPZdaje,
	pNowPrawkoTZdaje,
	pNowPrawkoWynik,
	
	pPraktykaVehicle,
	pPraktykaCP,
	
	pFailPassword,
	
	pSpecID,
	pSpecPowod[31],
	pSpecMin,
	pSpecGodz,
	pSpecDni,
	pSkin,
	pMuted,
	pJail,
	pBlock,
	pObjectSelectAction,
	pDriveTimeH, 
	pDriveTimeM,
	pCzasSluzbaGodz,
	pCzasSluzbaMin,
	pCzasMinut,
	pCzasGodzin,
	pCzasGryMin,
	pCzasGryGodz,
	pVipTime,
	pFrakcjaEditCash,
	pMandatGive,
	pMandat,
	pPkt,
	pGlowaWorek,
	pSkuty,
	pGlod,
	pSen,
	pStanNarko,
	pSila,
	pWypadek,
	pWantedLevel,
	pTimerSkuty,
	pPierwszySpawn,
	bool:pPasy,
	pDoladowanie,
	bool:pEventMember,
	pLotto,
	pKartaADR,
	pCheckVehicleSelect,
	pCheckVehicleUID[MAX_VEHICLES],
	pCheckZbrojniaUID[20], 
	pSelectItemUID,
	pFindItemUID[100],
	pGPSVehicle,
	pGPSNapad,
	pGPSZawiadom,
	pGPSZlom,
	pUIDZlom,
	pGPSWypadek[MAX_PLAYERS],
	pCanBeInThisVehicle,
	
	pPozarEditO,
	pPozarEditT,
	pPozarEdit,	
	pKlodaEdit,
	pFotoEdit,
	pGymEdit,
	pPlamaEdit,
	pPlayerGymEdit,
	pGymEditCommand,
	pObjectEdit,
    pGateAdd,
    pAddCloseGate,
    pAddOpenGate,
    pAddGateTerminal,

	Bar:pSilowniaBar,
	pSilowniaBarCreate,


	pPozarCP[MAX_POZARY],
	pKlodaCP[MAX_KLODY],
	pPlamaCP[MAX_PLAMY],
	
	bool:pShowPanelTelefon,
	bool:pShowPanelTowary,
	bool:pShowPanelFrakcji,
	bool:pShowPanelFirmy,
	bool:pShowPanelKasyna,
	
	
	bool:pNapadCzlonek,
	pKasynoValue,
	pKasynoPlay,
	pKasynoWygrana,
	pKasynoTimer,
	
	pListPlayers[MAX_PLAYERS],
	pPlayerWithList,
	
	pFirmaAccept,
	pFrakcjaAccept,
	
	pKluczeCar,
	pPlayerOffer,
	pPlayerOfferPrice,
	pPlayerOfferVehicleID,
	
	pEkwipunekID,
	
	pTimerVehicleInfo,
	pPanelVehicleSell,
	pPanelVehicleType,
	
	pSalonVehicle,
	pSalonVehicleCena,
	pSalonVehicleLevel,
	pSalonVehicleType,
	pSalonVehicleNumer,
	pSalonVehicles[700],
	
	pDowodOsobisty,
	pDowodRejestracyjny,
	pUbezpieczenie,
	pPaszport,
	pPrawoJazdyT[10],
	pPrawoJazdyP[10],
	
	bool:pStacjaOpen,
	pLastEnterVehicleID,
	Bar:pStacjaBar,
	pStacjaTimer,
	pLastPickupUID,
	
	bool:pSluzba,
	
	pTowarTworzUID,
	pTimerTowary,
	pCheckTowarUID[MAX_TOWARY],
	pAcceptTowarUID,
	pTowarCheckpoint,
	pTowarStatus,
	pTowarVehicle,
	pTowarTrailer,
	Bar:pTowaryBar,
	pTowarBarCreate,
	
	bool:pDeath,
	pDeathTime,
	pDeathSkin,
	pDeathInt,
	pDeathVW,
	Float:pDeathPos[4],
	Float:pDeathCamera[4],
	Float:pDeathCamera2[4],

	pSwiadek,
	pZeznaje,
	pSedzia,
	pOskarzony

};
new PlayerData[MAX_PLAYERS][e_players];

enum e_dzialania
{
	wynik,
	bool: wystartowal
};
new DzialaniaData[e_dzialania];

enum e_vehicles
{
	vUID,
	vAktywny,
	vOwnerUID,
	vOwner[24],
	Float:vHP,
	Float:vPos[4],
	Float:vPrzebieg,
	Float:vPrzebiegTaxi,
	Float:vPaliwo,
	vPaliwoMax,
	Float:vNaprawy,
	vKanalCB,
	bool:vAdminCar,
	bool:vMapperCar,
	bool:vEventCar,
	vEngine,
	vLocked,
	vSwiatla,
	vModel,
	vLastDriver,
	vZlom,
	vType,
	
	vNaukaJazdy,
	vFrakcjiCar,
	vFirmyCar,
	vPrivateCar,
	vRegister[31],
	vPaliwoTyp,
	vWheelsBlock,
	
	vColor1,
	vColor2,
	vPanel,
	vLights,
	vTires,
	vDoors,
	vCBRadio,
	Text3D:vText3d,
	Float:vOponaLT_DMG,
	Float:vOponaLP_DMG,
	Float:vOponaPP_DMG,
	Float:vOponaPT_DMG,

	Float:vAPos[7],
	vAAttachObject,
	vAObject,
	vAObjectid,
	vAType,
	vNeonLewy,
    vNeonPrawy

};
new VehicleData[MAX_VEHICLES][e_vehicles];

/*New Stuff*/
new LabelID;
/*Enum*/
enum labelsinfo
{
	Text3D:Label,
	Text[256],
	Color,
	Float:POSX,
	Float:POSY,
 	Float:POSZ,
}
new Text3D:LabelsInfo[MAX_LABELS][labelsinfo];
//============================================================================/


main()
	{
		print("\n+----------------------------------+");
		print("|	Polski Truck Rozrywki|");
		print("+------------------------------------+");
		print("+------------------------------------+");
		print("|    Autor Gamemodes NitrO i Hammel|");
		print("+------------------------------------+");
		print("+------------------------------------+");
		print("+---------SERVER START PTR-SERW---------+");
		print("+------------------------------------+");
		print("\n");

	}

public OnGameModeInit()
{
	/*
	new ip[20];
	GetServerVarAsString("bind", ip, sizeof (ip));
	if (!ip[0] || strcmp(ip, "80.72.36.204"))
	{
		for (;;)
		{
			printf("Nie kradnij mojego skryptu !");
		}
	}
	*/
	
	//ConnectNPC("id_0_blokada","train_ls");
	
//	mysql_connect("94.23.90.14", "db_28266", "db_28266", "qwerttrewq");
//	mysql_debug(1);
	
	mysql_init();
	//mysql_connect("77.55.217.83", "root", "piotrek123", "PTR"); //VPS gotowiec
//	mysql_connect("127.0.0.1", "root", "F4EI0pmJ", "sampptr"); // VPS PTR
	mysql_connect("80.72.41.158", "k14221_s15439", "2986d93f6ac4", "db_15439"); // hosting

	SetGameModeText("Polski Truck Rozrywki");
//	SendRconCommand("mapname  PL/Polish/Polski");
//	SendRconCommand("hostname [0.3DL]POLSKITRUCKROZRYWKI[PL]@");
	SendRconCommand("weburl ptr-serw.xaa.pl");
	SendRconCommand("rcon_password pass");
	//SendRconCommand("password ja"); // HASLO NA SERWER
		
	
	mysql_query("update `data_vehicles` set `sampid` = '-1'");
	mysql_query("update `data_players` set `playerid` = '-1'");
	mysql_query("UPDATE `data_przedmioty` set `use` = '0'");
	
	
	SetTimer("TimerPaliwo", 45000, true);
	SetTimer("OneTimerMinutes",60000, true); 
	SetTimer("OneTimerSeconds", 1000, true);
	SetTimer("TimerGlod",95000, true);  
	SetTimer("TimerSen",85000, true); 
	SetTimer("TimerPogoda", 1200000, true); //Co 20 minut zmiana pogody
	SetTimer("DzialaniaStart", MATTIMER, true);
	SetTimer("TimerZdarzenia", 18000000, true); //to 30 min losuje zdarzenie dla strazy 
	SetTimer("ZmienHostName", ZMIANAHOSTNAME, true);
	SetTimer("ZmienMapName", ZMIANAMAPNAME, true);
	
	bramyid = LoadModelSelectionMenu("bramyid.txt");
	

	AllowInteriorWeapons(false);//brak broni w budynkach
	DisableInteriorEnterExits();//usuwa teleporty do interiorow
	EnableStuntBonusForAll(false);//nie daje kasy za stunt
	ShowPlayerMarkers(false);// wyswietla graczy na mapie
	ShowNameTags(true);//wyswietla pasek hp, armor,nick (samp)
	SetNameTagDrawDistance(15);//odlegosc widzenia nicku
	LimitGlobalChatRadius(6.0);
	ManualVehicleEngineAndLights();
	
	
	FadeInit();
	LoadBuilds();
	LoadPickups();
	LoadTowary();
	LoadFotoradary();
	LoadFirmy();
	LoadNarko();
	LoadViatoll();
	LoadKlody();
	LoadPlamy();
	LoadPozary();
	LoadObiekty();
	LoadGates();
	LoadTeleports();
	LoadVehicles(0, 0);
	LoadLabels();

	
	hud1 = TextDrawCreate(461.000000, 1.000000, "WWW.PTR-SERW.PL");
	TextDrawBackgroundColor(hud1, 255);
	TextDrawFont(hud1, 1);
	TextDrawLetterSize(hud1, 0.300000, 2.300000);
	TextDrawColor(hud1, -1);
	TextDrawSetOutline(hud1, 0);
	TextDrawSetProportional(hud1, 1);
	TextDrawSetShadow(hud1, 1);
	TextDrawUseBox(hud1, 0);

	TextDrawBoxColor(hud1, 128);
	TextDrawTextSize(hud1, 548.000000, -1.000000);

	Create3DTextLabel("{FFFF00}---{FF8020}Spawn{FFFF00}--\n{00FFFF}-- Nie znasz komend? Zapoznaj sie z {FFFFFF}/komendy {00FFFF}«\n{800080}» Nie wiesz o co chodzi? Wszystko jest opisane w {FFFFFF}/Faq {800080}«\n{00FF00}» Zauwazyłes cheatera? Uzyj komendy {FFFFFF}/Report {00FF00}«\n{FF0000}» Milego grania zyczy Ekipa {FFFFFF}Polski Truck Rozrywki{FF0000}«\n{FFFF00}»-»{FF8020}PTR-SERW.PL{FFFF00}«-«", BIALY, 2794.5247,1006.6095,10.7500, 40, 0, 1);
	CreatePickup(1239, 1, 2794.2234, 1008.4529, 10.7500, 0);
	Create3DTextLabel("{5882FA}Spis frakcji na serwerze\nPolicja\nStraz Graniczna\nPanstwowa Straz Pozarna\nTaxi\nPogotowie Ratunkowe\nPTR-News\nPomoc drogowa\n", -1, 2796.2161,1013.1658,10.7500, 5.0, 0, 0); //info frakcje
	Create3DTextLabel("{5882FA}Pierwszy raz na serwerze?\nZapoznaj sie z komendami na serwerze (/komendy) oraz regulaminem serwera (/reg)\nPolecamy rowniez o zapoznanie sie z /faq\nMilej gry na serwerze!", -1, 2793.6184, 1010.4639, 10.7500, 5.0, 0, 0); //info serwer
  
	
    //Tutaj beda bramy zamkniete!
    //Kup ÂludĹ¸
	CreateDynamic3DTextLabel("Przystac Rybacka\n"C_SZARY"Aby wynajac kuter rybacki wpisz:\n"C_TURKUSOWY"/wkuter - Koszt to 155$.", 0x15de00FF, 2301.4167,-2394.7793,13.3347, 20.0);
	//Gdzie mozesz lowic
	CreateDynamicMapIcon(2301.4167,-2394.7793,13.3347, 9, COLOR_GREY, 0, -1, -1, 100000000.0, MAPICON_LOCAL);
	CreateDynamicMapIcon(2943.0237,-2266.5190,-0.3258, 9, COLOR_GREY, 0, -1, -1, 100000000.0, MAPICON_LOCAL);
	CreateDynamicMapIcon(2830.8225,-2654.6812,-0.1214, 9, COLOR_GREY, 0, -1, -1, 100000000.0, MAPICON_LOCAL);
	CreateDynamicMapIcon(2656.5969,-2630.7927,-0.0120, 9, COLOR_GREY, 0, -1, -1, 100000000.0, MAPICON_LOCAL);
	CreateDynamicMapIcon(2772.7012,-2834.2671,0.0819, 9, COLOR_GREY, 0, -1, -1, 100000000.0, MAPICON_LOCAL);
	CreateDynamicMapIcon(2446.1497,-2869.8406,-0.0284, 9, COLOR_GREY, 0, -1, -1, 100000000.0, MAPICON_LOCAL);
	CreateDynamicMapIcon(2213.6541,-2831.2200,-0.1374, 9, COLOR_GREY, 0, -1, -1, 100000000.0, MAPICON_LOCAL);
	CreateDynamicMapIcon(1002.0692,-2657.8455,-0.1837, 9, COLOR_GREY, 0, -1, -1, 100000000.0, MAPICON_LOCAL);
	CreateDynamicMapIcon(659.1430,-2713.4958,-0.4392, 9, COLOR_GREY, 0, -1, -1, 100000000.0, MAPICON_LOCAL);
	CreateDynamicMapIcon(360.4089,-2491.8813,-0.0177, 9, COLOR_GREY, 0, -1, -1, 100000000.0, MAPICON_LOCAL);
	CreateDynamicMapIcon(737.9598,-2187.5552,-0.2901, 9, COLOR_GREY, 0, -1, -1, 100000000.0, MAPICON_LOCAL);
	CreateDynamicMapIcon(204.8365,-2170.2515,-0.1859, 9, COLOR_GREY, 0, -1, -1, 100000000.0, MAPICON_LOCAL);
	CreateDynamicMapIcon(-47.3896,-1854.4647,-0.1950, 9, COLOR_GREY, 0, -1, -1, 100000000.0, MAPICON_LOCAL);
	CreateDynamicMapIcon(-1064.8019,-2948.8918,-0.0025, 9, COLOR_GREY, 0, -1, -1, 100000000.0, MAPICON_LOCAL);
	CreateDynamicMapIcon(-1270.1190,-1923.3168,-0.1863, 9, COLOR_GREY, 0, -1, -1, 100000000.0, MAPICON_LOCAL);

    // Tworzy Âlodzie na mapie.
	AddStaticVehicleEx(453,2295.8999000,-2429.8000000,0.0000000,226.0000000,99,-1,15); //Reefer
	AddStaticVehicleEx(453,2302.8999000,-2422.7000000,0.0000000,226.0000000,99,-1,15); //Reefer
	AddStaticVehicleEx(453,2309.7000000,-2415.8000000,0.0000000,226.0000000,99,-1,15); //Reefer
	AddStaticVehicleEx(453,2315.8999000,-2409.6001000,0.0000000,226.0000000,99,-1,15); //Reefer
	AddStaticVehicleEx(453,2322.7000000,-2402.5000000,0.0000000,226.0000000,99,-1,15); //Reefer
	AddStaticVehicleEx(453,2321.4004000,-2385.0996000,0.0000000,226.0000000,99,-1,15); //Reefer
	AddStaticVehicleEx(453,2280.5000000,-2429.1001000,0.0000000,226.0000000,99,-1,15); //Reefer
	
//	AddPlayerClass(0,2316.8821,2352.9136,17.7403,124.0363,0,0,0,0,0,0); 

    //Obiekty
	/*
	//SPAWN LS
	CreateDynamicObject(3458, 2818.37109, 969.50873, 11.24220,   3.14160, 0.00000, 0.00000);
	CreateDynamicObject(3458, 2818.39990, 962.52386, 11.24219,   356.85840, 0.00000, 0.00000);
	CreateDynamicObject(1231, 2836.47778, 965.78210, 12.71094,   356.85840, 0.00000, -1.57080);
	CreateDynamicObject(1231, 2822.58765, 965.89935, 12.71094,   356.85840, 0.00000, -1.57080);
	CreateDynamicObject(1231, 2808.95142, 965.57922, 12.71094,   356.85840, 0.00000, -1.57080);
	CreateDynamicObject(1231, 2798.64282, 965.90753, 12.71094,   356.85840, 0.00000, -1.57080);
	CreateDynamicObject(3578, 2835.12598, 959.57935, 8.97110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2829.54102, 959.58264, 8.97110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2828.08618, 959.62860, 8.97110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2822.38696, 959.61395, 8.97110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2820.64185, 959.58508, 8.97110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2815.77515, 959.54291, 8.97110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2813.97290, 959.54138, 8.97110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2808.58618, 959.51166, 8.97110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2806.98120, 959.49994, 8.97110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2801.18604, 959.51385, 8.97110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2801.19141, 967.99866, 8.97110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2806.98120, 967.98035, 8.97110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2808.58276, 967.90814, 8.97110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2813.97827, 967.80829, 8.97110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2815.77100, 967.97968, 8.97110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2820.65674, 967.82263, 8.97110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2822.39722, 967.86627, 8.97110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2828.11255, 967.84985, 8.97110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2829.56738, 967.66125, 8.97110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2835.12329, 967.88983, 8.97110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3660, 2826.98560, 965.85718, 11.52082,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 2808.11890, 965.89154, 11.52082,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 2827.89063, 933.98108, 11.52082,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 2809.06226, 934.00690, 11.52082,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19458, 2786.86450, 1016.27679, 9.72700,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 2786.85254, 1012.78229, 9.72700,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 2786.81006, 1009.29016, 9.72700,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 2786.84399, 1005.80267, 9.72700,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 2786.84521, 1002.31927, 9.72700,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 2796.39868, 1016.30487, 9.72700,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 2796.42603, 1012.81458, 9.72700,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 2796.41626, 1009.38251, 9.72700,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 2796.40503, 1005.87793, 9.72700,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 2796.42944, 1002.37708, 9.72700,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 2806.05078, 1002.38062, 9.72700,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 2806.02100, 1005.87677, 9.72700,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 2806.03955, 1009.36560, 9.72700,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 2806.06177, 1012.82013, 9.72700,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 2806.03003, 1016.28888, 9.72700,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 2815.62451, 1002.34723, 9.72700,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 2815.65112, 1005.83948, 9.72700,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 2815.64404, 1009.33063, 9.72700,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 2815.65161, 1012.82349, 9.72700,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 2815.64502, 1016.35468, 9.72700,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19461, 2812.68677, 1008.65131, 11.42010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19461, 2815.57446, 1018.09088, 11.42010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19461, 2815.48340, 1000.55676, 11.40410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19461, 2802.78931, 1018.07996, 11.42010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19461, 2782.20093, 1013.33893, 11.42010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19461, 2782.17651, 1005.38727, 11.42010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19461, 2786.92041, 1000.57428, 11.42010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19397, 2809.09814, 1000.55371, 11.40890,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19415, 2806.01440, 1000.56042, 11.43340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19415, 2783.89063, 1018.04889, 11.43340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19415, 2796.39673, 1018.07422, 11.43340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19415, 2793.27075, 1000.56409, 11.41740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19461, 2799.62964, 1000.56592, 11.42010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2793.27417, 1018.06183, 11.43740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19397, 2812.66040, 1002.23816, 11.40890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2812.69287, 1014.92938, 11.43740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2812.68652, 1016.50043, 11.43740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19415, 2820.38721, 1005.20740, 11.43340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19415, 2820.38623, 1011.60120, 11.43340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2820.38525, 1002.05609, 11.43740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2820.38794, 1008.39392, 11.43740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2820.40723, 1014.79431, 11.43740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2820.41772, 1016.57477, 11.43740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19397, 2811.00073, 1008.35480, 11.40890,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19461, 2799.82397, 1013.10968, 11.42010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19461, 2804.61768, 1008.39197, 11.42010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19461, 2791.74316, 1008.35590, 11.42010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19397, 2798.13574, 1008.32684, 11.40890,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19461, 2790.86304, 1013.16290, 11.42010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19397, 2785.36230, 1008.36450, 11.40890,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19442, 2783.04907, 1008.35486, 11.44290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2809.17383, 1018.08710, 11.43740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2790.15796, 1018.05975, 11.43740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2787.00024, 1018.04211, 11.43740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19397, 2811.03931, 1014.77844, 11.40890,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19397, 2807.84351, 1014.77014, 11.40890,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2809.53394, 1016.44293, 11.43740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19397, 2804.63257, 1014.76672, 11.40890,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19397, 2801.48584, 1014.76019, 11.40890,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 2806.27075, 1016.41864, 11.43740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 2803.03857, 1016.36450, 11.43740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2514, 2811.02295, 1017.32227, 9.77140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2514, 2807.94214, 1017.49182, 9.77140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2514, 2804.70874, 1017.48944, 9.77140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2514, 2801.44189, 1017.49896, 9.77140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2523, 2805.35156, 1009.00464, 9.76100,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2523, 2807.42456, 1008.94440, 9.76100,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2523, 2803.59009, 1009.01715, 9.76100,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2523, 2801.68384, 1008.96008, 9.76100,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2796, 2811.12329, 1008.34894, 12.53210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14720, 2819.83301, 1016.50812, 9.73840,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1432, 2819.01270, 1009.93677, 9.73950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 2817.17871, 1014.28137, 9.73950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 2817.60791, 1003.81952, 9.73950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16151, 2813.83179, 1011.21942, 10.06190,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14782, 2791.33496, 1014.79211, 10.70370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14782, 2799.33350, 1014.72437, 10.70370,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2372, 2794.36621, 1014.91443, 9.73870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2394, 2794.12500, 1015.50970, 10.49940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2372, 2794.42114, 1011.12378, 9.73870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2394, 2794.22559, 1011.72253, 10.49940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2372, 2796.73853, 1011.03113, 9.73870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2392, 2796.55225, 1011.62305, 10.52950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2372, 2796.79443, 1014.85510, 9.73870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2392, 2796.63037, 1015.46393, 10.52950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2389, 2792.85547, 1017.76483, 11.09594,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2399, 2793.87012, 1017.79120, 11.09590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2706, 2795.14282, 1008.52527, 11.14430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2706, 2793.79224, 1008.50537, 11.14430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2706, 2792.33716, 1008.47260, 11.14430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2705, 2794.39063, 1008.55219, 11.14430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2705, 2793.07324, 1008.46472, 11.14430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2391, 2791.23193, 1009.89502, 11.09590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2391, 2791.20630, 1010.91577, 11.09590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2398, 2799.52393, 1010.56641, 11.14430,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2398, 2799.47925, 1009.77850, 11.14430,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19325, 2793.17480, 1000.53772, 10.23770,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 2803.61914, 1000.58197, 10.23770,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 2795.99878, 1018.08600, 10.23770,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 2785.54761, 1018.02600, 10.23770,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 2820.43555, 1008.42242, 10.23770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2820.42090, 1012.31860, 10.23770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19474, 2788.44971, 1012.90503, 10.17929,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1775, 2813.30200, 1004.14032, 10.84370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1776, 2813.24683, 1005.46002, 10.81720,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1824, 2784.23389, 1014.86371, 10.25480,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1491, 2808.24951, 1000.56470, 9.74210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 2807.04932, 1014.69879, 9.64610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 2810.23022, 1014.69171, 9.64610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 2803.85010, 1014.66754, 9.64610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 2800.67163, 1014.74060, 9.64610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 2810.21313, 1008.29333, 9.68680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 2797.32275, 1008.25232, 9.68680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 2784.59717, 1008.30438, 9.68680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 2812.61426, 1001.48547, 9.68680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, 2784.95703, 1001.17029, 9.76010,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, 2791.16943, 1001.16992, 9.76010,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, 2797.41113, 1001.12982, 9.76010,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, 2803.51563, 1001.22626, 9.76010,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(638, 2799.53027, 1001.02679, 10.44850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, 2793.26563, 1001.03009, 10.44850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, 2787.02783, 1001.06104, 10.44850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, 2805.88452, 1001.02765, 10.44850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1742, 2787.67114, 1008.36517, 9.77210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 2791.73486, 1008.20551, 9.74180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 2794.54834, 1008.30267, 10.08340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 2799.99585, 1008.24982, 10.08340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 2805.19531, 1008.23059, 9.74180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2872, 2789.74390, 1008.92108, 9.54870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2872, 2787.89502, 1008.96869, 9.54870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2640, 2788.77539, 1008.95557, 10.60270,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1895, 2788.26660, 1017.84277, 11.24945,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2782.20020, 1014.43048, 11.37951,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2782.20996, 1004.24860, 11.37951,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2782.20190, 1007.81598, 11.37951,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2782.16919, 1004.45538, 12.93510,   28.00000, 0.00000, 360.00000);
	CreateDynamicObject(19325, 2782.20898, 1011.25287, 14.36755,   28.00000, 0.00000, 180.00000);
	CreateDynamicObject(19325, 2782.26294, 1009.40033, 13.58831,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2782.25781, 1013.87646, 12.93510,   28.00000, 0.00000, 180.00000);
	CreateDynamicObject(19325, 2820.33081, 1014.06525, 12.93510,   28.00000, 0.00000, 180.00000);
	CreateDynamicObject(19325, 2782.23364, 1007.32520, 14.47477,   28.00000, 0.00000, 360.00000);
	CreateDynamicObject(19451, 2787.02686, 1002.04321, 13.96710,   0.00000, 62.00000, 90.00000);
	CreateDynamicObject(19451, 2796.38452, 1002.05420, 13.97110,   0.00000, 62.00000, 90.00000);
	CreateDynamicObject(19451, 2806.01904, 1002.04077, 13.97110,   0.00000, 62.00000, 90.00000);
	CreateDynamicObject(19451, 2815.60352, 1002.06091, 13.97110,   0.00000, 62.00000, 90.00000);
	CreateDynamicObject(19451, 2787.00879, 1005.04553, 15.51560,   0.00000, 62.00000, 90.00000);
	CreateDynamicObject(19451, 2796.62866, 1005.03467, 15.51560,   0.00000, 62.00000, 90.00000);
	CreateDynamicObject(19451, 2806.21167, 1005.02844, 15.51560,   0.00000, 62.00000, 90.00000);
	CreateDynamicObject(19451, 2815.63062, 1005.07172, 15.51560,   0.00000, 62.00000, 90.00000);
	CreateDynamicObject(19451, 2787.00610, 1007.72339, 16.97890,   0.00000, 62.00000, 90.00000);
	CreateDynamicObject(19451, 2796.62329, 1007.72980, 16.97890,   0.00000, 62.00000, 90.00000);
	CreateDynamicObject(19451, 2806.23193, 1007.72882, 16.97890,   0.00000, 62.00000, 90.00000);
	CreateDynamicObject(19451, 2815.62524, 1007.69537, 16.97890,   0.00000, 62.00000, 90.00000);
	CreateDynamicObject(19451, 2787.01392, 1010.78021, 16.97890,   0.00000, 62.00000, 270.00000);
	CreateDynamicObject(19451, 2796.65259, 1010.66949, 16.97890,   0.00000, 62.00000, 270.00000);
	CreateDynamicObject(19451, 2806.25317, 1010.65631, 16.97890,   0.00000, 62.00000, 270.00000);
	CreateDynamicObject(19451, 2815.62988, 1010.66223, 16.97890,   0.00000, 62.00000, 270.00000);
	CreateDynamicObject(19451, 2786.99805, 1013.73199, 15.51560,   0.00000, 62.00000, 270.00000);
	CreateDynamicObject(19451, 2796.56787, 1013.72754, 15.51560,   0.00000, 62.00000, 270.00000);
	CreateDynamicObject(19451, 2806.18359, 1013.72864, 15.51560,   0.00000, 62.00000, 270.00000);
	CreateDynamicObject(19451, 2815.63159, 1013.73175, 15.51560,   0.00000, 62.00000, 270.00000);
	CreateDynamicObject(19451, 2815.64063, 1016.68347, 13.97110,   0.00000, 62.00000, 270.00000);
	CreateDynamicObject(19451, 2806.06030, 1016.66925, 13.97110,   0.00000, 62.00000, 270.00000);
	CreateDynamicObject(19451, 2796.50781, 1016.68066, 13.97110,   0.00000, 62.00000, 270.00000);
	CreateDynamicObject(19451, 2786.98560, 1016.68756, 13.94110,   0.00000, 62.00000, 270.00000);
	CreateDynamicObject(19325, 2820.39624, 1009.45691, 13.58831,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2820.43726, 1004.66357, 12.93510,   28.00000, 0.00000, 360.00000);
	CreateDynamicObject(19325, 2820.38721, 1007.32898, 14.46280,   28.00000, 0.00000, 360.00000);
	CreateDynamicObject(19325, 2820.32690, 1011.07526, 14.36755,   28.00000, 0.00000, 180.00000);
	CreateDynamicObject(19454, 2784.14771, 1005.83008, 13.20950,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2784.14697, 1012.89093, 13.21150,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2787.65161, 1005.79956, 13.20950,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2791.16528, 1005.79547, 13.20950,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2794.65259, 1005.78766, 13.20950,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2798.14893, 1005.78851, 13.20950,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2801.65332, 1005.79529, 13.20950,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2805.15747, 1005.79315, 13.20950,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2808.65771, 1005.80322, 13.20950,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2812.07837, 1005.77356, 13.20950,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2815.57056, 1005.77386, 13.20950,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2818.54834, 1005.76929, 13.21150,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2787.64185, 1012.94049, 13.21150,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2791.09814, 1012.92920, 13.21150,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2794.43188, 1012.92920, 13.21150,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2797.94800, 1012.93414, 13.21150,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2801.41919, 1013.07739, 13.21150,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2804.81055, 1012.91486, 13.21150,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2808.29980, 1013.06689, 13.21150,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2811.96118, 1012.89703, 13.21150,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2815.46826, 1012.96368, 13.21350,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 2818.55273, 1012.94452, 13.21550,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 2787.32764, 1001.82245, 9.68750,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 2797.84863, 1001.83313, 9.68750,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 2803.09473, 1001.84869, 9.68250,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 2815.01440, 1001.85101, 9.68750,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 2818.98511, 1001.87830, 9.68550,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 2818.97876, 1011.37323, 9.68550,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 2822.36914, 1016.23560, 9.68550,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(717, 2822.11206, 998.70020, 9.12357,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(717, 2844.56470, 1015.00006, 9.12357,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(717, 2822.95288, 1015.30194, 9.12357,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(717, 2811.65649, 998.49286, 9.12357,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(717, 2796.75781, 998.55444, 9.12357,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(717, 2783.15210, 998.19653, 9.12357,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2884.60498, 1011.47858, 11.17357,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2880.70483, 1011.48328, 11.17357,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2889.41260, 1006.75818, 11.17360,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2889.38892, 997.24609, 11.17360,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2889.38428, 987.73816, 11.17360,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2889.38257, 978.15210, 11.17360,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2889.37280, 968.64215, 11.17360,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2889.36792, 959.13489, 11.17360,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2889.35474, 949.59003, 11.17360,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2889.32666, 940.03931, 11.17360,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2884.60742, 935.31036, 11.17357,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2880.70410, 935.32507, 14.39210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19381, 2884.92749, 1016.27502, 9.70550,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 2874.43945, 1016.36609, 9.70550,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 2863.96948, 1016.32819, 9.70550,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 2853.61475, 1016.30377, 9.70550,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 2843.15942, 1016.21918, 9.70550,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 2832.77051, 1016.20831, 9.70550,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(717, 2863.26855, 1014.87103, 9.12357,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(717, 2879.62842, 1015.20319, 9.12357,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 2880.70483, 935.31409, 11.17360,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2884.56030, 935.31641, 14.39210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2880.74463, 1011.44745, 14.39210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2884.65503, 1011.46704, 14.39210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 2889.40747, 1008.10229, 14.11540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2889.34766, 1001.52496, 14.11540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2889.38403, 995.02515, 14.11540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2889.37183, 988.66089, 14.11540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2889.36719, 982.15948, 14.11540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2889.35107, 975.56342, 14.11540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2889.34863, 969.08014, 14.11540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2889.34766, 962.60095, 14.11540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2889.36499, 956.05145, 14.11540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2889.32910, 949.48230, 14.11540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2889.33032, 942.84088, 14.11540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 2889.32983, 938.67072, 14.11540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3437, 2869.74756, 1011.47583, 10.28690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3437, 2869.74756, 986.46863, 10.28690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3437, 2869.74756, 962.40601, 10.28690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3437, 2869.74756, 935.31409, 10.28690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 2884.42456, 1009.52808, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2884.42456, 1001.07800, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2884.42456, 997.32782, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2884.42456, 992.82080, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2884.42456, 988.54523, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2884.42456, 980.86603, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2884.42456, 984.84698, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2884.44629, 976.73309, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2884.42456, 972.30981, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2884.42456, 968.55792, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2884.42456, 964.43988, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2884.35889, 960.62134, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2883.73218, 956.70642, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2884.39087, 952.23035, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2884.42456, 948.10883, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2884.41626, 943.52551, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2884.42456, 938.77118, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(12859, 2880.10693, 920.92883, 9.54419,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(8406, 2774.75806, 910.84418, 15.38970,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(978, 2838.95752, 958.37854, 10.54790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(978, 2838.94678, 949.11285, 10.54790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(978, 2838.94653, 941.07489, 10.54790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(978, 2838.93799, 941.11469, 10.54790,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(978, 2838.91797, 949.08276, 10.54790,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(978, 2838.93921, 958.46466, 10.54790,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1237, 2838.80713, 936.21686, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2838.67017, 935.48645, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2838.32104, 934.87524, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2837.92480, 934.38788, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2838.74194, 963.24713, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2838.53857, 963.84528, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2838.25464, 964.42133, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2836.96606, 965.12305, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2837.65137, 964.91827, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(978, 2795.17529, 934.01447, 10.54790,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(978, 2786.01123, 934.02930, 10.54790,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(978, 2795.12085, 934.00293, 10.54790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(978, 2785.92285, 934.00171, 10.54790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2781.21631, 933.85876, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2780.53784, 933.89581, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2779.92798, 933.84833, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2779.33203, 933.75763, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2778.63647, 933.74762, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2777.97705, 933.70074, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2777.51489, 933.71082, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2798.13940, 965.54816, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2797.53735, 966.08850, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2796.88647, 966.82385, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2796.48706, 967.57147, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2796.29541, 968.53424, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2796.19702, 969.42963, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2796.19409, 970.37170, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2796.22070, 971.35669, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2798.67627, 933.50531, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2798.67627, 932.78058, 9.74320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2798.67627, 931.96289, 9.74320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2798.67627, 931.05640, 9.74320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2798.67627, 930.14838, 9.74320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2798.61646, 929.24432, 9.74320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2798.61646, 928.25610, 9.74320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2798.61646, 927.32330, 9.74320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2798.61646, 926.40881, 9.74320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2837.57642, 932.31995, 9.74319,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2837.57642, 931.41882, 9.74320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2837.57642, 930.45367, 9.74320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2837.57642, 929.52173, 9.74320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2837.57642, 928.60083, 9.74320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2837.57642, 927.71729, 9.74320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2837.57642, 926.71722, 9.74320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2837.57642, 925.81238, 9.74320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 2846.10156, 1006.47498, 8.00880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 2842.26025, 1006.44293, 8.00880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 2838.00171, 1006.48090, 8.00880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 2833.90039, 1006.43475, 8.00880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 2829.77930, 1006.46851, 8.00880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 2884.18604, 1006.67505, 16.09292,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2873.79883, 1006.70264, 16.09292,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2884.13623, 997.35156, 16.09292,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2884.14746, 987.78253, 16.09292,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2884.12085, 978.18689, 16.09292,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2884.12646, 968.64935, 16.09292,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2884.12915, 959.02942, 16.09292,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2884.11865, 949.51105, 16.09292,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2884.09229, 940.08118, 16.09292,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2873.79883, 997.13678, 16.09290,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2873.79883, 987.50690, 16.09290,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2873.79883, 977.98633, 16.09290,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2873.79883, 968.48547, 16.09290,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2873.79883, 958.83752, 16.09290,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2873.81348, 949.21820, 16.09290,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 2873.79883, 940.06012, 16.09490,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 2875.38550, 1011.48962, 11.17357,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2875.82324, 1011.48798, 14.39210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2875.24316, 935.33069, 14.39210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 2875.80396, 935.29858, 11.17360,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2884.42456, 1005.55035, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2874.95508, 1009.53058, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2874.95508, 1005.56171, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2874.95508, 1001.07458, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2874.95508, 997.31567, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2874.95508, 992.82452, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2874.95508, 988.54779, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2874.95508, 984.83752, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2874.95508, 980.85059, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2874.95508, 976.74683, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2874.95508, 972.31622, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2874.95508, 968.54437, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2874.95508, 964.42517, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2874.95508, 960.61871, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2874.95508, 956.70380, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2874.95508, 952.22101, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2874.95508, 948.10120, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2874.95508, 943.52728, 8.00880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 2874.95508, 938.74823, 8.00880,   0.00000, 0.00000, 90.00000);
	*/
	
	////////////////////////////
	///////Obikety spawn kierowcow by baro
	////////////////////////////
	CreateDynamicObject(19355,2782.2316900,1016.6723000,11.5059000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19355,2782.2297400,1013.5174000,11.5059000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19355,2782.2297400,1010.3324000,11.5059000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19355,2782.2270500,1007.1823100,11.5059000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19355,2782.2297400,1004.0253900,11.5059000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19355,2783.9252900,1018.1892100,11.5059000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19355,2790.2656300,1018.1892100,11.5059000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19401,2793.4743700,1018.1892100,11.5059000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19355,2796.4497100,1018.1892100,11.5059000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19355,2783.9086900,1002.5087900,11.5059000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19355,2790.0856900,1002.5087900,11.5059000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19355,2796.4514200,1002.5087900,11.5059000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19355,2797.9670400,1004.1994000,11.5059000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19355,2797.9670400,1007.2977900,11.5059000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19385,2797.9670400,1010.4191300,11.5059000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19355,2797.9670400,1013.5841100,11.5059000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19355,2797.9670400,1016.6720000,11.5059000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19458,2793.2253400,1004.2941900,9.6586000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19458,2793.2253400,1007.7811900,9.6586000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19458,2793.2253400,1011.2811900,9.6586000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19458,2793.2253400,1014.7272900,9.6586000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19458,2793.2253400,1018.2103900,9.6586000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19458,2783.6223100,1004.3095700,9.6586000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19458,2783.6223100,1007.8093900,9.6586000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19458,2783.6223100,1011.2163700,9.6586000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19458,2783.6223100,1014.7177700,9.6586000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19458,2783.6223100,1018.1961100,9.6586000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(1649,2793.9687500,1018.1923800,10.9473000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1649,2786.1918900,1018.1922000,10.9413000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1649,2786.5861800,1018.1864000,11.5600000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1649,2793.9687500,1018.2172200,11.5600000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1649,2793.9091800,1002.5039700,10.9473000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1649,2786.8510700,1002.5106800,10.9473000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1649,2786.4563000,1002.5272800,10.9413000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1649,2793.2194800,1002.5164200,10.9413000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1502,2797.9987800,1009.6699200,9.7455000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19355,2789.5554200,1016.5341200,11.5039000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19355,2789.5554200,1013.3280000,11.5039000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19385,2789.5554200,1010.1513100,11.5039000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19355,2789.5554200,1006.9783900,11.5039000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19355,2789.5554200,1004.0332000,11.5039000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1502,2789.5935100,1009.4002100,9.7435000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2174,2797.4641100,1004.0824600,9.7382000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1723,2797.3798800,1015.6095000,9.7459000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1704,2794.6416000,1017.3950800,9.7460000,0.0000000,0.0000000,-40.0000000); //
	CreateDynamicObject(1704,2791.6623500,1016.3660300,9.7461000,0.0000000,0.0000000,69.0000000); //
	CreateDynamicObject(1704,2793.5498000,1013.9788200,9.7462000,0.0000000,0.0000000,155.0000000); //
	CreateDynamicObject(1827,2793.4367700,1016.0902100,9.7461100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2161,2797.8776900,1006.1574700,10.7918000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2167,2790.6069300,1002.5289300,9.7453000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2165,2796.4531300,1008.5456500,9.7456000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2164,2789.6721200,1004.7627000,9.7442000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1714,2797.1501500,1007.5954000,9.7471000,0.0000000,0.0000000,-142.0000000); //
	CreateDynamicObject(1714,2796.5852100,1003.3092700,9.7468000,0.0000000,0.0000000,105.0000000); //
	CreateDynamicObject(2166,2790.0571300,1007.6295800,9.7452900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1714,2790.6940900,1007.5449200,9.7460000,0.0000000,0.0000000,-164.0000000); //
	CreateDynamicObject(2202,2793.9104000,1003.0756200,9.7457000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2754,2790.0012200,1012.6716900,10.5380000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2852,2793.2192400,1016.3358200,10.1713800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2852,2793.5271000,1015.9400000,10.1731700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(955,2790.0263700,1014.3472900,10.1101000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2251,2792.9133300,1015.9719800,11.0176000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2811,2797.2478000,1017.3317900,9.7462300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2811,2790.3469200,1017.3044400,9.7472700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2811,2791.8303200,1003.0672000,9.7468900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2251,2791.1428200,1008.7852800,11.2516000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14867,2782.6472200,1007.7852800,11.1443000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2964,2786.2272900,1010.0699500,9.7451000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1723,2788.9516600,1006.8504000,9.7458000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(338,2786.3852500,1009.6246900,10.5864000,0.0000000,-90.0000000,-69.0000000); //
	CreateDynamicObject(338,2786.0329600,1009.5098900,10.5864000,0.0000000,-90.0000000,-81.0000000); //
	CreateDynamicObject(2315,2787.4438500,1005.0647000,9.7459000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2251,2787.1040000,1006.7859500,11.0823000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2855,2787.5468800,1006.3912400,10.2406000,0.0000000,0.0000000,47.0000000); //
	CreateDynamicObject(2852,2787.4309100,1005.1771200,10.2407000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(15036,2783.7014200,1016.0283200,10.8841000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1825,2787.9211400,1016.6922600,9.7453800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1825,2786.0759300,1014.8539400,9.7453800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1825,2788.1291500,1012.9870600,9.7453800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2855,2785.9399400,1014.9108300,10.6241900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2811,2782.7871100,1012.7887000,9.7460100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2811,2788.8569300,1003.1505700,9.7454400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2811,2782.9111300,1003.1854900,9.7461000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2251,2787.6948200,1016.6843900,11.4710000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19401,2787.1057100,1018.1892100,11.5059000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19401,2793.2565900,1002.5087900,11.5059000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19401,2787.0639600,1002.5087900,11.5059000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19377,2792.6345200,1007.4091800,13.1667000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,2792.6345200,1013.2750900,13.1667000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,2787.5717800,1013.2998000,13.1667000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,2787.5720200,1007.3952000,13.1667000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(1687,2794.7160600,1016.0958300,14.0453000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1687,2794.7160600,1014.2558000,14.0453000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1697,2787.0127000,1005.3198200,14.8344000,0.0000000,0.0000000,-180.0000000); //
	CreateDynamicObject(1694,2784.7028800,1009.0781900,22.0600000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1691,2793.7299800,1004.5377800,13.7178000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1691,2793.7299800,1010.0681200,13.7178000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1689,2793.7299800,1007.4033200,14.4138000,0.0000000,0.0000000,-180.0000000); //
	CreateDynamicObject(1280,2798.3960000,1005.9257800,10.2099000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1280,2798.3960000,1014.9420800,10.2099000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1280,2790.1508800,1002.0672000,10.2099000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3802,2798.6962900,1008.9600200,11.9209000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3802,2798.6962900,1011.9014900,11.9209000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3811,2793.2839400,1002.0642700,10.0775000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(3811,2787.1257300,1002.0642700,10.0775000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1300,2798.4270000,1017.3089000,10.0990000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1300,2798.4270000,1003.3035900,10.0990000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1300,2796.3689000,1002.0340000,10.0990000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1300,2783.9431200,1002.0340000,10.0990000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2261,2797.3833000,1008.0006700,11.2408000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2261,2784.6755400,1003.1146900,11.3062000,0.0000000,0.0000000,179.0000000); //
	CreateDynamicObject(2267,2797.8164100,1014.5939900,11.9037000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2270,2788.9460400,1005.8286100,11.1647000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2257,2789.4436000,1014.8828700,11.4779000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(3627,2833.5590800,1011.5867900,13.4812000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(3627,2874.0825200,1011.5147700,13.4812000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(3627,2788.9118700,973.3645000,13.4812000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3627,2883.3000500,963.7063000,13.4812000,0.0000000,0.0000000,-180.0000000); //
	CreateDynamicObject(638,2831.0188000,933.7492100,10.6497000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2826.5234400,933.7492100,10.6497000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2820.1950700,933.7492100,10.6497000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2815.4602100,933.7492100,10.6497000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2809.2050800,933.7492100,10.6497000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2804.3159200,933.7492100,10.6497000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1278,2866.5883800,1020.6917100,23.9297000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1278,2779.7185100,986.4212600,23.9297000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1278,2806.5598100,1019.0526100,23.9297000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1278,2890.8964800,985.9481200,23.9297000,0.0000000,0.0000000,-90.0000000); //
	
	
	//Szpital sf by baro
	
	CreateDynamicObject(19362,-2581.1760300,618.9542200,21.4032000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3660,-2539.1140100,608.2403000,16.0160000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3660,-2539.1140100,591.0064700,16.0160000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3660,-2546.8698700,582.5128200,16.0160000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3660,-2551.8759800,581.9827900,16.0160000,0.0000000,0.0000000,-180.0000000); //
	CreateDynamicObject(3660,-2581.5202600,582.4949300,16.0160000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3660,-2587.1245100,581.9564200,16.0160000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(3660,-2595.8811000,609.6358000,16.0160000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(966,-2603.3242200,578.2885100,13.4515700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(966,-2663.1447800,581.0610400,13.4515700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(966,-2563.4670400,581.2329100,13.4516000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2774,-2542.1674800,618.2680100,13.4395000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2774,-2594.3530300,618.5568200,13.4395000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,-2588.6003400,618.4649000,17.7325000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2774,-2575.3002900,618.5568200,13.4395000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,-2588.6003400,618.4649000,19.0740000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,-2544.4001500,618.4849200,17.7325000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2774,-2558.0686000,618.5568200,13.4395000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,-2536.5720200,618.4649000,19.0740000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,-2562.5461400,618.4849200,17.9900000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,-2562.5459000,618.4849200,19.3920000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,-2588.6003400,618.4649000,20.3100000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,-2536.5720200,618.4649000,20.3100000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,-2588.6003400,618.4649000,16.4965000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,-2588.6003400,618.4649000,15.2605000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,-2588.6003400,618.4649000,14.0245000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2774,-2585.0007300,618.5568200,13.4395000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,-2544.4001500,618.4849200,16.4965000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,-2544.5200200,618.4849200,15.2605000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9339,-2544.4240700,618.4849200,14.0245000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2774,-2550.1098600,618.2680100,13.4395000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9339,-2562.5459000,618.4849200,20.7520000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2774,-2566.8630400,618.5568200,13.4395000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19978,-2566.9340800,617.8471100,14.5361000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19978,-2566.8632800,617.7689200,14.0828000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19967,-2575.2573200,617.7669100,14.0828000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19967,-2557.9587400,617.7669100,14.0828000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1280,-2589.8288600,618.0023800,13.8296000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1280,-2580.1032700,618.0023800,13.8296000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1280,-2553.9692400,618.0023800,13.8296000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1280,-2545.8515600,618.0023800,13.8296000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1300,-2584.9816900,617.3372200,13.8238000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1300,-2550.0922900,617.0551800,13.8238000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3802,-2584.9816900,617.0971100,16.0823000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(3802,-2594.3747600,617.0976600,16.0823000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(3802,-2550.0922900,616.8181200,16.0823000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(3802,-2542.1337900,616.8169600,16.0823000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(768,-2599.1530800,581.9102800,14.4360000,356.8584000,0.0000000,3.1416000); //
	CreateDynamicObject(768,-2546.4704600,579.7927200,14.5300000,356.8584000,0.0000000,3.1416000); //
	CreateDynamicObject(768,-2599.3654800,657.4734500,27.7421900,3.1415900,0.0000000,1.0921800); //
	CreateDynamicObject(768,-2566.4086900,619.2194800,27.7421900,3.1415900,0.0000000,1.0921800); //
	CreateDynamicObject(1223,-2595.0249000,608.4665500,13.4442500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1223,-2584.4731400,583.3442400,13.4463000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1223,-2539.9406700,602.4218100,13.4439000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1223,-2549.2951700,583.3802500,13.4470000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(966,-2604.0249000,693.2526900,26.8101500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2599.1350100,645.8700000,27.6328100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2595.6972700,617.9761400,27.6328100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2565.7622100,618.1915900,27.6328100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2558.5090300,618.0980800,27.6328100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2599.1560100,629.8392300,27.6328100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2598.9467800,657.8302600,27.6328100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2599.0952100,660.9273700,27.6328100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(869,-2614.8689000,582.0049400,14.9740000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(869,-2618.7561000,581.6601600,14.9740000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(869,-2622.9001500,581.3244600,14.9740000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(869,-2626.9858400,580.9845000,14.9740000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(869,-2614.3066400,603.3253200,15.0000000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2614.1398900,613.5486500,15.0000000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2614.2146000,608.7004400,15.0000000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2599.1477100,613.6331200,15.0000000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2599.1350100,608.8270300,15.0000000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2599.2043500,603.3768300,15.0000000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(728,-2599.0485800,610.7672100,14.1640000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2613.4751000,610.7407800,14.1640000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2613.8029800,603.1677200,14.1640000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2598.7031300,581.6367800,14.1640000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2617.2482900,581.6784100,14.1640000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(869,-2633.1303700,580.5150800,14.9740000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(869,-2639.1704100,580.1586900,14.9740000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(869,-2647.0700700,580.1317700,14.9740000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2635.7658700,580.0069000,14.1640000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2642.0546900,579.8468000,14.1640000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2649.8652300,579.6104100,14.1640000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2707.6823700,583.8911100,14.1640000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2707.3486300,580.8300200,14.1640000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2697.2729500,583.3115200,14.1640000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2689.2993200,579.8734100,14.1640000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(869,-2694.6098600,581.3665200,14.9740000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(869,-2704.0993700,580.9976200,14.9740000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(869,-2703.9694800,584.8006600,14.9740000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(869,-2699.7014200,583.1743200,14.9740000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(869,-2599.0773900,624.1137100,28.5000000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2599.2272900,628.9500100,28.5000000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2599.3281300,635.6899400,28.5000000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2599.1491700,641.3383800,28.5000000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2599.3212900,646.8796400,28.5000000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2599.1525900,651.9447600,28.5000000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2599.1025400,663.2495100,28.5000000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2599.1848100,667.7647100,28.5000000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2599.1423300,670.9575800,28.5000000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2590.9680200,618.9646000,28.5000000,0.0000000,0.0000000,-11.0000000); //
	CreateDynamicObject(869,-2582.8208000,619.1696200,28.5000000,0.0000000,0.0000000,-11.0000000); //
	CreateDynamicObject(869,-2574.6652800,618.8961800,28.5000000,0.0000000,0.0000000,-11.0000000); //
	CreateDynamicObject(869,-2556.7385300,619.2608600,28.5000000,0.0000000,0.0000000,-11.0000000); //
	CreateDynamicObject(869,-2546.1235400,619.0505400,28.5000000,0.0000000,0.0000000,-11.0000000); //
	CreateDynamicObject(869,-2541.7863800,674.4528200,28.5000000,0.0000000,0.0000000,-11.0000000); //
	CreateDynamicObject(869,-2545.9467800,683.1200600,28.5000000,0.0000000,0.0000000,-11.0000000); //
	CreateDynamicObject(869,-2553.9863300,687.3621800,28.5000000,0.0000000,0.0000000,-11.0000000); //
	CreateDynamicObject(869,-2563.1638200,691.7377300,28.5000000,0.0000000,0.0000000,-11.0000000); //
	CreateDynamicObject(869,-2572.0229500,694.3584000,28.5000000,0.0000000,0.0000000,-11.0000000); //
	CreateDynamicObject(869,-2584.4421400,693.8733500,28.5000000,0.0000000,0.0000000,-11.0000000); //
	CreateDynamicObject(717,-2674.0908200,580.2102100,13.6006000,0.0000000,0.0000000,1.0000000); //
	CreateDynamicObject(717,-2659.2751500,580.5659200,13.6006000,0.0000000,0.0000000,1.0000000); //
	CreateDynamicObject(717,-2651.4309100,574.1829200,13.7316000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(717,-2638.1684600,574.1724200,13.7316000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(717,-2624.9096700,574.1829200,13.7316000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(717,-2594.9626500,574.1829200,13.7316000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(717,-2581.4658200,574.1829200,13.7316000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(717,-2554.9392100,574.1829200,13.7316000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(717,-2541.4597200,574.1829200,13.7316000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(717,-2683.7412100,574.1829200,13.7776000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(717,-2698.4406700,574.1829200,13.8366000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(717,-2713.3298300,574.1829200,13.6926000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(717,-2613.5224600,702.3292800,27.0160000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(717,-2596.8100600,702.3292800,27.0160000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(717,-2585.2070300,702.3292800,27.0160000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(717,-2626.7248500,702.3292800,27.0160000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(717,-2629.5197800,597.8660300,13.5763000,0.0000000,0.0000000,10.0000000); //
	CreateDynamicObject(717,-2649.4653300,596.2078200,13.5763000,0.0000000,0.0000000,2.0000000); //
	CreateDynamicObject(717,-2667.4399400,595.7194800,13.5763000,0.0000000,0.0000000,1.0000000); //
	CreateDynamicObject(717,-2688.2993200,599.5911300,13.5763000,0.0000000,0.0000000,33.0000000); //
	CreateDynamicObject(717,-2682.3718300,616.4245000,13.5763000,0.0000000,0.0000000,19.0000000); //
	CreateDynamicObject(717,-2637.4223600,617.0233800,13.5763000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(717,-2662.4016100,617.0241700,13.5763000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2613.4162600,634.2331500,14.1640000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2613.5927700,650.0281400,19.5120000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2614.2148400,672.8833000,26.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(869,-2614.3190900,640.4199200,16.7800000,0.0000000,-21.0000000,82.0000000); //
	CreateDynamicObject(869,-2614.3703600,646.8393600,18.9020000,0.0000000,-21.0000000,82.0000000); //
	CreateDynamicObject(869,-2614.3242200,655.7645300,22.0240000,0.0000000,-21.0000000,82.0000000); //
	CreateDynamicObject(869,-2614.2644000,662.8195200,24.4860000,0.0000000,-21.0000000,82.0000000); //
	CreateDynamicObject(869,-2614.4052700,669.3333100,26.5660000,0.0000000,-21.0000000,82.0000000); //
	CreateDynamicObject(18850,-2656.8571800,622.3516200,53.7400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18850,-2656.8571800,665.2918700,53.7400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18850,-2708.7465800,665.2918700,53.7400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(700,-2599.2968800,606.0911300,14.2274000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(700,-2580.4294400,579.7683700,14.1030000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(700,-2540.3708500,579.8076200,14.4945000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(700,-2593.7575700,619.3950800,27.8197000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(700,-2599.1518600,639.2111800,27.8197000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(700,-2614.2092300,606.2112400,14.2274000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(700,-2551.1816400,619.1557000,27.8197000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(700,-2538.4560500,633.2441400,27.8197000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(700,-2538.4074700,657.3825700,27.8197000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(700,-2623.0410200,581.2706900,14.2274000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(700,-2644.7893100,579.9601400,14.2274000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(700,-2702.5273400,582.6310400,14.2274000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(6965,-2566.6752900,599.4660600,17.0400000,0.0000000,0.0000000,1.0000000); //
	CreateDynamicObject(19381,-2570.1533200,599.0761700,13.4379000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19381,-2563.2883300,599.0371700,13.4379000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2571.8720700,593.9848000,13.4379000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2570.0361300,592.6613800,13.4379000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2567.5090300,592.0665900,13.4379000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2567.0463900,593.6998900,13.4379000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2561.2019000,594.0164800,13.4379000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2562.7895500,592.9465300,13.4379000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2564.6696800,592.9171800,13.4379000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2564.7272900,592.3394200,13.4379000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2562.0769000,605.4030800,13.4379000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2560.6230500,604.0490100,13.4379000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2564.1699200,605.8996600,13.4379000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2565.2971200,603.9415300,13.4379000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2565.1608900,606.7495700,13.4379000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2568.3393600,605.0949100,13.4379000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2568.3071300,606.6498400,13.4379000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2571.6586900,604.5531600,13.4379000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2571.1540500,605.8737800,13.4379000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19373,-2572.6914100,603.7337600,13.4379000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(869,-2572.9113800,601.8806200,13.8900000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2569.6882300,600.3283100,13.8900000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2572.7902800,597.6013800,13.8900000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2570.0244100,595.9627100,13.8900000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2567.2824700,595.9439700,13.8900000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2567.4672900,593.4705800,13.8900000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2564.0598100,593.7883300,13.8900000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2563.7502400,597.3145800,13.8900000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2560.7714800,596.9001500,13.8900000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2560.4599600,601.2219800,13.8900000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2563.4719200,601.0014000,13.8900000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2563.3667000,604.6464200,13.8900000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2566.4655800,602.8687100,13.8900000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(869,-2569.8664600,604.3320900,13.8900000,0.0000000,0.0000000,82.0000000); //
	CreateDynamicObject(728,-2566.0979000,604.6787100,13.1560000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2559.9196800,598.0488900,13.1560000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2566.3503400,593.1335400,13.1560000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(728,-2571.6250000,596.8522300,13.1560000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(700,-2562.4274900,594.5349700,13.7954000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(700,-2571.7724600,604.1619300,13.7954000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(673,-2560.9694800,603.3575400,13.5217300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(673,-2572.4714400,594.6906100,13.5217300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(700,-2553.8378900,579.7812500,14.4945000,0.0000000,0.0000000,0.0000000); //

	//textury i napisy 

	new powitaniespawn = CreateObject(19483, 2797.855712, 1012.528686, 12.379997, 0.000000, 0.000000, -179.955657, 300.000000);
	SetObjectMaterialText(powitaniespawn, "Witaj na serwerze Polski Truck Rozrywki RolePlay", 0, 120, "Calibri", 28, 1, -16744448, -1, 1);
	new Mottoserwera = CreateObject(19483, 2797.859619, 1012.528991, 11.520000, 0.000000, 0.000000, -179.969711, 600.000000);
	SetObjectMaterialText(Mottoserwera, "Nasze motto Serwer od Graczy dla Graczy", 0, 120, "Calibri", 25, 1, -16744448, -1, 1);
	new powitaniezapro = CreateObject(19483, 2797.844970, 1012.478088, 11.940001, 0.000000, 0.000000, -179.882980, 300.000000);
	SetObjectMaterialText(powitaniezapro, "Zapraszaj znajomych do wspolnej rozrywki", 0, 120, "Calibri", 30, 1, -16744448, 0, 1);
	new ts = CreateObject(19476, 2797.836669, 1011.833068, 10.999998, 0.000000, 0.000000, 178.796951, 700.000000);
	SetObjectMaterialText(ts, "TS3: 91.228.198.149", 0, 110, "Calibri", 60, 1, -16744448, 0, 1);
	new forum = CreateObject(19476, 2797.831542, 1013.180969, 11.030003, 0.000000, 0.000000, -178.782974, 300.000000);
	SetObjectMaterialText(forum, "Forum: ptr-serw.xaa.pl", 0, 110, "Times New Roman", 60, 1, -16776961, 0, 1);
	new V2SP = CreateObject(19482, 2783.552246, 2663.896972, 17.419364, -0.099999, 0.000000, -90.288780, 300.000000);
	SetObjectMaterialText(V2SP, "Straz Pozarna", 0, 130, "Arial", 80, 1, -65536, -7895161, 1);
	new Panstwowa = CreateObject(19482, 2778.206787, 2663.901611, 17.433921, 0.000000, 0.000000, -90.008110, 300.000000);
	SetObjectMaterialText(Panstwowa, "Panstwowa", 0, 130, "Arial", 90, 1, -65536, -7895161, 1);
	new miejscowoscpsp = CreateObject(19482, 2789.054443, 2663.921875, 17.447677, 0.000000, 0.000000, -89.878746, 600.000000);
	SetObjectMaterialText(miejscowoscpsp, "w Warszawie", 0, 130, "Arial", 80, 1, -65536, -7895161, 1);
	new fc = CreateObject(19483, 245.776763, 947.785522, 29.319530, 0.000000, 0.000000, -75.060646, 600.000000);
	SetObjectMaterialText(fc, "Ford Carson", 0, 130, "Arial", 60, 1, -16711936, -16777216, 1);
	new v2 = CreateObject(9093, 422.025726, 767.374450, 11.635619, 0.000000, 0.000000, 159.715820, 300.000000);
	SetObjectMaterialText(v2, "^ Warszawa|Ford Carson>", 0, 130, "Wingdin", 45, 0, -16776961, -256, 1);
	new tefc = CreateObject(9093, 422.025726, 767.374450, 11.635619, 0.000000, 0.000000, 159.715820, 300.000000);
	SetObjectMaterialText(tefc, "^ Warszawa|Ford Carson>", 0, 130, "Wingdin", 45, 0, -16776961, -16777216, 1);
	new taxi = CreateObject(19477, 1355.494140, 705.250610, 12.997818, 0.000000, 0.000000, 179.963516, 700.000000);
	SetObjectMaterialText(taxi, "Baza", 0, 120, "Times New Roman", 90, 1, -256, 0, 1);
	new v2taxi = CreateObject(19477, 1355.492919, 705.293090, 11.674763, 0.000000, 0.000000, -179.716537, 700.000000);
	SetObjectMaterialText(v2taxi, "Taxi", 0, 120, "Times New Roman", 80, 1, -256, 0, 1);
	new v3taxiicona = CreateObject(19477, 1355.492309, 705.362304, 10.544763, 0.000000, 0.000000, 179.983489, 300.000000);
	SetObjectMaterialText(v3taxiicona, "v", 0, 50, "Webdings", 48, 0, -256, 0, 1);
	new pdnazwa6 = CreateObject(19480, 997.498962, 2248.348388, 11.361874, 0.000000, 0.000000, 0.005563, 700.000000);
	SetObjectMaterialText(pdnazwa6, "Pomoc Drogowa", 0, 120, "Calibri", 40, 1, -23296, 0, 1);
	new pdgv4 = CreateObject(19477, 974.491271, 2221.804199, 12.305889, 0.000000, 0.000000, 90.239837, 700.000000);
	SetObjectMaterialText(pdgv4, "Garaz", 0, 120, "Calibri", 85, 1, -23296, 0, 1);
	new pdgv3 = CreateObject(19477, 985.246032, 2221.775878, 12.315890, 0.000000, 0.000000, 89.806579, 700.000000);
	SetObjectMaterialText(pdgv3, "Garaz", 0, 120, "Calibri", 85, 1, -23296, 0, 1);
	new pdgv2 = CreateObject(19477, 996.181823, 2221.815429, 12.695889, 0.000000, 0.000000, 90.073196, 300.000000);
	SetObjectMaterialText(pdgv2, "Garaz", 0, 120, "Calibri", 85, 1, -23296, 0, 1);
	new pdgtv5 = CreateObject(19477, 930.974670, 2202.241943, 12.881875, 0.000000, 0.000000, -89.615226, 700.000000);
	SetObjectMaterialText(pdgtv5, "Garaz dla Tirow", 0, 120, "Calibri", 85, 1, -23296, 0, 1);
	new pdg1 = CreateObject(19477, 996.181823, 2221.815429, 12.695889, 0.000000, 0.000000, 90.073196, 300.000000);
	SetObjectMaterialText(pdg1, "Garaz", 0, 120, "Calibri", 85, 1, -23296, 0, 1);
	new pspicon = CreateObject(19482, 2774.217529, 2663.897705, 17.327152, 0.000000, 0.000000, -90.108512, 700.000000);
	SetObjectMaterialText(pspicon, "f", 0, 120, "Webdings", 145, 0, -65536, 0, 1);

	new krv5 = CreateObject(9093, 1976.0040, 847.7031, 13.9566, 0.0000, 0.0000, -179.5221);
	SetObjectMaterialText(krv5, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new krv6 = CreateObject(9093, 1976.0183, 855.6900, 14.0443, 0.0000, 0.0000, -179.8089);
	SetObjectMaterialText(krv6, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new krv7 = CreateObject(9093, 1973.6014, 830.5253, 13.8843, 0.0000, 0.0000, 0.2595);
	SetObjectMaterialText(krv7, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new krv8 = CreateObject(9093, 1973.6149, 838.3899, 13.7821, 0.0000, 0.0000, 0.2795);
	SetObjectMaterialText(krv8, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new krv9 = CreateObject(9093, 1718.7827, 856.0767, 15.9129, 0.0000, 0.0000, -179.1319);
	SetObjectMaterialText(krv9, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new krv10 = CreateObject(9093, 1718.7625, 848.4354, 15.8376, 0.0000, 0.0000, -179.7654);
	SetObjectMaterialText(krv10, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new krv11 = CreateObject(9093, 1716.3577, 830.9916, 15.8685, 0.0000, 0.0000, 0.2362);
	SetObjectMaterialText(krv11, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new krv12 = CreateObject(9093, 1716.3735, 838.9663, 15.8391, 0.0000, 0.0000, 0.3296);
	SetObjectMaterialText(krv12, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new krv13 = CreateObject(9093, 1229.4814, 1254.5666, 13.6555, 0.0000, 0.0000, 91.1211);
	SetObjectMaterialText(krv13, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr14 = CreateObject(9093, 1221.7923, 1254.5697, 13.6509, 0.5999, 0.0000, 90.3011);
	SetObjectMaterialText(kr14, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr15 = CreateObject(9093, 1204.7204, 1257.1308, 13.6643, 0.0000, 0.0000, -89.0370);
	SetObjectMaterialText(kr15, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr16 = CreateObject(9093, 1212.5378, 1257.1446, 13.7143, 0.0000, 0.0000, -89.9171);
	SetObjectMaterialText(kr16, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr17 = CreateObject(9093, 1230.0059, 2123.3107, 13.4920, 0.0000, 0.0000, 89.7127);
	SetObjectMaterialText(kr17, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr18 = CreateObject(9093, 1222.2038, 2123.3315, 13.5343, 0.0000, 0.0000, 89.8395);
	SetObjectMaterialText(kr18, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr19 = CreateObject(9093, 1205.0788, 2126.0900, 13.5443, 0.0000, 0.0000, -88.6120);
	SetObjectMaterialText(kr19, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr20 = CreateObject(9093, 1212.9829, 2126.1376, 13.5043, 0.0000, 0.0000, -88.7118);
	SetObjectMaterialText(kr20, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr21 = CreateObject(9093, 1337.9454, 2432.8254, 13.5943, 0.0000, 0.0000, 29.8302);
	SetObjectMaterialText(kr21, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr22 = CreateObject(9093, 1334.1016, 2439.5270, 13.4643, 0.0000, 0.0000, 29.9235);
	SetObjectMaterialText(kr22, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr23 = CreateObject(9093, 1327.9438, 2455.5356, 13.5043, 0.0000, 0.0000, -149.3814);
	SetObjectMaterialText(kr23, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr24 = CreateObject(9093, 1331.7542, 2448.9597, 13.6443, 0.4000, 0.0000, -149.5080);
	SetObjectMaterialText(kr24, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr25 = CreateObject(9093, 1604.1088, 2451.0771, 13.5969, 0.0000, 0.0000, 0.4204);
	SetObjectMaterialText(kr25, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr26 = CreateObject(9093, 1604.1047, 2458.8449, 13.6631, 0.0000, 0.0000, -0.5597);
	SetObjectMaterialText(kr26, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr27 = CreateObject(9093, 1606.7949, 2475.8715, 13.5495, 0.0000, 0.0000, -179.6312);
	SetObjectMaterialText(kr27, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr28 = CreateObject(9093, 1606.8015, 2468.1276, 13.5596, 0.0000, 0.0000, -179.6044);
	SetObjectMaterialText(kr28, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr29 = CreateObject(9093, 1784.7125, 2310.9179, 13.6966, 0.0000, 0.0000, -89.8540);
	SetObjectMaterialText(kr29, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr30 = CreateObject(9093, 1792.3839, 2310.9519, 13.4160, 0.4000, 0.0000, -89.9406);
	SetObjectMaterialText(kr30, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr31 = CreateObject(9093, 1809.8197, 2308.2099, 13.5852, 0.0000, 0.0000, 90.2877);
	SetObjectMaterialText(kr31, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr32 = CreateObject(9093, 1801.8934, 2308.1906, 13.5544, 0.0000, 0.0000, 91.0277);
	SetObjectMaterialText(kr32, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr33 = CreateObject(9093, 1792.5654, 1936.2878, 13.4993, 0.0000, 0.0000, -88.7279);
	SetObjectMaterialText(kr33, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr34 = CreateObject(9093, 1785.0621, 1936.2983, 13.5080, 0.1000, 0.0000, -90.8415);
	SetObjectMaterialText(kr34, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr35 = CreateObject(9093, 1809.7623, 1933.5206, 13.5309, 0.0000, 0.0000, 90.0703);
	SetObjectMaterialText(kr35, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr97 = CreateObject(9093, 1784.6087, 987.1909, 13.7098, 0.0000, 0.0000, -89.2321);
	SetObjectMaterialText(kr97, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr98 = CreateObject(9093, 1792.2677, 987.1901, 13.7943, 0.0000, 0.0000, -89.5987);
	SetObjectMaterialText(kr98, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr99 = CreateObject(9093, 1801.9324, 984.7952, 13.7375, 0.0000, 0.0000, 90.3829);
	SetObjectMaterialText(kr99, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr100 = CreateObject(9093, 1809.5383, 984.8223, 13.7838, 0.0000, 0.0000, 90.3561);
	SetObjectMaterialText(kr100, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr101 = CreateObject(9093, 1718.7708, 856.1127, 15.7391, 0.0000, 0.0000, -179.5950);
	SetObjectMaterialText(kr101, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr102 = CreateObject(9093, 1718.7969, 848.3720, 15.7752, 0.0000, 0.0000, -179.6549);
	SetObjectMaterialText(kr102, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr103 = CreateObject(9093, 1716.3623, 839.0569, 15.7885, 0.0000, 0.0000, 0.3400);
	SetObjectMaterialText(kr103, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr104 = CreateObject(9093, 1716.3745, 831.1279, 15.8225, 0.0000, 0.0000, 0.3932);
	SetObjectMaterialText(kr104, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr105 = CreateObject(9093, 421.3844, 765.7756, 11.4763, 0.0000, 0.0000, 160.1119);
	SetObjectMaterialText(kr105, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr106 = CreateObject(9093, 85.0512, 685.6866, 11.6002, 0.0000, 0.0000, -145.0239);
	SetObjectMaterialText(kr106, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr37 = CreateObject(9093, -385.2615, 553.6508, 23.0293, 0.0000, 0.0000, -9.8946);
	SetObjectMaterialText(kr37, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr38 = CreateObject(9093, -846.8176, 1032.0045, 31.0970, 0.0000, 0.0000, 100.1001);
	SetObjectMaterialText(kr38, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr39 = CreateObject(9093, -1117.7604, 1428.7830, 31.6694, 0.0000, 0.0000, -71.0549);
	SetObjectMaterialText(kr39, "Example", 0, 50, "Arial", 24, 1, -16730675, -16730675, 1);
	new kr40 = CreateObject(9093, 2455.5148, 830.5191, 13.9986, 0.0000, 0.0000, 0.3197);
	SetObjectMaterialText(kr40, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr41 = CreateObject(9093, 2455.4887, 838.3866, 14.0116, 0.0000, 0.0000, -0.0801);
	SetObjectMaterialText(kr41, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr42 = CreateObject(9093, 2458.0798, 847.6141, 13.9343, 0.0000, 0.0000, -179.5717);
	SetObjectMaterialText(kr42, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr43 = CreateObject(9093, 2458.0727, 855.6813, 13.9143, 0.0000, 0.0000, -179.5184);
	SetObjectMaterialText(kr43, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr44 = CreateObject(9093, 2730.3298, 1212.2794, 13.9479, 0.0000, 0.0000, 90.1584);
	SetObjectMaterialText(kr44, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr45 = CreateObject(9093, 2722.5622, 1212.2735, 13.8273, 0.0000, 0.0000, 90.0852);
	SetObjectMaterialText(kr45, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr46 = CreateObject(9093, 2713.2902, 1214.8168, 13.8020, 0.0000, 0.0000, -89.9398);
	SetObjectMaterialText(kr46, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr47 = CreateObject(9093, 2705.3571, 1214.8315, 13.8743, 0.0000, 0.0000, -89.6593);
	SetObjectMaterialText(kr47, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr48 = CreateObject(9093, 2730.3381, 1702.0616, 13.9186, 0.0000, 0.0000, 90.4307);
	SetObjectMaterialText(kr48, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr49 = CreateObject(9093, 2722.8242, 1702.0407, 13.8302, 0.0000, 0.0000, 90.3907);
	SetObjectMaterialText(kr49, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr50 = CreateObject(9093, 2713.3981, 1704.5756, 13.9043, 0.0000, 0.0000, -89.6791);
	SetObjectMaterialText(kr50, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr51 = CreateObject(9093, 2705.4777, 1704.5693, 13.8720, 0.0000, 0.0000, -89.7791);
	SetObjectMaterialText(kr51, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr52 = CreateObject(9093, 2729.7607, 1915.8701, 13.8968, 0.0000, 0.0000, 90.3481);
	SetObjectMaterialText(kr52, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr53 = CreateObject(9093, 2721.8811, 1915.8499, 14.0245, 0.0000, 0.0000, 90.3815);
	SetObjectMaterialText(kr53, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr54 = CreateObject(9093, 2712.5932, 1918.4792, 13.8343, 0.0000, 0.0000, -89.5835);
	SetObjectMaterialText(kr54, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr55 = CreateObject(9093, 2704.7995, 1918.3521, 13.8743, 0.0000, 0.0000, -89.5769);
	SetObjectMaterialText(kr55, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr56 = CreateObject(9093, 2705.2468, 2413.2609, 13.9175, 0.0000, 0.0000, 112.5049);
	SetObjectMaterialText(kr56, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr57 = CreateObject(9093, 2698.3261, 2410.4204, 13.9439, 0.0000, 0.0000, 112.2917);
	SetObjectMaterialText(kr57, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr58 = CreateObject(9093, 2688.3974, 2409.1999, 13.9043, 0.0000, 0.0000, -67.6733);
	SetObjectMaterialText(kr58, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr59 = CreateObject(9093, 2681.0751, 2406.2243, 13.7743, 0.0000, 0.0000, -67.4800);
	SetObjectMaterialText(kr59, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr60 = CreateObject(9093, 2130.5395, 2169.9814, 16.9436, 0.0000, 0.0000, -90.4126);
	SetObjectMaterialText(kr60, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr61 = CreateObject(9093, 2122.7910, 2169.9648, 16.7318, 0.0000, 0.0000, -89.8126);
	SetObjectMaterialText(kr61, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr62 = CreateObject(9093, 2145.1181, 2090.6826, 16.9118, 0.0000, 0.0000, 90.1447);
	SetObjectMaterialText(kr62, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr63 = CreateObject(9093, 2153.0917, 2090.6684, 16.7196, 0.0000, 0.0000, 89.4447);
	SetObjectMaterialText(kr63, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr64 = CreateObject(9093, 2050.0187, 1484.2642, 16.8565, 0.0000, 0.0000, -90.0473);
	SetObjectMaterialText(kr64, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr65 = CreateObject(9093, 2042.0802, 1484.2692, 16.8163, 0.0000, 0.0000, -89.6473);
	SetObjectMaterialText(kr65, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr66 = CreateObject(9093, 2065.0263, 1503.3553, 16.8818, 0.0000, 0.0000, 89.7345);
	SetObjectMaterialText(kr66, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr67 = CreateObject(9093, 2072.8925, 1503.3525, 16.9618, 0.0000, 0.0000, 89.7344);
	SetObjectMaterialText(kr67, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr68 = CreateObject(9093, 2049.9960, 1302.9406, 16.8884, 0.0000, 0.0000, 90.1556);
	SetObjectMaterialText(kr68, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr69 = CreateObject(9093, 2042.0731, 1302.9672, 16.8088, 0.0000, 0.0000, -90.0777);
	SetObjectMaterialText(kr69, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr70 = CreateObject(9093, 2064.5117, 1342.1136, 16.8618, 0.0000, 0.0000, 89.9972);
	SetObjectMaterialText(kr70, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr71 = CreateObject(9093, 2072.3566, 1342.0930, 16.8496, 0.0000, 0.0000, 89.9840);
	SetObjectMaterialText(kr71, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr72 = CreateObject(9093, 2042.5089, 868.9400, 13.0341, 0.0000, 0.0000, -89.9830);
	SetObjectMaterialText(kr72, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new kr73 = CreateObject(9093, 2050.3283, 868.9410, 12.9178, 0.0000, 0.0000, -90.1297);
	SetObjectMaterialText(kr73, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd1 = CreateObject(9093, -1061.2197, 1200.3872, 45.3651, 0.0000, 0.0000, 60.8985);
	SetObjectMaterialText(gd1, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd2 = CreateObject(9093, -1083.6558, 1141.9896, 44.8589, 0.0000, 0.0000, 49.3541);
	SetObjectMaterialText(gd2, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd3 = CreateObject(9093, -1687.2153, 539.1079, 45.7801, 0.0000, 0.0000, -134.0185);
	SetObjectMaterialText(gd3, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd4 = CreateObject(9093, -1681.5202, 533.5230, 45.8091, 0.0000, 0.0000, -134.8140);
	SetObjectMaterialText(gd4, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd5 = CreateObject(9093, -1679.4902, 527.8714, 45.8745, 0.0000, 0.0000, 45.7743);
	SetObjectMaterialText(gd5, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd6 = CreateObject(9093, -1673.9204, 522.2974, 45.6385, 0.4000, -1.1000, 45.2475);
	SetObjectMaterialText(gd6, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd7 = CreateObject(9093, -1905.6464, 28.8608, 46.4739, 0.0000, 0.0000, -90.4020);
	SetObjectMaterialText(gd7, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd8 = CreateObject(9093, -1897.6878, 28.7966, 46.6382, 0.0000, 0.0000, -90.8483);
	SetObjectMaterialText(gd8, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd9 = CreateObject(9093, -1892.2894, 25.9360, 46.7195, 0.0000, 0.0000, 88.4397);
	SetObjectMaterialText(gd9, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd10 = CreateObject(9093, -1884.3828, 25.8027, 46.6495, 0.0000, 0.0000, 89.3731);
	SetObjectMaterialText(gd10, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd11 = CreateObject(9093, -1914.2111, -623.8136, 47.1355, 0.0000, 0.0000, -89.8821);
	SetObjectMaterialText(gd11, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd12 = CreateObject(9093, -1906.2675, -623.7822, 47.2523, -0.2999, 0.0000, -89.5889);
	SetObjectMaterialText(gd12, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd13 = CreateObject(9093, -1892.9190, -626.5612, 47.2679, 0.3999, -0.4000, 89.2061);
	SetObjectMaterialText(gd13, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd14 = CreateObject(9093, -1900.7248, -626.5424, 47.2053, 0.0000, 0.0000, 91.4260);
	SetObjectMaterialText(gd14, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd15 = CreateObject(9093, -1914.2646, -815.8600, 53.2130, 0.0000, 0.0000, -89.1524);
	SetObjectMaterialText(gd15, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd16 = CreateObject(9093, -1906.2813, -815.8487, 53.2171, 0.0000, 0.0000, -89.7124);
	SetObjectMaterialText(gd16, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd17 = CreateObject(9093, -1892.9400, -818.6057, 53.1631, 0.0000, 0.0000, 89.4492);
	SetObjectMaterialText(gd17, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd18 = CreateObject(9093, -1900.8979, -818.6077, 53.0631, 0.0000, 0.0000, 89.8692);
	SetObjectMaterialText(gd18, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd19 = CreateObject(9093, -1914.1502, -1112.0791, 46.4543, 0.0000, 0.2000, -90.7947);
	SetObjectMaterialText(gd19, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd20 = CreateObject(9093, -1906.2424, -1112.1226, 46.4743, 0.0000, 0.0000, -89.8081);
	SetObjectMaterialText(gd20, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd21 = CreateObject(9093, -1892.8615, -1114.6768, 46.4968, 0.0000, 0.0000, 90.2102);
	SetObjectMaterialText(gd21, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd22 = CreateObject(9093, -1900.8292, -1114.6645, 46.3775, -0.0999, 0.0000, 90.6835);
	SetObjectMaterialText(gd22, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd23 = CreateObject(9093, -2180.8923, -352.7184, 42.1622, 0.0000, 0.0000, 2.5734);
	SetObjectMaterialText(gd23, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd25 = CreateObject(9093, -2178.2424, -331.4925, 42.1514, 0.0000, 0.0000, -179.5915);
	SetObjectMaterialText(gd25, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd26 = CreateObject(9093, -2178.1555, -339.3605, 42.1387, 0.0000, 0.0000, 178.9216);
	SetObjectMaterialText(gd26, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd27 = CreateObject(9093, -2068.4648, -358.7044, 42.9394, 0.0000, 0.0000, -6.9361);
	SetObjectMaterialText(gd27, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd28 = CreateObject(9093, -2067.3957, -350.0997, 43.0191, 0.7999, 0.0000, -7.1528);
	SetObjectMaterialText(gd28, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd29 = CreateObject(9093, -2068.9294, -329.3788, 43.0446, 0.0000, 0.0000, -174.6242);
	SetObjectMaterialText(gd29, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd30 = CreateObject(9093, -2068.2673, -337.4679, 43.0046, 0.0000, 0.0000, -175.1309);
	SetObjectMaterialText(gd30, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd31 = CreateObject(9093, -341.9646, -1958.0758, 31.9877, 0.0000, 0.0000, 87.9841);
	SetObjectMaterialText(gd31, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new gd32 = CreateObject(9093, -318.8731, -1761.8952, 22.6276, 0.0000, 0.0000, -115.7377);
	SetObjectMaterialText(gd32, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa1 = CreateObject(9093, -79.7054, -1432.5084, 19.8048, 0.0000, 0.2999, 47.3648);
	SetObjectMaterialText(wa1, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa2 = CreateObject(9093, -85.7215, -1427.0800, 19.9846, 0.0000, 0.0000, 47.2915);
	SetObjectMaterialText(wa2, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa3 = CreateObject(9093, -102.5128, -1408.3916, 20.2651, 0.0000, 0.0000, -131.4498);
	SetObjectMaterialText(wa3, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa4 = CreateObject(9093, -16.3859, -1521.2915, 8.5403, 0.0000, 0.0000, -4.8096);
	SetObjectMaterialText(wa4, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa5 = CreateObject(9093, -132.9282, -1315.4761, 8.5558, 0.0000, 0.0000, 56.7711);
	SetObjectMaterialText(wa5, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa6 = CreateObject(9093, 1485.1872, -979.5125, 44.3390, 0.0000, 0.0000, -29.1737);
	SetObjectMaterialText(wa6, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa8 = CreateObject(9093, 1720.6447, -665.3458, 49.8212, 0.0000, 0.0000, 80.9291);
	SetObjectMaterialText(wa8, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa9 = CreateObject(9093, 1654.4238, 302.4715, 36.9469, 0.0000, 0.0000, -109.5751);
	SetObjectMaterialText(wa9, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa10 = CreateObject(9093, 1635.9946, 158.0370, 40.6415, 0.0000, 0.0000, 76.9348);
	SetObjectMaterialText(wa10, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa11 = CreateObject(9093, 1698.4943, -709.4338, 54.6776, 0.0000, 0.0000, -99.4270);
	SetObjectMaterialText(wa11, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa12 = CreateObject(9093, 1690.4104, -708.0706, 54.6303, 0.0000, 0.0000, -99.6137);
	SetObjectMaterialText(wa12, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa13 = CreateObject(9093, 1652.5590, -816.6669, 64.7556, 0.0000, 0.0000, -124.7220);
	SetObjectMaterialText(wa13, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa14 = CreateObject(9093, 1658.6586, -820.9086, 64.5531, 0.0000, 0.0000, -124.6352);
	SetObjectMaterialText(wa14, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa15 = CreateObject(9093, 1817.7668, -976.0972, 45.5972, 0.0000, 0.0000, 145.2752);
	SetObjectMaterialText(wa15, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa16 = CreateObject(9093, 1813.2937, -982.4835, 45.6370, 0.0000, 0.0000, 145.5753);
	SetObjectMaterialText(wa16, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa17 = CreateObject(9093, 1927.0996, -1027.5909, 40.4113, 0.0000, 0.0000, -11.2643);
	SetObjectMaterialText(wa17, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa19 = CreateObject(9093, 1927.2772, -1028.8277, 40.1537, -0.7999, 0.0000, 169.3838);
	SetObjectMaterialText(wa19, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa20 = CreateObject(9093, 2241.3435, -1137.2009, 31.6966, 0.0000, 0.0000, 174.3812);
	SetObjectMaterialText(wa20, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa21 = CreateObject(9093, 2240.6303, -1143.3712, 31.7109, 0.0000, 0.0000, 174.5813);
	SetObjectMaterialText(wa21, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa22 = CreateObject(9093, 1668.3253, -1149.2224, 65.2367, 0.0000, 0.0000, 55.4626);
	SetObjectMaterialText(wa22, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa23 = CreateObject(9093, 1661.9641, -1144.8277, 65.1931, 0.0000, 0.0000, 55.3626);
	SetObjectMaterialText(wa23, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa24 = CreateObject(9093, 1635.7149, -1238.8515, 56.5698, 0.0000, 0.0000, 80.5393);
	SetObjectMaterialText(wa24, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa25 = CreateObject(9093, 1628.1802, -1237.5742, 56.5344, 0.0000, 0.0000, 80.6726);
	SetObjectMaterialText(wa25, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa26 = CreateObject(9093, 1597.6489, -1368.3947, 35.5769, 0.0000, 0.0000, -89.5884);
	SetObjectMaterialText(wa26, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa27 = CreateObject(9093, 1589.7182, -1368.3508, 35.4340, 0.0000, 0.0000, -89.9616);
	SetObjectMaterialText(wa27, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa28 = CreateObject(9093, 1708.1820, -1492.7841, 28.5825, 0.0000, 0.0000, 165.0828);
	SetObjectMaterialText(wa28, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa29 = CreateObject(9093, 1710.2941, -1485.1942, 28.4848, 0.0000, 0.0000, 164.9250);
	SetObjectMaterialText(wa29, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa30 = CreateObject(9093, 1633.1898, -1908.1072, 31.6998, 0.0000, 0.0000, -75.9491);
	SetObjectMaterialText(wa30, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa31 = CreateObject(9093, 1640.6181, -1906.1464, 31.7548, 0.0000, 0.0000, -76.2090);
	SetObjectMaterialText(wa31, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa32 = CreateObject(9093, 1646.7271, -1907.3730, 31.6020, 0.0000, 0.0000, 103.9989);
	SetObjectMaterialText(wa32, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa33 = CreateObject(9093, 1654.3355, -1905.4826, 31.5307, 0.0000, 0.0000, 104.0989);
	SetObjectMaterialText(wa33, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa34 = CreateObject(9093, 1367.1202, -2154.6901, 20.3028, 0.0000, 0.0000, -130.8206);
	SetObjectMaterialText(wa34, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa35 = CreateObject(9093, 1361.3906, -2149.6743, 20.4228, 0.0000, 0.0000, -131.3870);
	SetObjectMaterialText(wa35, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa36 = CreateObject(9093, 1369.6522, -2160.1992, 20.2128, 0.0000, 0.0000, 49.1612);
	SetObjectMaterialText(wa36, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa37 = CreateObject(9093, 1375.6627, -2165.4067, 20.3128, 0.0000, 0.0000, 48.9211);
	SetObjectMaterialText(wa37, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa38 = CreateObject(9093, 1328.2647, -2354.9362, 20.3314, 0.0000, 0.0000, -89.8649);
	SetObjectMaterialText(wa38, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa39 = CreateObject(9093, 1336.1010, -2354.9326, 20.3714, 0.0000, 0.0000, -90.0649);
	SetObjectMaterialText(wa39, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa40 = CreateObject(9093, 1341.6656, -2357.4135, 20.2250, 0.0000, 0.0000, 90.2700);
	SetObjectMaterialText(wa40, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa41 = CreateObject(9093, 1349.5756, -2357.4147, 20.2950, 0.0000, 0.0000, 90.3766);
	SetObjectMaterialText(wa41, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa42 = CreateObject(9093, 1328.2812, -2563.3525, 20.3154, 0.0000, 0.0000, -90.1780);
	SetObjectMaterialText(wa42, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa43 = CreateObject(9093, 1336.0489, -2563.3466, 20.3354, 0.0000, 0.0000, -89.7780);
	SetObjectMaterialText(wa43, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa44 = CreateObject(9093, 1341.7363, -2565.8852, 20.2350, 0.0000, 0.0000, 90.1300);
	SetObjectMaterialText(wa44, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa45 = CreateObject(9093, 1349.6153, -2565.8522, 20.1950, 0.0000, 0.0000, 89.9569);
	SetObjectMaterialText(wa45, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa46 = CreateObject(9093, 2177.7705, -2571.2321, 20.1949, 0.0000, 0.0000, 89.9267);
	SetObjectMaterialText(wa46, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa47 = CreateObject(9093, 2169.7783, -2571.2468, 20.1752, 0.0000, 0.0000, 90.2267);
	SetObjectMaterialText(wa47, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa48 = CreateObject(9093, 2164.2148, -2568.7678, 20.1349, 0.0000, 0.0000, 89.8481);
	SetObjectMaterialText(wa48, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa49 = CreateObject(9093, 2156.4799, -2568.7326, 20.0549, 0.0000, 0.0000, -89.9118);
	SetObjectMaterialText(wa49, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa50 = CreateObject(9093, 2841.6147, -2009.6367, 17.5285, 0.0000, 0.0000, 90.4600);
	SetObjectMaterialText(wa50, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa51 = CreateObject(9093, 2834.1945, -2009.6363, 17.4459, 0.0000, 0.0000, 89.9001);
	SetObjectMaterialText(wa51, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa52 = CreateObject(9093, 2820.4370, -2007.0140, 17.4075, 0.0000, 0.0000, -89.7183);
	SetObjectMaterialText(wa52, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa53 = CreateObject(9093, 2828.2749, -2006.9960, 17.4275, 0.0000, 0.0000, -89.6317);
	SetObjectMaterialText(wa53, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa54 = CreateObject(9093, 2887.6398, -1076.1964, 16.8919, -0.0999, 0.0000, 89.6834);
	SetObjectMaterialText(wa54, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa55 = CreateObject(9093, 2901.0336, -618.5971, 17.1368, 0.0000, 0.0000, 93.1142);
	SetObjectMaterialText(wa55, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa56 = CreateObject(9093, 2694.9826, -270.3930, 36.3272, 0.0000, 0.0000, -107.2275);
	SetObjectMaterialText(wa56, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa57 = CreateObject(9093, 2776.2365, -76.1386, 42.3808, 0.0000, 0.0000, 88.1603);
	SetObjectMaterialText(wa57, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa58 = CreateObject(9093, 2747.9851, 196.5482, 30.6077, 0.0000, 0.0000, -79.4175);
	SetObjectMaterialText(wa58, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa59 = CreateObject(9093, 2340.1389, 325.9469, 39.0691, 0.0000, 0.0000, 178.2271);
	SetObjectMaterialText(wa59, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa60 = CreateObject(9093, 2205.8894, 313.3562, 39.1599, 0.0000, 0.0000, -1.6361);
	SetObjectMaterialText(wa60, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa61 = CreateObject(9093, 2348.5214, 273.8311, 32.6221, 0.0000, 0.0000, 88.3137);
	SetObjectMaterialText(wa61, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa62 = CreateObject(9093, 1808.8632, 282.2633, 27.4887, 0.0000, 0.0000, -175.1118);
	SetObjectMaterialText(wa62, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wa63 = CreateObject(9093, 1683.8460, 296.5736, 26.5905, 0.0000, 0.0000, 162.0221);
	SetObjectMaterialText(wa63, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new PTRs = CreateObject(7905, 2776.7136, -1807.6005, 17.0745, 0.0000, 0.0000, -118.6566);
	SetObjectMaterialText(PTRs, "PTR", 0, 50, "Calligraphic", 42, 0, -16776961, 0, 1);
	new LV = CreateObject(19353, 1705.3624, 1599.1757, 12.2619, 0.0999, 0.0000, 24.0262);
	SetObjectMaterialText(LV, " WITAMY NA KR-LOT", 0, 130, "Addled", 45, 0, -16776961, 0, 1);
	new krn3 = CreateObject(9093, 2041.8819, 1484.2753, 17.5618, 0.0000, 0.0000, 90.2287);
	SetObjectMaterialText(krn3, "Lotnisko Krakow", 0, 50, "Arial", 17, 1, -1, 0, 1);
	new krn4 = CreateObject(9093, 2049.8676, 1484.2456, 17.8618, 0.0000, 0.0000, 90.0085);
	SetObjectMaterialText(krn4, "Rondo Krakow", 0, 50, "Arial", 20, 1, -1, 0, 1);
	new krn7 = CreateObject(9093, 2041.9189, 1303.0018, 17.9418, 0.0000, 0.0000, -90.6427);
	SetObjectMaterialText(krn7, "Lotnisko", 0, 50, "Arial", 24, 0, -1, 0, 1);
	new krn8 = CreateObject(9093, 2049.9697, 1302.9901, 18.0318, 0.0000, 0.0000, -89.8927);
	SetObjectMaterialText(krn8, "Rondo", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krn11 = CreateObject(9093, 421.3978, 765.7921, 12.2757, 0.0000, 0.0000, 160.1637);
	SetObjectMaterialText(krn11, "Katowice", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krn12 = CreateObject(9093, 85.0442, 685.7064, 12.2367, 0.0000, 0.0000, -144.9674);
	SetObjectMaterialText(krn12, "Zielona Gora", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krn13 = CreateObject(9093, -385.2940, 553.6114, 23.5592, 0.0000, 0.0000, -9.8206);
	SetObjectMaterialText(krn13, "Wroclaw", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krn14 = CreateObject(9093, -846.6705, 1032.0250, 31.5823, 0.0000, 0.0000, 100.1130);
	SetObjectMaterialText(krn14, "Gdansk", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krn15 = CreateObject(9093, -1117.7126, 1428.8156, 32.1436, 0.0000, 0.0000, -71.0210);
	SetObjectMaterialText(krn15, "Gdansk", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krn16 = CreateObject(9093, -1061.2340, 1200.3726, 45.8754, 0.0000, 0.0000, 60.8905);
	SetObjectMaterialText(krn16, "Poznan", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krn117 = CreateObject(9093, -1083.6474, 1141.9801, 45.3172, 0.0000, 0.0000, 49.3138);
	SetObjectMaterialText(krn117, "Krakow", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new gdn1 = CreateObject(9093, -1687.0314, 538.9368, 46.2637, 0.0000, 0.0000, -133.9995);
	SetObjectMaterialText(gdn1, "Centrum", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new gdn2 = CreateObject(9093, -1681.4884, 533.5007, 46.1554, 0.0000, 0.0000, -134.7395);
	SetObjectMaterialText(gdn2, "Zakopane", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new gdn3 = CreateObject(9093, -1673.8201, 522.1471, 46.1621, 0.0000, 0.0000, 45.2821);
	SetObjectMaterialText(gdn3, "Krakow", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new gdn4 = CreateObject(9093, -1679.4771, 527.8574, 46.1907, 0.0000, 0.0000, 45.7955);
	SetObjectMaterialText(gdn4, "Poznan", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new gdn5 = CreateObject(9093, -1914.1733, -623.7870, 47.5858, 0.0000, 0.0000, -89.8774);
	SetObjectMaterialText(gdn5, "Zakopane", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new gdn6 = CreateObject(9093, -1906.4569, -623.7653, 47.5737, 0.0000, 0.0000, -89.5908);
	SetObjectMaterialText(gdn6, "Warszawa", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new gdn7 = CreateObject(9093, -1892.6256, -626.5750, 47.6430, 0.0000, 0.0000, 89.2643);
	SetObjectMaterialText(gdn7, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new gdn8 = CreateObject(9093, -1900.6358, -626.5463, 47.5922, 0.0000, 0.0000, 91.4642);
	SetObjectMaterialText(gdn8, "Krakow", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new gdn9 = CreateObject(9093, -1914.2437, -815.8460, 53.6231, 0.0000, 0.0000, -89.1924);
	SetObjectMaterialText(gdn9, "Zakopane", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new gdn10 = CreateObject(9093, -1906.4866, -815.8406, 53.6331, 0.0000, 0.0000, -89.6453);
	SetObjectMaterialText(gdn10, "Warszawa", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new gdn11 = CreateObject(9093, -1892.8839, -818.6126, 53.5331, 0.0000, 0.0000, 89.4691);
	SetObjectMaterialText(gdn11, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new gdn12 = CreateObject(9093, -1900.7993, -818.6176, 53.4631, 0.0000, 0.0000, 89.8692);
	SetObjectMaterialText(gdn12, "Centrum", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new gdn13 = CreateObject(9093, -1906.3645, -1112.1156, 46.9643, 0.0000, 0.0000, -89.7796);
	SetObjectMaterialText(gdn13, "Zakopane", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new gdn14 = CreateObject(9093, -1914.1390, -1112.0487, 46.8943, 0.0000, 0.0000, -90.8326);
	SetObjectMaterialText(gdn14, "Centrum", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new gdn15 = CreateObject(9093, -1892.9185, -1114.6956, 46.7132, 0.0000, 0.0000, 90.1590);
	SetObjectMaterialText(gdn15, "Wroclaw", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new gdn16 = CreateObject(9093, -1900.8773, -1114.6904, 46.8058, 0.0000, 0.0000, 90.7989);
	SetObjectMaterialText(gdn16, "Centrum", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krn17 = CreateObject(9093, 1229.4709, 1254.5234, 14.6318, 0.0000, 0.0000, 90.5040);
	SetObjectMaterialText(krn17, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krn19 = CreateObject(9093, 1212.4754, 1257.1702, 14.6643, 0.0000, 0.0000, -90.1411);
	SetObjectMaterialText(krn19, "Krakow centrum", 0, 50, "Arial", 18, 1, -1, 0, 1);
	new krn20 = CreateObject(9093, 1204.7075, 1257.1336, 14.4943, 0.0000, 0.0000, -89.0812);
	SetObjectMaterialText(krn20, "Katowice", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krn21 = CreateObject(9093, 1230.1491, 2123.2871, 14.3793, 0.0000, 0.0000, 89.5531);
	SetObjectMaterialText(krn21, "Bialystok", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krn23 = CreateObject(9093, 1213.0610, 2126.1462, 14.2343, 0.0000, 0.0000, -88.6179);
	SetObjectMaterialText(krn23, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krn24 = CreateObject(9093, 1205.0397, 2126.1269, 14.4243, 0.0000, 0.0000, -88.9179);
	SetObjectMaterialText(krn24, "Hala Sportowa", 0, 50, "Arial", 19, 1, -1, 0, 1);
	new wan1 = CreateObject(9093, 1654.3680, 302.4991, 37.4793, 0.0000, 0.0000, -109.5634);
	SetObjectMaterialText(wan1, "Szczecin", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan2 = CreateObject(9093, 1636.0208, 158.0141, 41.2035, 0.0000, 0.0000, 77.0797);
	SetObjectMaterialText(wan2, "Szczecin", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan3 = CreateObject(9093, 1720.7352, -665.3671, 50.2877, 0.0000, 0.0000, 80.8274);
	SetObjectMaterialText(wan3, "Krakow", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan4 = CreateObject(9093, 1690.6291, -708.1019, 54.9364, 0.0000, 0.0000, -99.6710);
	SetObjectMaterialText(wan4, "Gdansk", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan5 = CreateObject(9093, 1698.5386, -709.4388, 55.1524, 0.0000, 0.0000, -99.3776);
	SetObjectMaterialText(wan5, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan6 = CreateObject(9093, 1652.5170, -816.6324, 65.1545, 0.0000, 0.0000, -124.6796);
	SetObjectMaterialText(wan6, "Rzeszow", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan7 = CreateObject(9093, 1658.6894, -820.9255, 65.0903, 0.0000, 0.0000, -124.5396);
	SetObjectMaterialText(wan7, "Centrum", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan8 = CreateObject(9093, 1661.9793, -1144.8563, 65.6821, 0.0000, 0.0000, 55.4444);
	SetObjectMaterialText(wan8, "Gdansk", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan9 = CreateObject(9093, 1668.3881, -1149.2747, 65.5071, 0.0000, 0.0000, 55.4511);
	SetObjectMaterialText(wan9, "Centrum", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan10 = CreateObject(9093, 1635.5794, -1238.8322, 56.9267, 0.0000, 0.0000, 80.5605);
	SetObjectMaterialText(wan10, "Krakow", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan11 = CreateObject(9093, 1628.4344, -1237.6474, 56.8916, 0.0000, 0.0000, 80.6405);
	SetObjectMaterialText(wan11, "Rzeszow", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan12 = CreateObject(9093, 1597.5229, -1368.3809, 36.0315, 0.0000, 0.0000, -89.4686);
	SetObjectMaterialText(wan12, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan14 = CreateObject(9093, 1708.2305, -1492.6247, 28.9524, 0.0000, 0.0000, 165.1633);
	SetObjectMaterialText(wan14, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan15 = CreateObject(9093, 1710.3011, -1485.1943, 28.7712, 0.0000, 0.0000, 164.9766);
	SetObjectMaterialText(wan15, "Krakow", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan16 = CreateObject(9093, 1640.4528, -1906.1833, 32.0673, 0.0000, 0.0000, -76.2290);
	SetObjectMaterialText(wan16, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan17 = CreateObject(9093, 1633.3669, -1908.0532, 32.1349, 0.0000, 0.0000, -76.1557);
	SetObjectMaterialText(wan17, "Port", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan18 = CreateObject(9093, 1654.1500, -1905.5341, 31.9787, 0.0000, 0.0000, 104.1592);
	SetObjectMaterialText(wan18, "Krakow", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan19 = CreateObject(9093, 1647.0158, -1907.3121, 31.9263, 0.0000, 0.0000, 103.9592);
	SetObjectMaterialText(wan19, "Centrum", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan20 = CreateObject(9093, 1361.4299, -2149.7070, 20.8128, 0.0000, 0.0000, -131.3672);
	SetObjectMaterialText(wan20, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan21 = CreateObject(9093, 1367.3586, -2154.8640, 20.8728, 0.0000, 0.0000, -130.7671);
	SetObjectMaterialText(wan21, "Port", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan22 = CreateObject(9093, 1369.7619, -2160.3005, 20.6728, 0.0000, 0.0000, 49.1712);
	SetObjectMaterialText(wan22, "Centrum", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan24 = CreateObject(9093, 1336.1333, -2354.9157, 20.6250, 0.0000, 0.0000, -90.0340);
	SetObjectMaterialText(wan24, "Port", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan25 = CreateObject(9093, 1328.1671, -2354.9321, 20.6850, 0.0000, 0.0000, -89.8481);
	SetObjectMaterialText(wan25, "Zakopane", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan26 = CreateObject(9093, 1341.8631, -2357.4184, 20.5950, 0.0000, 0.0000, 90.3802);
	SetObjectMaterialText(wan26, "Centrum", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan27 = CreateObject(9093, 1349.5178, -2357.4250, 20.5850, 0.0000, 0.0000, 90.3802);
	SetObjectMaterialText(wan27, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan28 = CreateObject(9093, 1328.4759, -2563.3444, 20.7650, 0.0000, 0.0000, -90.3091);
	SetObjectMaterialText(wan28, "Galeria", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan29 = CreateObject(9093, 1336.2922, -2563.3425, 20.6250, 0.0000, 0.0000, -89.9091);
	SetObjectMaterialText(wan29, "Port", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan30 = CreateObject(9093, 1341.7225, -2565.8886, 20.5868, 0.0000, 0.0000, 90.0659);
	SetObjectMaterialText(wan30, "Gdansk", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan31 = CreateObject(9093, 1349.6234, -2565.8632, 20.6450, 0.0000, 0.0000, 89.9658);
	SetObjectMaterialText(wan31, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan32 = CreateObject(9093, 2177.3117, -2571.2331, 20.4021, 0.0000, 0.0000, 89.9141);
	SetObjectMaterialText(wan32, "Port", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan34 = CreateObject(9093, 2164.0095, -2568.7192, 20.4850, 0.0000, 0.0000, -90.0287);
	SetObjectMaterialText(wan34, "Zakopane", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan35 = CreateObject(9093, 2156.5285, -2568.7026, 20.4150, 0.0000, 0.0000, -89.8842);
	SetObjectMaterialText(wan35, "Centrum", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan36 = CreateObject(9093, 2841.8249, -2009.6401, 17.8775, 0.0000, 0.0000, 90.3826);
	SetObjectMaterialText(wan36, "Szczecin", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan38 = CreateObject(9093, 2828.1650, -2006.9864, 17.6675, 0.0000, 0.0000, -89.7197);
	SetObjectMaterialText(wan38, "Port", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan39 = CreateObject(9093, 2820.3317, -2007.0053, 17.7575, 0.0000, 0.0000, -89.7197);
	SetObjectMaterialText(wan39, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan40 = CreateObject(9093, 2887.7229, -1076.1995, 17.5050, 0.0000, 0.0000, 89.6275);
	SetObjectMaterialText(wan40, "Szczecin", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan41 = CreateObject(9093, 2901.0637, -618.6116, 17.4459, 0.0000, 0.0000, 93.0417);
	SetObjectMaterialText(wan41, "Szczecin", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan42 = CreateObject(9093, 2694.7119, -270.3055, 36.6483, 0.0000, 0.0000, -107.2812);
	SetObjectMaterialText(wan42, "Szczecin", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan43 = CreateObject(9093, 2776.4001, -76.1523, 42.4818, 0.0000, 0.0000, 88.1201);
	SetObjectMaterialText(wan43, "Szczecin", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan44 = CreateObject(9093, 2747.6284, 196.5134, 31.1526, 0.0000, 0.0000, -79.6759);
	SetObjectMaterialText(wan44, "Szczecin", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan45 = CreateObject(9093, 2348.6057, 273.8222, 33.0440, 0.0000, 0.0000, 88.4458);
	SetObjectMaterialText(wan45, "Krakow", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan46 = CreateObject(9093, 2340.1486, 326.1207, 39.6370, 0.0000, 0.0000, 178.2962);
	SetObjectMaterialText(wan46, "Szczecin", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan47 = CreateObject(9093, 2205.8547, 313.0452, 39.5660, 0.0000, 0.0000, -1.5874);
	SetObjectMaterialText(wan47, "Szczecin", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan48 = CreateObject(9093, 1808.8536, 282.4301, 27.8709, 0.0000, 0.0000, -175.1527);
	SetObjectMaterialText(wan48, "Krakow", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan49 = CreateObject(9093, 1683.9116, 296.7640, 27.0816, 0.0000, 0.0000, 162.0296);
	SetObjectMaterialText(wan49, "Warszawa", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno1 = CreateObject(9093, 1337.9384, 2432.8317, 14.1243, 0.0000, 0.0000, 29.8323);
	SetObjectMaterialText(krno1, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno3 = CreateObject(19353, 1331.8278, 2448.7517, 14.0243, 0.0000, 0.0000, -149.8059);
	SetObjectMaterialText(krno3, "Centrum", 0, 50, "Arial", 26, 1, -1, 0, 1);
	new krno4 = CreateObject(9093, 1327.8591, 2455.7714, 13.8343, 0.0000, 0.0000, -150.0593);
	SetObjectMaterialText(krno4, "Stadion", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno5 = CreateObject(9093, 1604.0765, 2451.0439, 14.1902, 0.0000, 0.0000, 0.3741);
	SetObjectMaterialText(krno5, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno7 = CreateObject(9093, 1606.8276, 2476.0122, 14.1159, 0.0000, 0.0000, -179.7307);
	SetObjectMaterialText(krno7, "Bialystak", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno8 = CreateObject(9093, 1606.8084, 2468.1933, 14.0859, 0.0000, 0.0000, -179.6440);
	SetObjectMaterialText(krno8, "Centrum", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno10 = CreateObject(9093, 2688.2441, 2409.1613, 14.5179, 0.0000, 0.0000, -67.6121);
	SetObjectMaterialText(krno10, "Centrum", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno11 = CreateObject(9093, 2698.3181, 2410.3850, 14.5415, 0.0000, 0.0000, 112.2924);
	SetObjectMaterialText(krno11, "Stadion", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno12 = CreateObject(9093, 2705.2785, 2413.2622, 14.5743, 0.0000, 0.0000, 112.5053);
	SetObjectMaterialText(krno12, "Bialystok", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno13 = CreateObject(9093, 2704.7238, 1918.3723, 14.3443, 0.0000, 0.0000, -89.7610);
	SetObjectMaterialText(krno13, "Centrum", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno14 = CreateObject(9093, 2712.6083, 1918.4837, 14.5343, 0.0000, 0.0000, -89.6014);
	SetObjectMaterialText(krno14, "Dworzec", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno16 = CreateObject(9093, 2721.9230, 1915.8267, 14.5943, 0.0000, 0.0000, 90.3202);
	SetObjectMaterialText(krno16, "Bialystok", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno17 = CreateObject(9093, 2713.3222, 1704.6002, 14.4843, 0.0000, 0.0000, -89.6782);
	SetObjectMaterialText(krno17, "Warszawa", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno18 = CreateObject(9093, 2705.4765, 1704.6093, 14.5020, 0.0000, 0.0000, -89.6782);
	SetObjectMaterialText(krno18, "Centrum", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno20 = CreateObject(9093, 2723.0895, 1702.0175, 14.4043, 0.0000, 0.0000, 89.9701);
	SetObjectMaterialText(krno20, "Bialystok", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno21 = CreateObject(9093, 2713.2692, 1214.8404, 14.3220, 0.0000, 0.0000, -90.0620);
	SetObjectMaterialText(krno21, "Warszawa", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno22 = CreateObject(9093, 2705.3269, 1214.8579, 14.2843, 0.0000, 0.0000, -89.6620);
	SetObjectMaterialText(krno22, "Gdansk", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno23 = CreateObject(9093, 2722.4331, 1212.2707, 14.2443, 0.0000, 0.0000, 90.0731);
	SetObjectMaterialText(krno23, "Stadion", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno25 = CreateObject(9093, 2458.0773, 855.8036, 14.2643, 0.0000, 0.0000, -179.6224);
	SetObjectMaterialText(krno25, "Centrum", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno26 = CreateObject(9093, 2458.0979, 847.7154, 14.2243, 0.0000, 0.0000, -179.6290);
	SetObjectMaterialText(krno26, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno28 = CreateObject(9093, 2455.4982, 830.5678, 14.3843, 0.0000, 0.0000, 0.4793);
	SetObjectMaterialText(krno28, "Dworzec", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan50 = CreateObject(9093, 2241.3708, -1136.9510, 32.2125, 0.0000, 0.0000, 174.4373);
	SetObjectMaterialText(wan50, "Krakow", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan51 = CreateObject(9093, 2240.6062, -1143.7921, 32.1581, 0.0000, 0.0000, 174.6374);
	SetObjectMaterialText(wan51, "Centrum", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan52 = CreateObject(9093, 1927.3238, -1028.6933, 40.6274, 0.0000, 0.0000, 169.4528);
	SetObjectMaterialText(wan52, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan544 = CreateObject(9093, 1813.3575, -982.4221, 45.9753, 0.0000, 0.0000, 145.5573);
	SetObjectMaterialText(wan544, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan54 = CreateObject(9093, 1817.7644, -976.1243, 45.9679, 0.0000, 0.0000, 145.2441);
	SetObjectMaterialText(wan54, "Krakow", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan55 = CreateObject(9093, 1485.2092, -979.4436, 44.7972, 0.0000, 0.0000, -29.3273);
	SetObjectMaterialText(wan55, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan56 = CreateObject(9093, -16.3798, -1521.1842, 9.1903, 0.0000, 0.0000, -4.8269);
	SetObjectMaterialText(wan56, "Warszawa", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan57 = CreateObject(9093, -132.8219, -1315.5690, 9.1462, 0.0000, 0.0000, 56.7841);
	SetObjectMaterialText(wan57, "Zakopane", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan58 = CreateObject(9093, -102.5171, -1408.3730, 20.4399, 0.0000, 0.0000, -131.4730);
	SetObjectMaterialText(wan58, "Zakopane", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan59 = CreateObject(9093, -85.6058, -1427.1910, 20.3614, 0.0000, 0.0000, 47.2819);
	SetObjectMaterialText(wan59, "Centrum", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan61 = CreateObject(9093, -318.9996, -1761.8227, 23.0481, 0.0000, 0.0000, -115.6237);
	SetObjectMaterialText(wan61, "Zakopane", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan62 = CreateObject(9093, -341.8424, -1958.0867, 32.4430, 0.0000, 0.0000, 87.8912);
	SetObjectMaterialText(wan62, "Warszawa", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan63 = CreateObject(9093, -2180.9223, -352.4501, 42.1912, 0.0000, 0.0000, 2.5892);
	SetObjectMaterialText(wan63, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan64 = CreateObject(9093, -2180.8740, -344.7258, 42.2815, 0.0000, 0.0000, 0.3625);
	SetObjectMaterialText(wan64, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new wan65 = CreateObject(9093, -2178.1010, -339.1017, 42.6019, 0.0000, 0.0000, 178.9144);
	SetObjectMaterialText(wan65, "Zakopane", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan66 = CreateObject(9093, -2178.2380, -331.6630, 42.5323, 0.0000, 0.0000, -179.5855);
	SetObjectMaterialText(wan66, "Centrum", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan67 = CreateObject(9093, -2067.4404, -350.3848, 43.4146, 0.0000, 0.0000, -7.1205);
	SetObjectMaterialText(wan67, "Krakow", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan69 = CreateObject(9093, -2068.4553, -358.5975, 43.4046, 0.0000, 0.0000, -7.0204);
	SetObjectMaterialText(wan69, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan70 = CreateObject(9093, -2068.2612, -337.3908, 43.4323, 0.0000, 0.0000, -175.2054);
	SetObjectMaterialText(wan70, "Zakopane", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new wan71 = CreateObject(9093, -2068.9113, -329.5590, 43.3323, 0.0000, 0.0000, -174.6054);
	SetObjectMaterialText(wan71, "Centrum", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno200 = CreateObject(9093, 1784.8001, 2310.9294, 14.0708, 0.0000, 0.0000, -89.8295);
	SetObjectMaterialText(krno200, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno210 = CreateObject(9093, 1792.3665, 2310.9606, 13.8704, 0.0000, 0.0000, -90.2294);
	SetObjectMaterialText(krno210, "Szpital", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno220 = CreateObject(9093, 1801.7823, 2308.1848, 13.8577, 0.0000, 0.0000, 90.9455);
	SetObjectMaterialText(krno220, "Stadion", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno230 = CreateObject(9093, 1809.9061, 2308.2050, 13.9504, 0.0000, 0.0000, 90.2454);
	SetObjectMaterialText(krno230, "Bialystok", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno240 = CreateObject(9093, 1785.1606, 1936.3072, 13.9772, 0.0000, 0.0000, -90.7711);
	SetObjectMaterialText(krno240, "Szpital", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno250 = CreateObject(9093, 1792.4602, 1936.3132, 13.7708, 0.0000, 0.0000, -88.6712);
	SetObjectMaterialText(krno250, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno270 = CreateObject(9093, 1809.7724, 1933.5084, 13.9596, 0.0000, 0.0000, 89.8439);
	SetObjectMaterialText(krno270, "Stadion", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new krno280 = CreateObject(9093, 1801.9266, 1933.5407, 13.5445, 0.0000, 0.0000, 90.3440);
	SetObjectMaterialText(krno280, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new krno29 = CreateObject(9093, 1489.1746, -972.4625, 44.2294, 0.0000, 0.0000, -29.5782);
	SetObjectMaterialText(krno29, "Example", 0, 50, "Arial", 24, 0, -16730675, -16730675, 1);
	new st38 = CreateObject(9093, 1801.8841, 1933.5358, 14.1822, 0.0000, 0.0000, 90.3038);
	SetObjectMaterialText(st38, "Bialystok", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new st47 = CreateObject(9093, 2122.4584, 2169.9916, 17.6218, 0.2000, 0.0000, -90.0238);
	SetObjectMaterialText(st47, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new st49 = CreateObject(9093, 2130.4196, 2170.0017, 17.7861, 1.1000, 0.0000, -90.7711);
	SetObjectMaterialText(st49, "Warszawa", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new str7 = CreateObject(9093, 1489.0894, -972.5779, 45.0346, 0.0000, 0.0000, -29.4185);
	SetObjectMaterialText(str7, "Krakow", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new str13 = CreateObject(9093, -2180.8862, -344.4754, 43.1522, 0.0000, 0.0000, 0.5814);
	SetObjectMaterialText(str13, "Centrum", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new str22 = CreateObject(9093, 1976.0631, 855.7918, 14.7529, 0.0000, 0.0000, 179.8074);
	SetObjectMaterialText(str22, "Lotnisko", 0, 50, "Arial", 24, 1, -1, 0, 1);
	new str24 = CreateObject(9093, 1976.0097, 847.8853, 14.9966, 0.0000, 0.0000, -179.5929);
	SetObjectMaterialText(str24, "Warszawa", 0, 50, "Arial", 24, 1, -1, 0, 1);
	
	return 1;
}

public OnGameModeExit()
{
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		SaveVehicle(i, 2);
		SaveVehicle(i, 0); //Zapisujemy tylko dane pojazdu do bazy mysql bez unspawnu
	}
	
	FadeExit();
	mysql_close();
	return 1;
}



	
public OnPlayerRequestClass(playerid, classid)
{
	SetSpawnInfo(playerid, 0, 1, 2438.0369,2376.1670,10.8203,93.3973, 0, 0, 0, 0, 0, 0);
   
    TogglePlayerSpectating(playerid, true);
	return 1;
}


public OnPlayerRequestSpawn(playerid)
{
	if(IsPlayerNPC(playerid)) return 1;
	printf("OnPlayerRequestSpawn - %s (%s) (VW: %d, INT: %d)", PlayerData[playerid][pName], (PlayerData[playerid][pLogged]==true ? ("zalogowany"):("niezalogowany")), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	
	if(PlayerData[playerid][pLogged] == false)
	{
		Kick(playerid);
		return 0;
	}

	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(PlayerData[playerid][pLogged] == false) 
	{
		ShowPlayerDialog(playerid,9999,DIALOG_STYLE_MSGBOX,"Blokada pisania:","Nie mozesz teraz tego zrobic, zaloguj sie lub zarejestruj.","Zamknij","");
		return 0;
	}	
	return 1;
}
public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{

	if(!success)
	{
		PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
   		SendClientMessage(playerid, -1, "{FF0000}Nie odnaleziono takiej komendy. Wpisz /komendy, aby zobaczyc liste wszystkich komend na serwerze.");
	}
	return 1;
}

	
public OnPlayerText(playerid, text[])
{
	if(PlayerData[playerid][pLogged] == false) return ShowPlayerDialog(playerid,9999,DIALOG_STYLE_MSGBOX,"Blokada pisania:","Nie mozesz teraz tego zrobic, zaloguj sie lub zarejestruj.","Zamknij","");
	new data[128];
	format(data, sizeof(data), "{BDBDBD}%s mowi: %s", PlayerData[playerid][pName], text);
	SCMIC(playerid, 30, -1, data);
  
	return 0;
}

public OnPlayerConnect(playerid)
{
	InterpolateCameraPos(playerid, 1050.428588, 769.806152, 76.101165, 2881.373535, 873.165588, 36.969158, 39960);
	InterpolateCameraLookAt(playerid, 1046.271484, 768.311889, 73.759071, 2878.497802, 876.802795, 35.097881, 40000);	
	PlayerTextDrawLogged(playerid, 0);
	//TogglePlayerSpectating(playerid, true);

   	SendClientMessage(playerid, -1, "");
	SendClientMessage(playerid, -1, "==========================================================================");
	SendClientMessage(playerid, -1, "{199908}[{FF0000}P{FFFFFF}T{FF0000}R{FFFFFF}-Serw{199908}]:{C0C0C0}Witaj na Polski Truck Rozrywki RolePlay!");
	SendClientMessage(playerid, -1, "{199908}[{FF0000}P{FFFFFF}T{FF0000}R{FFFFFF}-Serw{199908}]:{C0C0C0}Serwer ten w pelni poswiecony jest karierze zwyklego kierowcy ciezarowki");
	SendClientMessage(playerid, -1, "{199908}[{FF0000}P{FFFFFF}T{FF0000}R{FFFFFF}-Serw{199908}]:{C0C0C0}Jezeli potrzebujesz pomocy, zajrzyj do naszego /faq.");
	SendClientMessage(playerid, -1, "{199908}[{FF0000}P{FFFFFF}T{FF0000}R{FFFFFF}-Serw{199908}]:{C0C0C0}Aby zatrudnic sie w ktorejs z frakcji zrob odpowiednie podanie na forum");
	SendClientMessage(playerid, -1, "{199908}[{FF0000}P{FFFFFF}T{FF0000}R{FFFFFF}-Serw{199908}]{C0C0C0}Zapraszamy na nasze forum: www.Nazwa-forum.pl||TS3 ip: 91.228.198.149");
	SendClientMessage(playerid, -1, "{199908}[{FF0000}P{FFFFFF}T{FF0000}R{FFFFFF}-Serw{199908}]:{C0C0C0}Zyczymy, powodzenia Truckerze/Graczu!");
	SendClientMessage(playerid, -1, "==========================================================================");
   	SendClientMessage(playerid, -1, "");
	
	PlayAudioStreamForPlayer(playerid,"http://k003.kiwi6.com/hotlink/6xg17s0g06/faded.mp3");//muzyka
	//PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/s/z834k2bgngbcmm6/kbgdHubwVdkG.128.mp3");
	new name[MAX_PLAYER_NAME];
	new string[256];
	GetPlayerName(playerid, name, sizeof(name));

	format(string, sizeof(string), "{87c7f7}[PTR-Serv] {ffffff}Gracz "HEX_COLOR_CREW_ADMIN"%s {ffffff}dolaczyl do serwera.", name);
	SendClientMessageToAll(0xC71585FF, string);

	SetPlayerColor(playerid,0x00FFFFFF);
	PlayerStatsSave(playerid);
	EnablePlayerCameraTarget(playerid, 0);
	
	//FadePlayerConnect(playerid);
//	InterpolateCameraPos(playerid, 1532.311645, 842.877197, 43.490371, 1832.044921, 839.722167, 18.615722, 20000);
//	InterpolateCameraLookAt(playerid, 1537.118164, 843.131225, 42.136398, 1832.147949, 834.874877, 17.393850, 20000);

	TogglePlayerControllable(playerid, false);


	//////Obiekty usuniete
	
	
	return 1;
}


public OnPlayerDisconnect(playerid, reason)
{
	PlayerStatsSave(playerid, 1);
	FadePlayerDisconnect(playerid);
	EnablePlayerCameraTarget(playerid, 0);
	if(PlayerData[playerid][pLogged] == true)
	{
		new data[200];
		format(data,sizeof(data), "UPDATE `data_players` set `playerid` = '%d' where `uid` = '%d'", 				-1,  	 	 PlayerData[playerid][pUID]), mysql_query(data);	
	}
	if(PlayerData[playerid][pBuildEnterUID] != 0)
	{
		new buid = PlayerData[playerid][pBuildEnterUID];
		BudynekData[buid][bEnterPeople]--;
		PlayerData[playerid][pBuildEnterUID] = 0;
	}
	new naglowek[128];
	format(naglowek,sizeof(naglowek),"[PTR-Serw]Gracz %s zostal rozlaczony z serwerem", PlayerData[playerid][pName]);
	PlayerBuildInfo(playerid, 4);
	PlayerTextDrawLogged(playerid, 1);
	PlayerVehicles(playerid, 2);
	PlayerStatyBox(playerid, 2);
	PlayerStacjaBenzynowa(playerid, 4);
	PlayerFrakcjaPanel(playerid, 3);
	PlayerFirmaPanel(playerid, 3);
	PlayerKasynoPanel(playerid, 3);
	PlayerNapadPanel(playerid, 3);
	PlayerSpecPanel(playerid, 3);
	PlayerSalonSamochodowy(playerid, 4);
	PlayerDataTXD(playerid, 3);
	PlayerDataTXD(playerid, 4, "Rozlaczenie", naglowek, "[PTR-Serw] ~r~~h~Zapraszamy do dalszej rozgrywki.", "_");
	//ShowSkinSelection(playerid, 69);
	PlayerZlecenieInfo(playerid, 2);
	PlayerVehicleInfo(playerid, 3);
	PlayerObiektPanel(playerid, 3);
	PlayerTextDrawLicznik(playerid, 3);
	PlayerTelefon1(playerid, 4);
	PlayerRealTime(playerid, 3);
	PlayerOthersTXD(playerid, 3);
	PlayerTowaryWybierz(playerid, 3);
	PlayerLicznikTaxi(playerid, 3);
	PlayerNewsReporta(playerid, 3);
	SaveUsedItemsGuns(playerid);
	PlayerStatsSave(playerid);

	return 1;
}

public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{
	new uid = GetPlayerObiekt(playerid, 9999.0, objectid);
	
	if(uid != -1)
	{
		new data[128];
		if(PlayerData[playerid][pObjectSelectAction] == 1)
		{
			if(IsValidDynamicObject(ObjectData[uid][oObject])) DestroyDynamicObject(ObjectData[uid][oObject]);
			ObjectData[uid][bAktywny] = 0;
			format(data,sizeof(data),"{a4a4a4}Obiekt (uid: %d) zostaje usuniety na zawsze z serwera.", uid);
			SendClientMessage(playerid, -1, data);
			SaveObject(uid);
			PlayerData[playerid][pObjectSelectAction] = 0;
		}
		else if(PlayerData[playerid][pObjectSelectAction] == 2)
		{
			new n_uid = obiekt_value;

			ObjectData[n_uid][bUID] = n_uid;
			ObjectData[n_uid][bAktywny] = 1;
			ObjectData[n_uid][oVW]  = ObjectData[uid][oVW];
			ObjectData[n_uid][oInt] = ObjectData[uid][oInt];
			ObjectData[n_uid][oModel] = ObjectData[uid][oModel];
			ObjectData[n_uid][oType] = ObjectData[uid][oType] ;
			ObjectData[n_uid][bPos][0] = ObjectData[uid][bPos][0];
			ObjectData[n_uid][bPos][1] = ObjectData[uid][bPos][1];
			ObjectData[n_uid][bPos][2] = ObjectData[uid][bPos][2];
			ObjectData[n_uid][bPos][3] = ObjectData[uid][bPos][3];
			ObjectData[n_uid][bPos][4] = ObjectData[uid][bPos][4];
			ObjectData[n_uid][bPos][5] = ObjectData[uid][bPos][5];
			
			ObjectData[n_uid][oObject] = CreateDynamicObject(ObjectData[n_uid][oModel], ObjectData[n_uid][bPos][0], ObjectData[n_uid][bPos][1], ObjectData[n_uid][bPos][2], ObjectData[n_uid][bPos][3], ObjectData[n_uid][bPos][4], ObjectData[n_uid][bPos][5], ObjectData[n_uid][oVW], ObjectData[n_uid][oInt]);
			
			EditDynamicObject(playerid, ObjectData[n_uid][oObject]);
			PlayerData[playerid][pObjectEdit] = n_uid;
			PlayerData[playerid][pObjectSelectAction] = 0;
			
			format(data,sizeof(data),"{a4a4a4}Stworzyles Obiekt. UID: %d, x %f y %f z %f", n_uid, ObjectData[n_uid][bPos][0], ObjectData[n_uid][bPos][1], ObjectData[n_uid][bPos][2]);
			SendClientMessage(playerid, -1, data);
			
			format(data,sizeof(data),"INSERT INTO `data_obiekty` SET `x`='%f', `y`='%f', `z`='%f', `modelid` = '%d'", ObjectData[n_uid][bPos][0], ObjectData[n_uid][bPos][1], ObjectData[n_uid][bPos][2], ObjectData[n_uid][oModel]);
			mysql_query(data);
			
			
			SaveObject(uid);
			obiekt_value++;
		
			format(data,sizeof(data),"{a4a4a4}Kopia obiektu (uid: %d) zostala utworzona na obiekcie uid: %d", uid, n_uid);
			SendClientMessage(playerid, -1, data);
		}
		else
		{
			PlayerData[playerid][pObjectEdit] = uid;
			EditDynamicObject(playerid, ObjectData[uid][oObject]);
			format(data,sizeof(data),"{a4a4a4}Rozpoczynasz edycje obiektu (uid: %d)", uid);
			SendClientMessage(playerid, -1, data);
		}
	}
	else
	{
		SendClientMessage(playerid, -1, "{a4a4a4}Ten obiekt nie zostal stworzony komenda /addo, nie mozna go edytuowac.");
	}
	return 1;
}




public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	MoveDynamicObject(objectid, x, y, z, 10.0, rx, ry, rz);
	
	if(PlayerData[playerid][pObjectEdit] != 0)
	{
		new uid = PlayerData[playerid][pObjectEdit];
		ObjectData[uid][bPos][0] = x;
		ObjectData[uid][bPos][1] = y;
		ObjectData[uid][bPos][2] = z;
		ObjectData[uid][bPos][3] = rx;
		ObjectData[uid][bPos][4] = ry;
		ObjectData[uid][bPos][5] = rz;
		PlayerObiektPanel(playerid, 4);
		PlayerObiektPanel(playerid, 1);
	}
	if(PlayerData[playerid][pPozarEdit] != 0)
	{
		if(!IsValidDynamicCP(PlayerData[playerid][pPozarEditO]))
		{
			KillTimer(PlayerData[playerid][pPozarEditT]);
			PlayerData[playerid][pPozarEditO] = CreateDynamicCP(x,y,z, 1.5, -1, -1, playerid, 10000.0);  
		}
		else
		{ 
			DestroyDynamicCP(PlayerData[playerid][pPozarEditO]);
			KillTimer(PlayerData[playerid][pPozarEditT]);
			PlayerData[playerid][pPozarEditT] = SetTimerEx("TimerCreateCP_Edit", 1000, false, "fffd", x,y,z,playerid);
		}
	}
	if(response == EDIT_RESPONSE_FINAL) //kliknie save (ikona dyskietki)
	{
		if(PlayerData[playerid][pPozarEdit] != 0)
		{
			new uid = PlayerData[playerid][pPozarEdit];
			PozarData[uid][pfPos][0] = x;
			PozarData[uid][pfPos][1] = y;
			PozarData[uid][pfPos][2] = z;
			PozarData[uid][pfPos][3] = rx;
			PozarData[uid][pfPos][4] = ry;
			PozarData[uid][pfPos][5] = rz;
			SavePozar(uid);
			SendClientMessage(playerid, -1, "{a4a4a4}Ogien zostal zapisany na nowych pozycjach.");
			PlayerData[playerid][pPozarEdit] = 0;
			if(IsValidDynamicCP(PlayerData[playerid][pPozarEditO])) DestroyDynamicCP(PlayerData[playerid][pPozarEditO]);
			return 1;
		}
		if(PlayerData[playerid][pKlodaEdit] != 0)
		{
			new uid = PlayerData[playerid][pKlodaEdit];
			KlodaData[uid][kPos][0] = x;
			KlodaData[uid][kPos][1] = y;
			KlodaData[uid][kPos][2] = z;
			KlodaData[uid][kPos][3] = rx;
			KlodaData[uid][kPos][4] = ry;
			KlodaData[uid][kPos][5] = rz;
			SaveKloda(uid);
			SendClientMessage(playerid, -1, "{a4a4a4}Kloda zostala zapisana na nowych pozycjach.");
			PlayerData[playerid][pKlodaEdit] = 0;
			return 1;
		}
		if(PlayerData[playerid][pPlamaEdit] != 0)
		{
			new uid = PlayerData[playerid][pPlamaEdit];
			PlamaData[uid][plPos][0] = x;
			PlamaData[uid][plPos][1] = y;
			PlamaData[uid][plPos][2] = z;
			PlamaData[uid][plPos][3] = rx;
			PlamaData[uid][plPos][4] = ry;
			PlamaData[uid][plPos][5] = rz;
			SavePlama(uid);
			SendClientMessage(playerid, -1, "{a4a4a4}Plama zostala zapisana na nowych pozycjach.");
			PlayerData[playerid][pPlamaEdit] = 0;
			return 1;
		}
		if(PlayerData[playerid][pFotoEdit] != 0)
		{
			new uid = PlayerData[playerid][pFotoEdit];
			FotoData[uid][fPos][0] = x;
			FotoData[uid][fPos][1] = y;
			FotoData[uid][fPos][2] = z;
			FotoData[uid][fPos][3] = rx;
			FotoData[uid][fPos][4] = ry;
			FotoData[uid][fPos][5] = rz;
			SaveFoto(uid);
			SendClientMessage(playerid, -1, "{a4a4a4}Fotoradar zostal zapisany na nowych pozycjach.");
			PlayerData[playerid][pFotoEdit] = 0;
			return 1;
		}
		if(PlayerData[playerid][pViaEdit] != 0)
		{
			new uid = PlayerData[playerid][pViaEdit];
			ViatollData[uid][vPos][0] = x;
			ViatollData[uid][vPos][1] = y;
			ViatollData[uid][vPos][2] = z;
			ViatollData[uid][vPos][3] = rx;
			ViatollData[uid][vPos][4] = ry;
			ViatollData[uid][vPos][5] = rz;
			SaveViatoll(uid);
			SendClientMessage(playerid, -1, "{a4a4a4}Bramka viatoll zostala zapisany na nowych pozycjach.");
			PlayerData[playerid][pViaEdit] = 0;
			return 1;
		}
		if(PlayerData[playerid][pObjectEdit] != 0)
		{
			new uid = PlayerData[playerid][pObjectEdit];
			ObjectData[uid][bAktywny] = 1;
			ObjectData[uid][bPos][0] = x;
			ObjectData[uid][bPos][1] = y;
			ObjectData[uid][bPos][2] = z;
			ObjectData[uid][bPos][3] = rx;
			ObjectData[uid][bPos][4] = ry;
			ObjectData[uid][bPos][5] = rz;
			SaveObject(uid);
			SendClientMessage(playerid, -1, "{a4a4a4}Obiekt zostal zapisany na nowych pozycjach.");
			PlayerData[playerid][pObjectEdit] = 0;
			PlayerData[playerid][pObjectSelectAction] = 0;
			PlayerObiektPanel(playerid, 2);
		}
		if(PlayerData[playerid][pGymEdit] != 0)
		{
			new uid = PlayerData[playerid][pGymEdit];
			GymData[uid][gPos][0] = x;
			GymData[uid][gPos][1] = y;
			GymData[uid][gPos][2] = z;
			GymData[uid][gPos][3] = rx;
			GymData[uid][gPos][4] = ry;
			GymData[uid][gPos][5] = rz;
			SaveGym(uid);
			SendClientMessage(playerid, -1, "{a4a4a4}Maszyna do cwiczen zostala zapisany na nowych pozycjach.");
			PlayerData[playerid][pGymEdit] = 0;
			PlayerData[playerid][pPlayerGymEdit] = uid;
            
			if(PlayerData[playerid][pGymEditCommand] != 0)
			{
				SendClientMessage(playerid, -1, "{a4a4a4}Stan przed maszyna do cwiczen i wpisz /editgym (bez parametrow).");
                PlayerData[playerid][pGymEditCommand] = uid;
			}
            else
            {
                SendClientMessage(playerid, -1, "{a4a4a4}Stan przed maszyna do cwiczen i wpisz /addgym (bez parametrow).");
            }
			return 1;
		}
        if(PlayerData[playerid][pAddCloseGate] != 0)
        {
            new uid = PlayerData[playerid][pAddCloseGate];
            GateData[uid][gPos][0] = x;
            GateData[uid][gPos][1] = y;
            GateData[uid][gPos][2] = z;
            GateData[uid][gPos][3] = rx;
            GateData[uid][gPos][4] = ry;
            GateData[uid][gPos][5] = rz;
            PlayerData[playerid][pAddCloseGate] = 0;
            PlayerData[playerid][pAddOpenGate] = uid;
            SCM(playerid, -1, "{a4a4a4}Ustaw brame w pozycji otwartej.");
            EditDynamicObject(playerid, GateData[uid][gObject]);
            return 1;
        }
        if(PlayerData[playerid][pAddOpenGate] != 0)
        {
            new uid = PlayerData[playerid][pAddOpenGate];
            GateData[uid][gPos][6] = x;
            GateData[uid][gPos][7] = y;
            GateData[uid][gPos][8] = z;
            GateData[uid][gPos][9] = rx;
            GateData[uid][gPos][10] = ry;
            GateData[uid][gPos][11] = rz;
            PlayerData[playerid][pAddOpenGate] = 0;
            PlayerData[playerid][pAddCloseGate] = 0;
            DestroyDynamicObject(GateData[uid][gObject]);
            SCM(playerid, -1, "{a4a4a4}Pozycje bramy zostaly zapisane");
            SCM(playerid, -1, "{a4a4a4}Podejdz w miejsce terminalu otwierania bramy i wcisnij klawisz {d90036}H");
            PlayerData[playerid][pAddGateTerminal] = uid;
            return 1;
        }


	}
	if(!response)
	{
		PlayerData[playerid][pObjectSelectAction] = 0;
		EditDynamicObject(playerid, objectid);
		GameTextForPlayer(playerid, "~r~Nacisnij ikonke dyskietki.", 5000, 3);
		return 1;
	}
	return 1;
}

forward restart();
public restart()
{
	SendRconCommand("gmx");
	return 1;
}


forward PrzypTexty();
public PrzypTexty()
{
	SendClientMessageToAll(CZERWONY, PrzypText[random(sizeof(PrzypText))]);
	return 1;
}


forward ZmienHostName();
public ZmienHostName()
{
	new string[250];
	new i = random(sizeof(HostNames));
	format(string, sizeof(string), "hostname %s",HostNames[i]);
	SendRconCommand(string);
	return 1;
}

forward ZmienMapname();
public ZmienMapname()
{
	new string[250];
	new i = random(sizeof(Mapname));
	format(string, sizeof(string), "mapname %s",Mapname[i]);
	SendRconCommand(string);
	return 1;
}
		
forward OnPlayerSkinSelect(playerid, newskin, oldskin);
public OnPlayerSkinSelect(playerid, newskin, oldskin)
{
	new puid = PlayerData[playerid][pLastPickupUID];
	new ptyp = PickupData[puid][pType];
	new data[128];
    if(ptyp == 10) // Pomoc drogowa
    {
        if(GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA))
        {
            if(PlayerData[playerid][pSluzba] == false)
            {
                SetPlayerSkin(playerid, newskin);
                PlayerData[playerid][pSluzba] = true;
                GameTextForPlayer(playerid, "[PTR-Serw]~g~Rozpoczynasz sluzbe w tej frakcji", 1500, 3);
                format(data,sizeof(data), "[PTR-Serw]{FF4000} Mechanik [%d]%s rozpoczyna sluzbe", playerid, PlayerData[playerid][pName]);
                SendClientMessageToAll(-1, data);
				SetPlayerColor(playerid, RGBAToHex(124, 124, 124, 255));
                return 1;
            }
            else
            {
                SetPlayerSkin(playerid, newskin);
                return 1;
            }
        }
        else
        {
           SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz uprawnien, aby to zrobic.");
           return 1;
        }
    }
	if(ptyp == 9) // Straznik Graniczny
	{
		if(GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_GRANICZNA))
        {
            if(PlayerData[playerid][pSluzba] == false)
            {
                SetPlayerSkin(playerid, newskin);
                PlayerData[playerid][pSluzba] = true;
                GameTextForPlayer(playerid, "[PTR-Serw]~g~Rozpoczynasz sluzbe w tej frakcji", 1500, 3);
                format(data,sizeof(data), "[PTR-Serw]{FF4000} Straznik Graniczny [%d]%s rozpoczyna sluzbe", playerid, PlayerData[playerid][pName]);
                SendClientMessageToAll(-1, data);
				SetPlayerColor(playerid, RGBAToHex(255, 255, 255, 0));
				sg++;
				for(new i = 0; i < obiekt_value; i++)
				{
					if(ObjectData[i][bAktywny] == 1 && ObjectData[i][oType] == 2)
					{
						new string[500];
						format(string, sizeof(string), "{00b300}Przejazd graniczny\n{00ffff}Szlaban otwiera {d90000}staraznik graniczny!");
						UpdateDynamic3DTextLabelText(ObjectData[i][oText3D], -1, string);
					}
				}
                return 1;
            }
            else
            {
                SetPlayerSkin(playerid, newskin);
                return 1;
            }
        }
        else
        {
           SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz uprawnien, aby to zrobic.");
           return 1;
        }
	}
	if(ptyp == 8) // Straznik Miejski
	{
		 if(GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_MIEJSKA))
        {
            if(PlayerData[playerid][pSluzba] == false)
            {
                SetPlayerSkin(playerid, newskin);
                PlayerData[playerid][pSluzba] = true;
                GameTextForPlayer(playerid, "[PTR-Serw]~g~Rozpoczynasz sluzbe w tej frakcji", 1500, 3);
                format(data,sizeof(data), "[PTR-Serw]{FF4000} Frakcja-Wolna [%d]%s rozpoczyna sluzbe", playerid, PlayerData[playerid][pName]);
                SendClientMessageToAll(-1, data);
				SetPlayerColor(playerid, RGBAToHex(255, 255, 255, 0));
                return 1;
            }
            else
            {
                SetPlayerSkin(playerid, newskin);
                return 1;
            }
        }
        else
        {
           SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz uprawnien, aby to zrobic.");
           return 1;
        }
	}
	if(ptyp == 5) // Policja
	{
        if(GetPlayerFrakcja(playerid, FRAKCJA_POLICJI))
        {
            if(PlayerData[playerid][pSluzba] == false)
            {
                SetPlayerSkin(playerid, newskin);
                PlayerData[playerid][pSluzba] = true;
                GameTextForPlayer(playerid, "[PTR-Serw]~g~Rozpoczynasz sluzbe w tej frakcji", 1500, 3);
                format(data,sizeof(data), "[PTR-Serw]{FF4000} Policjant [%d]%s rozpoczyna sluzbe", playerid, PlayerData[playerid][pName]);
                SendClientMessageToAll(-1, data);
				SetPlayerColor(playerid, RGBAToHex(255, 255, 255, 0));
                return 1;
            }
            else
            {
                SetPlayerSkin(playerid, newskin);
                return 1;
            }
        }
        else
        {
           SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz uprawnien, aby to zrobic.");
           return 1;
        }
	}
	if(ptyp == 6) // Taxi
	{
		 if(GetPlayerFrakcja(playerid, FRAKCJA_TAXI))
        {
            if(PlayerData[playerid][pSluzba] == false)
            {
                SetPlayerSkin(playerid, newskin);
                PlayerData[playerid][pSluzba] = true;
                GameTextForPlayer(playerid, "[PTR-Serw]~g~Rozpoczynasz sluzbe w tej frakcji", 1500, 3);
                format(data,sizeof(data), "[PTR-Serw]{FF4000} Taksowkarz [%d]%s rozpoczyna sluzbe", playerid, PlayerData[playerid][pName]);
                SendClientMessageToAll(-1, data);
				SetPlayerColor(playerid, RGBAToHex(255, 255, 0, 255));
                return 1;
            }
            else
            {
                SetPlayerSkin(playerid, newskin);
                return 1;
            }
        }
        else
        {
           SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz uprawnien, aby to zrobic.");
           return 1;
        }
	}
	if(ptyp == 12) // Straz pozarna
	{
		if(GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_POZARNA))
        {
            if(PlayerData[playerid][pSluzba] == false)
            {
                SetPlayerSkin(playerid, newskin);
                PlayerData[playerid][pSluzba] = true;
                GameTextForPlayer(playerid, "[PTR-Serw]~g~Rozpoczynasz sluzbe w tej frakcji", 1500, 3);
                format(data,sizeof(data), "[PTR-Serw]{FF4000} Strazak [%d]%s rozpoczyna sluzbe", playerid, PlayerData[playerid][pName]);
                SendClientMessageToAll(-1, data);
				SetPlayerColor(playerid, RGBAToHex(255, 165, 0, 255));
                return 1;
            }
            else
            {
                SetPlayerSkin(playerid, newskin);
                return 1;
            }
        }
        else
        {
           SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz uprawnien, aby to zrobic.");
           return 1;
        }
	}	
    if(ptyp == 7) // SanNews
	{
		if(GetPlayerFrakcja(playerid, FRAKCJA_SAN_NEWS))
        {
            if(PlayerData[playerid][pSluzba] == false)
            {
                SetPlayerSkin(playerid, newskin);
                PlayerData[playerid][pSluzba] = true;
                GameTextForPlayer(playerid, "[PTR-Serw]~g~Rozpoczynasz sluzbe w tej frakcji", 1500, 3);
                format(data,sizeof(data), "[PTR-Serw]{FF4000} Redaktor [%d]%s rozpoczyna sluzbe", playerid, PlayerData[playerid][pName]);
                SendClientMessageToAll(-1, data);
				SetPlayerColor(playerid, RGBAToHex(0, 0, 255, 255));
                return 1;
            }
            else
            {
                SetPlayerSkin(playerid, newskin);
                return 1;
            }
        }
        else
        {
           SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz uprawnien, aby to zrobic.");
           return 1;
        }
	}
    if(ptyp == 11) // Pogotowie
	{
		if(GetPlayerFrakcja(playerid, FRAKCJA_POGOTOWIA))
        {
            if(PlayerData[playerid][pSluzba] == false)
            {
                SetPlayerSkin(playerid, newskin);
                PlayerData[playerid][pSluzba] = true;
                GameTextForPlayer(playerid, "[PTR-Serw]~g~Rozpoczynasz sluzbe w tej frakcji", 1500, 3);
                format(data,sizeof(data), "[PTR-Serw]{FF4000} Ratownik Medyczny [%d]%s rozpoczyna sluzbe", playerid, PlayerData[playerid][pName]);
                SendClientMessageToAll(-1, data);
				SetPlayerColor(playerid, RGBAToHex(102, 255, 204, 255));
                return 1;
            }
            else
            {
                SetPlayerSkin(playerid, newskin);
                return 1;
            }
        }
        else
        {
           SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz uprawnien, aby to zrobic.");
           return 1;
        }
	}
    if(ptyp == 11) // Gang Olsena
	{
		if(GetPlayerFrakcja(playerid, FRAKCJA_GANG_OLSENA))
        {
            if(PlayerData[playerid][pSluzba] == false)
            {
                SetPlayerSkin(playerid, newskin);
                PlayerData[playerid][pSluzba] = true;
                GameTextForPlayer(playerid, "[PTR-Serw]~g~Rozpoczynasz rzez w tej frakcji", 1500, 3);
                format(data,sizeof(data), "[PTR-Serw]{FF4000} Frakcja-Wolna [%d]%s rozpoczyna rzez", playerid, PlayerData[playerid][pName]);
                SendClientMessageToAll(-1, data);
				SetPlayerColor(playerid, RGBAToHex(38, 38, 38, 255));
                return 1;
            }
            else
            {
               SetPlayerSkin(playerid, newskin);
                return 1;
            }
        }
        else
        {
           SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz uprawnien, aby to zrobic.");
           return 1;
        }
	}
    
  
    
	if(pozar_activity != -1)
	{
		new findd = pozar_activity, stop_spam_messagee[MAX_PLAYERS], Float:ActorPoss[3], ActorCJJ;
		ActorCJJ = CreateActor(0, PozarData[findd][pfPos][0], PozarData[findd][pfPos][1], PozarData[findd][pfPos][2], 0.0);
		GetActorPos(ActorCJJ, ActorPoss[0],  ActorPoss[1],  ActorPoss[2]);
			 
		for(new x = 0; x != MAX_POZARY; x++)
		{
			if(PozarData[x][pfAktywny] == 0) continue;
			if(!IsActorInRangeOfPoint(ActorCJJ, 150.0, ActorPoss[0],  ActorPoss[1],  ActorPoss[2])) continue;
			PozarData[x][pfStatus] = 1;
			PozarData[x][pfHP] = 100.0;
			SavePozar(x, 0);
				
			for(new playeriddd = 0, j = GetPlayerPoolSize(); playeriddd <= j; playeriddd++)
			{
				if(IsValidDynamicCP(PlayerData[playeriddd][pPozarCP][x])) DestroyDynamicCP(PlayerData[playeriddd][pPozarCP][x]);
				PlayerData[playeriddd][pPozarCP][x] = CreateDynamicCP(PozarData[x][pfPos][0], PozarData[x][pfPos][1], PozarData[x][pfPos][2], 1.5, -1, -1, playeriddd, 10000.0);

				if(stop_spam_messagee[playeriddd] == 0)
				{
					PlayerPlaySound(playeriddd, 3017, 0.0, 0.0, 0.0);
					SendClientMessage(playeriddd, -1, "{74DF00}UWAGA!! Wybuchl pozar, miejsce zdarzenia zostalo zaznaczone na twoim radarze czerwonym punktem.");
				}
				stop_spam_messagee[playeriddd] = 999;
			}
		}
		DestroyActor(ActorCJJ);
	}

	if(kloda_activity != -1)
	{
		new stop_spam_message[MAX_PLAYERS];
			 
		if(KlodaData[kloda_activity][kAktywny] == 0) return 1;
				
		for(new playeridd = 0, j = GetPlayerPoolSize(); playeridd <= j; playeridd++)
		{
			if(IsValidDynamicCP(PlayerData[playeridd][pKlodaCP][kloda_activity])) DestroyDynamicCP(PlayerData[playeridd][pKlodaCP][kloda_activity]);
			PlayerData[playeridd][pKlodaCP][kloda_activity] = CreateDynamicCP(KlodaData[kloda_activity][kPos][0], KlodaData[kloda_activity][kPos][1], KlodaData[kloda_activity][kPos][2], 1.5, -1, -1, playeridd, 10000.0);
			if(stop_spam_message[playeridd] == 0)
			{
				PlayerPlaySound(playeridd, 3017, 0.0, 0.0, 0.0);
				SendClientMessage(playeridd, -1, "{74DF00}UWAGA!! Kloda opadla na ziemie i prawdopodobnie blokuje ruch drogowy, jedz na miejsce i odblokuj ruch.");
			}
			stop_spam_message[playeridd] = 999;
		}
		return 1;
	}

	if(plama_activity != -1)
	{
		new stop_spam_message[MAX_PLAYERS];
			 
		if(PlamaData[plama_activity][plAktywny] == 0) return 1;
				
		for(new playeridd = 0, j = GetPlayerPoolSize(); playeridd <= j; playeridd++)
		{
			if(IsValidDynamicCP(PlayerData[playeridd][pPlamaCP][plama_activity])) DestroyDynamicCP(PlayerData[playeridd][pPlamaCP][plama_activity]);
			PlayerData[playeridd][pPlamaCP][plama_activity] = CreateDynamicCP(PlamaData[plama_activity][plPos][0], PlamaData[plama_activity][plPos][1], PlamaData[plama_activity][plPos][2], 1.5, -1, -1, playeridd, 10000.0);
			if(stop_spam_message[playeridd] == 0)
			{
				PlayerPlaySound(playeridd, 3017, 0.0, 0.0, 0.0);
				SendClientMessage(playeridd, -1, "{74DF00}UWAGA!! Jakis pojazd pozostawil po sobie slad w postaci plamy oleju! Znautralizuj ja!");
			}
			stop_spam_message[playeridd] = 999;
		}
		return 1;
	}
	
	if(ptyp == 15) // Sklep z odzieza
	{
		if(GetPlayerCash(playerid) < SETTINGS_PRICE_SKIN) return SendClientMessage(playerid,-1,"{a4a4a4}Nie posiadasz $SETTINGS_PRICE_SKIN na zakup tego ubrania.");
		if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
		
		GivePlayerCash(playerid, -SETTINGS_PRICE_SKIN);
		
		new l_str[24];
		format(l_str,sizeof(l_str),"Ubranie (%d)", newskin);
		CreatePlayerItem(playerid, l_str, TYPE_ITEM_UBRANIE, newskin, -1);
		
		SendClientMessage(playerid, -1, "{a4a4a4}Zakupiles nowe ubranie, mozesz przebrac sie pod komenda /p wybierajac swoje ubranie.");
		return 1;
	}
	return 1;
}


public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	//Panel napadu
	if(playertextid == Txd_napadp[playerid][3] || playertextid == Txd_napadp[playerid][1]) // Dolacz i C_TURKUSOWY prostokat
	{
		if(PlayerData[playerid][pFrakcja] != NapadData[nFrakcja] && GetPlayerFrakcja(playerid, FRAKCJA_POLICJI)) return SendClientMessage(playerid, -1, "{A4a4a4}Nie nalezysz do frakcji gdzie jest organizowany napad.");
		if(PlayerData[playerid][pBuildEnterUID] != NapadData[nBudynekUID]) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie w budynku gdzie jest organizowany napad.");
		if(PlayerData[playerid][pNapadCzlonek] == true) return SendClientMessage(playerid, -1, "{a4a4a4}Dolaczyles juz do napadu.");
		
		if(GetPlayerFrakcja(playerid, FRAKCJA_POLICJI))
		{
			PlayerData[playerid][pNapadCzlonek] = true;
			NapadData[nLudzieLSPD]++;
			GameTextForPlayer(playerid, "~g~DOLACZYLES DO NAPADU JAKO LSPD~n~~r~NA MAPIE ZAZNACZONO CEL", 3000, 3);
			
			new buid = NapadData[nBudynekUID];
			if(IsValidDynamicMapIcon(PlayerData[playerid][pGPSNapad])) DestroyDynamicMapIcon(PlayerData[playerid][pGPSNapad]);
			PlayerData[playerid][pGPSNapad] = CreateDynamicMapIcon(BudynekData[buid][bPos_OUT][0],BudynekData[buid][bPos_OUT][1],BudynekData[buid][bPos_OUT][2], 19, -1, 0, 0, playerid, 100000, MAPICON_GLOBAL_CHECKPOINT);
			return 1;	
		}
		else
		{
			PlayerData[playerid][pNapadCzlonek] = true;
			NapadData[nLudzieOrg]++;
			GameTextForPlayer(playerid, "~g~DOLACZYLES DO NAPADU JAKO CZLONEK", 3000, 3);
		}
		
		if(NapadData[nLudzieOrg] == 3)
		{
			new minut = 5+random(14);
			NapadData[nCzas] = 60*minut+gettime();
			NapadData[nTimer] = SetTimer("NapadTimer", 1000, true);
			PlayerNapadPanel(playerid, 4);
		}
		return 1;
	}
	
	
	
	//Panel specowania
	if(playertextid == Txd_spec_info[playerid][4] ) // Kick
	{
		ShowPlayerDialog(playerid, DIALOG_SPEC_KICK, DIALOG_STYLE_INPUT, "Spec (kick):", "Wpisz ponizej powod wyrzucenia gracza z serwera:",  "Zatwierdz", "Zamknij");
		return 1;
	}
	if(playertextid == Txd_spec_info[playerid][5] ) // warn
	{
		ShowPlayerDialog(playerid, DIALOG_SPEC_WARN, DIALOG_STYLE_INPUT, "Spec (warn):", "Wpisz ponizej powod warna dla tego gracza:",  "Zatwierdz", "Zamknij");
		return 1;
	}
	if(playertextid == Txd_spec_info[playerid][6] ) // ban
	{
		ShowPlayerDialog(playerid, DIALOG_SPEC_BAN, DIALOG_STYLE_INPUT, "Spec (warn):", "Wpisz ponizej powod warna dla tego gracza:\nTip: [Powod] [Dni] [Godzin] [Minut]\nNie musisz uzupelniac pol [dni] [godzin] [minut] jezeli jest to ban perm.",  "Zatwierdz", "Zamknij");
		return 1;
	}

	//Panel kasyna - owoce i cyfry
	/*
		Txd_panelkasyno[playerid][6] //Kwota
		Txd_panelkasyno[playerid][7] //Graj
		Txd_panelkasyno[playerid][8] //Wyjdz
		Txd_panelkasyno[playerid][9] //Cyfra 1
		Txd_panelkasyno[playerid][10] //Cyfra 2
		Txd_panelkasyno[playerid][11] //Cyfra 3
		Txd_panelkasyno[playerid][12] //Owoc 1
		Txd_panelkasyno[playerid][13] //Owoc 2
		Txd_panelkasyno[playerid][14] //Owoc 3
	*/
	if(playertextid == Txd_panelkasyno[playerid][6] ) // KWOTA - WPLACANIE
	{
		new data[200];
		format(data,sizeof(data),"\
									Twoja aktualna kwota to $%d, jezeli wygrasz pomnozysz swoja kwote dwa razy!\n\
									Czyli jezeli wygrasz teraz (stawiajac aktualna kwote $%d) otrzymasz $%d !!\n\
									Wpisz ponizej ile pieniedzy chcesz wplacic maszynce:", PlayerData[playerid][pKasynoWygrana], PlayerData[playerid][pKasynoWygrana], PlayerData[playerid][pKasynoWygrana]*2);
		ShowPlayerDialog(playerid, DIALOG_KASYNO_OWOCE_CYFRY, DIALOG_STYLE_INPUT, "Kasyno (owoce i cyfry):", data,  "Zatwierdz", "Zamknij");
		return 1;
	}
	if(playertextid == Txd_panelkasyno[playerid][7]) // GRAJ - ROZPOCZYNANIE GRY
	{	
		if(PlayerData[playerid][pKasynoPlay] == 1) return 1;
		PlayerData[playerid][pKasynoPlay] = 1;
		PlayerData[playerid][pKasynoTimer] = SetTimerEx("KasynoOwoceCyfryTimer", 500, true, "d", playerid);
		return 1;
	}
	if(playertextid == Txd_panelkasyno[playerid][8]) //ZAMKNIJ 
	{
		PlayerKasynoPanel(playerid, 2);
		return 1;
	}
	
	//Panel telefonu - dla gracza
	if(playertextid == Txd_ptelefon[playerid][3]) // Duzy dolny przycisk telefonu
	{
		return PlayerTelefon1(playerid, 3);
	}
	if(playertextid == Txd_ptelefon[playerid][11]) // Stan konta bankowego
	{
		new data[128], doladowanie;
		format(data,sizeof(data), "SELECT `var3` FROM `data_przedmioty` WHERE `owneruid` = '%d' and `var1` = '%d' or `var1` = '%d' and `uid` = '%d'", PlayerData[playerid][pUID], TYPE_ITEM_TELEFON, TYPE_ITEM_TELEFON_VIP, PlayerData[playerid][pSelectItemUID]);
		mysql_query(data);
		mysql_store_result();
		while(mysql_fetch_row(data, "|"))
		{
			sscanf(data, "p<|>i", doladowanie);
		}
					
		format(data,sizeof(data),"Twoj stan konta bankowego to: $%d\nStan konta doladowania telefonu to: $%d", PlayerData[playerid][pCashBank], doladowanie);
		ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Telefon (stany kont):", data,  "Zamknij", "");
		return PlayerTelefon1(playerid, 3);
	}
	if(playertextid == Txd_ptelefon[playerid][12]) //Pogotowie
	{
		PlayerData[playerid][pWybieraAlarmowe] = 2;
		ShowPlayerDialog(playerid, DIALOG_TELEFON_ALARMOWE_WYBRAL, DIALOG_STYLE_INPUT, "Telefon (alarmowe):", "Wpisz ponizej wiadomosc jaka chcesz wyslac do Pogotowia:", "Zatwierdz", "Zamknij");
		return PlayerTelefon1(playerid, 3);
	}
	if(playertextid == Txd_ptelefon[playerid][13]) //Taxi
	{
		PlayerData[playerid][pWybieraAlarmowe] = 8; 
		ShowPlayerDialog(playerid, DIALOG_TELEFON_ALARMOWE_WYBRAL, DIALOG_STYLE_INPUT, "Telefon (alarmowe):", "Wpisz ponizej wiadomosc jaka chcesz wyslac do Taxi:", "Zatwierdz", "Zamknij");
		return PlayerTelefon1(playerid, 3);
	}
	if(playertextid == Txd_ptelefon[playerid][14]) //Policja
	{
		PlayerData[playerid][pWybieraAlarmowe] = 1; 
		ShowPlayerDialog(playerid, DIALOG_TELEFON_ALARMOWE_WYBRAL, DIALOG_STYLE_INPUT, "Telefon (alarmowe):", "Wpisz ponizej wiadomosc jaka chcesz wyslac do Policji:", "Zatwierdz", "Zamknij");
		return PlayerTelefon1(playerid, 3);
	}
	if(playertextid == Txd_ptelefon[playerid][15]) //Mechanik
	{
		PlayerData[playerid][pWybieraAlarmowe] = 6; 
		ShowPlayerDialog(playerid, DIALOG_TELEFON_ALARMOWE_WYBRAL, DIALOG_STYLE_INPUT, "Telefon (alarmowe):", "Wpisz ponizej wiadomosc jaka chcesz wyslac do Pomocy Drogowej:", "Zatwierdz", "Zamknij");
		return PlayerTelefon1(playerid, 3);
	}
	if(playertextid == Txd_ptelefon[playerid][16]) //Straz pozarna
	{
		PlayerData[playerid][pWybieraAlarmowe] = 5; 
		ShowPlayerDialog(playerid, DIALOG_TELEFON_ALARMOWE_WYBRAL, DIALOG_STYLE_INPUT, "Telefon (alarmowe):", "Wpisz ponizej wiadomosc jaka chcesz wyslac do Strazy Pozarnej:", "Zatwierdz", "Zamknij");
		return PlayerTelefon1(playerid, 3);
	}
	if(playertextid == Txd_ptelefon[playerid][17]) //Straz Miejska
	{
		PlayerData[playerid][pWybieraAlarmowe] = 3; 
		ShowPlayerDialog(playerid, DIALOG_TELEFON_ALARMOWE_WYBRAL, DIALOG_STYLE_INPUT, "Telefon (alarmowe):", "Wpisz ponizej wiadomosc jaka chcesz wyslac do Strazy Miejskiej:", "Zatwierdz", "Zamknij");
		return PlayerTelefon1(playerid, 3);
	}
	if(playertextid == Txd_ptelefon[playerid][18]) //Wiadomosc SMS
	{
		ShowPlayerDialog(playerid, DIALOG_TELEFON_SMS, DIALOG_STYLE_INPUT, "Telefon (sms):", "Wpisz ponizej id gracza oraz tresc sms-a.\nTyp: [id] [tresc]", "Zatwierdz", "Zamknij");
		return PlayerTelefon1(playerid, 3);
	}

	//Panel wybierania towaru (chodzi o typy)
	if(playertextid == Txd_towarwybierz[playerid][2]) // LEGALNE
	{
		new godzina, data[300] = "uid\tTowar\n", x = 0;
		gettime(godzina);
		
		for(new i = 0; i != MAX_TOWARY; i++)
		{
			if(TowarData[i][tTowarStan] == 1) // towar aktywny
			{
				if(TowarData[i][tTowarRequiste] == 0 || TowarData[i][tTowarRequiste] == 1) // towar dla wszystkich || dla gracza
				{
					if(TowarData[i][tLegalny] == 1) // towar legalny
					{			
						//if(godzina < TowarData[i][tOdGodz] && godzina > TowarData[i][tDoGodz]) // towar jest w danych godzinach
						//{
							PlayerData[playerid][pCheckTowarUID][x]=i;
							x++;
							format(data,sizeof(data), \
													   "%s\
														%d\t\
														%s\n\									
														", data, i, TowarData[i][tNazwa]);
						//}							
					}							
				}							
			}
		}
		
		if(x == 0) return  GameTextForPlayer(playerid, "~r~Brak towarow - calkiem mozliwe, ze nie ma obecnie zadnego stworzonego towaru..", 1500, 3);
		ShowPlayerDialog(playerid, DIALOG_TOWARY, DIALOG_STYLE_TABLIST_HEADERS, "Towary:", data,  "Wybierz", "Zamknij");
		cmd_towary(playerid);
		return 1;
	}
	if(playertextid == Txd_towarwybierz[playerid][3]) // NIE LEGALNE
	{
		new godzina, data[300] = "uid\tTowar\n", x = 0;
		gettime(godzina);
		
		for(new i = 0; i != MAX_TOWARY; i++)
		{
			if(TowarData[i][tTowarStan] == 1) // towar aktywny
			{
				if(TowarData[i][tTowarRequiste] == 0 || TowarData[i][tTowarRequiste] == 1) // towar dla wszystkich || dla gracza
				{
					if(TowarData[i][tLegalny] == 0) // towar nie legalny
					{			
						//if(godzina < TowarData[i][tOdGodz] && godzina > TowarData[i][tDoGodz]) // towar jest w danych godzinach
						//{
							PlayerData[playerid][pCheckTowarUID][x]=i;
							x++;
							format(data,sizeof(data), \
													   "%s\
														%d\t\
														%s\n\									
														", data, i, TowarData[i][tNazwa]);
						//}							
					}							
				}							
			}
		}
		
		if(x == 0) return  GameTextForPlayer(playerid, "~r~Brak towarow - calkiem mozliwe, ze nie ma obecnie zadnego stworzonego towaru..", 1500, 3);
		ShowPlayerDialog(playerid, DIALOG_TOWARY, DIALOG_STYLE_TABLIST_HEADERS, "Towary:", data,  "Wybierz", "Zamknij");
		cmd_towary(playerid);
		return 1;
	}
	if(playertextid == Txd_towarwybierz[playerid][4]) // PREMIUM
	{
		if(!GetPlayerVipStatus(playerid)) return GameTextForPlayer(playerid, "~y~Nie masz konta premium", 1500, 3);
		new godzina, data[300] = "uid\tTowar\n", x = 0;
		gettime(godzina);
		
		
		for(new i = 0; i != MAX_TOWARY; i++)
		{
			if(TowarData[i][tTowarStan] == 1) // towar aktywny
			{
				if(TowarData[i][tTowarRequiste] == 0 || TowarData[i][tTowarRequiste] == 1) // towar dla wszystkich || dla vip
				{		
					//if(godzina < TowarData[i][tOdGodz] && godzina > TowarData[i][tDoGodz]) // towar jest w danych godzinach
					//{
						PlayerData[playerid][pCheckTowarUID][x]=i;
						x++;
						format(data,sizeof(data), \
											   "%s\
												%d\t\
												%s\n\									
												", data, i, TowarData[i][tNazwa]);										
					//}														

				}							
			}
		}
		
		if(x == 0) return  GameTextForPlayer(playerid, "~r~Brak towarow - calkiem mozliwe, ze nie ma obecnie zadnego stworzonego towaru..", 1500, 3);
		ShowPlayerDialog(playerid, DIALOG_TOWARY, DIALOG_STYLE_TABLIST_HEADERS, "Towary:", data,  "Wybierz", "Zamknij");
		cmd_towary(playerid);
		return 1;
	}
	
	//Panel firmy
	if(playertextid == Txd_panelfirmy[playerid][2]) //Dodaj nowego pracownika...
	{
		if(PlayerData[playerid][pFirmaRanga] < 2) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes liderem firmy.");
		new fuid = PlayerData[playerid][pFirma];
		if(FirmaData[fuid][fPeople] >= 15) return SendClientMessage(playerid, -1, "{a4a4a4}Firma posiada 15/15 pracownikow.");
		ShowPlayerDialog(playerid, DIALOG_PANEL_FIRMY_DODAJ, DIALOG_STYLE_INPUT, "Panel firmy (zatrudnienie):", "Wpisz ponizej ID GRACZA, ktorego chcesz dodac do firmy:",  "Zatwierdz", "Zamknij");
		cmd_firma(playerid);
		return 1;
	}
	if(playertextid == Txd_panelfirmy[playerid][3]) //Zwolnij pracownika..
	{
		if(PlayerData[playerid][pFirmaRanga] < 2) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes liderem firmy.");
		ShowPlayerDialog(playerid, DIALOG_PANEL_FIRMY_ZWOLNIJ, DIALOG_STYLE_INPUT, "Panel firmy (zwolnij):", "Wpisz ponizej UID GRACZA, ktorego chcesz zwolnic (uid znajdziesz na liscie pracownikow!):",  "Zatwierdz", "Zamknij");
		cmd_firma(playerid);
		return 1;
	}
	if(playertextid == Txd_panelfirmy[playerid][4]) //Lista pracownikow
	{
		new x = 0, dataa[300], dataaa[1000], get_nick[24], get_uid, get_playerid, get_firma_ranga, str_ranga[24];
		
		dataaa = "UID\tNICK\tSTATUS\tRANGA\n";
		
		format(dataa,sizeof(dataa), "SELECT `uid`, `nick`, `playerid`, `firma_ranga`  FROM `data_players` WHERE `firma` = '%d'", PlayerData[playerid][pFirma]);
		mysql_query(dataa);
		mysql_store_result();
		while(mysql_fetch_row(dataa, "|"))
		{
			sscanf(dataa, "p<|>is[24]ii", get_uid, get_nick, get_playerid, get_firma_ranga);
			
			PlayerData[playerid][pListPlayers][x] = get_uid;
			x++;
			
			switch(get_firma_ranga)
			{
				case 0: str_ranga = "Kierowca";
				case 1: str_ranga = "Zasluzony";
				case 2: str_ranga = "Vice Szef";
				case 3: str_ranga = "Szef";
			}
			
			format(dataaa,sizeof(dataaa),"%s\	
											%d\t\
											%s\t\
											%s\t\
											%s\n",
											dataaa,
											get_uid,
											get_nick,
											((get_playerid != -1) ? ("Online") : ("Offline")),
											str_ranga
											);
			
		}
		ShowPlayerDialog(playerid, DIALOG_PANEL_FIRMY_LISTA, DIALOG_STYLE_TABLIST_HEADERS, "Panel firmy (pracownicy):", dataaa, "Wybierz", "Zamknij");
		cmd_firma(playerid);
		return 1;
	}
	if(playertextid == Txd_panelfirmy[playerid][5]) //Wplac
	{
		ShowPlayerDialog(playerid, DIALOG_PANEL_FIRMY_WPLAC, DIALOG_STYLE_INPUT, "Panel firmy (wplata):", "Wpisz ponizej kwote jaka chcesz wplacic na konto tej firmy.",  "Zatwierdz", "Zamknij");
		cmd_firma(playerid);
		return 1;
	}
	if(playertextid == Txd_panelfirmy[playerid][6]) //Wyplac
	{
		if(PlayerData[playerid][pFirmaRanga] < 2) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes liderem firmy.");
		ShowPlayerDialog(playerid, DIALOG_PANEL_FIRMY_WYPLAC, DIALOG_STYLE_INPUT, "Panel firmy (wyplac):", "Wpisz ponizej kwote jaka chcesz wyplacic z konta tej firmy.",  "Zatwierdz", "Zamknij");
		cmd_firma(playerid);
		return 1;
	}
	if(playertextid == Txd_panelfirmy[playerid][7]) //Statystyki
	{
		new data[300], fuid = PlayerData[playerid][pFirma];
		
		format(data,sizeof(data),"\
									Statystyki firmy (%s) (UID: %d):\n\
									Lider: %s\n\
									Poziom: %d/%d\n\
									Exp: %d/%d\n\
									Stan konta: $%d\n\
									Ilosc pracownikow: %d/15\n\
									Laczna ilosc dowiezionych towarow: %d\n\	
		", 
		FirmaData[fuid][fName], 
		fuid,
		FirmaData[fuid][fOwner], 
		FirmaData[fuid][fLevel], 
		MAX_FIRMA_LEVEL,
		FirmaData[fuid][fExp], 
		GetNextExpToLevelFirma(fuid),
		FirmaData[fuid][fSaldo], 
		FirmaData[fuid][fPeople], 
		FirmaData[fuid][fTowary]
		);
		ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Panel firmy (statystyki):", data,  "Zamknij", "");
		cmd_firma(playerid);
		return 1;
	}
	if(playertextid == Txd_panelfirmy[playerid][8]) //Ustaw range
	{
		new x = 0, dataa[300], dataaa[1000], get_nick[24], get_uid, get_playerid, get_firma_ranga, str_ranga[24];
		
		dataaa = "UID\tNICK\tSTATUS\tRANGA\n";
		
		format(dataa,sizeof(dataa), "SELECT `uid`, `nick`, `playerid`, `firma_ranga`  FROM `data_players` WHERE `firma` = '%d'", PlayerData[playerid][pFirma]);
		mysql_query(dataa);
		mysql_store_result();
		while(mysql_fetch_row(dataa, "|"))
		{
			sscanf(dataa, "p<|>is[24]ii", get_uid, get_nick, get_playerid, get_firma_ranga);
			
			PlayerData[playerid][pListPlayers][x] = get_uid;
			x++;
			
			switch(get_firma_ranga)
			{
				case 0: str_ranga = "Kierowca";
				case 1: str_ranga = "Zasluzony";
				case 2: str_ranga = "Vice Szef";
				case 3: str_ranga = "Szef";
			}
			
			format(dataaa,sizeof(dataaa),"%s\	
											%d\t\
											%s\t\
											%s\t\
											%s\n",
											dataaa,
											get_uid,
											get_nick,
											((get_playerid != -1) ? ("Online") : ("Offline")),
											str_ranga
											);
			
		}
		ShowPlayerDialog(playerid, DIALOG_PANEL_FIRMY_RANGA, DIALOG_STYLE_TABLIST_HEADERS, "Panel firmy (ranga):", dataaa, "Wybierz", "Zamknij");
		cmd_firma(playerid);
		return 1;
	}
	if(playertextid == Txd_panelfirmy[playerid][9]) //Pojazdy firmowe
	{
		new data[300], dataa[1000], i, get_zlom, get_uid, get_sampid, get_model, Float:get_hp, Float:get_przebieg;
		format(data,sizeof(data),"SELECT uid, sampid, model, hp, przebieg FROM `data_vehicles` where `firmy` = '%d'", PlayerData[playerid][pFirma]);
		mysql_query(data);
		mysql_store_result();

		dataa = "uid\tpojazd\thp\tprzebieg\n";
		while(mysql_fetch_row(data, "|"))
		{
			sscanf(data, "p<|>iiiffi", get_uid, get_sampid, get_model, get_hp, get_przebieg, get_zlom);
			PlayerData[playerid][pCheckVehicleUID][i]=get_uid;
			i++;
			
			
			if(get_sampid != -1)
			{
				GetVehicleHealth(get_sampid, VehicleData[get_sampid][vHP]);
				format(dataa,sizeof(dataa),"%s{04B404}%d\t%s\t%f\t%f\n",
											dataa,
											get_uid,
											CarList[get_model-400],
											VehicleData[get_sampid][vHP],
											VehicleData[get_sampid][vPrzebieg]);
			}
			else
			{
				format(dataa,sizeof(dataa),"%s{FF0000}%d\t%s\t%f\t%f%s\n",
											dataa,
											get_uid,
											CarList[get_model-400],
											get_hp,
											get_przebieg, 
											((get_zlom == 1) ? (" (Zezlomowany)") : ("")));
			}
		}
		if(i == 0) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Panel firmy (pojazdy):", "Firma nie posiada zadnych pojazdow.",  "Zamknij", "");
		ShowPlayerDialog(playerid, DIALOG_PANEL_FIRMY_VEHICLES, DIALOG_STYLE_TABLIST_HEADERS, "Panel firmy (pojazdy):", dataa, "Opcje", "Zamknij");
		cmd_firma(playerid);
		return 1;
	}
	
	if(playertextid == Txd_panelfirmy[playerid][11]) //statystyki pracownika
	{
		new x = 0, dataa[300], dataaa[1000], get_nick[24], get_uid, get_playerid, get_firma_ranga, str_ranga[24];
		
		dataaa = "UID\tNICK\tSTATUS\tRANGA\n";
		
		format(dataa,sizeof(dataa), "SELECT `uid`, `nick`, `playerid`, `firma_ranga`  FROM `data_players` WHERE `firma` = '%d'", PlayerData[playerid][pFirma]);
		mysql_query(dataa);
		mysql_store_result();
		while(mysql_fetch_row(dataa, "|"))
		{
			sscanf(dataa, "p<|>is[24]ii", get_uid, get_nick, get_playerid, get_firma_ranga);
			
			PlayerData[playerid][pListPlayers][x] = get_uid;
			x++;
			
			switch(get_firma_ranga)
			{
				case 0: str_ranga = "Kierowca";
				case 1: str_ranga = "Zasluzony";
				case 2: str_ranga = "Vice Szef";
				case 3: str_ranga = "Szef";
			}
			
			format(dataaa,sizeof(dataaa),"%s\	
											%d\t\
											%s\t\
											%s\t\
											%s\n",
											dataaa,
											get_uid,
											get_nick,
											((get_playerid != -1) ? ("Online") : ("Offline")),
											str_ranga
											);
			
		}
		ShowPlayerDialog(playerid, DIALOG_PANEL_FIRMY_STATY_MEMBER, DIALOG_STYLE_TABLIST_HEADERS, "Panel firmy (pracownicy):", dataaa, "Wybierz", "Zamknij");
		cmd_firma(playerid);
		return 1;
	}
	
	if(playertextid == Txd_panelfirmy[playerid][10]) //Zamknij
	{
		cmd_firma(playerid);
		return 1;
	}
	
	
	//Panel frakcyjny
	if(playertextid == Txd_panelfrakcji[playerid][2]) //Dodaj nowego pracownika...
	{
		if(PlayerData[playerid][pLider] != 1 && PlayerData[playerid][pLider] != 3) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes liderem frakcji.");
		ShowPlayerDialog(playerid, DIALOG_PANEL_FRAKCJI_DODAJ, DIALOG_STYLE_INPUT, "Panel frakcji (zatrudnienie):", "Wpisz ponizej ID GRACZA, ktorego chcesz dodac do frakcji:",  "Zatwierdz", "Zamknij");
		return 1;
	}
	if(playertextid == Txd_panelfrakcji[playerid][3]) //Zwolnij pracownika
	{
		if(PlayerData[playerid][pLider] != 1 && PlayerData[playerid][pLider] != 3) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes liderem frakcji.");
		ShowPlayerDialog(playerid, DIALOG_PANEL_FRAKCJI_ZWOLNIJ, DIALOG_STYLE_INPUT, "Panel frakcji (zwolnij):", "Wpisz ponizej UID GRACZA, ktorego chcesz zwolnic (uid znajdziesz na liscie pracownikow!):",  "Zatwierdz", "Zamknij");
		return 1;
	}
	if(playertextid == Txd_panelfrakcji[playerid][4]) //lista pracownikow
	{
		new x = 0, dataa[300], dataaa[1000], get_nick[24], get_uid, get_playerid, get_czas_godz_sluz, get_czas_min_sluz;
		
		dataaa = "UID\tNICK\tSTATUS\tSLUUZBA\n";
		
		format(dataa,sizeof(dataa), "SELECT `uid`, `nick`, `playerid`, `czas_godziny_sluzba`, `czas_minuty_sluzba` FROM `data_players` WHERE `frakcja` = '%d'", PlayerData[playerid][pFrakcja]);
		mysql_query(dataa);
		mysql_store_result();
		while(mysql_fetch_row(dataa, "|"))
		{
			sscanf(dataa, "p<|>is[24]iii", get_uid, get_nick, get_playerid, get_czas_godz_sluz, get_czas_min_sluz);
			
			PlayerData[playerid][pListPlayers][x] = get_uid;
			x++;
			
			format(dataaa,sizeof(dataaa),"%s\	
											%d\t\
											%s\t\
											%s\t\
											%dh %dmin.\n",
											dataaa,
											get_uid,
											get_nick,
											((get_playerid != -1) ? ("Online") : ("Offline")),
											get_czas_godz_sluz, get_czas_min_sluz
											);
			
		}
		ShowPlayerDialog(playerid, DIALOG_PANEL_FRAKCJI_LISTA, DIALOG_STYLE_TABLIST_HEADERS, "Panel frakcji (pracownicy):", dataaa, "Wybierz", "Zamknij");
		return 1;
	}
	if(playertextid == Txd_panelfrakcji[playerid][6]) //dodaj nowe informacje
	{
		if(PlayerData[playerid][pLider] != 1 && PlayerData[playerid][pLider] != 3) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes liderem frakcji.");
		ShowPlayerDialog(playerid, DIALOG_PANEL_FRAKCJI_INFO, DIALOG_STYLE_INPUT, "Panel frakcji (informacje):", "Wpisz ponizej informacje ktore chcesz przekazac innym pracownikom frakcji:\nMozesz zastosowac znak ~n~, aby przejsc do kolejnej linij.",  "Zatwierdz", "Zamknij");
		return 1;
	}
	if(playertextid == Txd_panelfrakcji[playerid][10]) //Pojazdy frakcyjne
	{
		new data[300], dataa[1000], i, get_uid, get_sampid, get_model, Float:get_hp, Float:get_przebieg, get_zlom;
		format(data,sizeof(data),"SELECT uid, sampid, model, hp, przebieg, zlom FROM `data_vehicles` where `frakcji` = '%d'", PlayerData[playerid][pFrakcja]);
		mysql_query(data);
		mysql_store_result();

		dataa = "uid\tpojazd\thp\tprzebieg\n";
		while(mysql_fetch_row(data, "|"))
		{
			sscanf(data, "p<|>iiiffi", get_uid, get_sampid, get_model, get_hp, get_przebieg, get_zlom);
			PlayerData[playerid][pCheckVehicleUID][i]=get_uid;
			i++;
			
			
			if(get_sampid != -1)
			{
				GetVehicleHealth(get_sampid, VehicleData[get_sampid][vHP]);
				format(dataa,sizeof(dataa),"%s{04B404}%d\t%s\t%f\t%f\n",
											dataa,
											get_uid,
											CarList[get_model-400],
											VehicleData[get_sampid][vHP],
											VehicleData[get_sampid][vPrzebieg]);
			}
			else
			{
				format(dataa,sizeof(dataa),"%s{FF0000}%d\t%s\t%f\t%f%s\n",
											dataa,
											get_uid,
											CarList[get_model-400],
											get_hp,
											get_przebieg,
											((get_zlom == 1) ? (" (Zezlomowany)") : ("")));
			}
		}
		if(i == 0) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Panel frakcji (pojazdy):", "Frakcja nie posiada zadnych pojazdow.",  "Zamknij", "");
		ShowPlayerDialog(playerid, DIALOG_PANEL_FRAKCJI_VEHICLES, DIALOG_STYLE_TABLIST_HEADERS, "Panel frakcji (pojazdy):", dataa, "Opcje", "Zamknij");
		cmd_frakcja(playerid);
	}
	if(playertextid == Txd_panelfrakcji[playerid][11]) //Statystyki frakcji
	{
		new data[250];
		format(data,sizeof(data),"Statystyki frakcji uid: %d\nSaldo: $%d", PlayerData[playerid][pFrakcja], GetFrakcjaCash(PlayerData[playerid][pFrakcja]));
		ShowPlayerDialog(playerid,9999,DIALOG_STYLE_MSGBOX,"Statystyki frakcji:",data,"Zamknij","");
		cmd_frakcja(playerid);
		return 1;
	}
	if(playertextid == Txd_panelfrakcji[playerid][9]) //zamknij
	{
		cmd_frakcja(playerid);
		return 1;
	}

	
	
	//Panel logowania
	if(playertextid == Txdraw_Logged[playerid][11]) //REGULAMIN
	{
		ShowPlayerDialog(playerid,9999,DIALOG_STYLE_MSGBOX,"Regulamin serwera:","\
																		1. ---\n\
																		2. ---\n\
																		3. ---\n\
																		4. ---\n\
																		5. ---\n\
																		6. ---\n\
																		7. ---\n\
																		8. ---\n\
																		9. ---\n\
																		10. ---\n\
																		11. ---\n\
																		12. ---\n\
																		13. ---\n\
																		14. ---\n\
																		15. ---\n\
																		Pamietaj, aby nigdy nie lamac powyzszego regulaminu poniewaz mozesz zostac ukarany w postaci: bana/blokady/warna/mute/jaila\n\
													","Zamknij","");
		return 1;
	}
	if(playertextid == Txdraw_Logged[playerid][10]) //START
	{
		
		if(PlayerData[playerid][CheckNowSobeit] != 0) return GameTextForPlayer(playerid, "~g~Prosimy chwile poczekac...", 1000, 3);
		PlayerStatsLoad(playerid);
		SetPlayerPos(playerid, 2438.0369,2376.1670,10.8203);
		SetPlayerFacingAngle(playerid, 93.3973);
		TogglePlayerSpectating(playerid, true);
		SetPlayerVirtualWorldEx(playerid, 0);
    	EnablePlayerCameraTarget(playerid, 0);
		
		FadePlayerConnect(playerid);
		InterpolateCameraPos(playerid, 1050.428588, 769.806152, 76.101165, 2881.373535, 873.165588, 36.969158, 39960);
		InterpolateCameraLookAt(playerid, 1046.271484, 768.311889, 73.759071, 2878.497802, 876.802795, 35.097881, 40000);
		TogglePlayerControllable(playerid, false);
		return 1;
	}
	if(playertextid == Txdraw_Logged[playerid][12]) //OPINIA
	{
		new data[500] = "#\tAutor\tSTresc\nDodaj wlasna opinie...\t#\t#\n", dataa[200], x = 1, get_uid, get_autor[MAX_PLAYER_NAME], get_opinia[30];
		format(dataa,sizeof(dataa),"SELECT `uid`, `autor`, `tresc` FROM `data_opinie`");
		mysql_query(dataa);
		mysql_store_result();
		
		while(mysql_fetch_row(dataa, "|"))
		{
			sscanf(dataa, "p<|>is[24]s[30]", get_uid, get_autor, get_opinia);
			
			PlayerData[playerid][pWybieraOpinie][x] = get_uid;
			format(data,sizeof(data),"%s%d\t%s\t%s\n", data, get_uid, get_autor, get_opinia);
			x++;

		}
		mysql_free_result();
		
		ShowPlayerDialog(playerid, DIALOG_OPINIE_LISTA, DIALOG_STYLE_TABLIST_HEADERS, "Opinie serwera (lista):", data, "Wybierz", "Zamknij");
		return 1;
	}
	


	
	//Panel salon samochodowy
	if(playertextid == Txdraw_SalonInfo[playerid][14]) // kolejne auto
	{
		CheckNextVehicle(playerid, PlayerData[playerid][pSalonVehicleType]);
		return 1;
	}
	if(playertextid == Txdraw_SalonInfo[playerid][13]) // poprzednie auto
	{
		CheckPrevVehicle(playerid, PlayerData[playerid][pSalonVehicleType]);
		return 1;
	}
	if(playertextid == Txdraw_SalonInfo[playerid][11]) // kup
	{
		if(PlayerData[playerid][pSalonVehicleCena] > GetPlayerCash(playerid)) return GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~Nie posiadasz odpowiedniej ilosci gotowki.", 5000, 3);
		if(PlayerData[playerid][pSalonVehicleLevel] > PlayerData[playerid][pLevel]) return GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~r~Nie posiadasz odpowiedniego poziomu.", 5000, 3);
		
		GivePlayerCash(playerid, - PlayerData[playerid][pSalonVehicleCena]);
	
		SendClientMessage(playerid, -1, "{a4a4a4}Zakup udany, pojazd zostal zespawnowany. Uzyj komendy /v i namierz swoj pojazd.");
		SetPVarInt(playerid, "stop_spam_pickupid", gettime()); //zeby nie wchodzilo ponownie do salonu, gdy z niego wychodzimy
		PlayerSalonSamochodowy(playerid, 3, 69);
				
				
		PlayerData[playerid][pPrivCars]++;
		
		new data[200], uid, vehicleid;
		format(data,sizeof(data),"INSERT INTO `data_vehicles` SET `private` = '1', `owneruid`='%d', `owner` = '%s', `model` = '%d', `type` = '%d', `hp` = '-1234', `sampid` = '-1'", 
		PlayerData[playerid][pUID], PlayerData[playerid][pName], PlayerData[playerid][pSalonVehicleNumer], PlayerData[playerid][pSalonVehicleType]);
		mysql_query(data);
		
		
	
		format(data, sizeof data, "SELECT `uid` FROM `data_vehicles` WHERE `owneruid` = '%d'", PlayerData[playerid][pUID]);
		mysql_query(data);
		mysql_store_result();
		mysql_fetch_row(data, "|");
		sscanf(data, "p<|>d",
		uid);
        
        mysql_free_result();
        
		format(data,sizeof(data), "UPDATE `data_vehicles` set `hp` = '1000' where `uid` = '%d'",  uid ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `x` = '0.0' where `uid` = '%d'",  uid ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `y` = '0.0' where `uid` = '%d'",  uid ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `z` = '0.0' where `uid` = '%d'",  uid ), mysql_query(data);
		
		
		SpawnVehicle(uid);
		

		for(new i = 0; i != GetVehiclePoolSize(); i++)
		{
			if(VehicleData[i][vUID] == uid)
			{
				vehicleid = i;
			}
		}
		VehicleData[vehicleid][vType] = PlayerData[playerid][pSalonVehicleType];
		PutPlayerInVehicleEx(playerid, vehicleid, 0);
		return 1;
	}
	if(playertextid == Txdraw_SalonInfo[playerid][9]) // wyjdz
	{
		SetPVarInt(playerid, "stop_spam_pickupid", gettime()); //zeby nie wchodzilo ponownie do salonu, gdy z niego wychodzimy
		PlayerSalonSamochodowy(playerid, 3, 69);
		return 1;
	}
	if(playertextid == Txdraw_SalonInfo[playerid][5]) // pojazdy dostawcze
	{
		CheckNextVehicle(playerid, 4);
		return 1;
	}
	if(playertextid == Txdraw_SalonInfo[playerid][4]) // pojazdy osobowe
	{
		CheckNextVehicle(playerid, 3);
		return 1;
	}
	if(playertextid == Txdraw_SalonInfo[playerid][3]) // pojazdy sportowe
	{
		CheckNextVehicle(playerid, 2);
		return 1;
	}
	if(playertextid == Txdraw_SalonInfo[playerid][2]) // pojazdy jednoslady
	{
		CheckNextVehicle(playerid, 1);
		return 1;
	}
	
	//Wybieralka skinow
	if(playertextid == WybieralkaSkinow[playerid][3]) // Wybierz
	{
		CallRemoteFunction("OnPlayerSkinSelect", "ddd", playerid, ListaSkinow[playerid][AktualnySkin[playerid]], GetPlayerSkin(playerid));
		HideSkinSelection(playerid, 1);
		return 1;
	}
	if(playertextid == WybieralkaSkinow[playerid][4]) // nastepne
	{
		AktualnySkin[playerid]++;
		if(ListaSkinow[playerid][AktualnySkin[playerid]] == -1) AktualnySkin[playerid] = 0;
		SetSelectionSkin(playerid, AktualnySkin[playerid]);
		return 1;
	}
	if(playertextid == WybieralkaSkinow[playerid][2]) // poprzednie
	{
		if(AktualnySkin[playerid] == 0)
		{
			AktualnySkin[playerid] = MaxSkinID[playerid]-1;
			}else{
			AktualnySkin[playerid]--;
		}
		SetSelectionSkin(playerid, AktualnySkin[playerid]);
		return 1;
	}
	return 1;
}




public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{

	if(dialogid == DIALOG_LOGIN) //Logowanie na konto.
	{
		if(!response) return Kick(playerid);
		if(!isnull(inputtext))
		{

			new password[128];
			SHA256_PassHash(inputtext, PlayerData[playerid][pSalt], password, 65);

			printf(PlayerData[playerid][pPassword]);
			printf(PlayerData[playerid][pSalt]);
			printf(password);

			if(strcmp(password, PlayerData[playerid][pPassword], true)) 
			{
				PlayerData[playerid][pFailPassword]++;
				if(PlayerData[playerid][pFailPassword] == 3)
				{
					Kick(playerid);
					return 1;
				}
				new data[300];
				format(data,sizeof(data),"\
											{a4a4a4}Witaj ponownie %s,\n\
											Wpisz ponizej swoje haslo, aby sie zalogowac:\nNiepoprawne haslo do logowania, pozostalych prob do logowania: %d/3", PlayerData[playerid][pName], PlayerData[playerid][pFailPassword]);
				ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Zaloguj sie", data, "Zaloguj", "Zamknij");
				return 1;
			}
			
			if(!strcmp(password, PlayerData[playerid][pPassword], true))
			{
				new naglowek[128];
				format(naglowek,sizeof(naglowek),"[PTR-Serw]Gracz %s ~g~dolaczyl do serwera", PlayerData[playerid][pName]);
				PlayerData[playerid][pLogged] = true;
				PlayerTextDrawLogged(playerid, 1);
				PlayerBuildInfo(playerid, 0, 0);
				PlayerStatyBox(playerid, 0);
				PlayerStatyBox(playerid, 1);
				PlayerStatyBox(playerid, 3);
				PlayerStacjaBenzynowa(playerid, 0);
				PlayerFrakcjaPanel(playerid, 0);
				PlayerFirmaPanel(playerid, 0);
				PlayerKasynoPanel(playerid, 0);
				PlayerNapadPanel(playerid, 0);
				PlayerSpecPanel(playerid, 0);
				PlayerSalonSamochodowy(playerid, 0);
				PlayerDataTXD(playerid, 0);
				PlayerDataTXD(playerid, 4, "Polaczenie", naglowek, "[PTR-Serw] Zyczymy milej gry.", "_");
				PlayerZlecenieInfo(playerid, 0);
				//ShowSkinSelection(playerid, 1, 1);
				PlayerVehicleInfo(playerid, 0);
				PlayerObiektPanel(playerid, 0);
				PlayerTextDrawLicznik(playerid, 0);
				PlayerTelefon1(playerid, 0);
				PlayerRealTime(playerid, 0);
				PlayerOthersTXD(playerid, 0);
				PlayerRealTime(playerid, 1);
				PlayerRealTime(playerid, 4);
				PlayerTowaryWybierz(playerid, 0);
				PlayerLicznikTaxi(playerid, 0);
				PlayerNewsReporta(playerid, 0);
				PlayerStatsLoad(playerid, 1);
				
				StopAudioStreamForPlayer(playerid);

				/*SetPlayerPos(playerid, 2438.0369,2376.1670,10.8203);
				SetPlayerFacingAngle(playerid, 93.3973);
				TogglePlayerSpectating(playerid, false);*/
			}
		}
		return 1;
	}
	
	if(dialogid == DIALOG_REGISTER) //Rejestracja konta.
	{
		new data[500];
		if(!response) return Kick(playerid);
		if(isnull(inputtext))
		{
//			format(data,sizeof(data), HEX_COLOR_LIGHTER_RED"Polski Truck Rozrywki to serwer zalozony w 2010 roku, utrzymujacy sie na scenie do 2015 roku.\nMamy zamysl odtworzenia rozgrywki");
	//		format(data,sizeof(data), "%s z tamtych czasow. \n\n{FFFFFF}Witaj "HEX_COLOR_CREW_ADMIN"%s {FFFFFF}na "HEX_COLOR_CREW_ADMIN"Polskim Trucku Rozrywki!\n{FFFFFF}Nie znalezlismy Twojego konta w bazie danych.\nWpisz haslo aby sie zarejestrowac", PlayerData[playerid][pName]);
			InterpolateCameraPos(playerid, 1050.428588, 769.806152, 76.101165, 2881.373535, 873.165588, 36.969158, 39960);
			InterpolateCameraLookAt(playerid, 1046.271484, 768.311889, 73.759071, 2878.497802, 876.802795, 35.097881, 40000);
			format(data,sizeof(data),"\\{a4a4a4}Witaj %s,\n\\Wpisz ponizej swoje haslo dzieki ktoremu bedziesz mogl grac na serwerze:", PlayerData[playerid][pName]);
			ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, "Rejestracja konta", data, "Rejestruj", "Zamknij");
			return 1;
		}

		if(strlen(inputtext)<5||strlen(inputtext)>25)
		{
//			format(data,sizeof(data), HEX_COLOR_LIGHTER_RED"Polski Truck Rozrywki to serwer zalozony w 2010 roku, utrzymujacy sie na scenie do 2015 roku.\nMamy zamysl odtworzenia rozgrywki");
	///		format(data,sizeof(data), "%s z tamtych czasow. \n\n{FFFFFF}Witaj "HEX_COLOR_CREW_ADMIN"%s {FFFFFF}na "HEX_COLOR_CREW_ADMIN"Polskim Trucku Rozrywki!\n{FFFFFF}Nie znalezlismy Twojego konta w bazie danych.\nWpisz haslo aby sie zarejestrowac", PlayerData[playerid][pName]);
			InterpolateCameraPos(playerid, 1050.428588, 769.806152, 76.101165, 2881.373535, 873.165588, 36.969158, 39960);
			InterpolateCameraLookAt(playerid, 1046.271484, 768.311889, 73.759071, 2878.497802, 876.802795, 35.097881, 40000);
			format(data,sizeof(data),"\\{a4a4a4}Witaj %s,\n\\Wpisz ponizej swoje haslo dzieki ktoremu bedziesz mogl grac na serwerze:\n\nTwoje haslo jest za dlugie lub za krotkie.", PlayerData[playerid][pName]);
			ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, "Rejestracja konta", data, "Rejestruj", "Zamknij");
			return 1;
		}

		new naglowek[128];
		format(naglowek,sizeof(naglowek),"[PTR-Serw]Gracz %s dolaczyl do serwera", PlayerData[playerid][pName]);
		PlayerData[playerid][pLogged] = true;

		new salt[11];
		new password[128];

		for(new i; i < 10; i++) {
			salt[i] = random(79) + 49;
		}

		salt[10] = 0;

		SHA256_PassHash(inputtext, salt, password, 65);

		PlayerData[playerid][pSalt] = salt;


		mysql_real_escape_string(password, PlayerData[playerid][pPassword]);
		mysql_real_escape_string(salt, PlayerData[playerid][pSalt]);
		PlayerTextDrawLogged(playerid, 1);
		PlayerStatsSave(playerid, 2);
		PlayerBuildInfo(playerid, 0, 0);
		PlayerStatyBox(playerid, 0);
		PlayerStatyBox(playerid, 1);
		PlayerStatyBox(playerid, 3);
		PlayerStacjaBenzynowa(playerid, 0);
		PlayerFrakcjaPanel(playerid, 0);
		PlayerFirmaPanel(playerid, 0);
		PlayerKasynoPanel(playerid, 0);
		PlayerNapadPanel(playerid, 0);
		PlayerSpecPanel(playerid, 0);
		PlayerSalonSamochodowy(playerid, 0);
		PlayerDataTXD(playerid, 0);
		PlayerDataTXD(playerid, 4, "Polaczenie", naglowek, "[PTR-Serw]~r~~h~Zyczymy milej gry na naszym serwerze", "_");
		RefreshPlayerLevel(playerid);
		PlayerZlecenieInfo(playerid, 0);
		//ShowSkinSelection(playerid, 1, 1);
		PlayerVehicleInfo(playerid, 0);
		PlayerObiektPanel(playerid, 0);
		PlayerTextDrawLicznik(playerid, 0);
		PlayerTelefon1(playerid, 0);
		PlayerOthersTXD(playerid, 0);
		PlayerRealTime(playerid, 0);
		PlayerRealTime(playerid, 1);
		PlayerRealTime(playerid, 4);
		PlayerTowaryWybierz(playerid, 0);
		PlayerLicznikTaxi(playerid, 0);
		PlayerNewsReporta(playerid, 0);
	
		StopAudioStreamForPlayer(playerid);

		SetPlayerPos(playerid, 2438.0369,2376.1670,10.8203);
		SetPlayerFacingAngle(playerid, 93.3973);
		TogglePlayerSpectating(playerid, false);
		return 1;
	}

	if(dialogid == 	DIALOG_ROZPRAWA_MENU && response){
		switch(listitem){
			case 0:{
				if(rozprawa_trwa == true) return SCM(playerid, -1, "{a4a4a4}Inna rozprawa trwa! Musisz czekac na swoja kolej!");
				rozprawa_trwa = true;
				ShowPlayerDialog(playerid, DIALOG_ROZPRAWA_MENU_ROZPRAWA, DIALOG_STYLE_LIST, "Rozprawa sadowa - menu", "{ff0000}Dodaj oskarzonego\n{ff0000}Dodaj swiadka\n{ff0000}Wydaj wyrok\n{ff0000}Swiadkowie", "Dalej", "Wroc");
			}
			case 1:{
				if(rozprawa_trwa == false) return SCM(playerid, -1, "{a4a4a4}Obecnie nie prowadzisz zadnej rozprawy!");
				rozprawa_trwa = false;
				for(new i = 0; i < MAX_PLAYERS; i++){
					PlayerData[playerid][pSwiadek] = 0;
					PlayerData[playerid][pOskarzony] = 0;
					PlayerData[playerid][pZeznaje] = 0;
				}
			}
		}
	}

	if(dialogid == DIALOG_ROZPRAWA_MENU_ROZPRAWA){
		if(response){
			switch(listitem){
				case 0:{ // dodaj oskarzonego
					if(IluOskarzonych() == 1) return SCM(playerid, -1, "{a4a4a4}Oskarzony siedzi juz na sali rozpraw!");
					ShowPlayerDialog(playerid, DIALOG_ROZPRAWA_OSKARZONY, DIALOG_STYLE_INPUT, "Rozprawa sadowa - dodawanie oskarzonego", "Prosze wpisac id oskarzonego", "Dodaj", "Wroc");
					return 1;
				}
				case 1:{ // dodaj swiadka
					ShowPlayerDialog(playerid, DIALOG_ROZPRAWA_SWIADEK, DIALOG_STYLE_INPUT, "Rozprawa sadowa - dodawanie swiadka", "Prosze wpisac id swiadka", "Dodaj", "Wroc");
					return 1;
				}
				case 2:{ // wydaj wyrok
					ShowPlayerDialog(playerid, DIALOG_ROZPRAWA_WYROK, DIALOG_STYLE_LIST, "Rozprawa sadowa - wyrok", "Kara wiezienia\nKara grzywny\nUniewinnienie", "Wyrok!", "Wroc");
					return 1;
				}
				case 3:{ // zarzadzaj swiadkami
					new data[500], text[500], name[MAX_PLAYER_NAME];
					for(new i = 0; i < MAX_PLAYERS; i++){
						if(PlayerData[i][pSwiadek] == 1){
							name = PlayerName(i);
							format(text, sizeof(text), "%s\n", name);
							strcat(data, text);
						}
					}
					ShowPlayerDialog(playerid, DIALOG_ROZPRAWA_SWIADKOWIE, DIALOG_STYLE_LIST, "Menu swiadkowie", "Rozpocznij przesluchanie\nZakoncz przesluchanie", "Wybierz", "Wroc");
					return 1;
				}
			}
		} else{
			ShowPlayerDialog(playerid, DIALOG_ROZPRAWA_MENU, DIALOG_STYLE_LIST, "Rozprawa sadowa", "Rozpocznij rozprawe\nZakoncz rozprawe", "Dalej", "Wyjdz");
		}
		return 1;
	}

	if(dialogid == DIALOG_ROZPRAWA_SWIADKOWIE)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: //rozpocznij przesluchanie
				{  
					if(rozprawa_trwa == false) return SCM(playerid, -1, "{a4a4a4}Aktualnie nie tra zadna rozprawa!");
					if(ileprzesluchuje() == 1) return SCM(playerid, -1, "{a4a4a4}Nie mozesz przesluchiwac wiecej niz jedna osobe!");
					ShowPlayerDialog(playerid, DIALOG_ROZPRAWA_SWIADKOWIE_PRZE, DIALOG_STYLE_INPUT, "Rozpocznij przeslchanie", "Ponizej wpisz ID swiadka, ktorego chcesz przesluchac", "Przesluchaj", "Wroc");
					return 1;
				}
				
				case 1: //zakoncz przeslchanie
				{ 
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(PlayerData[i][pZeznaje] == 1)
						{
							PlayerData[i][pZeznaje] = 0;
							SCM(i, -1, "{a4a4a4}Sedzia zakonczyl twoje zeznania!");
							return 1;
						}
					}
					return 1;
				}
			}
		} 
		else
		{
			ShowPlayerDialog(playerid, DIALOG_ROZPRAWA_MENU_ROZPRAWA, DIALOG_STYLE_LIST, "Rozprawa sadowa - menu", "{ff0000}Dodaj oskarzonego\n{ff0000}Dodaj swiadka\n{ff0000}Wydaj wyrok\n{ff0000}Swiadkowie", "Dalej", "Wroc");
		}
		return 1;
	}
	
	if(dialogid == DIALOG_ROZPRAWA_SWIADKOWIE_PRZE && response)
	{
		new id = strval(inputtext);
		if(!IsPlayerConnected(id)) return SCM(playerid, -1, "{a4a4a4}Gracz o podanym ID nie jest podlaczony do serwera!");
		if(PlayerData[id][pSwiadek] == 0) return SCM(playerid, -1, "{a4a4a4}Gracz o podanym ID nie jest swiadkiem w rozprawie!");
		//sprawdzenie area sadu!!!!!!!!!!!!!
		PlayerData[id][pZeznaje] = 1;
		SCM(id, -1, "{a4a4a4}Sedzia wytypowal cie do zlozenia zeznan! Uzyj {ff0000}/zeznanie {a4a4a4}aby zlozyc zeznania!");
		ShowPlayerDialog(playerid, DIALOG_ROZPRAWA_MENU_ROZPRAWA, DIALOG_STYLE_LIST, "Rozprawa sadowa - menu", "{ff0000}Dodaj oskarzonego\n{ff0000}Dodaj swiadka\n{ff0000}Wydaj wyrok\n{ff0000}Swiadkowie", "Dalej", "Wroc");
		return 1;
	}
	
	if(dialogid == DIALOG_ROZPRAWA_WIEZIENIE && response){
		new paka = strval(inputtext), data[500];
		if(paka <= 5 || paka >= 1000) return SCM(playerid, -1, "{a4a4a4}Minimalny czas wiezienia to {ff0000}5 {a4a4a4} min, a maksymalna to {ff0000}1000 min.");
		for(new i = 0; i < MAX_PLAYERS; i++){
			if(PlayerData[i][pOskarzony] == 1){
				PlayerData[i][pSkuty] = 0;
				PlayerData[i][pJail] = paka;
				PlayerData[i][pWantedLevel] = 0;
				SetPlayerWantedLevel(i, 0);
				SetPlayerInteriorEx(i, 0);
				SetPlayerVirtualWorldEx(i, 0);
				ClearAnimations(i);
				SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
				RemovePlayerAttachedObject(i, 1);
				SetPlayerPos(i, 1681.9360,991.9390,-39.8240);
				SetPlayerInteriorEx(i, 6);
				SetPlayerVirtualWorldEx(i, i+100);
				
				format(data,sizeof(data),"{a4a4a4}Sad skazal {00ff00}%s {ffffff}[{00ff00}%d{ffffff}] {a4a4a4}na kare {00ff00}%i {a4a4a4}min. aresztu!", PlayerData[i][pName], i, paka);
				SCMToAll(-1, data);
				return 1;
			}
		}
		return 1;
	}
	
	if(dialogid == DIALOG_ROZPRAWA_GRZYWNA && response){
		new grzywna = strval(inputtext), data[500];
		if(grzywna <= 500 || grzywna >= 1000000) return SCM(playerid, -1, "{a4a4a4}Minimalny grzywna to {ff0000}500{ffffff}${a4a4a4}, a maksymalna to {ff0000}1000000{ffffff}$");
		for(new i = 0; i < MAX_PLAYERS; i++){
			if(PlayerData[i][pOskarzony] == 1){
				PlayerData[i][pSkuty] = 0;
				PlayerData[i][pWantedLevel] = 0;
				SetPlayerWantedLevel(i, 0);
				SetPlayerInteriorEx(i, 0);
				SetPlayerVirtualWorldEx(i, 0);
				ClearAnimations(i);
				SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
				RemovePlayerAttachedObject(i, 1);
				GivePlayerMoney(i, -grzywna);
				
				format(data,sizeof(data),"{a4a4a4}Sad nadal grzywne w wysokosci {ff0000}%i{ffffff}$ {00ff00}%s {ffffff}[{00ff00}%d{ffffff}] ", grzywna, PlayerData[i][pName], i);
				SCMToAll(-1, data);
				return 1;
			}
		}
	}
	
	if(dialogid == DIALOG_ROZPRAWA_WYROK){
		if(response){
			switch(listitem){
				case 0:{
					ShowPlayerDialog(playerid, DIALOG_ROZPRAWA_WIEZIENIE, DIALOG_STYLE_INPUT, "Rozprawa sadowa - wyrok", "{a4a4a4}Prosze wpisac ilosc minut {ff0000}kary wiezienia", "Wyrok!", "Wroc");
					return 1;
				}
				case 1:{
					ShowPlayerDialog(playerid, DIALOG_ROZPRAWA_GRZYWNA, DIALOG_STYLE_INPUT, "Rozprawa sadowa - wyrok", "{a4a4a4}Prosze wpisac ilosc {ff0000}grzywny", "Wyrok", "Wroc");
					return 1;
				}
				case 2:{
					new id = GetIDOskarzony();
					new data[500];
					PlayerData[id][pOskarzony] = 0;
					format(data, sizeof(data), "{a4a4a4}Gracz {0000ff}%s {ffffff}[{00ff00}%d{ffffff}] {a4a4a4}w rozprawie sadowej zostal {ff0000}uniewinniony!", PlayerName(id), id);
					SCMToAll(-1, data);
					rozprawa_trwa = false;
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						PlayerData[playerid][pSwiadek] = 0;
						PlayerData[playerid][pOskarzony] = 0;
						PlayerData[playerid][pZeznaje] = 0;
					}
					SCMToAll(-1,"{a4a4a4}Rozprawa zakonczyla sie!");
				}
			}
		}
		return 1;
	}

	if(dialogid == DIALOG_ROZPRAWA_OSKARZONY){
		if(response){
			new id=strval(inputtext);
			PlayerData[id][pOskarzony] = 1;
			new data[500];
			format(data, sizeof(data), "{a4a4a4}Gracz {0000ff}%s {ffffff}[{00ff00}%d{ffffff}] {a4a4a4}zostal oskarzony!", PlayerName(id), id);
			SCM(playerid, -1, data);
			ShowPlayerDialog(playerid, DIALOG_ROZPRAWA_MENU_ROZPRAWA, DIALOG_STYLE_LIST, "Rozprawa sadowa - menu", "{ff0000}Dodaj oskarzonego\n{ff0000}Dodaj swiadka\n{ff0000}Wydaj wyrok\n{ff0000}Swiadkowie", "Dalej", "Wroc");
		} else{
			ShowPlayerDialog(playerid, DIALOG_ROZPRAWA_MENU_ROZPRAWA, DIALOG_STYLE_LIST, "Rozprawa sadowa - menu", "{ff0000}Dodaj oskarzonego\n{ff0000}Dodaj swiadka\n{ff0000}Wydaj wyrok\n{ff0000}Swiadkowie", "Dalej", "Wroc");
		}
		return 1;	
	}

	if(dialogid == DIALOG_ROZPRAWA_SWIADEK){
		if(response){
			new id=strval(inputtext);
			if(PlayerData[id][pSwiadek] == 1) return SCM(playerid, -1, "{a4a4a4}Gracz o podanym ID jest juz swiadkiem!");
			if(PlayerData[id][pOskarzony] == 1) return SCM(playerid, -1, "{a4a4a4}Gracz o podanym ID jest juz oskarzonym!");
			PlayerData[id][pSwiadek] = 1;
			new data[500];
			format(data, sizeof(data), "{a4a4a4}Gracz {0000ff}%s {ffffff}[{00ff00}%d{ffffff}] {a4a4a4}zostal swiadkiem w rozprawie!", PlayerName(id), id);
			SCM(playerid, -1, data);
			ShowPlayerDialog(playerid, DIALOG_ROZPRAWA_MENU_ROZPRAWA, DIALOG_STYLE_LIST, "Rozprawa sadowa - menu", "{ff0000}Dodaj oskarzonego\n{ff0000}Dodaj swiadka\n{ff0000}Wydaj wyrok\n{ff0000}Swiadkowie", "Dalej", "Wroc");
		} else{
			ShowPlayerDialog(playerid, DIALOG_ROZPRAWA_MENU_ROZPRAWA, DIALOG_STYLE_LIST, "Rozprawa sadowa - menu", "{ff0000}Dodaj oskarzonego\n{ff0000}Dodaj swiadka\n{ff0000}Wydaj wyrok\n{ff0000}Swiadkowie", "Dalej", "Wroc");
		}
		return 1;	
	}
	
	if(dialogid == MENUPD && response)
    {
    	new vehicleid = GetPlayerVehicleID(playerid);
        switch(listitem)
        {
            case 0:
			{
			    RepairVehicle(vehicleid);
				SetVehicleHealth(vehicleid, 1000.0);
				SendClientMessage(playerid, ZOLTY, "Naprawiłeś pojazd.");

			}
			case 1:
			{
				AddVehicleComponent(vehicleid, 1010);
				SendClientMessage(playerid, ZOLTY, "Założyłeś nitro!");
			}
			case 2:
			{
				AddVehicleComponent(vehicleid, 1087);
				SendClientMessage(playerid, ZOLTY, "Założyłeś hydraulikę.");
			}
			case 3:
			{
				ShowPlayerDialog(playerid, FELGIPD, DIALOG_STYLE_LIST, "Wybierz komplet felg" , "Offroad\nShadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAccess" , "Wybierz" , "Anuluj");
			}
			case 4:
			{
				ShowPlayerDialog(playerid, NEONYPD, DIALOG_STYLE_LIST, "Wybierz kolor neonów" , "Czerwony\nNiebieski\nZielony\nZolty\nRozowy\nBialy\nUsun" , "Wybierz" , "Anuluj");
			}
   			case 5:
			{
				ShowPlayerDialog(playerid, KOLORYPD, DIALOG_STYLE_INPUT, "Malowanie", "Wpisz poniżej 2 kolory odzielając je znakiem '|'. Np. 58|112", "Ok", "Wyjdz");
			}
		}
        return 1;
    }
	if(dialogid == FELGIPD && response)
    {
    	new vehicleid = GetPlayerVehicleID(playerid);
        switch(listitem)
        {
 			case 0:
			{
   				AddVehicleComponent(vehicleid,1025);
			}
            case 1:
            {
                AddVehicleComponent(vehicleid,1073);
            }
            case 2:
            {
                AddVehicleComponent(vehicleid,1074);
            }
			case 3:
			{
   				AddVehicleComponent(vehicleid,1075);
			}
            case 4:
            {
                AddVehicleComponent(vehicleid,1076);
            }
            case 5:
            {
                AddVehicleComponent(vehicleid,1077);
            }
			case 6:
			{
   				AddVehicleComponent(vehicleid,1078);
			}
            case 7:
            {
                AddVehicleComponent(vehicleid,1079);
            }
            case 8:
            {
                AddVehicleComponent(vehicleid,1080);
            }
			case 9:
			{
   				AddVehicleComponent(vehicleid,1081);
			}
            case 10:
            {
                AddVehicleComponent(vehicleid,1082);
            }
            case 11:
            {
                AddVehicleComponent(vehicleid,1083);
            }
            case 12:
            {
                AddVehicleComponent(vehicleid,1084);
            }
            case 13:
            {
                AddVehicleComponent(vehicleid,1085);
            }
			case 14:
			{
   				AddVehicleComponent(vehicleid,1096);
			}
            case 15:
            {
            	AddVehicleComponent(vehicleid,1097);
            }
            case 16:
            {
             	AddVehicleComponent(vehicleid,1098);
            }
        }
        return 1;
    }
	if(dialogid == NEONYPD)
	{
		if(response)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			switch(listitem)
			{
				case 0:
				{
					DestroyObject(VehicleData[vehicleid][vNeonLewy]);
					DestroyObject(VehicleData[vehicleid][vNeonPrawy]);
					VehicleData[vehicleid][vNeonLewy] = CreateDynamicObject(18647,0,0,0,0,0,0,-1,-1,-1,75.0);
					VehicleData[vehicleid][vNeonPrawy] = CreateDynamicObject(18647,0,0,0,0,0,0,-1,-1,-1,75.0);
					AttachObjectToVehicle(VehicleData[vehicleid][vNeonLewy], vehicleid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleData[vehicleid][vNeonPrawy], vehicleid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, ZOLTY, "Zainstalowałeś czerwone neony!");
				}
				case 1:
				{
					DestroyObject(VehicleData[vehicleid][vNeonLewy]);
					DestroyObject(VehicleData[vehicleid][vNeonPrawy]);
					VehicleData[vehicleid][vNeonLewy] = CreateDynamicObject(18648,0,0,0,0,0,0,-1,-1,-1,75.0);
					VehicleData[vehicleid][vNeonPrawy] = CreateDynamicObject(18648,0,0,0,0,0,0,-1,-1,-1,75.0);
					AttachObjectToVehicle(VehicleData[vehicleid][vNeonLewy], vehicleid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleData[vehicleid][vNeonPrawy], vehicleid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, ZOLTY, "Zainstalowałeś niebieskie neony!");
				}
				case 2:
				{
					DestroyObject(VehicleData[vehicleid][vNeonLewy]);
					DestroyObject(VehicleData[vehicleid][vNeonPrawy]);
					VehicleData[vehicleid][vNeonLewy] = CreateDynamicObject(18649,0,0,0,0,0,0,-1,-1,-1,75.0);
					VehicleData[vehicleid][vNeonPrawy] = CreateDynamicObject(18649,0,0,0,0,0,0,-1,-1,-1,75.0);
					AttachObjectToVehicle(VehicleData[vehicleid][vNeonLewy], vehicleid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleData[vehicleid][vNeonPrawy], vehicleid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, ZOLTY, "Zainstalowałeś zielone neony!");
				}
				case 3:
				{
					DestroyObject(VehicleData[vehicleid][vNeonLewy]);
					DestroyObject(VehicleData[vehicleid][vNeonPrawy]);
					VehicleData[vehicleid][vNeonLewy] = CreateDynamicObject(18650,0,0,0,0,0,0,-1,-1,-1,75.0);
					VehicleData[vehicleid][vNeonPrawy] = CreateDynamicObject(18650,0,0,0,0,0,0,-1,-1,-1,75.0);
					AttachObjectToVehicle(VehicleData[vehicleid][vNeonLewy], vehicleid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleData[vehicleid][vNeonPrawy], vehicleid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, ZOLTY, "Zainstalowałeś zółte neony!!");
				}
				case 4:
				{
					DestroyObject(VehicleData[vehicleid][vNeonLewy]);
					DestroyObject(VehicleData[vehicleid][vNeonPrawy]);
					VehicleData[vehicleid][vNeonLewy] = CreateDynamicObject(18651,0,0,0,0,0,0,-1,-1,-1,75.0);
					VehicleData[vehicleid][vNeonPrawy] = CreateDynamicObject(18651,0,0,0,0,0,0,-1,-1,-1,75.0);
					AttachObjectToVehicle(VehicleData[vehicleid][vNeonLewy], vehicleid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleData[vehicleid][vNeonPrawy], vehicleid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, ZOLTY, "Zainstalowałeś różowe neony!");
				}
				case 5:
				{
					DestroyObject(VehicleData[vehicleid][vNeonLewy]);
					DestroyObject(VehicleData[vehicleid][vNeonPrawy]);
					VehicleData[vehicleid][vNeonLewy] = CreateDynamicObject(18652,0,0,0,0,0,0,-1,-1,-1,75.0);
					VehicleData[vehicleid][vNeonPrawy] = CreateDynamicObject(18652,0,0,0,0,0,0,-1,-1,-1,75.0);
					AttachObjectToVehicle(VehicleData[vehicleid][vNeonLewy], vehicleid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleData[vehicleid][vNeonPrawy], vehicleid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, ZOLTY, "Zainstalowałeś białe neony!");
				}
				case 6:
				{
					DestroyObject(VehicleData[vehicleid][vNeonLewy]);
					DestroyObject(VehicleData[vehicleid][vNeonPrawy]);
				}
			}
		}
		return 1;
	}
  
  	if(dialogid == KOLORYPD)
	{
		if(strlen(inputtext) < 3 || strlen(inputtext) > 7) return SendClientMessage(playerid, COLOR_RED, "Kolory które podajesz sa zbyt długie/krótkie. Przykładowe kolory 58|112.");
		else
		{
			new kolor1, kolor2;
			sscanf(inputtext, "p<|>dd", kolor1, kolor2);
			if(kolor1 < 0 || kolor2 < 0 || kolor1 > 255 || kolor2 > 255)
			SendClientMessage(playerid, COLOR_RED, "Kolory które podajesz są błędne. Ich zakres to 0 - 255");
 			ChangeVehicleColor(GetPlayerVehicleID(playerid), kolor1, kolor2);

 			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
 			{
 				ChangeVehicleColor(GetVehicleTrailer(GetPlayerVehicleID(playerid)), kolor1, kolor2);
 			}
		}
		return 1;
	}
	
	
	
	if(dialogid == DIALOG_SPRZET_PSP)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					GivePlayerWeapon(playerid, 9, 9999999);//pila
					SendClientMessage(playerid, BIALY, "Zabrales z pojazu pile spalinowa");
					
				}
				case 1:
				{
					GivePlayerWeapon(playerid, 6, 64);///lopata
					SendClientMessage(playerid, BIALY, "Zabrales z pojazu lopate");
				}
				case 2:
				{
					GivePlayerWeapon(playerid, 45, 1);//noptowizor
					SendClientMessage(playerid, BIALY, "Zabrales z pojazu kamere na pod czerwien");
				}
				case 3:
				{
					GivePlayerWeapon(playerid, 42, 999999*999999);//gasnica
					SendClientMessage(playerid, BIALY, "Zabrales z pojazu gasnice proszkowa ");
				}
				case 4:
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid,2)) RemovePlayerAttachedObject(playerid,2);
					SetPlayerAttachedObject(playerid, 1, 2902, 1, -0.239000, -0.167999, 0, 0, 0, 0, 1, 1, 1, 0xFF0005FF);////butla
					SetPlayerAttachedObject(playerid, 4, 19472, 18, 0.103999, -0.020998, -0.018999, -69.300003, 3.999949, 7.100008, 1, 1, 1);///maska	
					SendClientMessage(playerid, BIALY, "Zalozyles aparat ochrony drog oddechowych");
					
				}
				case 5:
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid,2)) RemovePlayerAttachedObject(playerid,2);///latarka
					SetPlayerAttachedObject(playerid, 2, 18641, 6, 0.071000, 0.032001, 0.063000, 175.399993, 0, 0, 1, 1, 1, 0xFFFA22FF);
					SendClientMessage(playerid, BIALY, "Zabrales z pojazu latarke ");
				}
				case 6:
				{
					SetPlayerAttachedObject(playerid, 2, 2919, 6, 0.253000, 0.012000, 0.086999, 1.900001, -105.800010, 2.599996, 0.203000, 0.167999, 0.363999, 0xFF0005FF);
					SendClientMessage(playerid, BIALY, "Zabrales z pojazu Torbe medyczna PSP-R1");///Torba PSP-R1
				}
				case 7:
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
					SetPlayerAttachedObject(playerid, 3, 2060, 17, -0.137000, 0.480998, 0, 0, -84.599975, 0, 1, 1, 1, 0xFF0005FF);
					SendClientMessage(playerid, BIALY, "Zabrales z pojazu worek z sorbentem ");
					SetPVarInt(playerid, "ma_sorbent", 1);
				}
				case 9:
				{
					RemovePlayerAttachedObject(playerid,1);
					RemovePlayerAttachedObject(playerid,2);
					RemovePlayerAttachedObject(playerid,3);
					RemovePlayerAttachedObject(playerid,4);
					SetPlayerAmmo(playerid,9 ,0);
					SetPlayerAmmo(playerid,6 ,0);
					SetPlayerAmmo(playerid,45 ,0);
					SetPlayerAmmo(playerid,42 ,0);
					ClearAnimations(playerid);
					SetPlayerSpecialAction(playerid,0);
					SendClientMessage(playerid, ZIELONY, "Odlozyles przedmioty");
				}
			}
		}
		return 1;

	}
	
	
 	if(dialogid == TUNING && response)
    {
        switch(listitem)
        {
			case 0:
			{
				ShowPlayerDialog(playerid, TUNINGBLADE, 2, "Tuning Blade - a", "Dach Covertible\nWydech Chrome\nWydech Slamin\nProgi Chrome Strip\nDach Vinyl Hardtop\nPrzedni zderzak Slamin\nPrzedni zderzak Chrome\nTylny zderzak Slamin\nTylny zderzak Chrome\nPaintjob 1\nPaintjob 2\nPaintjob 3", "Ok", "Wyjdz");
   			}
   			case 1:
			{
				ShowPlayerDialog(playerid, TUNINGBROADWAY, 2, "Tuning Broadway - a", "Komplet Chrome\nKomplet Slamin\nPaintjob 1\nPaintjob 2", "Ok", "Wyjdz");
			}
			case 2:
			{
				ShowPlayerDialog(playerid, TUNINGELEGY, 2, "Tuning Elegy", "Spoiler Alien\nSpoiler Xflow\nPrzedni zderzak Alien\nPrzedni zderzak Xflow\ntylny zderzak Alien\nTylny zderzak Xflow\nWydech Alien\nWydech Xflow\nDachowy wlot powietrza Alien\nDachowy wlot powietrza Xflow\nPaintjob 1\nPaintjob 2\nPaintjob 3\nProgi Alien\nProgi Xflow", "Ok", "Wyjdz");
			}
   			case 3:
   			{
				ShowPlayerDialog(playerid, TUNINGFLASH, 2, "Tuning Flash - a", "Komplet Alien\nKomplet Xflow\nPaintjob 1\nPaintjob 2\nPaintjob 3", "Ok", "Wyjdz");
			}
			case 4:
			{
				ShowPlayerDialog(playerid, TUNINGJESTER, 2, "Tuning Jester - a", "Tuning Alien\nTuning Xflow\nPaintjob 1\nPaintjob 2\nPaintjob 3", "Ok", "Wyjdz");
			}
			case 5:
			{
				ShowPlayerDialog(playerid, TUNINGREMINGTON, 2, "Tuning Remington - a", "Komplet Chrome\nKomplet Slamin\nPaintjob 1\nPaintjob 2\nPaintjob 3", "Ok", "Wyjdz");
			}
			case 6:
			{
				ShowPlayerDialog(playerid, TUNINGSAVANNA, 2, "Tuning Savann - y", "Komplet Chrome\nKomplet Slamin\nPaintjob 1\nPaintjob 2\nPaintjob 3", "Ok", "Wyjdz");
			}
			case 7:
			{
				ShowPlayerDialog(playerid, TUNINGSLAMVAN, 2, "Tuning Slamvan - a", "Komplet Slamin\nKomplet Chrome\nPaintjob 1\nPaintjob 2\nPaintjob 3", "Ok", "Wyjdz");
			}
			case 8:
			{
				ShowPlayerDialog(playerid, TUNINGSULTAN, 2, "Tuning Sultan - a", "Spoiler Alien\nSpoiler Xflow\nPrzedni zderzak Alien\nPrzedni zderzak Xflow\nTylny zderzak Alien\nTylny zderzak Xflow\nProgi Alien\nProgi Xflow\nWydech Alien\nWydech Xflow\nDachowy wlot powietrza Alien\nDachowy wlot powietrza Xflow\nPaintjob 1\nPaintjob 2\nPaintjob 3", "Ok", "Wyjdz");
			}
			case 9:
			{
				ShowPlayerDialog(playerid, TUNINGSTRATUM, 2, "Tuning Stratum - a", "Dachowy wlot powietrza Alien\nDachowy wlot powietrza Xflow\nProgi Alien\nProgi Xflow\nSpoiler Alien\nSpoiler Xflow\nWydech Xflow\nPrzedni zderzak Alien\nPrzedni zderzak Xflow\nTylny zderzak Alien\nTylny zderzak Xflow\nPaintjob 1\nPaintjob 2\nPaintjob 3", "Ok", "Wyjdz");
			}
			case 10:
			{
				ShowPlayerDialog(playerid, TUNINGTORNADO, 2, "Tuning Tornad - a", "Progi Chrome Strip\nWydech Slamin\nWydech Chrome\nPrzedni zderzak Slamin\nPrzedni zderzak Chrome\nTylny zderzak Slamin\nTylny zderzak Chrome\nPaintjob 1\nPaintjob 2\nPaintjob 3", "Ok", "Wyjdz");
			}
			case 11:
			{
				ShowPlayerDialog(playerid, TUNINGURANUS, 2, "Tuning Uranus - a", "Dachowy wlot powietrza Alien\nDachowy wlot powietrza Xflow\nWydech Xflow\nWydech Alien\nProgi Alien\nProgi Xflow\nSpoiler Xflow\nSpoiler Alien\nPrzedni zderzak Xflow\nPrzedni zderzak Alien\nPrzedni zderzak Xflow\nTylni zderzak Alien\nPaintjob 1\nPaintjob 2\nPaintjob 3", "Ok", "Wyjdz");
			}
		}
        return 1;
    }
   	if(dialogid == TUNINGSLAMVAN)
	{
		new autoid = GetPlayerVehicleID(playerid);
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					AddVehicleComponent(autoid,1110);
					AddVehicleComponent(autoid,1114);
					AddVehicleComponent(autoid,1116);
					AddVehicleComponent(autoid,1119);
					AddVehicleComponent(autoid,1121);
					AddVehicleComponent(autoid,1111);
				}
				case 1:
				{
					AddVehicleComponent(autoid,1109);
					AddVehicleComponent(autoid,1112);
					AddVehicleComponent(autoid,1113);
					AddVehicleComponent(autoid,1115);
					AddVehicleComponent(autoid,1117);
					AddVehicleComponent(autoid,1118);
					AddVehicleComponent(autoid,1120);
				}
				case 2:
				{
					ChangeVehiclePaintjob(autoid,0);
				}
				case 3:
				{
					ChangeVehiclePaintjob(autoid,1);
				}
				case 4:
				{
					ChangeVehiclePaintjob(autoid,2);
				}
			}
		}
		return 1;
	}
   	if(dialogid == TUNINGSULTAN)
	{
		new autoid = GetPlayerVehicleID(playerid);
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					AddVehicleComponent(autoid,1138);
				}
				case 1:
				{
					AddVehicleComponent(autoid,1139);
				}
				case 2:
				{
					AddVehicleComponent(autoid,1169);
				}
				case 3:
				{
					AddVehicleComponent(autoid,1170);
				}
				case 4:
				{
					AddVehicleComponent(autoid,1141);
				}
				case 5:
				{
					AddVehicleComponent(autoid,1140);
				}
				case 6:
				{
					AddVehicleComponent(autoid,1026);
                	AddVehicleComponent(autoid,1027);
				}
				case 7:
				{
					AddVehicleComponent(autoid,1030);
					AddVehicleComponent(autoid,1031);
				}
				case 8:
				{
					AddVehicleComponent(autoid,1028);
				}
				case 9:
				{
					AddVehicleComponent(autoid,1029);
				}
				case 10:
				{
					AddVehicleComponent(autoid,1032);
				}
				case 11:
				{
					AddVehicleComponent(autoid,1033);
				}
				case 12:
				{
					ChangeVehiclePaintjob(autoid,0);
				}
				case 13:
				{
					ChangeVehiclePaintjob(autoid,1);
				}
				case 14:
				{
					ChangeVehiclePaintjob(autoid,2);
				}
			}
		}
		return 1;
	}
   	if(dialogid == TUNINGELEGY)
	{
		new autoid = GetPlayerVehicleID(playerid);
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					AddVehicleComponent(autoid,1147);
				}
				case 1:
				{
					AddVehicleComponent(autoid,1146);
				}
				case 2:
				{
					AddVehicleComponent(autoid,1149);
				}
				case 3:
				{
					AddVehicleComponent(autoid,1148);
				}
				case 4:
				{
					AddVehicleComponent(autoid,1171);
				}
				case 5:
				{
					AddVehicleComponent(autoid,1172);
				}
				case 6:
				{
					AddVehicleComponent(autoid,1034);
				}
				case 7:
				{
					AddVehicleComponent(autoid,1037);
				}
				case 8:
				{
					AddVehicleComponent(autoid,1038);
				}
				case 9:
				{
					AddVehicleComponent(autoid,1035);
				}
				case 10:
				{
					AddVehicleComponent(autoid,1036);
					AddVehicleComponent(autoid,1040);
				}
				case 11:
				{
					AddVehicleComponent(autoid,1041);
					AddVehicleComponent(autoid,1039);
				}
				case 12:
				{
					ChangeVehiclePaintjob(autoid,0);
				}
				case 13:
				{
					ChangeVehiclePaintjob(autoid,1);
				}
				case 14:
				{
					ChangeVehiclePaintjob(autoid,2);
				}
			}
		}
		return 1;
	}
   	if(dialogid == TUNINGJESTER)
	{
		new autoid = GetPlayerVehicleID(playerid);
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					AddVehicleComponent(autoid,1159);
					AddVehicleComponent(autoid,1160);
					AddVehicleComponent(autoid,1162);
					AddVehicleComponent(autoid,1065);
					AddVehicleComponent(autoid,1067);
					AddVehicleComponent(autoid,1069);
					AddVehicleComponent(autoid,1071);
				}
				case 1:
				{
					AddVehicleComponent(autoid,1158);
					AddVehicleComponent(autoid,1161);
					AddVehicleComponent(autoid,1173);
					AddVehicleComponent(autoid,1066);
					AddVehicleComponent(autoid,1068);
					AddVehicleComponent(autoid,1070);
					AddVehicleComponent(autoid,1072);
				}
				case 2:
				{
					ChangeVehiclePaintjob(autoid,0);
				}
				case 3:
				{
					ChangeVehiclePaintjob(autoid,1);
				}
				case 4:
				{
					ChangeVehiclePaintjob(autoid,2);
				}
			}
		}
		return 1;
	}
   	if(dialogid == TUNINGFLASH)
	{
		new autoid = GetPlayerVehicleID(playerid);
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					AddVehicleComponent(autoid,1046);
					AddVehicleComponent(autoid,1047);
					AddVehicleComponent(autoid,1049);
					AddVehicleComponent(autoid,1051);
					AddVehicleComponent(autoid,1054);
					AddVehicleComponent(autoid,1150);
					AddVehicleComponent(autoid,1153);
				}
				case 1:
				{
					AddVehicleComponent(autoid,1045);
					AddVehicleComponent(autoid,1048);
					AddVehicleComponent(autoid,1050);
					AddVehicleComponent(autoid,1052);
					AddVehicleComponent(autoid,1053);
					AddVehicleComponent(autoid,1151);
					AddVehicleComponent(autoid,1152);
				}
				case 2:
				{
					ChangeVehiclePaintjob(autoid,0);
				}
				case 3:
				{
					ChangeVehiclePaintjob(autoid,1);
				}
				case 4:
				{
					ChangeVehiclePaintjob(autoid,2);
				}
			}
		}
		return 1;
	}
   	if(dialogid == TUNINGSAVANNA)
	{
		new autoid = GetPlayerVehicleID(playerid);
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					AddVehicleComponent(autoid,1102);
					AddVehicleComponent(autoid,1129);
					AddVehicleComponent(autoid,1130);
					AddVehicleComponent(autoid,1133);
					AddVehicleComponent(autoid,1187);
					AddVehicleComponent(autoid,1189);
				}
				case 1:
				{
					AddVehicleComponent(autoid,1188);
					AddVehicleComponent(autoid,1186);
					AddVehicleComponent(autoid,1185);
					AddVehicleComponent(autoid,1131);
					AddVehicleComponent(autoid,1132);
				}
				case 2:
				{
					ChangeVehiclePaintjob(autoid,0);
				}
				case 3:
				{
					ChangeVehiclePaintjob(autoid,1);
				}
				case 4:
				{
					ChangeVehiclePaintjob(autoid,2);
				}
			}
		}
		return 1;
	}
   	if(dialogid == TUNINGREMINGTON)
	{
		new autoid = GetPlayerVehicleID(playerid);
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					AddVehicleComponent(autoid,1100);
					AddVehicleComponent(autoid,1101);
					AddVehicleComponent(autoid,1106);
					AddVehicleComponent(autoid,1122);
					AddVehicleComponent(autoid,1123);
					AddVehicleComponent(autoid,1124);
					AddVehicleComponent(autoid,1125);
					AddVehicleComponent(autoid,1126);
					AddVehicleComponent(autoid,1179);
					AddVehicleComponent(autoid,1180);

				}
				case 1:
				{
					AddVehicleComponent(autoid,1127);
					AddVehicleComponent(autoid,1178);
					AddVehicleComponent(autoid,1185);
				}
				case 2:
				{
					ChangeVehiclePaintjob(autoid,0);
				}
				case 3:
				{
					ChangeVehiclePaintjob(autoid,1);
				}
				case 4:
				{
					ChangeVehiclePaintjob(autoid,2);
				}
			}
		}
		return 1;
	}
   	if(dialogid == TUNINGSTRATUM)
	{
		new autoid = GetPlayerVehicleID(playerid);
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					AddVehicleComponent(autoid,1055);
				}
				case 1:
				{
					AddVehicleComponent(autoid,1061);
				}
				case 2:
				{
					AddVehicleComponent(autoid,1056);
					AddVehicleComponent(autoid,1062);
				}
				case 3:
				{
					AddVehicleComponent(autoid,1057);
					AddVehicleComponent(autoid,1063);
				}
				case 4:
				{
					AddVehicleComponent(autoid,1058);
				}
				case 5:
				{
					AddVehicleComponent(autoid,1060);
				}
				case 6:
				{
					AddVehicleComponent(autoid,1059);
				}
				case 7:
				{
					AddVehicleComponent(autoid,1154);
				}
				case 8:
				{
					AddVehicleComponent(autoid,1156);
				}
				case 9:
				{
					AddVehicleComponent(autoid,1155);
				}
				case 10:
				{
					AddVehicleComponent(autoid,1157);
				}
				case 11:
				{
					ChangeVehiclePaintjob(autoid,0);
				}
				case 12:
				{
					ChangeVehiclePaintjob(autoid,1);
				}
				case 13:
				{
					ChangeVehiclePaintjob(autoid,2);
				}
			}
		}
		return 1;
	}
	if(dialogid == TUNINGBLADE)
	{
		new autoid = GetPlayerVehicleID(playerid);
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					AddVehicleComponent(autoid,1103);
				}
				case 1:
				{
					AddVehicleComponent(autoid,1104);
				}
				case 2:
				{
					AddVehicleComponent(autoid,1105);
				}
				case 3:
				{
					AddVehicleComponent(autoid,1107);
					AddVehicleComponent(autoid,1108);
				}
				case 4:
				{
					AddVehicleComponent(autoid,1128);
				}
				case 5:
				{
					AddVehicleComponent(autoid,1181);
				}
				case 6:
				{
					AddVehicleComponent(autoid,1182);
				}
				case 7:
				{
					AddVehicleComponent(autoid,1184);
				}
				case 8:
				{
					AddVehicleComponent(autoid,1183);
				}
				case 9:
				{
					ChangeVehiclePaintjob(autoid,0);
				}
				case 10:
				{
					ChangeVehiclePaintjob(autoid,1);
				}
				case 11:
				{
					ChangeVehiclePaintjob(autoid,2);
				}
			}
		}
		return 1;
	}
	if(dialogid == TUNINGBROADWAY)
	{
		new autoid = GetPlayerVehicleID(playerid);
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					AddVehicleComponent(autoid,1042);
					AddVehicleComponent(autoid,1044);
					AddVehicleComponent(autoid,1099);
					AddVehicleComponent(autoid,1174);
					AddVehicleComponent(autoid,1176);
				}
				case 1:
				{
					AddVehicleComponent(autoid,1043);
					AddVehicleComponent(autoid,1175);
					AddVehicleComponent(autoid,1177);
				}
				case 2:
				{
					ChangeVehiclePaintjob(autoid,0);
				}
				case 3:
				{
					ChangeVehiclePaintjob(autoid,1);
				}
			}
		}
		return 1;
	}

	if(dialogid == TUNINGTORNADO)
	{
		new autoid = GetPlayerVehicleID(playerid);
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					AddVehicleComponent(autoid,1134);
					AddVehicleComponent(autoid,1137);
				}
				case 1:
				{
					AddVehicleComponent(autoid,1135);
				}
				case 2:
				{
					AddVehicleComponent(autoid,1136);
				}
				case 3:
				{
					AddVehicleComponent(autoid,1190);
				}
				case 4:
				{
					AddVehicleComponent(autoid,1191);
				}
				case 5:
				{
					AddVehicleComponent(autoid,1192);
				}
				case 6:
				{
					AddVehicleComponent(autoid,1193);
				}
				case 7:
				{
					ChangeVehiclePaintjob(autoid,0);
				}
				case 8:
				{
					ChangeVehiclePaintjob(autoid,1);
				}
				case 9:
				{
					ChangeVehiclePaintjob(autoid,2);
				}
			}
		}
		return 1;
	}
	if(dialogid == TUNINGURANUS)
	{
		new autoid = GetPlayerVehicleID(playerid);
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					AddVehicleComponent(autoid,1088);
				}
				case 1:
				{
					AddVehicleComponent(autoid,1091);
				}
				case 2:
				{
					AddVehicleComponent(autoid,1089);
				}
				case 3:
				{
					AddVehicleComponent(autoid,1092);
				}
				case 4:
				{
					AddVehicleComponent(autoid,1090);
					AddVehicleComponent(autoid,1094);
				}
				case 5:
				{
					AddVehicleComponent(autoid,1093);
					AddVehicleComponent(autoid,1095);
				}
				case 6:
				{
					AddVehicleComponent(autoid,1163);
				}
				case 7:
				{
					AddVehicleComponent(autoid,1164);
				}
				case 8:
				{
					AddVehicleComponent(autoid,1165);
				}
				case 9:
				{
					AddVehicleComponent(autoid,1166);
				}
				case 10:
				{
					AddVehicleComponent(autoid,1167);
				}
				case 11:
				{
					AddVehicleComponent(autoid,1168);
				}
				case 12:
				{
					ChangeVehiclePaintjob(autoid,0);
				}
				case 13:
				{
					ChangeVehiclePaintjob(autoid,1);
				}
				case 14:
				{
					ChangeVehiclePaintjob(autoid,2);
				}
			}
		}
		return 1;
	}
	
	
	if(dialogid == DIALOG_SPRZET_PSP)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					GivePlayerWeapon(playerid, 9, 9999999);//pila
					SendClientMessage(playerid, BIALY, "Zabrales z pojazu pile spalinowa");
					
				}
				case 1:
				{
					GivePlayerWeapon(playerid, 6, 64);///lopata
					SendClientMessage(playerid, BIALY, "Zabrales z pojazu lopate");
				}
				case 2:
				{
					GivePlayerWeapon(playerid, 45, 1);//noptowizor
					SendClientMessage(playerid, BIALY, "Zabrales z pojazu kamere na pod czerwien");
				}
				case 3:
				{
					GivePlayerWeapon(playerid, 42, 999999*999999);//gasnica
					SendClientMessage(playerid, BIALY, "Zabrales z pojazu gasnice proszkowa ");
				}
				case 4:
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid,2)) RemovePlayerAttachedObject(playerid,2);
					SetPlayerAttachedObject(playerid, 1, 2902, 1, -0.239000, -0.167999, 0, 0, 0, 0, 1, 1, 1, 0xFF0005FF);////butla
					SetPlayerAttachedObject(playerid, 4, 19472, 18, 0.103999, -0.020998, -0.018999, -69.300003, 3.999949, 7.100008, 1, 1, 1);///maska	
					SendClientMessage(playerid, BIALY, "Zalozyles aparat ochrony drog oddechowych");
					
				}
				case 5:
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid,2)) RemovePlayerAttachedObject(playerid,2);///latarka
					SetPlayerAttachedObject(playerid, 2, 18641, 6, 0.071000, 0.032001, 0.063000, 175.399993, 0, 0, 1, 1, 1, 0xFFFA22FF);
					SendClientMessage(playerid, BIALY, "Zabrales z pojazu latarke ");
				}
				case 6:
				{
					SetPlayerAttachedObject(playerid, 2, 2919, 6, 0.253000, 0.012000, 0.086999, 1.900001, -105.800010, 2.599996, 0.203000, 0.167999, 0.363999, 0xFF0005FF);
					SendClientMessage(playerid, BIALY, "Zabrales z pojazu Torbe medyczna PSP-R1");///Torba PSP-R1
				}
				case 7:
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
					SetPlayerAttachedObject(playerid, 3, 2060, 17, -0.137000, 0.480998, 0, 0, -84.599975, 0, 1, 1, 1, 0xFF0005FF);
					SendClientMessage(playerid, BIALY, "Zabrales z pojazu worek z sorbentem ");
					SetPVarInt(playerid, "ma_sorbent", 1);
				}
				case 9:
				{
					RemovePlayerAttachedObject(playerid,1);
					RemovePlayerAttachedObject(playerid,2);
					RemovePlayerAttachedObject(playerid,3);
					RemovePlayerAttachedObject(playerid,4);
					SetPlayerAmmo(playerid,9 ,0);
					SetPlayerAmmo(playerid,6 ,0);
					SetPlayerAmmo(playerid,45 ,0);
					SetPlayerAmmo(playerid,42 ,0);
					ClearAnimations(playerid);
					SetPlayerSpecialAction(playerid,0);
					SendClientMessage(playerid, ZIELONY, "Odlozyles przedmioty");
				}
			}
		}
		return 1;

	}
	if(dialogid == DIALOG_RADIO)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
						PlayerData[playerid][pRadioOn] = true;
						PlayAudioStreamForPlayer(playerid, "http://radiozetmp3-01.eurozet.pl:8400"); //Radio ZET
						SendClientMessage(playerid, -1, ""C_SZARY"["C_ZIELONY"Radio"C_SZARY"]: Wybrales radio ZET..");
				}
				case 1:
				{
					PlayerData[playerid][pRadioOn] = true;
						PlayAudioStreamForPlayer(playerid, "http://files.kusmierz.be/rmf/rmffm.pls");// RMF FM
      					SendClientMessage(playerid, -1, ""C_SZARY"["C_ZIELONY"R"C_BIALY"adio"C_SZARY"]:"C_ZIELONY"W"C_SZARY"ybrales radio RMF FM.");
				}
				case 2:
				{
					PlayerData[playerid][pRadioOn] = true;
						PlayAudioStreamForPlayer(playerid, "http://poznan5-5.radio.pionier.net.pl:8000/eska-warszawa.mp3.m3u"); //ESKA
                        SendClientMessage(playerid, -1, ""C_SZARY"["C_ZIELONY"Radio"C_SZARY"]: Wybrales radio ESKA.");
				}
				case 3:
				{
					PlayerData[playerid][pRadioOn] = true;
						PlayAudioStreamForPlayer(playerid, "http://polskastacja.pl/play/hot100.pls"); // HOT100
						SendClientMessage(playerid, -1, ""C_SZARY"["C_ZIELONY"Radio"C_SZARY"]: Wybrales radio HOT100.");
				}
				case 4:
				{
					PlayerData[playerid][pRadioOn] = true;
				        PlayAudioStreamForPlayer(playerid, "http://polskastacja.pl/play/clubhits.pls"); // PARTY
				        SendClientMessage(playerid, -1, ""C_SZARY"["C_ZIELONY"Radio"C_SZARY"]: Wybrales radio PARTY.");
				}
				case 5:
				{
					PlayerData[playerid][pRadioOn] = true;
				        PlayAudioStreamForPlayer(playerid, "http://polskastacja.pl/play/aac_electrohouse.pls"); // ELECTRO HOUSE
				        SendClientMessage(playerid, -1, ""C_SZARY"["C_ZIELONY"Radio"C_SZARY"]: Wybrales radio ELECTRO-HOUSE.");
			    }
				case 6:
				{
					PlayerData[playerid][pRadioOn] = true;
				        PlayAudioStreamForPlayer(playerid, "http://polskastacja.pl/play/aac_house.pls"); // HOUSE DANCE
				        SendClientMessage(playerid, -1, ""C_SZARY"["C_ZIELONY"Radio"C_SZARY"]: Wybrales radio HOUSE DANCE.");
			    }
				case 7:
				{
					PlayerData[playerid][pRadioOn] = true;
				        PlayAudioStreamForPlayer(playerid, "http://polskastacja.pl/play/aac_polskihh.pls"); // POLSKI HIP-HOP
				        SendClientMessage(playerid, -1, ""C_SZARY"["C_ZIELONY"Radio"C_SZARY"]: Wybrales radio POLSKI HIP-HOP.");
			    }
				case 8:
				{
					PlayerData[playerid][pRadioOn] = true;
				        PlayAudioStreamForPlayer(playerid, "http://polskastacja.pl/play/aac_hiphop.pls"); // CZARNY HIP-HOP
				        SendClientMessage(playerid, -1, ""C_SZARY"["C_ZIELONY"Radio"C_SZARY"]: Wybrales radio CZARNY HIP-HOP.");
			    }
				case 9:
				{
					PlayerData[playerid][pRadioOn] = true;
				        PlayAudioStreamForPlayer(playerid, "http://polskastacja.pl/play/aac_discopolo.pls"); // DISCO-POLO
				        SendClientMessage(playerid, -1, ""C_SZARY"["C_ZIELONY"Radio"C_SZARY"]: Wybrales radio DISCO-POLO.");
			    }
				case 10:
				{
					PlayerData[playerid][pRadioOn] = true;
				        PlayAudioStreamForPlayer(playerid, "http://polskastacja.pl/play/aac_ibizahits.pls"); // IBIZA-HITS
				        SendClientMessage(playerid, -1, ""C_SZARY"["C_ZIELONY"Radio"C_SZARY"]: Wybrales radio IBIZA-HITS.");
			    }
				case 11:
				{
					PlayerData[playerid][pRadioOn] = true;
				        PlayAudioStreamForPlayer(playerid, "http://polskastacja.pl/play/all_hq.pls"); // POLSKIE PRZEBOJE
				        SendClientMessage(playerid, -1, ""C_SZARY"["C_ZIELONY"Radio"C_SZARY"]: Wybrales radio POLSKIE PRZEBOJE.");
			    }
				case 12:
				{
					PlayerData[playerid][pRadioOn] = true;
				        PlayAudioStreamForPlayer(playerid, "http://www.polskastacja.pl/play/mnt_hq.pls"); // NA TOPIE
				        SendClientMessage(playerid, -1, ""C_SZARY"["C_ZIELONY"Radio"C_SZARY"]: Wybrales radio NA TOPIE.");
			    }
				case 13:
				{
					PlayerData[playerid][pRadioOn] = true;
				        PlayAudioStreamForPlayer(playerid, "http://polskastacja.pl/play/aac_hardstyle.pls"); // HARD STYLE
				        SendClientMessage(playerid, -1, ""C_SZARY"["C_ZIELONY"Radio"C_SZARY"]: Wybrales radio HARD STYLE.");
			    }
				case 14:
				{
					PlayerData[playerid][pRadioOn] = false;
					StopAudioStreamForPlayer(playerid);
					SendClientMessage(playerid, -1, ""C_SZARY"["C_ZIELONY"Radio"C_SZARY"]: Wylaczono stacje.");
				}
			}
		}

		return 1;
	}
	
	if(dialogid == DIALOG_HOUSE_BUY) //Zakup domu
	{
		if(response)
		{
			new uid = GetBuildUID(playerid);
			if(uid == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Wystapil nieoczekiwany problem przy zakupie budynku.");
			if(BudynekData[uid][bPrice] > GetPlayerCash(playerid)) return SendClientMessage(playerid, -1, "{a4a4a4}Niestety nie stac Cie na zakup tego budynku.");
			if(BudynekData[uid][bHouseLevel] > PlayerData[playerid][pLevel]) return SendClientMessage(playerid, -1, "{a4a4a4}Niestety nie masz wymaganego poziomu na zakup tego budynku.");
			
			
			
			PlayerData[playerid][pPrivHouse]++;
			GivePlayerCash(playerid, -BudynekData[uid][bPrice]);
			BudynekData[uid][bOwnerUID] = PlayerData[playerid][pUID];
			format(BudynekData[uid][bOwnerNick], 23, "%s", PlayerData[playerid][pName]);
			GameTextForPlayer(playerid, "~g~ZAKUP DOMU POMYSLNIE SIE ZACZKONCZYL.~n~JESTES OD TERZ WLASCICIELEM.", 10000, 3);
			
			
			if(IsValidDynamicPickup(BudynekData[uid][bPickup])) DestroyDynamicPickup(BudynekData[uid][bPickup]);
			if(IsValidDynamicPickup(BudynekData[uid][bPickup2])) DestroyDynamicPickup(BudynekData[uid][bPickup2]);
			if(IsValidDynamic3DTextLabel(BudynekData[uid][bText3D])) DestroyDynamic3DTextLabel(BudynekData[uid][bText3D]);
			if(IsValidDynamicMapIcon(BudynekData[uid][bMapIcon])) DestroyDynamicMapIcon(BudynekData[uid][bMapIcon]);
			
			BudynekData[uid][bPickup2]  = CreateDynamicPickup(BudynekData[uid][bPickup_PWN_ID], 23, BudynekData[uid][bPos_IN][0], BudynekData[uid][bPos_IN][1], BudynekData[uid][bPos_IN][2], uid, BudynekData[uid][bInt_IN]);
			BudynekData[uid][bPickup]  = CreateDynamicPickup(19522,23,BudynekData[uid][bPos_OUT][0],BudynekData[uid][bPos_OUT][1],BudynekData[uid][bPos_OUT][2]);
			BudynekData[uid][bMapIcon] = CreateDynamicMapIcon(BudynekData[uid][bPos_OUT][0],BudynekData[uid][bPos_OUT][1],BudynekData[uid][bPos_OUT][2], 32, -1, 0, 0);
			
			BudynekData[uid][bMapIcon_PWN_ID] = 32;
			HouseText3D(uid);
			SaveBuild(uid);
		}
		return 1;
	}
	if(dialogid == DIALOG_HOUSE_SELL) //Sprzedaj dom.
	{
		if(response)
		{
			new uid = GetBuildUID(playerid);
			if(uid == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Wystapil nieoczekiwany problem przy sprzedazy budynku.");
			
			
			
			PlayerData[playerid][pPrivHouse]--;
			GivePlayerCash(playerid, BudynekData[uid][bPrice]/2);
			BudynekData[uid][bOwnerUID] = -1;
			format(BudynekData[uid][bOwnerNick], 23, "%s", "Brak");
			GameTextForPlayer(playerid, "~g~SPRZEDAZ DOMU POMYSLNIE ZAKONCZONA.~n~OD TERAZ MA ON NOWEGO WLASCICIELA.", 10000, 3);
			
			
			if(IsValidDynamicPickup(BudynekData[uid][bPickup])) DestroyDynamicPickup(BudynekData[uid][bPickup]);
			if(IsValidDynamicPickup(BudynekData[uid][bPickup2])) DestroyDynamicPickup(BudynekData[uid][bPickup2]);
			if(IsValidDynamic3DTextLabel(BudynekData[uid][bText3D])) DestroyDynamic3DTextLabel(BudynekData[uid][bText3D]);
			if(IsValidDynamicMapIcon(BudynekData[uid][bMapIcon])) DestroyDynamicMapIcon(BudynekData[uid][bMapIcon]);
			
			BudynekData[uid][bPickup2]  = CreateDynamicPickup(BudynekData[uid][bPickup_PWN_ID], 23, BudynekData[uid][bPos_IN][0], BudynekData[uid][bPos_IN][1], BudynekData[uid][bPos_IN][2], uid, BudynekData[uid][bInt_IN]);
			BudynekData[uid][bPickup]  = CreateDynamicPickup(1273,23,BudynekData[uid][bPos_OUT][0],BudynekData[uid][bPos_OUT][1],BudynekData[uid][bPos_OUT][2]);
			BudynekData[uid][bMapIcon] = CreateDynamicMapIcon(BudynekData[uid][bPos_OUT][0],BudynekData[uid][bPos_OUT][1],BudynekData[uid][bPos_OUT][2], 31, -1, 0, 0);
			
			BudynekData[uid][bMapIcon_PWN_ID] = 31;
			HouseText3D(uid);
			SaveBuild(uid);
		}
		return 1;
	}
	if(dialogid == DIALOG_MOTEL_ASK)
	{
		if(response)
		{
			if(GetPlayerCash(playerid) < SETTINGS_PRICE_HOTEL) return SendClientMessage(playerid, -1, "{a4a4a4}Niestety nie posiadasz odpwoiedniej ilosci pieniedzy przy sobie na zaplate za nocleg.");
			GivePlayerCash(playerid, - SETTINGS_PRICE_HOTEL);
			PlayerData[playerid][pSen] = 100;
			PlayerTextDrawShow(playerid, Txd_others_txds[playerid][0]);
			SetTimerEx("HideBlackScreen", 15000, false, "d", playerid);
			TogglePlayerControllable(playerid, false);
		}
		return 1;
	}
	if(dialogid == DIALOG_URZAD_DOKUMENTY)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: //Dowod osobisty
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_DOWOD_OSOBISTY) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_DOWOD_OSOBISTY);
					PlayerData[playerid][pDowodOsobisty] = 1;
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono dowod osobisty, od teraz mozesz uzywac komendy /dokumenty [id] w celu pokazania tozsamosci.");
				}
				case 1: //Dowod rejestracji
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_DOWOD_REJESTRACYJNY) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_DOWOD_REJESTRACYJNY);
					PlayerData[playerid][pDowodRejestracyjny] = 1;
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono dowod rejestracyjny.");
				}
				case 2: //Ubezpieczenie
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_UBEZPIECZENIE) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_UBEZPIECZENIE);
					PlayerData[playerid][pUbezpieczenie] = 1;
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono ubezpieczenie, od teraz nie placisz za leczenia w szpitalu.");
				}
				case 3: //Paszport
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_PASZPORT) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_PASZPORT);
					PlayerData[playerid][pPaszport] = 1;
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono paszport, od teraz mozesz legalnie przejezdzac przez granice.");
				}
				case 4: //adr
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_ADR) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(PlayerData[playerid][pLevel] < 10) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz 10 poziomu postaci, nie mozesz zakupic karty adr.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_ADR);
					PlayerData[playerid][pKartaADR] = 1;
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono karte adr, dostepne sa dla ciebie od teraz nowe towary.");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_ELEKT_BUY)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: //Teelefon
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_TELEFON) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_TELEFON);
					CreatePlayerItem(playerid, "Telefon", TYPE_ITEM_TELEFON);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Telefon.");
				}
				case 1: //Teelefon luksusowy
				{
					if(!GetPlayerVipStatus(playerid)) return SendClientMessage(playerid, -1, "{a4a4a4}Opcja ta nalezy jedynie dla konta vip.");
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_TELEFON_VIP) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_TELEFON_VIP);
					CreatePlayerItem(playerid, "Telefon luksusowy", TYPE_ITEM_TELEFON_VIP);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Telefon Luksusowy.");
				}
				case 2: //Zestaw naprawczy
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_NAPRAWCZY) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_NAPRAWCZY);
					CreatePlayerItem(playerid, "Zestaw naprawczy", TYPE_ITEM_NAPRAWCZY);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Zestaw Naprawczy.");
				}
				case 3: //Zapasowa opona
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_OPONA) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_OPONA);
					CreatePlayerItem(playerid, "Zapasowa opona", TYPE_ITEM_OPONA);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Zapasowa Opona.");
				}
				case 4: //Spadochron
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_SPADOCHRON) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_SPADOCHRON);
					CreatePlayerItem(playerid, "Spadochron", TYPE_ITEM_SPADOCHRON);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Spadochron.");
				}
				case 5: //Kask
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_KASK) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_KASK);
					CreatePlayerItem(playerid, "Kask motocyklowy", TYPE_ITEM_KASK);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Kask Motocyklowy.");
				}
				case 6: //Czapka
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_CZAPKA) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_CZAPKA);
					CreatePlayerItem(playerid, "Czapka swiateczna", TYPE_ITEM_CZAPKA);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Czapke swiateczna.");
				}
				case 7: //GBS
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_GBS) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_GBS);
					CreatePlayerItem(playerid, "GBS", TYPE_ITEM_GBS);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono GBS.");
				}
				case 8: //CB
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_CBRADIO) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_CBRADIO);
					CreatePlayerItem(playerid, "CB-RADIO", TYPE_ITEM_CBRADIO);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono CB-RADIO.");
				}
				case 9: //Doladowanie 25
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_DOLADOWANIE_25) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_DOLADOWANIE_25);
					CreatePlayerItem(playerid, "Doladowanie $25", TYPE_ITEM_DOLADOWANIE_25);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Doladowanie $25.");
				}
				case 10: //Doladowanie 150
				{
					if(!GetPlayerVipStatus(playerid)) return SendClientMessage(playerid, -1, "{a4a4a4}Opcja ta nalezy jedynie dla konta vip.");
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_DOLADOWANIE_150) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_DOLADOWANIE_150);
					CreatePlayerItem(playerid, "Doladowanie $150", TYPE_ITEM_DOLADOWANIE_150);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Doladowanie $150.");
				}
				case 11: //discman
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_DISCMAN) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_DISCMAN);
					CreatePlayerItem(playerid, "Discman", TYPE_ITEM_DISCMAN);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Discman.");
				}
			}
			ShowMenuElekt(playerid);
		}
		return 1;
	}
	if(dialogid == DIALOG_247_BUY)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: //Doladowanie 25
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_DOLADOWANIE_25) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_DOLADOWANIE_25);
					CreatePlayerItem(playerid, "Doladowanie $25", TYPE_ITEM_DOLADOWANIE_25);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Doladowanie $25.");
				}
				case 1: //Doladowanie 150
				{
					if(!GetPlayerVipStatus(playerid)) return SendClientMessage(playerid, -1, "{a4a4a4}Opcja ta nalezy jedynie dla konta vip.");
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_DOLADOWANIE_150) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_DOLADOWANIE_150);
					CreatePlayerItem(playerid, "Doladowanie $150", TYPE_ITEM_DOLADOWANIE_150);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Doladowanie $150.");
				}
				case 2: //Energetyk (15 Sen)
				{
					//if(!GetPlayerVipStatus(playerid)) return SendClientMessage(playerid, -1, "{a4a4a4}Opcja ta nalezy jedynie dla konta vip.");
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_ENE1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_ENE1);
					CreatePlayerItem(playerid, "Energetyk", TYPE_ITEM_JEDZENIE, 0, 15);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Energetyk.");
				}
				case 3: //Energetyk (35 Sen)
				{
					if(!GetPlayerVipStatus(playerid)) return SendClientMessage(playerid, -1, "{a4a4a4}Opcja ta nalezy jedynie dla konta vip.");
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_ENE2) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_ENE2);
					CreatePlayerItem(playerid, "Energetyk Albanski Raj", TYPE_ITEM_JEDZENIE, 0, 35);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Energetyk Albanski Raj.");
				}
				case 4: //Energetyk (25 Sen)
				{
					//if(!GetPlayerVipStatus(playerid)) return SendClientMessage(playerid, -1, "{a4a4a4}Opcja ta nalezy jedynie dla konta vip.");
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_ENE3) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_ENE3);
					CreatePlayerItem(playerid, "Energetyk Black", TYPE_ITEM_JEDZENIE, 0, 25);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Energetyk Black.");
				}
				case 5: //Doner (10 Glod)
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_DONER) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_DONER);
					CreatePlayerItem(playerid, "Doner", TYPE_ITEM_JEDZENIE, 10);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Doner.");
				}
				case 6: //Ciastka (5 Glod)
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_CIASTKA) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_CIASTKA);
					CreatePlayerItem(playerid, "Ciastka", TYPE_ITEM_JEDZENIE, 5);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Ciastka.");
				}
				case 7: //Chipsy (15 Glod)
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_CHIPSY) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_CHIPSY);
					CreatePlayerItem(playerid, "Chipsy", TYPE_ITEM_JEDZENIE, 15);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Chipsy.");
				}
				case 8: //Pizza (40 Glod)
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_PIZZA) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_PIZZA);
					CreatePlayerItem(playerid, "Pizza", TYPE_ITEM_JEDZENIE, 40);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Pizza.");
				}
				case 9: //Bulka (23 Glod)
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_BULKA) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_BULKA);
					CreatePlayerItem(playerid, "Bulka", TYPE_ITEM_JEDZENIE, 23);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Bulke.");
				}
			}
			ShowMenu247(playerid);
		}
		return 1;
	}
	if(dialogid == DIALOG_BURGER_BUY)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_HAMBURGER) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_HAMBURGER);
					CreatePlayerItem(playerid, "Hamburger", TYPE_ITEM_JEDZENIE, 10);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Hamburgera.");
				}
				case 1:
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_DONUT) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_DONUT);
					CreatePlayerItem(playerid, "Donut", TYPE_ITEM_JEDZENIE, 10);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Donuta.");
				}
				case 2:
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_HOTDOG) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_HOTDOG);
					CreatePlayerItem(playerid, "Hotdog", TYPE_ITEM_JEDZENIE, 10);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Hotdoga.");
				}
				case 3:
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_KEBAB) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_KEBAB);
					CreatePlayerItem(playerid, "Kebab", TYPE_ITEM_JEDZENIE, 10);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Kebaba.");
				}
				case 4:
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_LASANGE) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_LASANGE);
					CreatePlayerItem(playerid, "Lasange", TYPE_ITEM_JEDZENIE, 10);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Lasange.");
				}
				case 5:
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_NALESNIK) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_NALESNIK);
					CreatePlayerItem(playerid, "Nalesnik", TYPE_ITEM_JEDZENIE, 10);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Nalesnik.");
				}
				case 6:
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_NUGGETSY) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_NUGGETSY);
					CreatePlayerItem(playerid, "Nuggetsy", TYPE_ITEM_JEDZENIE, 10);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Nuggetsy.");
				}
				case 7:
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_SAJGONKI) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_SAJGONKI);
					CreatePlayerItem(playerid, "Sajgonki", TYPE_ITEM_JEDZENIE, 10);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Sajgonki.");
				}
				case 8:
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_ZAPIENAKA) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_ZAPIENAKA);
					CreatePlayerItem(playerid, "Zapiekanka", TYPE_ITEM_JEDZENIE, 10);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Zapiekanke.");
				}
				case 9:
				{
					if(GetPlayerCash(playerid) < SETTINGS_PRICE_SPAGHETTI) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej ilosci pieniedzy na zakup.");
					if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
					GivePlayerCash(playerid, - SETTINGS_PRICE_SPAGHETTI);
					CreatePlayerItem(playerid, "Spaghetti", TYPE_ITEM_JEDZENIE, 10);
					SendClientMessage(playerid, -1, "{a4a4a4}Poprawnie zakupiono Spaghetti.");
				}
			}
			ShowMenuPosilkow(playerid);
		}
		return 1;
	}
	if(dialogid == DIALOG_START_TELEPORT) //wybieranie poczatkowej lokacji
	{
		if(response)
		{
			//SpawnPlayer(playerid);
			switch(listitem)
			{
				case 0: SetPlayerPos(playerid, 2437.8228,2376.4475,10.8203); //lv
				case 1: SetPlayerPos(playerid, -2247.60, 724.09, 50.30); //sf
				case 2: SetPlayerPos(playerid, 1317.71, -1508.55, 14.38); //ls
				case 3: //prywatny dom (VIP)
				{
					new find = -1;
					for(new i = 0; i < build_value; i++)
					{
						if(BudynekData[i][bAktywny] == 1 && BudynekData[i][bOwnerUID] == PlayerData[playerid][pUID])
						{
							find = i;
						}
					}
					if(find != -1)
					{
						SetPlayerPos(playerid, BudynekData[find][bPos_IN][0], BudynekData[find][bPos_IN][1], BudynekData[find][bPos_IN][2]);

						SetPlayerInteriorEx(playerid, BudynekData[find][bInt_IN]);
						SetPlayerVirtualWorldEx(playerid, find);

						PlayerData[playerid][pBuildEnterUID] = find;
						BudynekData[find][bEnterPeople]++;
					}
					else
					{
						SendClientMessage(playerid, -1, "{a4a4a4}Nie masz prywatnego domu.");
						//ShowPlayerDialog(playerid, DIALOG_START_TELEPORT, DIALOG_STYLE_LIST, "Lokalizacja (vip):", "Las Ventruas\nSan Fierro\nLos Santos\nPrywatny dom", "Wybierz", "Zamknij");
					}
					
				}
			}
		}
		return 1;
	}
	
	if(dialogid == DIALOG_TWORZENIE_TOWARU)
	{
		if(response)
		{
			new uid = PlayerData[playerid][pTowarTworzUID];
			
			
			switch(listitem)
			{
				case 0: cmd_addtowar(playerid);
				case 1: //Nazwa
				{
					ShowPlayerDialog(playerid, DIALOG_TWORZENIE_TOWARU_NAZWA, DIALOG_STYLE_INPUT, "Nazwa towaru:", "Wprowadz nazwe dla tego towaru:",  "Zatwierdz", "Zamknij");
				}
				case 2: //Stan
				{	
					if(TowarData[uid][tTowarStan] == 1)
					{
						TowarData[uid][tTowarStan] = 0;
					}
					else
					{
						TowarData[uid][tTowarStan] = 1;
					}
					
					
					if(TowarData[uid][tTowarUID] == 0) cmd_addtowar(playerid);
				}
				case 3: //Towar dla
				{
					TowarData[uid][tTowarRequiste]++;
					if(TowarData[uid][tTowarRequiste] == 3) 
					{
						TowarData[uid][tTowarRequiste] = 0;
					}
					
					if(TowarData[uid][tTowarUID] == 0) cmd_addtowar(playerid);
				}
				case 4: //score za przewoz - gracz
				{
					TowarData[uid][tScorePlayer]++;
					if(TowarData[uid][tScorePlayer] == 6)
					{
						TowarData[uid][tScorePlayer] = 0;
					}
					
					if(TowarData[uid][tTowarUID] == 0) cmd_addtowar(playerid);
				}
				case 5: //score za przewoz - vip
				{
					TowarData[uid][tScoreVip]++;
					if(TowarData[uid][tScoreVip] == 6)
					{
						TowarData[uid][tScoreVip] = 0;
					}
					
					if(TowarData[uid][tTowarUID] == 0) cmd_addtowar(playerid);
				}
				case 6: //kasa za przewoz - gracz
				{
					ShowPlayerDialog(playerid, DIALOG_TWORZENIE_TOWARU_KG, DIALOG_STYLE_INPUT, "Kasa za przewoz - gracz:", "Wprowadz ilosc kasy jaka dostanie gracz za przewoz towaru (gracz):",  "Zatwierdz", "Zamknij");
				}
				case 7: //kasa za przewoz - vip
				{
					ShowPlayerDialog(playerid, DIALOG_TWORZENIE_TOWARU_KV, DIALOG_STYLE_INPUT, "Kasa za przewoz - vip:", "Wprowadz ilosc kasy jaka dostanie gracz za przewoz towaru (vip):",  "Zatwierdz", "Zamknij");
				}
				case 8: //zaladunek
				{
					GetPlayerPos(playerid, TowarData[uid][tZaladunek][0],TowarData[uid][tZaladunek][1],TowarData[uid][tZaladunek][2]);
					
					if(TowarData[uid][tTowarUID] == 0) cmd_addtowar(playerid);
				}
				case 9: //rozladunek
				{
					GetPlayerPos(playerid, TowarData[uid][tRozladunek][0],TowarData[uid][tRozladunek][1],TowarData[uid][tRozladunek][2]);

					if(TowarData[uid][tTowarUID] == 0) cmd_addtowar(playerid);
				}
				case 10: //zaladunek w ...
				{
					ShowPlayerDialog(playerid, DIALOG_TWORZENIE_TOWARU_ZW, DIALOG_STYLE_INPUT, "Nazwa zaladunku:", "Wprowadz nazwe dla tego zaladunku np. LV Hurtownia Czesci Komputerowych, LS Szpital itd.",  "Zatwierdz", "Zamknij");
				}
				case 11: //rozladunek w...
				{
					ShowPlayerDialog(playerid, DIALOG_TWORZENIE_TOWARU_RW, DIALOG_STYLE_INPUT, "Nazwa zaladunku:", "Wprowadz nazwe dla tego rozladunku np. LV Hurtownia Czesci Komputerowych, LS Szpital itd.",  "Zatwierdz", "Zamknij");
				}
				case 12: //adr
				{
					if(TowarData[uid][tADR] == 1)
					{
						TowarData[uid][tADR] = 0;
					}
					else
					{
						TowarData[uid][tADR] = 1;
					}
					if(TowarData[uid][tTowarUID] == 0) cmd_addtowar(playerid);
				}
				case 13: //exp
				{
					ShowPlayerDialog(playerid, DIALOG_TWORZENIE_EXP, DIALOG_STYLE_INPUT, "Exp:", "Wpisz ponizej ilosc EXP jaka ma otrzymac firma po dowiezieniu tego towaru:",  "Zatwierdz", "Zamknij");
				}
				case 14: //kasa firma
				{
					ShowPlayerDialog(playerid, DIALOG_TWORZENIE_KASA_FIRMA, DIALOG_STYLE_INPUT, "Kasa za przewoz - firma:", "Wprowadz ilosc kasy jaka dostanie gracz za przewoz towaru (firma):",  "Zatwierdz", "Zamknij");
				}
				case 15: //legalny
				{
					if(TowarData[uid][tLegalny] == 1)
					{
						TowarData[uid][tLegalny] = 0;
					}
					else
					{
						TowarData[uid][tLegalny] = 1;
					}
					if(TowarData[uid][tTowarUID] == 0) cmd_addtowar(playerid);
				}
				case 16: //Od godziny ... do godziny ...
				{
					ShowPlayerDialog(playerid, DIALOG_TWORZENIE_GODZINY, DIALOG_STYLE_INPUT, "Od godziny (..) do godziny (..):", "Wpisz pinizej od ktorej godziny do ktorej ma byc dostepny ten towar\nTip: [od godziny] [do godziny] (np. 7 [spacja] 12)",  "Zatwierdz", "Zamknij");
				}
				case 17: //tworz
				{
					
					if(TowarData[uid][tTowarUID] != 0)
					{
						SaveTowar(uid);
						GameTextForPlayer(playerid, "~g~Towar zostal nadpisany.", 5000, 3);
					}
					else
					{
						new data[128];
						format(data,sizeof(data),"INSERT INTO `data_towary` SET `name`='%s'",TowarData[uid][tNazwa]), mysql_query(data);
						
						SaveTowar(uid);
						TowarData[uid][tTowarUID] = uid;
						GameTextForPlayer(playerid, "~g~Towar zostal stworzony.", 5000, 3);
						towar_value++;
					}
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_TWORZENIE_GODZINY)
	{
		if(response)
		{
			new od, doo, uid = PlayerData[playerid][pTowarTworzUID];
			if(sscanf(inputtext, "dd", od, doo)) return SendClientMessage(playerid, -1, "Tip: [od godziny] [do godziny]");
			TowarData[uid][tOdGodz] = od;
			TowarData[uid][tDoGodz] = doo;
			if(TowarData[uid][tTowarUID] == 0) cmd_addtowar(playerid);
		}
		return 1;
	}
	if(dialogid == DIALOG_TWORZENIE_KASA_FIRMA)
	{
		new uid = PlayerData[playerid][pTowarTworzUID];
		
		if(response)
		{	
			TowarData[uid][tKasaFirma] = strval(inputtext);
		}
		
		if(TowarData[uid][tTowarUID] == 0) cmd_addtowar(playerid);
		return 1;
	}
	if(dialogid == DIALOG_TWORZENIE_EXP)
	{
		new uid = PlayerData[playerid][pTowarTworzUID];
		
		if(response)
		{	
			TowarData[uid][tExp] = strval(inputtext);
		}
		
		if(TowarData[uid][tTowarUID] == 0) cmd_addtowar(playerid);
		return 1;
	}
	
	if(dialogid == DIALOG_TWORZENIE_TOWARU_KG)
	{
		new uid = PlayerData[playerid][pTowarTworzUID];
		
		if(response)
		{	
			TowarData[uid][tKasaPlayer] = strval(inputtext);
		}
		
		if(TowarData[uid][tTowarUID] == 0) cmd_addtowar(playerid);
		return 1;
	}
	if(dialogid == DIALOG_TWORZENIE_TOWARU_KV)
	{
		new uid = PlayerData[playerid][pTowarTworzUID];
		
		if(response)
		{
			TowarData[uid][tKasaVip] = strval(inputtext);
		}
		
		if(TowarData[uid][tTowarUID] == 0) cmd_addtowar(playerid);
		return 1;
	}
	if(dialogid == DIALOG_TWORZENIE_TOWARU_ZW)
	{
		new uid = PlayerData[playerid][pTowarTworzUID];
		
		if(response)
		{
			format(TowarData[uid][tZaladunekW], 29, "%s", inputtext);
		}
		
		if(TowarData[uid][tTowarUID] == 0) cmd_addtowar(playerid);
		return 1;
	}
	if(dialogid == DIALOG_TWORZENIE_TOWARU_RW)
	{
		new uid = PlayerData[playerid][pTowarTworzUID];
		
		if(response)
		{
			format(TowarData[uid][tRozladunekW], 29, "%s", inputtext);
		}
		
		if(TowarData[uid][tTowarUID] == 0) cmd_addtowar(playerid);
		return 1;
	}
	if(dialogid == DIALOG_TWORZENIE_TOWARU_NAZWA)
	{
		new uid = PlayerData[playerid][pTowarTworzUID];
		
		if(response)
		{
			format(TowarData[uid][tNazwa], 29, "%s", inputtext);
		}
		
		if(TowarData[uid][tTowarUID] == 0) cmd_addtowar(playerid);
		return 1;
	}
	
	
	if(dialogid == DIALOG_TOWARY)
	{
		if(response)
		{
			new uid = PlayerData[playerid][pCheckTowarUID][listitem], data[300];
			PlayerData[playerid][pAcceptTowarUID] = uid;
			
			
			format(data,sizeof(data), "%s\
										Czy aby na pewno chcesz podjac sie tego zadania?\n\
										Nazwa: %s\n\
										Nagroda pieniezna (gracz): $%d\n\
										Nagroda pieniezna (vip): $%d\n\
										Nagroda score (gracz): %d\n\
										Nagroda score (vip): %d\n\
										Zaladunek w: %s\n\
										Rozladunekw w: %s\n\
										", data, TowarData[uid][tNazwa], TowarData[uid][tKasaPlayer], TowarData[uid][tKasaVip], TowarData[uid][tScorePlayer],TowarData[uid][tScoreVip], TowarData[uid][tZaladunekW], TowarData[uid][tRozladunekW]);
			ShowPlayerDialog(playerid, DIALOG_TOWARY_AKCEPT, DIALOG_STYLE_MSGBOX, "Akceptujesz ?", data,  "Tak", "Nie");
		}
		return 1;
	}
	
	
	if(dialogid == DIALOG_TOWARY_AKCEPT)
	{
		if(response)
		{
			new vid = GetPlayerVehicleID(playerid);
			new uid = PlayerData[playerid][pAcceptTowarUID];
			if(PlayerData[playerid][pTowarVehicle] != -1)
			{
				ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Towary: blad.", "Masz juz aktualnie zaladowany jakis towar.",  "Zamknij", "");
				return 1;
			}
			
			if(GetVehicleModel(GetPlayerVehicleID(playerid))==403||GetVehicleModel(GetPlayerVehicleID(playerid))==514||GetVehicleModel(GetPlayerVehicleID(playerid))==515)
			{
				if(GetVehicleTrailer(GetPlayerVehicleID(playerid)) == 0) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Towary: blad.", "Nie masz podczepionej naczepy.",  "Zamknij", "");
			}
			
			if(TowarData[uid][tADR] == 1 && PlayerData[playerid][pKartaADR] == 0) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Towary: blad.", "Ten towar wymaga licencji na przewoz towarow ADR!",  "Zamknij", "");
			
			if(IsVehicleABike(vid) || IsVehicleAAirplane(vid) || IsVehicleAHelicopter(vid) || IsVehicleABoat(vid)) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Towary: blad.", "Ten pojazd nie moze przewozic takich towarow.",  "Zamknij", "");
			
			PlayerData[playerid][pTowarVehicle] = vid;
			
			if(GetVehicleTrailer(vid) != 0)
			{
				PlayerData[playerid][pTowarTrailer] = GetVehicleTrailer(vid);
			}
			
			
			
			
			new data[128];
			PlayerData[playerid][pTowarStatus] = 1;
			
			
			format(data,sizeof(data),"{00BFFF}Towar '%s' zostal umieszczony w %s (V:%d)", TowarData[uid][tNazwa], CarList[GetVehicleModel(PlayerData[playerid][pTowarVehicle])-400], PlayerData[playerid][pTowarVehicle]);
			SendClientMessage(playerid, -1, data);

				
			PlayerData[playerid][pTowarCheckpoint] = SetPlayerCheckpoint(playerid, TowarData[uid][tZaladunek][0], TowarData[uid][tZaladunek][1], TowarData[uid][tZaladunek][2], 5.0);
			ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Towar zaakceptowany.", "Towar zostal zaakceptowany, jedz teraz do czerwonego punkty na minimapie, aby zaladowac towar.", "Zamknij", "");
			
			PlayerData[playerid][pTimerTowary] = SetTimerEx("TimerPlayerTowary", 1000, true, "d", playerid);
			
		}
		else
		{
			PlayerData[playerid][pAcceptTowarUID] = -1;
			PlayerData[playerid][pTowarStatus] = 0;
		}
		return 1;
	}


	if(dialogid == DIALOG_NAPRAW_OPONE)
	{
		if(response)
		{
			new vehicleid = GetPlayerVehicleID(playerid);

			switch(listitem)
			{
				case 0: //przod lewy
				{
					VehicleData[vehicleid][vOponaLP_DMG] = 10.0;
					setTire(vehicleid, 3, 0);
					SendClientMessage(playerid, -1, "{a4a4a4}Naprawiono przednia lewa opone.");
				}
				case 1: //przod prawy
				{
					VehicleData[vehicleid][vOponaPP_DMG] = 10.0;
					setTire(vehicleid, 1, 0);
					SendClientMessage(playerid, -1, "{a4a4a4}Naprawiono przednia prawa opone.");
				}
				case 2: //tyl lewy
				{
					VehicleData[vehicleid][vOponaLT_DMG] = 10.0;
					setTire(vehicleid, 2, 0);
					SendClientMessage(playerid, -1, "{a4a4a4}Naprawiono tylnia lewa opone.");
				}
				case 3: //tyl prawy
				{
					VehicleData[vehicleid][vOponaPT_DMG] = 10.0;
					setTire(vehicleid, 0, 0);
					SendClientMessage(playerid, -1, "{a4a4a4}Naprawiono tylnia prawa opone.");
				}
			}
			DestroyPlayerItem(PlayerData[playerid][pSelectItemUID]);
		}
		return 1;
	}

	if(dialogid == DIALOG_LOTTO)
	{
		if(response)
		{
			new liczba = strval(inputtext), data[128];
			if(liczba < 0) return SendClientMessage(playerid, -1, "{a4a4a4}No chyba nie?");
			if(liczba < 1 || liczba > 60) return SendClientMessage(playerid, -1, "{a4a4a4}Numerek musi byc od 1 do 60. Wpisales niepoprawny numer!");
			if(GetPlayerCash(playerid) < SETTINGS_PRICE_LOTTO_NUMER) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz $"#SETTINGS_PRICE_LOTTO_NUMER", aby zakupic los.");
			if(PlayerData[playerid][pLotto] != 0) return SendClientMessage(playerid, -1, "{a4a4a4}Kupiles juz jeden los, nie mozesz wiecej.");
			
			GivePlayerCash(playerid, -SETTINGS_PRICE_LOTTO_NUMER);
			PlayerData[playerid][pLotto] = liczba;
			pula_zakup_players += SETTINGS_PRICE_LOTTO_NUMER;
			format(data, sizeof(data), "{a4a4a4}Zakupiles los, numer: %d. ¯yczymy powodzenia w losowaniu ktore odbedzie sie o godzinie %d:%d !", liczba, lotto_godzina, lotto_minuta);
			SendClientMessage(playerid, -1, data);
			
			format(data,sizeof(data), "UPDATE `data_players` set `lotto` = '%d' where `uid` = '%d'", 				PlayerData[playerid][pLotto],  	 	 PlayerData[playerid][pUID]), mysql_query(data);
			
		}
	}
	

							
	if(dialogid == DIALOG_GODZINA_LOTTO)
	{
		if(response)
		{
			lotto_godzina = strval(inputtext);
			cmd_apanel(playerid);
		}
		return 1;
	}
	if(dialogid == DIALOG_MINUTA_LOTTO)
	{
		if(response)
		{
			lotto_minuta = strval(inputtext);
			cmd_apanel(playerid);
		}
		return 1;
	}
	if(dialogid == DIALOG_PANEL_ADMINA)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: //napis lotto
				{
					SendClientMessage(playerid, -1, "{a4a4a4}Nie mozna tego zmieniac... ( to tylko napis )");
				}
				case 1: //godzina
				{
					ShowPlayerDialog(playerid, DIALOG_GODZINA_LOTTO, DIALOG_STYLE_INPUT, "Godzina/y:", "Wpisz (LICZBE) godziny losowania lotto:",  "Zmien", "Zamknij");
				}
				case 2: //minuta
				{
					ShowPlayerDialog(playerid, DIALOG_MINUTA_LOTTO, DIALOG_STYLE_INPUT, "Minuta/y:", "Wpisz (LICZBE) minuty losowania lotto:",  "Zmien", "Zamknij");
				}
				case 3: //pula wygranej
				{
					ShowPlayerDialog(playerid, DIALOG_PULA_LOTTO, DIALOG_STYLE_INPUT, "Pula:", "Wpisz (LICZBE) puli ktora otrzyma osoba ktora WYGRA LOSOWANIE.",  "Zmien", "Zamknij");
				}
				case 4: //pula z zakupionych kuponow
				{
					SendClientMessage(playerid, -1, "{a4a4a4}Nie mozna tego zmieniac... ( to sa laczne koszty z wplat od graczy )");
				}
				case 5: //napis "salda frakcyjne"
				{
					SendClientMessage(playerid, -1, "{a4a4a4}Nie mozna tego zmieniac... ( to tylko napis )");
				} 
				case 6: //frakcja 1 
				{
					PlayerData[playerid][pFrakcjaEditCash] = 1;
					ShowPlayerDialog(playerid, DIALOG_SET_CASH_FRAKCJA, DIALOG_STYLE_INPUT, "Ustaw pieniadze tej frakcji:", "Wpisz ponizej LICZBE, czyli ilosc pieniedzy jaka ma byc ustawiona na saldzie tej frakcji:",  "Dokonaj", "Zamknij");
				}
				case 7: //frakcja 2
				{
					PlayerData[playerid][pFrakcjaEditCash] = 2;
					ShowPlayerDialog(playerid, DIALOG_SET_CASH_FRAKCJA, DIALOG_STYLE_INPUT, "Ustaw pieniadze tej frakcji:", "Wpisz ponizej LICZBE, czyli ilosc pieniedzy jaka ma byc ustawiona na saldzie tej frakcji:",  "Dokonaj", "Zamknij");
				}
				case 8: //frakcja 3
				{
					PlayerData[playerid][pFrakcjaEditCash] = 3;
					ShowPlayerDialog(playerid, DIALOG_SET_CASH_FRAKCJA, DIALOG_STYLE_INPUT, "Ustaw pieniadze tej frakcji:", "Wpisz ponizej LICZBE, czyli ilosc pieniedzy jaka ma byc ustawiona na saldzie tej frakcji:",  "Dokonaj", "Zamknij");
				}
				case 9: //frakcja 4
				{
					PlayerData[playerid][pFrakcjaEditCash] = 4;
					ShowPlayerDialog(playerid, DIALOG_SET_CASH_FRAKCJA, DIALOG_STYLE_INPUT, "Ustaw pieniadze tej frakcji:", "Wpisz ponizej LICZBE, czyli ilosc pieniedzy jaka ma byc ustawiona na saldzie tej frakcji:",  "Dokonaj", "Zamknij");
				}
				case 10: //frakcja 5
				{
					PlayerData[playerid][pFrakcjaEditCash] = 5;
					ShowPlayerDialog(playerid, DIALOG_SET_CASH_FRAKCJA, DIALOG_STYLE_INPUT, "Ustaw pieniadze tej frakcji:", "Wpisz ponizej LICZBE, czyli ilosc pieniedzy jaka ma byc ustawiona na saldzie tej frakcji:",  "Dokonaj", "Zamknij");
				}
				case 11: //frakcja 6
				{
					PlayerData[playerid][pFrakcjaEditCash] = 6;
					ShowPlayerDialog(playerid, DIALOG_SET_CASH_FRAKCJA, DIALOG_STYLE_INPUT, "Ustaw pieniadze tej frakcji:", "Wpisz ponizej LICZBE, czyli ilosc pieniedzy jaka ma byc ustawiona na saldzie tej frakcji:",  "Dokonaj", "Zamknij");
				}
				case 12: //frakcja 7
				{
					PlayerData[playerid][pFrakcjaEditCash] = 7;
					ShowPlayerDialog(playerid, DIALOG_SET_CASH_FRAKCJA, DIALOG_STYLE_INPUT, "Ustaw pieniadze tej frakcji:", "Wpisz ponizej LICZBE, czyli ilosc pieniedzy jaka ma byc ustawiona na saldzie tej frakcji:",  "Dokonaj", "Zamknij");
				}
				case 13: //frakcja 8
				{
					PlayerData[playerid][pFrakcjaEditCash] = 8;
					ShowPlayerDialog(playerid, DIALOG_SET_CASH_FRAKCJA, DIALOG_STYLE_INPUT, "Ustaw pieniadze tej frakcji:", "Wpisz ponizej LICZBE, czyli ilosc pieniedzy jaka ma byc ustawiona na saldzie tej frakcji:",  "Dokonaj", "Zamknij");
				}
				case 14: //frakcja 9
				{
					PlayerData[playerid][pFrakcjaEditCash] = 9;
					ShowPlayerDialog(playerid, DIALOG_SET_CASH_FRAKCJA, DIALOG_STYLE_INPUT, "Ustaw pieniadze tej frakcji:", "Wpisz ponizej LICZBE, czyli ilosc pieniedzy jaka ma byc ustawiona na saldzie tej frakcji:",  "Dokonaj", "Zamknij");
				}
				case 15: //frakcja 10
				{
					PlayerData[playerid][pFrakcjaEditCash] = 10;
					ShowPlayerDialog(playerid, DIALOG_SET_CASH_FRAKCJA, DIALOG_STYLE_INPUT, "Ustaw pieniadze tej frakcji:", "Wpisz ponizej LICZBE, czyli ilosc pieniedzy jaka ma byc ustawiona na saldzie tej frakcji:",  "Dokonaj", "Zamknij");
				}
				case 16: //#Natychmiastowe dzialania.
				{
					SendClientMessage(playerid, -1, "{a4a4a4}Nie mozna tego zmieniac... ( to tylko napis )");
				}
				case 17: //Wywolaj zapadniecie sie klody.
				{
					if(kloda_activity != -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz tego zrobic, istnieje juz jedna kloda i nalezy ja najpierw odblokowac.");
					if(GetOnlineFractions(FRAKCJA_STRAZ_POZARNA) == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Brak strazy pozarnej na serwerze online.");
					EventKlodaStart();
					SendClientMessage(playerid, -1, "{a4a4a4}Gotowe.");
				}
				case 18: //Wywolaj wytworzenie sie pozaru
				{
					if(pozar_activity != -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz tego zrobic, aktywny jest juz jeden z pozarow i nalezy go najpierw ugasic.");
					if(GetOnlineFractions(FRAKCJA_STRAZ_POZARNA) == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Brak strazy pozarnej na serwerze online.");
					EventPozarStart();
					SendClientMessage(playerid, -1, "{a4a4a4}Gotowe.");
				}	
				case 19: //Stworz plame oleju
				{
					if(plama_activity != -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz tego zrobic, aktywna jest juz jedna plama i najpierw trzeba ja zneutralzowac.");
					if(GetOnlineFractions(FRAKCJA_STRAZ_POZARNA) == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Brak strazy pozarnej na serwerze online.");
					EventPlamaStart();
					SendClientMessage(playerid, -1, "{a4a4a4}Gotowe.");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_TAP_PANEL_ADMINA)
	{
		if(response)
		{
			if(listitem)
			{
			if(listitem == 0)
			{
				ShowPlayerDialog(playerid, DIALOG_TAP_PANEL_ADMINA01, DIALOG_STYLE_LIST, "Menu Warn", "Wpisz Warna ", "Dalej", "Anuluj");
			}
			if(listitem == 1)
			{
				ShowPlayerDialog(playerid, DIALOG_TAP_PANEL_ADMINA1, DIALOG_STYLE_LIST, "Menu Warn", "Wpisz Warna ", "Dalej", "Anuluj");
			}
			if(listitem == 2)
			{
				ShowPlayerDialog(playerid, DIALOG_TAP_PANEL_ADMINA1, DIALOG_STYLE_LIST, "Menu Warn", "Wpisz Warna ", "Dalej", "Anuluj");
			}
			if(listitem == 3)
			{
				ShowPlayerDialog(playerid, DIALOG_TAP_PANEL_ADMINA1, DIALOG_STYLE_LIST, "Menu Warn", "Wpisz Warna ", "Dalej", "Anuluj");
			}
		}
	}
	return 1;
	}
	if(dialogid == DIALOG_TAP_PANEL_ADMINA1)
	{
		if(response)
		{
		 new player, powod[30], data[128];
		if(PlayerData[player][pRanga] > PlayerData[playerid][pRanga])
		{
		format(data,sizeof(data), "{0080FF}UWAGA! {FA5858} %s chcial dac Ci warna (Powod: %s)", PlayerData[playerid][pName], powod);
		SendClientMessage(player, -1, data);
		return 0;
		}
	
		PlayerData[player][pWarns]++;
		if(PlayerData[player][pWarns] >= 3)
		PlayerData[player][pWarns] = 0;
		format(data,sizeof(data), "%s | x3 warns", powod);
		//Baned(player, playerid, data, PlayerData[player][pIP], "0");
		format(data,sizeof(data),"{FE2E2E}Gracz [%d]%s otrzymuje warna od [%d]%s z powodu: %s", player, PlayerData[player][pName], playerid, PlayerData[playerid][pName], powod);

		SendClientMessageToAll(-1, data);
		}
	  return 1;
    }

	if(dialogid == DIALOG_TAP_PANEL_ADMINA01)
	{
		if(response)
		{
			if(strlen(inputtext))
			{
				new id = strval(inputtext);
				if(!IsPlayerConnected(id)) 
				{
					SendClientMessage(playerid, COLOR_RED, "Gracz o podanym ID nie jest polaczony z serwerem!");
					return 1;
				}
				new player[MAX_PLAYER_NAME]; //nick gracza
				new string[256];
				new string2[256];
				GetPlayerName(playerid, player, sizeof(player));
				format(string, sizeof(string), "Admin dal warn dla gracza %s");
				format(string2, sizeof(string2), "Admin %s dal ci warna!");
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(id, COLOR_WHITE, string2);
			}
		}
		return 1;
	}
	
	if(dialogid == DIALOG_SET_CASH_FRAKCJA)
	{
		if(response)
		{
			new data[128];
			format(data,sizeof(data),"UPDATE `data_frakcje` set `pieniadze` = '%d' where `uid` = '%d'", strval(inputtext), PlayerData[playerid][pFrakcjaEditCash]);
			mysql_query(data);
			cmd_apanel(playerid);
		}
		return 1;
	}
	if(dialogid == DIALOG_PULA_LOTTO)
	{
		if(response)
		{
			pula_wygranej = strval(inputtext);
			cmd_apanel(playerid);
		}
		return 1;
	}
	
	if(dialogid == DIALOG_VEHICLE)
	{
		if(response)
		{
			new vehicleid = GetPlayerVehicleID(playerid), engine = 0, lights = 0, alarm = 0, doors = 0, bonnet = 0, boot = 0, objective = 0;
			if(vehicleid == 0) vehicleid = GetPlayerVehicleRange(playerid, 10);
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			switch(listitem)
			{
				case 0: //wl/wyl swiatla
				{
					if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz uzyc teraz ten funkcji.");
					if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{a4a4a4}Musisz byc w pojedzie jako kierowca.");
					if(VehicleData[vehicleid][vSwiatla] == 1)
					{
							SetVehicleParamsEx(vehicleid, engine, 0, alarm, doors, bonnet, boot, objective);
							VehicleData[vehicleid][vSwiatla] = 0;
							GameTextForPlayer(playerid, "~r~swiatla wylaczone", 3000, 3);
					}
					else if(VehicleData[vehicleid][vSwiatla] == 0)
					{
						SetVehicleParamsEx(vehicleid, engine, 1, alarm, doors, bonnet, boot, objective);
						VehicleData[vehicleid][vSwiatla] = 1;
						GameTextForPlayer(playerid, "~g~swiatla wlaczone", 3000, 3);
					}
				}
				case 1: //wl/wyl maske
				{
					if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz uzyc teraz ten funkcji.");
					if(VehicleData[vehicleid][vPrivateCar] == 1 && VehicleData[vehicleid][vOwnerUID] != PlayerData[playerid][pUID]) return SendClientMessage(playerid, -1, "{a4a4a4}To auto nie nalezy do ciebie.");
					if(bonnet == 1)
					{
						SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, 0, boot, objective);
						GameTextForPlayer(playerid, "~r~Maska zamknieta", 3000, 3);
					}
					else
					{
						SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, 1, boot, objective);
						GameTextForPlayer(playerid, "~g~Maska otwarta", 3000, 3);
					}
				}
				case 2: //wl/wyl bagaznik
				{
					if(VehicleData[vehicleid][vPrivateCar] == 1 && VehicleData[vehicleid][vOwnerUID] != PlayerData[playerid][pUID]) return SendClientMessage(playerid, -1, "{a4a4a4}To auto nie nalezy do ciebie.");
					if(boot == 1)
					{
						SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, 0, objective);
						GameTextForPlayer(playerid, "~r~bagaznik zamkniety", 3000, 3);
					}
					else
					{
						SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, 1, objective);
						GameTextForPlayer(playerid, "~g~bagaznik otwarty", 3000, 3);
					}
				}
				case 3: //wl/wyl drzwi
				{
					if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz uzyc teraz ten funkcji.");
					if(VehicleData[vehicleid][vPrivateCar] == 1 && VehicleData[vehicleid][vOwnerUID] != PlayerData[playerid][pUID]) return SendClientMessage(playerid, -1, "{a4a4a4}To auto nie nalezy do ciebie.");
					if(VehicleData[vehicleid][vPrivateCar] == 0 || VehicleData[vehicleid][vFrakcjiCar] != 0 || VehicleData[vehicleid][vFirmyCar] != 0) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz zamknac pojazdu publicznego/frakcyjnego!");
					if(VehicleData[vehicleid][vLocked] == 1)
					{
						SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
						VehicleData[vehicleid][vLocked] = 0;
						GameTextForPlayer(playerid, "~g~Drzwi otwarte", 3000, 3);
					} 
					else
					{			
						SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
						VehicleData[vehicleid][vLocked] = 1;
						GameTextForPlayer(playerid, "~r~Drzwi zamkniete", 3000, 3);
					}
				}
				case 4: //sprzedaj
				{
					if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz uzyc teraz ten funkcji.");
					if(VehicleData[vehicleid][vPrivateCar] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}To auto nie jest prywatne.");
					if(VehicleData[vehicleid][vOwnerUID] != PlayerData[playerid][pUID]) return SendClientMessage(playerid, -1, "{a4a4a4}To auto nie nalezy do ciebie.");
					
					new data[350], x;
					data = "#\tnick\n";
					
					PlayerData[playerid][pPanelVehicleType] = 1;
					PlayerData[playerid][pPanelVehicleSell] = vehicleid;
					
					for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
					{
						if(PlayerData[i][pLogged] == false) continue;
						if(!OdlegloscGracze(20.0, playerid, i)) continue;
						format(data,sizeof(data),"%s%d\t%s\n", data, i, PlayerData[i][pName]);
						PlayerData[playerid][pListPlayers][x] = i;
						x++;
					}
					if(x == 0) return SendClientMessage(playerid, -1, "{a4a4a4}W poblizu ciebie brak graczy.");
					ShowPlayerDialog(playerid, DIALOG_VEHICLE_SPRZEDAJ, DIALOG_STYLE_TABLIST_HEADERS, "Pojazd (sprzedaj):", data, "Sprzedaj", "Zamknij");
					
				}
				case 5: //daj klucze
				{
					if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz uzyc teraz ten funkcji.");
					if(VehicleData[vehicleid][vPrivateCar] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}To auto nie jest prywatne.");
					if(VehicleData[vehicleid][vOwnerUID] != PlayerData[playerid][pUID]) return SendClientMessage(playerid, -1, "{a4a4a4}To auto nie nalezy do ciebie.");
					
					new data[350], x;
					data = "#\tnick\n";
					
					PlayerData[playerid][pPanelVehicleType] = 2;
					
					for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
					{
						if(PlayerData[i][pLogged] == false) continue;
						if(!OdlegloscGracze(10.0, playerid, i)) continue;
						format(data,sizeof(data),"%s%d\t%s\n", data, i, PlayerData[i][pName]);
						PlayerData[playerid][pListPlayers][x] = i;
						x++;
					}
					if(x == 0) return SendClientMessage(playerid, -1, "{a4a4a4}W poblizu ciebie brak graczy.");
					ShowPlayerDialog(playerid, DIALOG_VEHICLE_KLUCZE_DAJ, DIALOG_STYLE_TABLIST_HEADERS, "Pojazd (klucze - daj):", data, "Daj", "Zamknij");
				}
				case 6: //zabierz klucze
				{
					if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz uzyc teraz ten funkcji.");
					if(VehicleData[vehicleid][vPrivateCar] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}To auto nie jest prywatne.");
					if(VehicleData[vehicleid][vOwnerUID] != PlayerData[playerid][pUID]) return SendClientMessage(playerid, -1, "{a4a4a4}To auto nie nalezy do ciebie.");
					
					new data[1000], x;
					data = "#\tnick\n";
					
					PlayerData[playerid][pPanelVehicleType] = 2;
					
					for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
					{
						if(PlayerData[i][pLogged] == false) continue;
						PlayerData[playerid][pListPlayers][x] = i;
						x++;
						format(data,sizeof(data),"%s%d\t%s\n", data, i, PlayerData[i][pName]);
					}
					ShowPlayerDialog(playerid, DIALOG_VEHICLE_KLUCZE_ZABIERZ, DIALOG_STYLE_TABLIST_HEADERS, "Pojazd (klucze - zabierz):", data, "Zabierz", "Zamknij");
				}
				case 7: //parkuj
				{
					if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz uzyc teraz ten funkcji.");
					if(VehicleData[vehicleid][vPrivateCar] == 0 && VehicleData[vehicleid][vFirmyCar] == 0 && VehicleData[vehicleid][vFrakcjiCar] == 0 && PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{a4a4a4}To auto nie moze byc zaparkowane przez ciebie.");
					if(VehicleData[vehicleid][vOwnerUID] != -1 && VehicleData[vehicleid][vOwnerUID] != PlayerData[playerid][pUID]) return SendClientMessage(playerid, -1, "{a4a4a4}To auto nie nalezy do ciebie.");
					
					GetVehiclePos(vehicleid, VehicleData[vehicleid][vPos][0], VehicleData[vehicleid][vPos][1], VehicleData[vehicleid][vPos][2]);
					GetVehicleZAngle(vehicleid, VehicleData[vehicleid][vPos][3]);

					new data[128];
					format(data,sizeof(data), "{a4a4a4}Pojazd: %s (V: %d, UID: %d) zostal zaparkowany ( %f %f %f )", CarList[GetVehicleModel(vehicleid)-400], vehicleid, VehicleData[vehicleid][vUID], VehicleData[vehicleid][vPos][0], VehicleData[vehicleid][vPos][1], VehicleData[vehicleid][vPos][2]);
					SendClientMessage(playerid, -1, data);
					SaveVehicle(vehicleid, 0);
					
					if(VehicleData[vehicleid][vOwnerUID] != PlayerData[playerid][pUID])
					{
						SendClientMessage(playerid, -1, "{a4a4a4}Zapakowales ten pojazd jedynie dlatego, ze jestes Head Adminem.");
					}
				}
				case 8: //podpisz pojazd pod firme
				{
					if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz uzyc teraz ten funkcji.");
					if(VehicleData[vehicleid][vPrivateCar] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}To auto nie jest prywatne.");
					if(VehicleData[vehicleid][vOwnerUID] != PlayerData[playerid][pUID]) return SendClientMessage(playerid, -1, "{a4a4a4}To auto nie nalezy do ciebie.");
					if(PlayerData[playerid][pFirma] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Nie masz zadnej firmy.");

					GameTextForPlayer(playerid, "~g~POJAZD ZOSTAL PODPISANY POD FIRME", 5000, 3);
					PlayerData[playerid][pPrivCars]--;
					new fuid = PlayerData[playerid][pFirma];
					format(VehicleData[vehicleid][vOwner], 24, "%s", FirmaData[fuid][fName]);
					VehicleData[vehicleid][vPrivateCar] = 0;
					VehicleData[vehicleid][vFirmyCar] = PlayerData[playerid][pFirma];
					SaveVehicle(vehicleid, 0);
				}
				case 9: //Odpisz od firmy
				{
					if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz uzyc teraz ten funkcji.");
					if(PlayerData[playerid][pFirma] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Nie masz zadnej firmy.");
					if(VehicleData[vehicleid][vFirmyCar] != PlayerData[playerid][pFirma]) return SendClientMessage(playerid, -1, "{a4a4a4}To auto nie jest podpisane pod twoja firme.");
					if(VehicleData[vehicleid][vOwnerUID] != PlayerData[playerid][pUID]) return SendClientMessage(playerid, -1, "{a4a4a4}To auto nie nalezy do ciebie.");

					GameTextForPlayer(playerid, "~g~POJAZD ZOSTAL ODPISANY OD FIRMY", 5000, 3);
					PlayerData[playerid][pPrivCars]++;
					format(VehicleData[vehicleid][vOwner], 24, "%s", PlayerData[playerid][pName]);
					VehicleData[vehicleid][vPrivateCar] = 1;
					VehicleData[vehicleid][vFirmyCar] = 0;
					SaveVehicle(vehicleid, 0);
				}
				case 10: //zobacz zawartosc bagaznika
				{
					if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz uzyc teraz ten funkcji.");
					if(boot == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Bagaznik jest zamkniety, otworz go najpierw.");
					if(VehicleData[vehicleid][vOwnerUID] == -1 && VehicleData[vehicleid][vPrivateCar] == 0 && VehicleData[vehicleid][vFirmyCar] == 0 && VehicleData[vehicleid][vFrakcjiCar] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}To auto nie moze ma dostepu do bagaznika.");
					if(ToRower(vehicleid) || ToMotor(vehicleid)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozna przechowywac przedmiotow w rowerach/motorach/motocyklach, nic tam sie nie znajduje.");
					
					
					new data[350], dataa[1000], i = 0, get_uid, get_owneruid, get_przedmiot[30], get_use, get_var1, get_var2, get_var3, get_var4, get_var5, get_var6;
					format(data,sizeof(data),"SELECT * FROM `data_przedmioty` where `var6` = '%d' and `owneruid` = '-1' ORDER BY `uid` ASC", VehicleData[vehicleid][vUID]);
					mysql_query(data);
					mysql_store_result();

					dataa = "uid\tprzemiot\t#\t#\n";
					
					while(mysql_fetch_row(data, "|"))
					{
						sscanf(data, "p<|>iis[30]iiiiiii", get_uid, get_owneruid, get_przedmiot, get_use, get_var1, get_var2, get_var3, get_var4, get_var5, get_var6);
						PlayerData[playerid][pFindItemUID][i]=get_uid;
						i++;
						
						
				
						format(dataa,sizeof(dataa),"%s%d\t%s\t%d\t%d\n",
														dataa,
														get_uid,
														get_przedmiot,
														get_var1,
														get_var2);

					}
					if(i == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Nie ma zadnych przedmiotow w bagazniku.");
					ShowPlayerDialog(playerid, DIALOG_PRZEDMIOTY_VEHICLE, DIALOG_STYLE_TABLIST_HEADERS, "Przedmioty (bagaznik):", dataa, "Wez", "Zamknij");
				}
				case 11: //Namierzanie pojazdu prywatnego
				{
					new data[300], dataa[1000], i, get_uid, get_sampid, get_model, Float:get_hp, Float:get_przebieg;
					format(data,sizeof(data),"SELECT uid, sampid, model, hp, przebieg FROM `data_vehicles` where `owneruid` = '%d' and `private` = '1'", PlayerData[playerid][pUID]);
					mysql_query(data);
					mysql_store_result();

					dataa = "uid\tpojazd\thp\tprzebieg\n";
					while(mysql_fetch_row(data, "|"))
					{
						sscanf(data, "p<|>iiiff", get_uid, get_sampid, get_model, get_hp, get_przebieg);
						PlayerData[playerid][pCheckVehicleUID][i]=get_uid;
						i++;
						
						
						if(get_sampid != -1)
						{
							GetVehicleHealth(get_sampid, VehicleData[get_sampid][vHP]);
							format(dataa,sizeof(dataa),"%s{04B404}%d\t%s\t%f\t%f\n",
														dataa,
														get_uid,
														CarList[get_model-400],
														VehicleData[get_sampid][vHP],
														VehicleData[get_sampid][vPrzebieg]);
						}
						else
						{
							format(dataa,sizeof(dataa),"%s{FF0000}%d\t%s\t%f\t%f\n",
														dataa,
														get_uid,
														CarList[get_model-400],
														get_hp,
														get_przebieg);
						}
					}
					if(i == 0) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Namierzanie pojazdu: (priv):", "Nie masz zadnych pojazdow prywatnych.",  "Zamknij", "");
					ShowPlayerDialog(playerid, DIALOG_VEHICLE_NAMIERZ, DIALOG_STYLE_TABLIST_HEADERS, "Namierzanie pojazdu: (priv):", dataa, "GPS", "Zamknij");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_VEHICLE_NAMIERZ)
	{
		if(response)
		{
			new uid = PlayerData[playerid][pCheckVehicleUID][listitem], v_spawned, Float:x,Float:y,Float:z;
			
			for(new i = 0; i != GetVehiclePoolSize(); i++)
			{
				if(PlayerData[playerid][pUID] == VehicleData[i][vOwnerUID] && VehicleData[i][vUID] == uid)
				{
					GetVehiclePos(i, x,y,z);
					v_spawned = i;
				}
			}
			
			if(v_spawned == 0)
			{
				ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Namierzanie pojazdu: (blad):", "Ten pojazd nie jest zespawnowany, nie mozesz tego zrobic.",  "Zamknij", "");
			}
			else
			{
				if(IsValidDynamicCP(PlayerData[playerid][pGPSVehicle])) IsValidDynamicCP(PlayerData[playerid][pGPSVehicle]);
				PlayerData[playerid][pGPSVehicle] = CreateDynamicCP(x, y, z, 10);
				ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Namierzanie pojazdu: (aktywacja):", "Pojazd zostal zaznaczony na twoim radarze w postaci {d90000}czerwonego {a4a4a4}znacznika .",  "Zamknij", "");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_PRZEDMIOTY_VEHICLE)
	{
		if(response)
		{
			if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
	
			PlayerData[playerid][pSelectItemUID] = PlayerData[playerid][pFindItemUID][listitem];
			new data[200];
			
			format(data,sizeof(data), "UPDATE `data_przedmioty` set `owneruid` = '%d', `var6` = '0' where `uid` = '%d'", PlayerData[playerid][pUID], PlayerData[playerid][pSelectItemUID] );
			mysql_query(data);
			
			format(data,sizeof(data),"{C2A2DA}*%s wyciaga jakis przedmiot z pojazdu %s", PlayerData[playerid][pName],  CarList[GetVehicleModel(GetPlayerVehicleID(playerid))-400]);
			SCMIC(playerid, 10, -1, data);
		}
		return 1;
	}
	if(dialogid == DIALOG_VEHICLE_KLUCZE_DAJ)
	{
		if(response)
		{			
			new get_player = PlayerData[playerid][pListPlayers][listitem];
			if(!IsPlayerConnected(get_player)) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz ktorego wybrales aktualnie jest offline. Prawdopodobnie wyszedl przed chwila z serwera.");
			if(!OdlegloscGracze(10.0, playerid, get_player)) return SendClientMessage(playerid, -1, "{a4a4a4}Musisz byc blizej gracza.");
			if(PlayerData[get_player][pKluczeCar] != 0) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz ma juz jakies klucze, popros go o /wyrzucklucze");
			
			new vehicleid = GetPlayerVehicleRange(playerid, 10), data[128];
			if(VehicleData[vehicleid][vPrivateCar] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}To auto nie jest prywatne.");
			if(VehicleData[vehicleid][vOwnerUID] != PlayerData[playerid][pUID]) return SendClientMessage(playerid, -1, "{a4a4a4}To auto nie nalezy do ciebie.");
			
			PlayerData[get_player][pKluczeCar] = VehicleData[vehicleid][vUID];
			
			format(data,sizeof(data),"{C2A2DA}*%s podaje klucze od pojazdu %s dla %s.", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400], PlayerData[get_player][pName]);
			SCMIC(playerid, 10, -1, data);
		}
		return 1;
	}
	if(dialogid == DIALOG_VEHICLE_KLUCZE_ZABIERZ)
	{
		if(response)
		{			
			new get_player = PlayerData[playerid][pListPlayers][listitem];
			if(!IsPlayerConnected(get_player)) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz ktorego wybrales aktualnie jest offline. Prawdopodobnie wyszedl przed chwila z serwera.");
			//if(!OdlegloscGracze(10.0, playerid, get_player)) return SendClientMessage(playerid, -1, "{a4a4a4}Musisz byc blizej gracza.");
			
			new vehicleid = GetPlayerVehicleRange(playerid, 10), data[128];
			if(VehicleData[vehicleid][vPrivateCar] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}To auto nie jest prywatne.");
			if(VehicleData[vehicleid][vOwnerUID] != PlayerData[playerid][pUID]) return SendClientMessage(playerid, -1, "{a4a4a4}To auto nie nalezy do ciebie.");
			if(PlayerData[get_player][pKluczeCar] != VehicleData[vehicleid][vUID]) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz nie ma kluczy od tego auta.");
			
			
			PlayerData[get_player][pKluczeCar] = 0;
			
			format(data,sizeof(data),"{C2A2DA}*%s zabiera klucze od pojazdu %s, od %s.", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400], PlayerData[get_player][pName]);
			SCMIC(playerid, 10, -1, data);
		}
		return 1;
	}
	if(dialogid == DIALOG_VEHICLE_SPRZEDAJ)
	{
		if(response)
		{
			new get_player = PlayerData[playerid][pListPlayers][listitem];
			if(!IsPlayerConnected(get_player)) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz ktorego wybrales aktualnie jest offline. Prawdopodobnie wyszedl przed chwila z serwera.");
			if(!OdlegloscGracze(10.0, playerid, get_player)) return SendClientMessage(playerid, -1, "{a4a4a4}Musisz byc blizej gracza.");
			
			new vehicleid = PlayerData[playerid][pPanelVehicleSell], data[500];
			PlayerData[playerid][pPlayerOffer] = get_player;
			format(data,sizeof(data),"\
										Wpisz ponizej cene pojazdu, ktory chcesz sprzedac dla %s\n\n\
										Statystyki pojazdu:\n\
										Uid: %d\n\
										Przebieg: %f\n\
										Paliwo: %f\n\
										Model: %d\n\
										Hp: %f\n\
										Nazwa: %s\n\
										Kolor: %d:%d\n\					
			", 
			PlayerData[get_player][pName],
			VehicleData[vehicleid][vUID],
			VehicleData[vehicleid][vPrzebieg],
			VehicleData[vehicleid][vPaliwo],
			VehicleData[vehicleid][vModel],
			VehicleData[vehicleid][vHP],
			CarList[GetVehicleModel(vehicleid)-400],
			VehicleData[vehicleid][vColor1],
			VehicleData[vehicleid][vColor2]
			);
			ShowPlayerDialog(playerid, DIALOG_VEHICLE_SPRZEDAJ2, DIALOG_STYLE_INPUT, "Wpisz cene:", data,  "Zatwierdz", "ANULUJ");
			
			
		}
		return 1;
	}
	if(dialogid == DIALOG_VEHICLE_SPRZEDAJ2)
	{
		if(response)
		{
			new get_player = PlayerData[playerid][pPlayerOffer];
			if(!IsPlayerConnected(get_player)) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz ktorego wybrales aktualnie jest offline. Prawdopodobnie wyszedl przed chwila z serwera.");
			if(!OdlegloscGracze(10.0, playerid, get_player)) return SendClientMessage(playerid, -1, "{a4a4a4}Musisz byc blizej gracza.");
			if(strval(inputtext) < 0) return SendClientMessage(playerid, -1, "{a4a4a4}No chyba nie ?");

			PlayerData[get_player][pPlayerOffer] = playerid;
			PlayerData[get_player][pPlayerOfferPrice] = strval(inputtext);
			PlayerData[get_player][pPlayerOfferVehicleID] = PlayerData[playerid][pPanelVehicleSell];
			
			new vehicleid = PlayerData[playerid][pPanelVehicleSell], data[500];
			
			format(data,sizeof(data),"{a4a4a4}Zaoferowales sprzedaz pojazdu %s (uid: %d) (cena: $%d) dla %s.", CarList[GetVehicleModel(vehicleid)-400], VehicleData[vehicleid][vUID], strval(inputtext), PlayerData[get_player][pName]);
			SendClientMessage(playerid, -1, data);
						
			format(data,sizeof(data),"\
										Wpisz ponizej cene pojazdu, ktory chcesz sprzedac dla %s\n\\n\
										Statystyki pojazdu:\n\
										Uid: %d\n\
										Przebieg: %f\n\
										Paliwo: %f\n\
										Model: %d\n\
										Hp: %f\n\
										Nazwa: %s\n\
										Kolor: %d:%d\n\		
										Cena: $%d\n\												
			", 
			PlayerData[get_player][pName],
			VehicleData[vehicleid][vUID],
			VehicleData[vehicleid][vPrzebieg],
			VehicleData[vehicleid][vPaliwo],
			VehicleData[vehicleid][vModel],
			VehicleData[vehicleid][vHP],
			CarList[GetVehicleModel(vehicleid)-400],
			VehicleData[vehicleid][vColor1],
			VehicleData[vehicleid][vColor2],
			strval(inputtext)
			);
			ShowPlayerDialog(get_player, DIALOG_VEHICLE_SPRZEDAJ4, DIALOG_STYLE_MSGBOX, "Kupno:", data,  "KUP", "ANULUJ");
		}
		return 1;
	}
	if(dialogid == DIALOG_VEHICLE_SPRZEDAJ4)
	{
		new sellid = PlayerData[playerid][pPlayerOffer];
		new cena = PlayerData[playerid][pPlayerOfferPrice];
		new vehicleid = PlayerData[playerid][pPlayerOfferVehicleID];
		new data[200];
		
		if(response)
		{
			if(VehicleData[vehicleid][vOwnerUID] != PlayerData[sellid][pUID])
			{
				format(data,sizeof(data), "Gracz %s nie jest juz wlascicielem tego auta, prawdopodobnie sprzedal go komus innemu.", PlayerData[sellid][pName]);
				SendClientMessage(playerid, -1, data);
				return 1;
			}
			if(GetPlayerCash(playerid) < cena) 
			{
				SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz odpowiedniej kwoty na zakup tego prywatnego auta.");
				format(data,sizeof(data), "Gracz %s nie posiada odpowiedniej kwoty na zakup twojego auta.", PlayerData[playerid][pName]);
				SendClientMessage(sellid, -1, data);
				return 1;
			}
			
			format(data,sizeof(data), "Gracz %s akceptuje twoja oferte sprzedazy auta. + $%d", PlayerData[playerid][pName], cena);
			SendClientMessage(sellid, -1, data);
			
			
			format(data,sizeof(data),"{C2A2DA}*%s oddaje klucze od pojazdu %s dla %s.", PlayerData[sellid][pName], CarList[GetVehicleModel(vehicleid)-400], PlayerData[playerid][pName]);
			SCMIC(playerid, 10, -1, data);
			
			
			PlayerData[playerid][pPrivCars]++;
			PlayerData[sellid][pPrivCars]--;
			
			
			GivePlayerCash(sellid, cena);
			GivePlayerCash(playerid, -cena);
			
			
			VehicleData[vehicleid][vOwnerUID] = PlayerData[playerid][pUID];
			format(VehicleData[vehicleid][vOwner], 24, "%s", PlayerData[playerid][pName]);
			
			format(data,sizeof(data), "UPDATE `data_vehicles` set `owneruid` = '%d' where `uid` = '%d'", 		VehicleData[vehicleid][vOwnerUID], VehicleData[vehicleid][vUID] ), mysql_query(data);
			format(data,sizeof(data), "UPDATE `data_vehicles` set `owner` = '%s' where `uid` = '%d'", 			VehicleData[vehicleid][vOwner], VehicleData[vehicleid][vUID] ), mysql_query(data);
	
			
		}
		else
		{
			format(data,sizeof(data), "Gracz %s odrzuca twoja oferte sprzedazy auta.", PlayerData[playerid][pName]);
			SendClientMessage(sellid, -1, data);
		}
		return 1;
	}
	if(dialogid == DIALOG_PRZEDMIOTY_ZABIERZ)
	{
		if(response)
		{
			PlayerData[playerid][pSelectItemUID] = PlayerData[playerid][pFindItemUID][listitem];
			
			new data[200];
			format(data,sizeof(data),"{C2A2DA}*%s zabiera jakis przedmiot.", PlayerData[playerid][pName]);
			SCMIC(playerid, 10, -1, data);
				
			format(data,sizeof(data), "UPDATE `data_przedmioty` set `owneruid` = '%d' where `uid` = '%d'", PlayerData[playerid][pUID], PlayerData[playerid][pSelectItemUID] );
			mysql_query(data);
		}
		return 1;
	}
	if(dialogid == DIALOG_PRZEDMIOTY)
	{
		if(response)
		{
			PlayerData[playerid][pSelectItemUID] = PlayerData[playerid][pFindItemUID][listitem];
			
			//new data[128];
			//format(data,sizeof(data),"uid: %d", PlayerData[playerid][pSelectItemUID]);
			//SendClientMessage(playerid, -1, data);
			
			ShowPlayerDialog(playerid, DIALOG_PRZEDMIOTY2, DIALOG_STYLE_LIST, "Przedmioty (Opcje):", "Uzyj\nDaj innemu graczu\nWyrzuc\nSchowaj do pojazdu", "Wybierz", "Zamknij");
		}
		return 1;
	}
	if(dialogid == DIALOG_PRZEDMIOTY2)
	{
		if(response)
		{
			new uid = PlayerData[playerid][pSelectItemUID];
			switch(listitem)
			{
				case 0: //uzyj
				{
					UsePlayerItem(playerid, uid);
				}
				case 1://daj
				{
					new data[350], useeeeee, x;
					format(data,sizeof(data), "SELECT `use` FROM `data_przedmioty` WHERE `uid` = '%d'", uid);
					mysql_query(data);
					mysql_store_result();
					mysql_fetch_row(data, "|");
					mysql_free_result();
					sscanf(data, "p<|>i",
					useeeeee);
					
					if(useeeeee == 1) return SendClientMessage(playerid, -1, "{a4a4a4}Przedmiot ten jest aktalnie przez ciebie uzywany.");
					

					data = "#\tnick\n";
					
					for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
					{
						if(PlayerData[i][pLogged] == false) continue;
						if(!OdlegloscGracze(20.0, playerid, i)) continue;
						format(data,sizeof(data),"%s%d\t%s\n", data, i, PlayerData[i][pName]);
						PlayerData[playerid][pListPlayers][x] = i;
						x++;
					}
					if(x == 0) return SendClientMessage(playerid, -1, "{a4a4a4}W poblizu ciebie brak graczy.");
					ShowPlayerDialog(playerid, DIALOG_PRZEDMIOTY3, DIALOG_STYLE_TABLIST_HEADERS, "Przedmiot (daj):", data, "Daj", "Zamknij");
				}
				case 2://wyrzuc
				{
					new data[200], useeeeee;
					format(data,sizeof(data), "SELECT `use` FROM `data_przedmioty` WHERE `uid` = '%d'", uid);
					mysql_query(data);
					mysql_store_result();
					mysql_fetch_row(data, "|");
					mysql_free_result();
					sscanf(data, "p<|>i",
					useeeeee);
					
					if(useeeeee == 1) return SendClientMessage(playerid, -1, "{a4a4a4}Przedmiot ten jest aktalnie przez ciebie uzywany.");
					DestroyPlayerItem(uid);
				}
				case 3: //wsadz do bagaznika
				{
					new vehicleid = GetPlayerVehicleRange(playerid, 10), data[200], useeeeee;
					if(vehicleid == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes przy zadnym pojezdzie.");
					if(VehicleData[vehicleid][vPrivateCar] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}To nie jest prywatny pojazd, nie mozesz tu wsadzic tego przedmiotu.");
					if(ToRower(vehicleid) || ToMotor(vehicleid)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozna przechowywac przedmiotow w rowerach/motorach/motocyklach.");

					format(data,sizeof(data), "SELECT `use` FROM `data_przedmioty` WHERE `uid` = '%d'", uid);
					mysql_query(data);
					mysql_store_result();
					mysql_fetch_row(data, "|");
					mysql_free_result();
					sscanf(data, "p<|>i",
					useeeeee);
					
					if(useeeeee == 1) return SendClientMessage(playerid, -1, "{a4a4a4}Przedmiot ten jest aktalnie przez ciebie uzywany.");

			
					format(data,sizeof(data), "UPDATE `data_przedmioty` set `owneruid` = '%d', `var6` = '%d' where `uid` = '%d'", -1, VehicleData[vehicleid][vUID], uid );
					mysql_query(data);
					
					format(data,sizeof(data),"{C2A2DA}*%s chowa jakis przedmiot do pojazdu %s", PlayerData[playerid][pName],  CarList[GetVehicleModel(vehicleid)-400]);
					SCMIC(playerid, 10, -1, data);
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_PRZEDMIOTY3)
	{
		new get_player = PlayerData[playerid][pListPlayers][listitem], data[200], uid = PlayerData[playerid][pSelectItemUID];
		if(response)
		{
				if(GetValuePlayerItems(PlayerData[get_player][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz przekroczyl limit posiadanych przedmiotow, czyli "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
				format(data,sizeof(data),"{C2A2DA}*%s podaje jakis przedmiot dla %s", PlayerData[playerid][pName],  PlayerData[get_player][pName]);
				SCMIC(playerid, 10, -1, data);
				
				format(data,sizeof(data), "UPDATE `data_przedmioty` set `owneruid` = '%d' where `uid` = '%d'", PlayerData[get_player][pUID], uid );
				mysql_query(data);
		}
		else
		{
			SendClientMessage(playerid, -1, "{a4a4a4}Anulowano przekazanie przedmiotu.");
		}
		return 1;
	}
	if(dialogid == DIALOG_ZBROJOWNIA)
	{
		if(response)
		{
			TakeGunZbrojownia(playerid, PlayerData[playerid][pCheckZbrojniaUID][listitem]);
		}
		return 1;
	}
	
	//Panel firmy
	
	
	if(dialogid == DIALOG_PANEL_FIRMY_DODAJ)
	{
		if(response)
		{
			new player = strval(inputtext), fuid = PlayerData[playerid][pFirma], data[200];
			if(!IsPlayerConnected(player)) return GameTextForPlayer(playerid, "~r~Gracz o tym id nie jest na serwerze", 5000, 3);
			if(PlayerData[player][pFirma] != 0) return GameTextForPlayer(playerid, "~r~Gracz jest juz w jakiejs firmie", 5000, 3);
			
			PlayerData[player][pFirmaAccept] = fuid;
			format(data,sizeof(data), "Gracz %s zaprasza cie do firmy %s (uid: %d), czy chcesz dolaczyc ?", PlayerData[playerid][pName], FirmaData[fuid][fName], fuid);
			ShowPlayerDialog(player, DIALOG_PANEL_FIRMA_AKCEPT, DIALOG_STYLE_MSGBOX, "Panel firmy (dolacz):", data, "Tak", "Nie");
		}
		return 1;
	}
	if(dialogid == DIALOG_PANEL_FIRMA_AKCEPT)
	{
		if(response)
		{
			new fuid = PlayerData[playerid][pFirmaAccept];
			FirmaData[fuid][fPeople]++;
			PlayerData[playerid][pFirma] = fuid;
			GameTextForPlayer(playerid, "~g~Zaakceptowano firme", 5000, 3);
			
			new data[128];
			format(data,sizeof(data), "UPDATE `data_players` set `firma` = '%d' where `uid` = '%d'", 			fuid,  	 PlayerData[playerid][pUID]);
			mysql_query(data);
			SaveFirma(fuid);
		}
		return 1;
	}
				
	if(dialogid == DIALOG_PANEL_FIRMY_ZWOLNIJ)
	{
		if(response)
		{
			new data[250], uid = strval(inputtext), get_nick[24], get_frakcja, get_playerid, fuid = PlayerData[playerid][pFirma];
			
			format(data,sizeof(data), "SELECT `firma`, `nick`, `playerid`  FROM `data_players` WHERE `uid` = '%d'", uid);
			mysql_query(data);
			mysql_store_result();
			while(mysql_fetch_row(data))
			{
				sscanf(data, "p<|>is[24]i", get_frakcja, get_nick, get_playerid);
			}
				
			if(get_frakcja != PlayerData[playerid][pFirma]) return GameTextForPlayer(playerid, "~r~Gracz o tym uid nie jest w twojej firmy", 5000, 3);

			FirmaData[fuid][fPeople]++;
			format(data,sizeof(data), "~g~%s zostal zwolniony z firmy", get_nick);
			GameTextForPlayer(playerid, data, 5000, 3);
			
			if(get_playerid != -1)
			{
				PlayerData[get_playerid][pFirma] = 0;
				GameTextForPlayer(get_playerid, "~r~Zostales zwolniony z firmy przez szefa.", 5000, 3);
			}
			format(data,sizeof(data), "UPDATE `data_players` set `firma` = '%d' where `uid` = '%d'", 			0,  	 uid);
			mysql_query(data);
			SaveFirma(fuid);
		}
		return 1;
	}
	if(dialogid == DIALOG_PANEL_FIRMY_WPLAC)
	{
		if(response)
		{
			new wartosc = strval(inputtext), data[128], fuid = PlayerData[playerid][pFirma];
			if(PlayerData[playerid][pCash] < wartosc) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Panel firmy (blad):", "Nie posiadasz takiej kwoty w gotowce.", "Zamknij", "");
			if(wartosc <= 0) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Panel firmy (blad):", "Niepoprawna wartosc.", "Zamknij", "");
			
			GivePlayerCash(playerid, -wartosc);
			FirmaData[fuid][fSaldo] += wartosc;
			
			format(data,sizeof(data),"~g~Wplacono $%d", wartosc);
			GameTextForPlayer(playerid, data, 3000, 3);
			
			SaveFirma(fuid);
		}
		return 1;
	}
	
	if(dialogid == DIALOG_PANEL_FIRMY_WYPLAC)
	{
		if(response)
		{
			new wartosc = strval(inputtext), data[128], fuid = PlayerData[playerid][pFirma];
			if(FirmaData[fuid][fSaldo] < wartosc) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Panel firmy (blad):", "Firma nie posiada takiej kwoty w saldzie.", "Zamknij", "");
			if(wartosc <= 0) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Panel firmy (blad):", "Niepoprawna wartosc.", "Zamknij", "");
			
			GivePlayerCash(playerid, wartosc);
			FirmaData[fuid][fSaldo] -= wartosc;
			
			format(data,sizeof(data),"~g~Wyplacono $%d", wartosc);
			GameTextForPlayer(playerid, data, 3000, 3);
			
			SaveFirma(fuid);
		}
		return 1;
	}
	
	if(dialogid == DIALOG_PANEL_FIRMY_RANGA)
	{
		if(response)
		{
			if(PlayerData[playerid][pFirmaRanga] < 2) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes liderem firmy.");
			PlayerData[playerid][pPlayerWithList] = PlayerData[playerid][pListPlayers][listitem];
			ShowPlayerDialog(playerid, DIALOG_PANEL_FIRMY_RANGA_SET, DIALOG_STYLE_LIST, "Panel firmy (ranga):", "Kierowca\nZasluzony\nVice Szef\nSzef",  "Zatwierdz", "Zamknij");
		}
		return 1;
	}
	if(dialogid == DIALOG_PANEL_FIRMY_RANGA_SET)
	{
		if(response)
		{
			new data[250], uid = PlayerData[playerid][pPlayerWithList], get_nick[24], get_playerid;
			
			
			format(data,sizeof(data), "SELECT `nick`, `playerid`  FROM `data_players` WHERE `uid` = '%d'", uid);
			mysql_query(data);
			mysql_store_result();
			while(mysql_fetch_row(data))
			{
				sscanf(data, "p<|>s[24]i", get_nick, get_playerid);
			}
				
			GameTextForPlayer(playerid, "~g~GOTOWE", 5000, 3);
				
			if(get_playerid != -1)
			{
				PlayerData[get_playerid][pFirmaRanga] = listitem;
			}
			format(data,sizeof(data), "UPDATE `data_players` set `firma_ranga` = '%d' where `uid` = '%d'", 			listitem,  	 uid);
			mysql_query(data);
		}
		return 1;
	}

	if(dialogid == DIALOG_PANEL_FIRMY_STATY_MEMBER) 
	{
		if(response)
		{
			if(PlayerData[playerid][pFirmaRanga] < 2) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes liderem firmy.");
			PlayerData[playerid][pPlayerWithList] = PlayerData[playerid][pListPlayers][listitem];
			
			new data[200], get_nick[24], get_playerid, get_firma_ranga, get_firma_exp, get_firma_towary, get_firma_kasa, get_str_firma_ranga[24];
			
			format(data,sizeof(data), "SELECT `nick`, `playerid`, `firma_ranga`, `firma_exp`, `firma_towary`, `firma_kasa`  FROM `data_players` WHERE `uid` = '%d'", PlayerData[playerid][pPlayerWithList]);
			mysql_query(data);
			mysql_store_result();
			while(mysql_fetch_row(data))
			{
				sscanf(data, "p<|>s[24]iiiii", get_nick, get_playerid, get_firma_ranga, get_firma_exp, get_firma_towary, get_firma_kasa);
			}
			
			switch(get_firma_ranga)
			{
				case 0: get_str_firma_ranga = "Kierowca";
				case 1: get_str_firma_ranga = "Zasluzony";
				case 2: get_str_firma_ranga = "Vice Szef";
				case 3: get_str_firma_ranga = "Szef";
			}
			
			format(data,sizeof(data),"\
									Gracz [%d]%s (%s)\n\
									Zarobil: $%d\n\
									Zdobyty exp: %d\n\
									Ilosc dostarczonych towarow: %d\n\
									",
									get_playerid, get_nick, get_str_firma_ranga, get_firma_kasa, get_firma_exp, get_firma_towary);
		
			ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Panel firmy (statystyka pracownika):", data,  "Zamknij", "");
		}
		return 1;
	}
	

	if(dialogid == DIALOG_PANEL_FIRMY_LISTA)
	{
		if(response)
		{
			if(PlayerData[playerid][pFirmaRanga] < 2) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes liderem firmy.");
			PlayerData[playerid][pPlayerWithList] = PlayerData[playerid][pListPlayers][listitem];
			ShowPlayerDialog(playerid, DIALOG_PANEL_FIRMY_WYPLATAP, DIALOG_STYLE_INPUT, "Panel firmy (wyplata - pracownik):", "Wpisz ponizej ilosc pieniedzy jaka ma otrzymac gracz (wyplata):",  "Zatwierdz", "Zamknij");
		}
		return 1;
	}
	if(dialogid == DIALOG_PANEL_FIRMY_WYPLATAP)
	{
		if(response)
		{
			new data[250], uid = PlayerData[playerid][pPlayerWithList], get_nick[24], get_playerid, fuid = PlayerData[playerid][pFirma];
			if(strval(inputtext) < 0) return SendClientMessage(playerid, -1, "{a4a4a4}No chyba nie ?");
			if(strval(inputtext) > FirmaData[fuid][fSaldo])
			{
				format(data,sizeof(data),"Nie mozesz wyplacic temu pracownikowi $%d z powodu tego iz na saldzie firmy posiadacie jedynie $%d.", strval(inputtext), FirmaData[fuid][fSaldo]);
				ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Panel firmy (blad):", data, "Zamknij", "");
				return 1;
			}
			
			format(data,sizeof(data), "SELECT `nick`, `playerid`  FROM `data_players` WHERE `uid` = '%d'", uid);
			mysql_query(data);
			mysql_store_result();
			while(mysql_fetch_row(data))
			{
				sscanf(data, "p<|>s[24]i", get_nick, get_playerid);
			}
				
			format(data,sizeof(data), "~g~Gracz %s otrzymuje $%d wyplaty", get_nick, strval(inputtext));
			GameTextForPlayer(playerid, data, 5000, 3);
				
			if(get_playerid != -1)
			{
				PlayerData[get_playerid][pCashBank] += strval(inputtext);
				format(data,sizeof(data), "~g~Otrzymujesz $%d wyplaty z firmy", strval(inputtext));
				GameTextForPlayer(get_playerid, data, 5000, 3);
			}
			else
			{
				format(data,sizeof(data), "UPDATE `data_players` set `cashbank` = `cashbank` + '%d' where `uid` = '%d'", 			strval(inputtext),  	 uid);
				mysql_query(data);
			}
			SaveFirma(fuid);
		}
		return 1;
	}
	if(dialogid == DIALOG_FIRMA_TWORZ)
	{
		if(response)
		{
			if(PlayerData[playerid][pLevel] < 5) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Firma (blad):", "Brak wymaganego poziomu postaci.", "Zamknij", "");
			if(GetPlayerCash(playerid) < 300000) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Firma (blad):", "Brak wymaganej gotowki.", "Zamknij", "");
			if(PlayerData[playerid][pFirma] != 0) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Firma (blad):", "Jestes aktualnie w jakiejs firmie, najpierw wyjdz z niej..", "Zamknij", "");
			if(isnull(inputtext)) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Firma (blad):", "Nic nie wpisales.", "Zamknij", "");
			new uid = firma_value, data[200];
			
			GivePlayerCash(playerid, - 300000);
			
			FirmaData[uid][fAktywny] = 1;
			FirmaData[uid][fOwnerUID] = PlayerData[playerid][pUID];
			format(FirmaData[uid][fOwner], 24, "%s", PlayerData[playerid][pName]);
			format(FirmaData[uid][fName], 24, "%s", inputtext);
			FirmaData[uid][fExp] = 1;
			PlayerData[playerid][pFirma] = uid;
			PlayerData[playerid][pFirmaRanga] = 3;
			
			format(data,sizeof(data), "UPDATE `data_players` set `firma` = '%d', `firma_ranga` = '3' where `uid` = '%d'", 			uid,  	 PlayerData[playerid][pUID]);
			mysql_query(data);
	
			format(data,sizeof(data),"INSERT INTO `data_firmy` SET `aktywny`='%d', `owneruid`='%d', `owner`='%s', `exp` = '1'",
			FirmaData[uid][fAktywny],
			FirmaData[uid][fOwnerUID],
			FirmaData[uid][fOwner]);
			mysql_query(data);
			
			SaveFirma(uid);
			firma_value++;
			
			GameTextForPlayer(playerid, "~g~FIRMA ZOSTALA STWORZONA POPRAWNIE", 5000, 3);
			return 1;
		}
		return 1;
	}
	if(dialogid == DIALOG_PANEL_FIRMY_VEHICLES)
	{
		if(!response) return 1;
		PlayerData[playerid][pCheckVehicleSelect] = PlayerData[playerid][pCheckVehicleUID][listitem];
		
		new naglowek[64], str_paliwo[64], data[250], vehicleid;
		for(new v = 1, j = GetVehiclePoolSize(); v <= j; v++)
		{
			if(VehicleData[v][vUID] == PlayerData[playerid][pCheckVehicleSelect])
			{
				vehicleid = v;
			}
		}
		
		
		if(vehicleid != 0)
		{
			format(naglowek,sizeof(naglowek),"Pojazd (firmy) UID: %d | ID: %d | MODELID: %d", PlayerData[playerid][pCheckVehicleSelect], vehicleid, GetVehicleModel(vehicleid));
			switch(VehicleData[vehicleid][vPaliwoTyp])
			{
				case 0: str_paliwo = "Benzyna";
				case 1: str_paliwo= "Gaz (LPG)";
				case 2: str_paliwo = "ON (Olej napedowy)";
				case 3: str_paliwo = "Gazy ziemne (NVG)";
				case 4: str_paliwo = "Uniwersalna 95";
				case 5: str_paliwo = "Bezolowiowa 95";
				case 6: str_paliwo = "Bezolowiowa 98";
			}
			format(data,sizeof(data),"\
			%s\tPrzebieg: %f\tHP: %f\tPaliwo: %d\n\
			Spawn lub unspawn pojazdu\n\
			Zlokalizuj ten pojazd na mapie\n\
			Znajdz ten pojazd na zlomowisku\n\
			", CarList[GetVehicleModel(vehicleid)-400], VehicleData[vehicleid][vPrzebieg], VehicleData[vehicleid][vHP], floatround(VehicleData[vehicleid][vPaliwo]), floatround(VehicleData[vehicleid][vPaliwoMax]), str_paliwo);
			ShowPlayerDialog(playerid, DIALOG_PANEL_OGOL_VEHICLE3S, DIALOG_STYLE_TABLIST_HEADERS, naglowek, data, "Wybierz", "Zamknij");
		}
		else
		{
			new dataa[300], get_model, Float:get_przebieg,Float:get_hp,Float:get_paliwo;
			format(dataa,sizeof(dataa), "SELECT `model`, `przebieg`, `hp`, `paliwo` from `data_vehicles` WHERE `uid` = '%d'", PlayerData[playerid][pCheckVehicleSelect]);
			mysql_query(dataa);
			mysql_store_result();
			if(mysql_num_rows() == 0) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Pojazd (zlomowisko):", "blad bazy mysql",  "Zamknij", "");
			mysql_fetch_row(dataa);
			sscanf(dataa, "p<|>ifff",
			get_model, get_przebieg,get_hp,get_paliwo);
				
			format(naglowek,sizeof(naglowek),"Prywatny pojazd UID: %d | MODELID: %d", PlayerData[playerid][pCheckVehicleSelect], get_model);
			format(data,sizeof(data),"\
											%s\tPrzebieg: %f\tHP: %f\tPaliwo: %d\n\
											Spawn lub unspawn pojazdu\n\
											Zlokalizuj ten pojazd na mapie\n\
											Znajdz ten pojazd na zlomowisku\n\
											", CarList[get_model-400], get_przebieg, get_hp, floatround(get_paliwo));
			ShowPlayerDialog(playerid, DIALOG_PANEL_OGOL_VEHICLE3S, DIALOG_STYLE_TABLIST_HEADERS, naglowek, data, "Wybierz", "Zamknij");
		}
		return 1;
	}
		
	
	
	//Panel frakcji
	if(dialogid == DIALOG_PANEL_FRAKCJI_VEHICLES)
	{
		if(!response) return 1;
		PlayerData[playerid][pCheckVehicleSelect] = PlayerData[playerid][pCheckVehicleUID][listitem];
		
		new naglowek[64], str_paliwo[64], data[128], vehicleid;
		for(new v = 1, j = GetVehiclePoolSize(); v <= j; v++)
		{
			if(VehicleData[v][vUID] == PlayerData[playerid][pCheckVehicleSelect])
			{
				vehicleid = v;
			}
		}
		
		
		if(vehicleid != 0)
		{
			format(naglowek,sizeof(naglowek),"Pojazd (frakcji) UID: %d | ID: %d | MODELID: %d", PlayerData[playerid][pCheckVehicleSelect], vehicleid, GetVehicleModel(vehicleid));
			switch(VehicleData[vehicleid][vPaliwoTyp])
			{
				case 0: str_paliwo = "Benzyna";
				case 1: str_paliwo= "Gaz (LPG)";
				case 2: str_paliwo = "ON (Olej napedowy)";
				case 3: str_paliwo = "Gazy ziemne (NVG)";
				case 4: str_paliwo = "Uniwersalna 95";
				case 5: str_paliwo = "Bezolowiowa 95";
				case 6: str_paliwo = "Bezolowiowa 98";
			}
			format(data,sizeof(data),"\
			%s\tPrzebieg: %f\tHP: %f\tPaliwo: %d\n\
			Spawn lub unspawn pojazdu\n\
			Zlokalizuj ten pojazd na mapie\n\
			Znajdz ten pojazd na zlomowisku\n\
			", CarList[GetVehicleModel(vehicleid)-400], VehicleData[vehicleid][vPrzebieg], VehicleData[vehicleid][vHP], floatround(VehicleData[vehicleid][vPaliwo]), floatround(VehicleData[vehicleid][vPaliwoMax]), str_paliwo);
			ShowPlayerDialog(playerid, DIALOG_PANEL_OGOL_VEHICLE3S, DIALOG_STYLE_TABLIST_HEADERS, naglowek, data, "Wybierz", "Zamknij");
		}
		else
		{
			new dataa[300], get_model, Float:get_przebieg,Float:get_hp,Float:get_paliwo;
			format(dataa,sizeof(dataa), "SELECT `model`, `przebieg`, `hp`, `paliwo` from `data_vehicles` WHERE `uid` = '%d'", PlayerData[playerid][pCheckVehicleSelect]);
			mysql_query(dataa);
			mysql_store_result();
			if(mysql_num_rows() == 0) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Pojazd (zlomowisko):", "blad bazy mysql",  "Zamknij", "");
			mysql_fetch_row(dataa);
			sscanf(dataa, "p<|>ifff",
			get_model, get_przebieg,get_hp,get_paliwo);
			format(naglowek,sizeof(naglowek),"Prywatny pojazd UID: %d | MODELID: %d", PlayerData[playerid][pCheckVehicleSelect], get_model);
			format(data,sizeof(data),"\
											%s\tPrzebieg: %f\tHP: %f\tPaliwo: %d\n\
											Spawn lub unspawn pojazdu\n\
											Zlokalizuj ten pojazd na mapie\n\
											Znajdz ten pojazd na zlomowisku\n\
											", CarList[get_model-400], get_przebieg, get_hp, floatround(get_paliwo));
			ShowPlayerDialog(playerid, DIALOG_PANEL_OGOL_VEHICLE3S, DIALOG_STYLE_TABLIST_HEADERS, naglowek, data, "Wybierz", "Zamknij");
		}
		return 1;
	}

	if(dialogid == DIALOG_PANEL_FRAKCJI_DODAJ)
	{
		if(response)
		{
			new player = strval(inputtext), data[128], str_frakcja[36];
			if(player == playerid) return GameTextForPlayer(playerid, "~r~Nie mozesz dodac samego siebie!", 5000, 3);
			if(!IsPlayerConnected(player)) return GameTextForPlayer(playerid, "~r~Gracz o tym id nie jest na serwerze", 5000, 3);
			if(PlayerData[player][pFrakcja] != 0) return GameTextForPlayer(playerid, "~r~Gracz jest juz w jakiejs frakcji", 5000, 3);
			
			switch(PlayerData[playerid][pFrakcja])
			{
				case 1: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_1);
				case 2: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_2);
				case 3: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_3);
				case 4: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_4);
				case 5: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_5);
				case 6: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_6);
				case 7: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_7);
				case 8: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_8);
			}
			
			PlayerData[player][pFrakcjaAccept] = PlayerData[playerid][pFrakcja];
			format(data,sizeof(data), "Gracz %s zaprasza cie do frakcji %s (uid: %d), czy chcesz dolaczyc ?", PlayerData[playerid][pName], str_frakcja, PlayerData[playerid][pFrakcja]);
			ShowPlayerDialog(player, DIALOG_PANEL_FRAKCJA_AKCEPT, DIALOG_STYLE_MSGBOX, "Panel frakcji (dolacz):", data, "Tak", "Nie");
		}
		return 1;
	}
	if(dialogid == DIALOG_PANEL_FRAKCJA_AKCEPT)
	{
		if(response)
		{
			new fuid = PlayerData[playerid][pFrakcjaAccept];
			PlayerData[playerid][pFrakcja] = fuid;
			GameTextForPlayer(playerid, "~g~Zaakceptowano frakcje", 5000, 3);
			
			new data[128];
			format(data,sizeof(data), "UPDATE `data_players` set `frakcja` = '%d' where `uid` = '%d'", 			fuid,  	 PlayerData[playerid][pUID]);
			mysql_query(data);
			SaveFirma(fuid);
		}
		return 1;
	}
	
	
	if(dialogid == DIALOG_PANEL_FRAKCJI_ZWOLNIJ)
	{
		if(response)
		{
			new data[250], uid = strval(inputtext), get_nick[24], get_frakcja, get_playerid;
			
			format(data,sizeof(data), "SELECT `frakcja`, `nick`, `playerid`  FROM `data_players` WHERE `uid` = '%d'", uid);
			mysql_query(data);
			mysql_store_result();
			while(mysql_fetch_row(data))
			{
				sscanf(data, "p<|>is[24]i", get_frakcja, get_nick, get_playerid);
			}
				
			if(get_frakcja != PlayerData[playerid][pFrakcja]) return GameTextForPlayer(playerid, "~r~Gracz o tym uid nie jest w twojej frakcji", 5000, 3);

			
			format(data,sizeof(data), "~g~%s zostal zwolniony z frakcji", get_nick);
			GameTextForPlayer(playerid, data, 5000, 3);
			
			if(get_playerid != -1)
			{
				PlayerData[get_playerid][pFrakcja] = 0;
				GameTextForPlayer(get_playerid, "~r~Zostales zwolniony z frakcji przez szefa.", 5000, 3);
			}
			format(data,sizeof(data), "UPDATE `data_players` set `frakcja` = '%d' where `uid` = '%d'", 			0,  	 uid);
			mysql_query(data);
		}
		return 1;
	}
	if(dialogid == DIALOG_PANEL_FRAKCJI_INFO)
	{
		if(response)
		{
			format(frakcja_szef_info[PlayerData[playerid][pFrakcja]], 150, "%s", inputtext);
			SendClientMessage(playerid, -1, "{a4a4a4}Informacja zostala zaaktualizowana.");
			cmd_frakcja(playerid);
			cmd_frakcja(playerid);
		}
		return 1;
	}
		
	if(dialogid == DIALOG_PANEL_FRAKCJI_LISTA)
	{
		if(response)
		{
			if(PlayerData[playerid][pLider] != 1 && PlayerData[playerid][pLider] != 3) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes liderem frakcji.");
			PlayerData[playerid][pPlayerWithList] = PlayerData[playerid][pListPlayers][listitem];
			ShowPlayerDialog(playerid, DIALOG_PANEL_FRAKCJI_WYPLATA, DIALOG_STYLE_INPUT, "Panel frakcji (wyplata):", "Wpisz ponizej ilosc pieniedzy jaka ma otrzymac gracz (wyplata):",  "Zatwierdz", "Zamknij");
		}
		return 1;
	}
	
	if(dialogid == DIALOG_PANEL_FRAKCJI_WYPLATA)
	{
		if(response)
		{
			new data[250], uid = PlayerData[playerid][pPlayerWithList], get_nick[24], get_playerid;
			if(strval(inputtext) < 0) return SendClientMessage(playerid, -1, "{a4a4a4}No chyba nie ?");
			if(strval(inputtext) > GetFrakcjaCash(PlayerData[playerid][pFrakcja]))
			{
				format(data,sizeof(data),"Nie mozesz wyplacic temu pracownikowi $%d z powodu tego iz na saldzie frakcji posiadacie jedynie $%d.", strval(inputtext), GetFrakcjaCash(PlayerData[playerid][pFrakcja]));
				ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Panel frakcji (blad):", data, "Zamknij", "");
				return 1;
			}
			
			
			format(data,sizeof(data), "SELECT `nick`, `playerid`  FROM `data_players` WHERE `uid` = '%d'", uid);
			mysql_query(data);
			mysql_store_result();
			while(mysql_fetch_row(data))
			{
				sscanf(data, "p<|>s[24]i", get_nick, get_playerid);
			}
				
			format(data,sizeof(data), "~g~Gracz %s otrzymuje $%d wyplaty", get_nick, strval(inputtext));
			GameTextForPlayer(playerid, data, 5000, 3);
				
			GiveFrakcjaCash(PlayerData[playerid][pFrakcja], strval(inputtext));
			if(get_playerid != -1)
			{
				PlayerData[get_playerid][pCashBank] += strval(inputtext);
				format(data,sizeof(data), "~g~Otrzymujesz $%d wyplaty z frakcji", strval(inputtext));
				GameTextForPlayer(get_playerid, data, 5000, 3);
			}
			else
			{
				format(data,sizeof(data), "UPDATE `data_players` set `cashbank` = `cashbank` + '%d' where `uid` = '%d'", 			strval(inputtext),  	 uid);
				mysql_query(data);
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_DISCMAN_STACJE)
	{
		if(response)
		{
			UpdateUsePlayerItem(PlayerData[playerid][pSelectItemUID], 1);	
			PlayerMusicDiscman(playerid, listitem);
			
		}
		return 1;
	}
	if(dialogid == DIALOG_BANK)
	{
		if(response)
		{
			new data[300];
			switch(listitem)
			{
				case 0: //Stan konta
				{
					format(data,sizeof(data),"\
					Wlasciciel: %s\n\
					Numer konta: %d\n\
					Saldo: $%d\
					", PlayerData[playerid][pName], PlayerData[playerid][pUID], PlayerData[playerid][pCashBank]);
					ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Bank (stan konta):", data, "Zamknij", "");
				}
				case 1: //Wyplac
				{
					ShowPlayerDialog(playerid, DIALOG_BANK_WYPLAC, DIALOG_STYLE_INPUT, "Bank (wyplac):", "Wpisz ponizej ilosc pieniedzy jaka chcesz wyplacic:", "Wyplac", "Zamknij");
				}
				case 2: //Wplac
				{
					ShowPlayerDialog(playerid, DIALOG_BANK_WPLAC, DIALOG_STYLE_INPUT, "Bank (wplac):", "Wpisz ponizej ilosc pieniedzy jaka chcesz wplacic:", "Wplac", "Zamknij");
				}
				case 3: //Dokonaj przelewu
				{
					ShowPlayerDialog(playerid, DIALOG_BANK_PRZELEW, DIALOG_STYLE_INPUT, "Bank (przelew):", "Wpisz ponizej numer konta oraz kwote przelewu\nTip: [numer_konta] [kwota]", "Przelew", "Zamknij");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BANK_WYPLAC)
	{
		if(response)
		{
			new wartosc = strval(inputtext), data[128];
			if(PlayerData[playerid][pCashBank] < wartosc) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Bank (blad):", "Nie posiadasz takiej kwoty na koncie bankowym.", "Zamknij", "");
			if(wartosc <= 0) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Bank (blad):", "Niepoprawna wartosc.", "Zamknij", "");
			
			GivePlayerCash(playerid, wartosc);
			PlayerData[playerid][pCashBank] -= wartosc;
			
			format(data,sizeof(data),"~g~Wyplacono $%d", wartosc);
			GameTextForPlayer(playerid, data, 3000, 3);
		}
		return 1;
	}
	if(dialogid == DIALOG_BANK_WPLAC)
	{
		if(response)
		{
			new wartosc = strval(inputtext), data[128];
			if(PlayerData[playerid][pCash] < wartosc) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Bank (blad):", "Nie posiadasz takiej kwoty w gotowce.", "Zamknij", "");
			if(wartosc <= 0) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Bank (blad):", "Niepoprawna wartosc.", "Zamknij", "");
			
			GivePlayerCash(playerid, -wartosc);
			PlayerData[playerid][pCashBank] += wartosc;
			
			format(data,sizeof(data),"~g~Wplacono $%d", wartosc);
			GameTextForPlayer(playerid, data, 3000, 3);
		}
		return 1;
	}
	if(dialogid == DIALOG_BANK_PRZELEW)
	{
		if(response)
		{
			new wartosc, player, uid = -1, data[128];
			if(sscanf(inputtext, "dd", uid, wartosc)) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Bank (blad):", "Niepoprawne wartosci.", "Zamknij", "");
			if(PlayerData[playerid][pCashBank] < wartosc) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Bank (blad):", "Nie posiadasz takiej kwoty na koncie bankowym.", "Zamknij", "");
			if(wartosc <= 0) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Bank (blad):", "Niepoprawna wartosc.", "Zamknij", "");
			
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
			{
				if(!IsPlayerConnected(i)) continue;
				if(PlayerData[i][pLogged] == false) continue;
				if(PlayerData[i][pUID] != uid)
				player = i;
			}
			
			PlayerData[playerid][pCashBank] -= wartosc;
			if(player != -1)
			{
				PlayerData[player][pCashBank] += wartosc;
				SendClientMessage(playerid, -1, "{a4a4a4}[BANK] Na twoje konto bankowe wlasnie dotarl przelew.");
			}
			else
			{
				format(data,sizeof(data), "UPDATE `data_players` set `cashbank` = `cashbank` + '%d' where `uid` = '%d'", 		wartosc, 	 uid);
				mysql_query(data);
			}
	
			
			format(data,sizeof(data),"~g~Przelano $%d", wartosc);
			GameTextForPlayer(playerid, data, 3000, 3);
		}
		return 1;
	}
	if(dialogid == DIALOG_TELEFON_MENU)
	{
		if(response)
		{
			new data[250];
			switch(listitem)
			{
				case 0: //Stan konta
				{
					new doladowanie;
					format(data,sizeof(data), "SELECT `var3` FROM `data_przedmioty` WHERE `owneruid` = '%d' and `var1` = '%d' or `var1` = '%d' and `uid` = '%d'", PlayerData[playerid][pUID], TYPE_ITEM_TELEFON, TYPE_ITEM_TELEFON_VIP, PlayerData[playerid][pSelectItemUID]);
					mysql_query(data);
					mysql_store_result();
					while(mysql_fetch_row(data))
					{
						sscanf(data, "p<|>i", doladowanie);
					}
					format(data,sizeof(data),"Stan doladowania wynosi: $%d", doladowanie);
					ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Telefon (stan):", data, "Zamknij", "");
				}
				case 1: //Wyslij SMS
				{
					ShowPlayerDialog(playerid, DIALOG_TELEFON_SMS, DIALOG_STYLE_INPUT, "Telefon (sms):", "Wpisz ponizej id gracza oraz tresc sms-a.\nTyp: [id] [tresc]", "Zatwierdz", "Zamknij");
				}
				case 2: //Telefony Alarmowe
				{
					ShowPlayerDialog(playerid, DIALOG_TELEFON_ALARMOWE, DIALOG_STYLE_LIST, "Telefon (alarmowe):", "Policja\nPomoc drogowa\nPogotowie Ratunkowe\nStraz pozarna\nTaxi", "Wybierz", "Zamknij");
				}
			}
		}
		return 1;
	}
	

	if(dialogid == DIALOG_TELEFON_ALARMOWE)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: //policja
				{
					PlayerData[playerid][pWybieraAlarmowe] = 1; 
				}
				case 1: //pomoc drogowa
				{
					PlayerData[playerid][pWybieraAlarmowe] = 6;
				}
				case 2: //pogotowia
				{
					PlayerData[playerid][pWybieraAlarmowe] = 2;
				}
				case 3: //straz pozarna
				{
					PlayerData[playerid][pWybieraAlarmowe] = 5;
				}
				case 4: //taxi
				{
					PlayerData[playerid][pWybieraAlarmowe] = 8;
				}
			}
			ShowPlayerDialog(playerid, DIALOG_TELEFON_ALARMOWE_WYBRAL, DIALOG_STYLE_INPUT, "Telefon (alarmowe):", "Wpisz ponizej wiadomosc jaka chcesz wyslac do wybranej grupy:", "Zatwierdz", "Zamknij");
		}
		return 1;
	}
	if(dialogid == DIALOG_TELEFON_ALARMOWE_WYBRAL)
	{
		if(response)
		{
			CreateZawiadomienie(playerid, PlayerData[playerid][pWybieraAlarmowe], inputtext);
		}
		return 1;
	}
	if(dialogid == DIALOG_TELEFON_SMS)
	{
		if(response)
		{
			new doladowanie, uidddddd = -1, player, tresc[100], data[250];
			format(data,sizeof(data), "SELECT `var3` FROM `data_przedmioty` WHERE `owneruid` = '%d' and `var1` = '%d' or `var1` = '%d' and `uid` = '%d'", PlayerData[playerid][pUID], TYPE_ITEM_TELEFON, TYPE_ITEM_TELEFON_VIP, PlayerData[playerid][pSelectItemUID]);
			mysql_query(data);
			mysql_store_result();
			while(mysql_fetch_row(data))
			{
				sscanf(data, "p<|>i", doladowanie);
			}
			if(doladowanie <= 0) return SendClientMessage(playerid, -1, "{a4a4a4}Nie masz srodkow na koncie, aby wyslac sms.");
			if(sscanf(inputtext, "ds[100]", player, tresc)) return SendClientMessage(playerid, -1, "{a4a4a4}Tip: [id] [tresc]");
			if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz o tym id nie jest polaczony z serwerem.");
			
			
			format(data,sizeof(data), "SELECT `uid` FROM `data_przedmioty` WHERE `owneruid` = '%d' and `var1` = '%d' or `var1` = '%d' and `uid` = '%d'", PlayerData[player][pUID], TYPE_ITEM_TELEFON, TYPE_ITEM_TELEFON_VIP, PlayerData[playerid][pSelectItemUID]);
			mysql_query(data);
			mysql_store_result();
			while(mysql_fetch_row(data))
			{
				sscanf(data, "p<|>i", uidddddd);
			}
			if(uidddddd == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz o tym id nie posiada telefonu.");
			format(data,sizeof(data),"[SMS] [%d]%s wysyla do ciebie sms: %s", playerid, PlayerData[playerid][pName], tresc);
			SendClientMessage(player, -1, data);
			format(data,sizeof(data),"[SMS] [%d]%s otrzymal od ciebie wiadomosc o tresci: %s", player, PlayerData[player][pName], tresc);
			SendClientMessage(playerid, -1, data);
		}
		return 1;
	}
	if(dialogid == DIALOG_ANIMACJE)
	{
		if(response)
		{
			new i = listitem;
			if(!Animacja[i][Akcja])
			{
				if(Animacja[i][Zapetlanie])
				{
					LoopingAnim(playerid, Animacja[i][Grupa], Animacja[i][ID],
					Animacja[i][Predkosc], Animacja[i][Petla],
					Animacja[i][Blokx], Animacja[i][Bloky], Animacja[i][Blokz],
					Animacja[i][Lp]);
				}
				else
				{
					OnePlayAnim(playerid, Animacja[i][Grupa], Animacja[i][ID],
					Animacja[i][Predkosc], Animacja[i][Petla],
					Animacja[i][Blokx], Animacja[i][Bloky], Animacja[i][Blokz],
					Animacja[i][Lp]);
				}
			}
			else
			{
				SetPlayerSpecialAction(playerid, Animacja[i][Akcja]);
			}
		}
		return 1;
	}
		
	if(dialogid == DIALOG_OPINIE_LISTA)
	{
		if(response)
		{
			if(listitem == 0)
			{
				new dataa[200], get_autor[MAX_PLAYER_NAME], get_ip[18], get_gpci[40], get_time;
				format(dataa,sizeof(dataa),"SELECT `autor`, `ip`, `gpci`, `time` FROM `data_opinie`");
				mysql_query(dataa);
				mysql_store_result();
				
				while(mysql_fetch_row(dataa))
				{
					sscanf(dataa, "p<|>s[24]s[18]s[40]i", get_autor, get_ip, get_gpci, get_time);
				}
				mysql_free_result();
				
				if(!isnull(get_autor) && strlen(get_autor) == strlen(PlayerData[playerid][pName]))
				{
					SendClientMessage(playerid, -1, "{a4a4a4}Nie mozna dodac kolejnej opinii ( z tego nicku zostala oddana juz jedna opinia ).");
					GameTextForPlayer(playerid, "~r~Nie mozesz oddac kolejnej opinii", 2000, 3);
					cmd_opinie(playerid);
					return 1; 
				}
				else if(!isnull(get_ip) && strlen(get_ip) == strlen(PlayerData[playerid][pIP]))
				{
					SendClientMessage(playerid, -1, "{a4a4a4}Nie mozna dodac kolejnej opinii ( z tego ip zostala oddana juz jedna opinia ).");
					GameTextForPlayer(playerid, "~r~Nie mozesz oddac kolejnej opinii", 2000, 3);
					cmd_opinie(playerid);
					return 1;
				}
				else if(!isnull(get_gpci) && strlen(get_gpci) == strlen(PlayerData[playerid][pGPCI]))
				{
					SendClientMessage(playerid, -1, "{a4a4a4}Nie mozna dodac kolejnej opinii ( z tego komputera zostala oddana juz jedna opinia ).");
					GameTextForPlayer(playerid, "~r~Nie mozesz oddac kolejnej opinii", 2000, 3);
					cmd_opinie(playerid);
					return 1;
				}
				ShowPlayerDialog(playerid, DIALOG_OPINIE_DODAJ, DIALOG_STYLE_INPUT, "Opinie serwera (dodaj):", "Wpisz ponizej tresc opinie jaka chcesz dodac dla tego serwera:", "Zatwierdz", "Zamknij");
				return 1;
			}
			
			new data[300], dataa[250], uid = PlayerData[playerid][pWybieraOpinie][listitem], get_opinia[128], get_autor[24];
			PlayerData[playerid][pWybieraOpinieUID] = PlayerData[playerid][pWybieraOpinie][listitem];
			format(dataa,sizeof(dataa),"SELECT `tresc`, `autor` FROM `data_opinie` where `uid` = '%d'", uid);
			mysql_query(dataa);
			mysql_store_result();
			
			while(mysql_fetch_row(dataa))
			{
				sscanf(dataa, "p<|>s[128]s[24]", get_opinia, get_autor);
			}
			mysql_free_result();
			
			format(data,sizeof(data),"Opinia autora %s, uid: %d\nTresc: %s", get_autor, uid, get_opinia);
			if(PlayerData[playerid][pRanga] >= RANGA_WSPOLWLASCICIEL)
			{
				ShowPlayerDialog(playerid, DIALOG_OPINIE_AKCJA, DIALOG_STYLE_MSGBOX, "Opinie serwera (lista):", data, "Zamknij", "Usun");
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_OPINIE_AKCJA, DIALOG_STYLE_MSGBOX, "Opinie serwera (lista):", data, "Zamknij", "");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_OPINIE_DODAJ)
	{
		if(response)
		{
			new dataa[300];
			
			format(dataa,sizeof(dataa),"Poprawnie dodano opinie dla tego serwera.\nTresc: %s", inputtext);
			ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Opinie serwera (zatwierdzono):", dataa, "Zamknij", "");
			
			format(dataa,sizeof(dataa),"INSERT INTO `data_opinie` SET `tresc` = '%s', `autor` = '%s', `gpci` = '%s', `ip` = '%s', `time` = '%d'", inputtext, PlayerData[playerid][pName], PlayerData[playerid][pGPCI], PlayerData[playerid][pIP], gettime());
			mysql_query(dataa);
		}
		return 1;
	}
	if(dialogid == DIALOG_OPINIE_AKCJA)
	{
		if(response) //Zamknij
		{
			return 1;
		}
		else //Usun
		{
			if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return GameTextForPlayer(playerid, "~r~Nie mozesz tego zrobic", 3000, 3);
			new data[128];
			format(data, sizeof(data), "DELETE FROM `data_opinie` WHERE `uid` = '%d'", PlayerData[playerid][pWybieraOpinieUID]);
			mysql_query(data);
			GameTextForPlayer(playerid, "~g~Wpis zostal poprawnie usuniety", 3000, 3);
		}
		return 1;
	}
	if(dialogid == DIALOG_VEHICLES_LISTA)
	{
		if(response)
		{
			PlayerData[playerid][pCheckVehicleSelect] = PlayerData[playerid][pCheckVehicleUID][listitem];
			
			new naglowek[64], str_paliwo[64], data[128], vehicleid;
			for(new v = 1, j = GetVehiclePoolSize(); v <= j; v++)
			{
				if(VehicleData[v][vUID] == PlayerData[playerid][pCheckVehicleSelect])
				{
					vehicleid = v;
				}
			}
			
			if(vehicleid != 0)
			{
				format(naglowek,sizeof(naglowek),"Prywatny pojazd UID: %d | ID: %d | MODELID: %d | OWNERUID: %d", PlayerData[playerid][pCheckVehicleSelect], vehicleid, GetVehicleModel(vehicleid), VehicleData[vehicleid][vOwnerUID]);
				switch(VehicleData[vehicleid][vPaliwoTyp])
				{
					case 0: str_paliwo = "Benzyna";
					case 1: str_paliwo= "Gaz (LPG)";
					case 2: str_paliwo = "ON (Olej napedowy)";
					case 3: str_paliwo = "Gazy ziemne (NVG)";
					case 4: str_paliwo = "Uniwersalna 95";
					case 5: str_paliwo = "Bezolowiowa 95";
					case 6: str_paliwo = "Bezolowiowa 98";
				}
				format(data,sizeof(data),"\
											%s\tPrzebieg: %f\tHP: %f\tPaliwo: %d/%d (%s)\n\
											Zlokalizuj ten pojazd na mapie\n\
											Znajdz ten pojazd na zlomowisku\n\
											", CarList[GetVehicleModel(vehicleid)-400], VehicleData[vehicleid][vPrzebieg], VehicleData[vehicleid][vHP], floatround(VehicleData[vehicleid][vPaliwo]), floatround(VehicleData[vehicleid][vPaliwoMax]), str_paliwo);
				ShowPlayerDialog(playerid, DIALOG_VEHICLES_MENU, DIALOG_STYLE_TABLIST_HEADERS, naglowek, data, "Wybierz", "Zamknij");
			}
			else
			{
				new dataa[300], get_owneruid, get_model, Float:get_przebieg,Float:get_hp,Float:get_paliwo;
				format(dataa,sizeof(dataa), "SELECT `model`, `przebieg`, `hp`, `paliwo`, `owneruid` from `data_vehicles` WHERE `uid` = '%d'", PlayerData[playerid][pCheckVehicleSelect]);
				mysql_query(dataa);
				mysql_store_result();
				if(mysql_num_rows() == 0) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Pojazd (zlomowisko):", "blad bazy mysql",  "Zamknij", "");
				mysql_fetch_row(dataa);
				sscanf(dataa, "p<|>ifffi",
				get_model, get_przebieg,get_hp,get_paliwo,get_owneruid);
				
				
				format(naglowek,sizeof(naglowek),"Prywatny pojazd UID: %d | MODELID: %d | OWNERUID: %d", PlayerData[playerid][pCheckVehicleSelect], get_model, get_owneruid);
				format(data,sizeof(data),"\
											%s\tPrzebieg: %f\tHP: %f\tPaliwo: %d\n\
											Zlokalizuj ten pojazd na mapie\n\
											Znajdz ten pojazd na zlomowisku\n\
											", CarList[get_model-400], get_przebieg, get_hp, floatround(get_paliwo));
				ShowPlayerDialog(playerid, DIALOG_VEHICLES_MENU, DIALOG_STYLE_TABLIST_HEADERS, naglowek, data, "Wybierz", "Zamknij");
			}
		}
		return 1;
	}
	
	if(dialogid == DIALOG_VEHICLES_MENU)
	{
		new uid = PlayerData[playerid][pCheckVehicleSelect], data[300];
		switch(listitem)
		{
			case 0: //Zlokalizuj pojazd
			{
				new v_spawned = 0, Float:x,Float:y,Float:z;

				for(new i = 0; i != GetVehiclePoolSize()+1; i++)
				{
					if(VehicleData[i][vUID] == uid)
					{
						GetVehiclePos(i, x,y,z);
						v_spawned = i;
						break;
					}
				}
				
				if(v_spawned == 0)
				{
					ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Namierzanie pojazdu: (blad):", "Ten pojazd nie jest zespawnowany, nie mozesz tego zrobic.",  "Zamknij", "");
				}
				else
				{
					if(IsValidDynamicCP(PlayerData[playerid][pGPSVehicle])) IsValidDynamicCP(PlayerData[playerid][pGPSVehicle]);
					PlayerData[playerid][pGPSVehicle] = CreateDynamicCP(x, y, z, 10);
					ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Namierzanie pojazdu: (aktywacja):", "Pojazd zostal zaznaczony na twoim radarze w postaci {d90000}czerwonego {a4a4a4}znacznika .",  "Zamknij", "");
				}
			}
			case 1: //Znajdz zlomowisko
			{
				new zlom, Float:x,Float:y,Float:z;
				format(data,sizeof(data), "SELECT `zlom`, `x`, `y`, `z` from `data_vehicles` WHERE `uid`= '%d'", uid);
				mysql_query(data);
				mysql_store_result();
				if(mysql_num_rows() == 0) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Pojazd (zlomowisko):", "blad bazy mysql",  "Zamknij", "");
				mysql_fetch_row(data, "|");
				sscanf(data, "p<|>ifff",
				zlom,x,y,z);
				
				if(zlom != 0)
				{
					PlayerData[playerid][pGPSZlom] = CreateDynamicCP(x,y,z, 2);
					PlayerData[playerid][pUIDZlom] = uid;
					ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Pojazd (zlomowisko):", "Udaj sie teraz do czerwonego markeru na mapie, wejdz w niego aby odzyskac swoj pojazd ze zlomowiska.",  "Zamknij", "");
				}
				else
				{
					ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Pojazd (zlomowisko):", "Ten pojazd nie znajduje sie na zlomowisku.",  "Zamknij", "");
				}
			}
		}
		return 1;
	}
	
	if(dialogid == DIALOG_PANEL_OGOL_VEHICLE3S)
	{
		new uid = PlayerData[playerid][pCheckVehicleSelect], data[300];
		switch(listitem)
		{
			case 0: //spawn/unspawn
			{
				new zlom;
				format(data,sizeof(data), "SELECT `zlom` from `data_vehicles` WHERE `uid`= '%d'", uid);
				mysql_query(data);
				mysql_store_result();
				if(mysql_num_rows() == 0) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Pojazd (zlomowisko):", "blad bazy nysql, sprobuj ponownie.",  "Zamknij", "");
				mysql_fetch_row(data, "|");
				sscanf(data, "p<|>d",
				zlom);
				
				if(zlom != 0) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Pojazd (zlomowisko):", "Ten pojazd znajduje sie na zlomowisku, uzyj odpowiedniej opcji czyli 'Znajdz ten pojazd na zlomowisku' w cenlu odnalezienia.",  "Zamknij", "");
			
				new v_spawned;

				for(new i = 0; i != GetVehiclePoolSize(); i++)
				{
					if(VehicleData[i][vUID] == uid)
					{
						v_spawned = i;
					}
				}
				
				if(v_spawned == 0)
				{
					SpawnVehicle(uid);
				}
				else
				{
					SaveVehicle(v_spawned);
				}
			}
			case 1: //Zlokalizuj pojazd
			{
				new v_spawned, Float:x,Float:y,Float:z;

				for(new i = 0; i != GetVehiclePoolSize(); i++)
				{
					if(VehicleData[i][vUID] == uid)
					{
						GetVehiclePos(i, x,y,z);
						v_spawned = i;
					}
				}
				
				if(v_spawned == 0)
				{
					ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Namierzanie pojazdu: (blad):", "Ten pojazd nie jest zespawnowany, nie mozesz tego zrobic.",  "Zamknij", "");
				}
				else
				{
					if(IsValidDynamicCP(PlayerData[playerid][pGPSVehicle])) IsValidDynamicCP(PlayerData[playerid][pGPSVehicle]);
					PlayerData[playerid][pGPSVehicle] = CreateDynamicCP(x, y, z, 10);
					ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Namierzanie pojazdu: (aktywacja):", "Pojazd zostal zaznaczony na twoim radarze w postaci {d90000}czerwonego {a4a4a4}znacznika .",  "Zamknij", "");
				}
			}
			case 2: //Znajdz zlomowisko
			{
				new zlom, Float:x,Float:y,Float:z;
				format(data,sizeof(data), "SELECT `zlom`, `x`, `y`, `z` from `data_vehicles` WHERE `uid`= '%d'", uid);
				mysql_query(data);
				mysql_store_result();
				if(mysql_num_rows() == 0) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Pojazd (zlomowisko):", "blad bazy mysql",  "Zamknij", "");
				mysql_fetch_row(data, "|");
				sscanf(data, "p<|>ifff",
				zlom,x,y,z);
				
				if(zlom != 0)
				{
					PlayerData[playerid][pGPSZlom] = CreateDynamicCP(x,y,z, 2);
					PlayerData[playerid][pUIDZlom] = uid;
					ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Pojazd (zlomowisko):", "Udaj sie teraz do czerwonego markeru na mapie, wejdz w niego aby odzyskac swoj pojazd ze zlomowiska.",  "Zamknij", "");
				}
				else
				{
					ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Pojazd (zlomowisko):", "Ten pojazd nie znajduje sie na zlomowisku.",  "Zamknij", "");
				}
			}
		}
		return 1;
	}
	
	if(dialogid == DIALOG_MANDAT_MENU)
	{
		new player = PlayerData[playerid][pMandatGive], mandat = PlayerData[playerid][pMandat];
		if(response)
		{
			ShowPlayerDialog(player, 9999, DIALOG_STYLE_MSGBOX, "Mandat:", "{F2F2F2}Mandat zostal {01DF01}przyjety {F2F2F2}przez tego gracza",  "Zamknij", "");
			ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Mandat:", "{F2F2F2}Mandat zostal {01DF01}przyjety {F2F2F2}poprawnie.",  "Zamknij", "");
			GiveFrakcjaCash(PlayerData[player][pFrakcja], mandat);
			GivePlayerCash(playerid, -mandat);
			PlayerData[playerid][pMandatGive] = 0;
			PlayerData[playerid][pMandat] = 0;
		}
		else
		{
			ShowPlayerDialog(player, 9999, DIALOG_STYLE_MSGBOX, "Mandat:", "{F2F2F2}Mandat zostal {FF0000}odrzucony {F2F2F2}przez tego gracza",  "Zamknij", "");
			ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Mandat:", "{F2F2F2}Mandat zostal {FF0000}odrzucony {F2F2F2}poprawnie.",  "Zamknij", "");
			PlayerData[playerid][pMandatGive] = 0;
			PlayerData[playerid][pMandat] = 0;
			PlayerData[playerid][pWantedLevel] += 2;
			SetPlayerWantedLevel(playerid, PlayerData[playerid][pWantedLevel]);
		}
		return 1;
	}
	if(dialogid == DIALOG_KASYNO_OWOCE_CYFRY)
	{
		if(response)
		{
			if(GetPlayerCash(playerid) < strval(inputtext)) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Kasyno (owoce i cyfry):", "Nie posiadasz takiej kwoty pieniedzy w gotowce, wyplac z bankomatu i graj!",  "Zamknij", "");
			PlayerData[playerid][pKasynoWygrana]+=strval(inputtext);
			PlayerKasynoPanel(playerid, 4);
		}
		return 1;
	}
	if(dialogid == DIALOG_SPEC_KICK)
	{
		if(response)
		{
			KickTimer(PlayerData[playerid][pSpecID], playerid, inputtext);
		}
		return 1;
	}
	if(dialogid == DIALOG_SPEC_WARN)
	{
		if(response)
		{
			new xxx[50];
			format(xxx,sizeof(xxx),"%d %s", PlayerData[playerid][pSpecID], inputtext);
			cmd_warn(playerid, xxx);
		}
		return 1;
	}
	if(dialogid == DIALOG_DJ)
	{
		if(response)
		{
			
			new string[128], name[24];
   			GetPlayerName(playerid,name,24);
   			format(string,sizeof(string),"Dj %s włączył muzykę!",name);
			SendClientMessageToAll(-1,string);
			for(new i;i<MAX_PLAYERS;i++)
			{
			PlayAudioStreamForPlayer(playerid, "http://www.miastomuzyki.pl/n/rmfmaxxx.pls");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_SPEC_BAN)
	{
		if(response)
		{
			new dni, godzin, minut, powod[30];
			if(sscanf(inputtext, "s[30]D(0)D(0)D(0)", powod, dni, godzin, minut)) return ShowPlayerDialog(playerid, DIALOG_SPEC_BAN, DIALOG_STYLE_INPUT, "Spec (warn):", "Wpisz ponizej powod warna dla tego gracza:\nTip: [Powod] [Dni] [Godzin] [Minut]\nNie musisz uzupelniac pol [dni] [godzin] [minut] jezeli jest to ban perm.",  "Zatwierdz", "Zamknij");
			new naglowek[64];
			format(PlayerData[playerid][pSpecPowod], 30, "%s", powod);
			PlayerData[playerid][pSpecDni] = dni;
			PlayerData[playerid][pSpecGodz] = godzin;
			PlayerData[playerid][pSpecMin] = minut;
			format(naglowek,sizeof(naglowek),"Spec (ban) (Powod: %s)", inputtext);
			
			ShowPlayerDialog(playerid, DIALOG_SPEC_BAN_LISTA, DIALOG_STYLE_LIST, naglowek, "\
																								{DF0101}#Bany czasowe\n\
																								{2ECCFA}Ban czasowy ( IP + GPCI + NICK )\n\
																								Ban czasowy ( IP + NICK )\n\
																								Ban czasowy ( GPCI + NICK )\n\
																								Ban czasowy ( NICK )\n\
																								{DF0101}#Bany na zawsze\n\
																								{2ECCFA}Ban perm ( IP + GPCI + NICK )\n\
																								Ban perm ( IP + NICK )\n\
																								Ban perm ( GPCI + NICK )\n\
																								Ban perm ( NICK )",  "Zatwierdz", "Zamknij");
		}
		return 1;
	}
	if(dialogid == DIALOG_SPEC_BAN_LISTA)
	{
		if(response)
		{
			new time, dni = PlayerData[playerid][pSpecDni], godzin = PlayerData[playerid][pSpecGodz], minut = PlayerData[playerid][pSpecMin], player = PlayerData[playerid][pSpecID];
			if(dni != 0 && godzin != 0 && minut != 0) 
			{
				time = dni*86400 + godzin*3600 + minut*60 + gettime();
			}
			switch(listitem)
			{
				case 1: //Ban czasowy IP + GPCI + NICK
				{
					Baned(player, playerid, PlayerData[playerid][pSpecPowod], PlayerData[player][pIP], PlayerData[player][pGPCI], time);
				}
				case 2: //Ban czasowy IP + NICK
				{
					Baned(PlayerData[playerid][pSpecID], playerid, PlayerData[playerid][pSpecPowod], PlayerData[player][pIP], "0", time);
				}
				case 3: //Ban czasowy NICK
				{
					Baned(PlayerData[playerid][pSpecID], playerid, PlayerData[playerid][pSpecPowod], "0","0",time);
				}
				case 5: //Ban perm IP + GPCI + NICK
				{
					Baned(PlayerData[playerid][pSpecID], playerid, PlayerData[playerid][pSpecPowod], PlayerData[player][pIP], PlayerData[player][pGPCI],0);
				}
				case 6: //Ban perm IP + NICK
				{
					Baned(PlayerData[playerid][pSpecID], playerid, PlayerData[playerid][pSpecPowod], PlayerData[player][pIP],"0",0);
				}
				case 7: //Ban perm  NICK
				{
					Baned(PlayerData[playerid][pSpecID], playerid, PlayerData[playerid][pSpecPowod], "0","0",0);
				}
			}
		}
		return 1;
	}

		if(dialogid == DIALOG_PRAWO_JAZDY_SELECT)
	{
		if(response)
		{
			PlayerData[playerid][pNowPrawkoTZdaje] = 0;
			PlayerData[playerid][pNowPrawkoPZdaje] = 0;
			PlayerData[playerid][pNowPrawkoID] = 0;
			PlayerData[playerid][pNowPrawkoLicz] = 0;
			switch(listitem)
			{
				case 0: //#Teoria
				{
				}
				case 1: //Teoria B
				{
					if(GetPlayerCash(playerid) < 1500) return SendClientMessage(playerid, -1, "{a4a4a4}Nie stac cie na prawo jazdy.");
					GivePlayerCash(playerid, -1500);
					PlayerData[playerid][pNowPrawkoTZdaje] = PRAWKO_TYPE_B;
                    ShowPlayerPrawko(playerid);
                    return 1;
				}
				case 2: //Teoria C
				{
					if(GetPlayerCash(playerid) < 2800) return SendClientMessage(playerid, -1, "{a4a4a4}Nie stac cie na prawo jazdy.");
					GivePlayerCash(playerid, -2800);
					PlayerData[playerid][pNowPrawkoTZdaje] = PRAWKO_TYPE_C;
                    ShowPlayerPrawko(playerid);
                    return 1;
				}
				case 3: //Teoria A
				{
					if(GetPlayerCash(playerid) < 1100) return SendClientMessage(playerid, -1, "{a4a4a4}Nie stac cie na prawo jazdy.");
					GivePlayerCash(playerid, -1100);
					PlayerData[playerid][pNowPrawkoTZdaje] = PRAWKO_TYPE_A;
                    ShowPlayerPrawko(playerid);
                    return 1;
				}
				case 4: //Teoria D
				{
					if(GetPlayerCash(playerid) < 3200) return SendClientMessage(playerid, -1, "{a4a4a4}Nie stac cie na prawo jazdy.");
					GivePlayerCash(playerid, -3200);
					PlayerData[playerid][pNowPrawkoTZdaje] = PRAWKO_TYPE_D;
                    ShowPlayerPrawko(playerid);
                    return 1;
				}
				case 5: //Teoria Licencja Lotnicza
				{
					if(GetPlayerCash(playerid) < 5000) return SendClientMessage(playerid, -1, "{a4a4a4}Nie stac cie na prawo jazdy.");
					GivePlayerCash(playerid, -5000);
					PlayerData[playerid][pNowPrawkoTZdaje] = PRAWKO_TYPE_L;
                    ShowPlayerPrawko(playerid);
                    return 1;
				}
				case 6: //#Praktyka
				{
				}
				case 7: //Praktyka B
				{
					if(PlayerData[playerid][pPrawoJazdyT][PRAWKO_TYPE_B] == 0) return  SendClientMessage(playerid, -1, "{a4a4a4}Musisz najpierw zdac teorie prawa jazdy kat. B.");
					if(GetPlayerCash(playerid) < 2000) return SendClientMessage(playerid, -1, "{a4a4a4}Nie stac cie na prawo jazdy.");
					GivePlayerCash(playerid, -2000);
					PlayerData[playerid][pNowPrawkoPZdaje] = PRAWKO_TYPE_B;
                    ShowPlayerPrawko(playerid);
                    return 1;
				}
				case 8: //Praktyka C
				{
					if(PlayerData[playerid][pPrawoJazdyT][PRAWKO_TYPE_C] == 0) return  SendClientMessage(playerid, -1, "{a4a4a4}Musisz najpierw zdac teorie prawa jazdy kat. C.");
					if(GetPlayerCash(playerid) < 3700) return SendClientMessage(playerid, -1, "{a4a4a4}Nie stac cie na prawo jazdy.");
					GivePlayerCash(playerid, -3700);
					PlayerData[playerid][pNowPrawkoPZdaje] = PRAWKO_TYPE_C;
                    ShowPlayerPrawko(playerid);
                    return 1;
				}
				case 9: //Praktyka A
				{
					if(PlayerData[playerid][pPrawoJazdyT][PRAWKO_TYPE_A] == 0) return  SendClientMessage(playerid, -1, "{a4a4a4}Musisz najpierw zdac teorie prawa jazdy kat. A.");
					if(GetPlayerCash(playerid) < 2000) return SendClientMessage(playerid, -1, "{a4a4a4}Nie stac cie na prawo jazdy.");
					GivePlayerCash(playerid, -2000);
					PlayerData[playerid][pNowPrawkoPZdaje] = PRAWKO_TYPE_A;
                    ShowPlayerPrawko(playerid);
                    return 1;
				}
				case 10: //Praktyka D
				{
					if(PlayerData[playerid][pPrawoJazdyT][PRAWKO_TYPE_A] == 0) return  SendClientMessage(playerid, -1, "{a4a4a4}Musisz najpierw zdac teorie prawa jazdy kat. D.");
					if(GetPlayerCash(playerid) < 4100) return SendClientMessage(playerid, -1, "{a4a4a4}Nie stac cie na prawo jazdy.");
					GivePlayerCash(playerid, -4100);
					PlayerData[playerid][pNowPrawkoPZdaje] = PRAWKO_TYPE_D;
                    ShowPlayerPrawko(playerid);
                    return 1;
				}
				case 11: //Praktyka Licencja Lotnicza
				{
					if(PlayerData[playerid][pPrawoJazdyT][PRAWKO_TYPE_L] == 0) return  SendClientMessage(playerid, -1, "{a4a4a4}Musisz najpierw zdac teorie prawa jazdy kat. L.");
					if(GetPlayerCash(playerid) < 6700) return SendClientMessage(playerid, -1, "{a4a4a4}Nie stac cie na prawo jazdy.");
					GivePlayerCash(playerid, -6700);
					PlayerData[playerid][pNowPrawkoPZdaje] = PRAWKO_TYPE_L;
                    ShowPlayerPrawko(playerid);
                    return 1;
				}
			}
		}
		return 1;
	}
			
			
	if(dialogid == DIALOG_PRAWKO_TEORIA)
	{
		if(response)
		{
			new data[1024], naglowek[50], find = -1, get_old_find = PlayerData[playerid][pNowPrawkoID];
			
			if(listitem == PJ_Teoria[get_old_find][dobra_odp])
			{
				PlayerData[playerid][pNowPrawkoWynik]++;
				SendClientMessage(playerid, -1, "{3ADF00}Wybrales poprawna odpowiedz.");
			}
			else
			{
				SendClientMessage(playerid, -1, "{FF0000}Wybrales zla odpowiedz.");
			}
			for(new i=0; i<sizeof(PJ_Teoria); i++)
			{
				if(PJ_Teoria[i][type_prawko] == PlayerData[playerid][pNowPrawkoTZdaje]) 
				{
					if(PJ_Teoria[i][id_p] > PlayerData[playerid][pNowPrawkoID]) 
					{
						find = i;
						break;
					}
				}
			}
			if(find != -1)
			{
				PlayerData[playerid][pNowPrawkoID] = find;
				PlayerData[playerid][pNowPrawkoLicz]++;
				format(naglowek,sizeof(naglowek),"Prawo jazdy: %d/10 (uid: %d) (type: %d)", PlayerData[playerid][pNowPrawkoLicz], PlayerData[playerid][pNowPrawkoID], PlayerData[playerid][pNowPrawkoTZdaje]);
				format(data,sizeof(data),"%s\n\
										  %s\n\
										  %s\n\
										  %s\n\
										  %s\n", PJ_Teoria[find][pytanie], PJ_Teoria[find][pytA], PJ_Teoria[find][pytB], PJ_Teoria[find][pytC], PJ_Teoria[find][pytD] );
				ShowPlayerDialog(playerid, DIALOG_PRAWKO_TEORIA, DIALOG_STYLE_LIST, naglowek, data,  "Zatwierdz", "");
			}
			else
			{
				if(PlayerData[playerid][pNowPrawkoWynik] >= 10)
				{
					ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Prawo jazdy:", "Udalo ci sie zdac teorie! Mozesz teraz zaczac zdawac czesc praktyczna prawa jazdy.", "Zamknij", "");
					new prawko_typ = PlayerData[playerid][pNowPrawkoTZdaje];
					PlayerData[playerid][pPrawoJazdyT][prawko_typ] = 1;
				}
				else
				{
					ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Prawo jazdy:", "Niestety nie udalo ci sie zdac teorii, sprobuj ponownie.", "Zamknij", "");
				}
			}
		}
		return 1;
	}

	if(dialogid == DIALOG_MAPER_MAIN && response) {
		switch(listitem) {
			case: 0 { //Obiekt 
				ShowPlayerDialog(playerid, DIALOG_MAPER_OBIEKT_MAIN, DIALOG_STYLE_LIST, "Panel Mapera - Obiekt", "Dodaj obiekt\nEdytuj obiekt\nUsun obiekt", "Dalej", "Wstecz");
				return 1;
			}
			case 1: { //Budynek
				ShowPlayerDialog(playerid, DIALOG_MAPER_BUDYNEK_MAIN, DIALOG_STYLE_LIST, "Panel Mapera - Budynek", "Dodaj budynek\nEdytuj budynek\nUsun budynek", "Dalej", "Wstecz");
				return 1;
			}
			case 2: { //Bramy/drzwi
				ShowPlayerDialog(playerid, DIALOG_MAPER_BRAMY_MAIN, DIALOG_STYLE_LIST, "Panel Mapera - Bramy/drzwi", "Dodaj brame/drzwi\nEdytuj brame/drzwi\nUsun brame/drzwi", "Dalej", "Wstecz");
			}
			case 3: { //silownia
				ShowPlayerDialog(playerid, DIALOG_MAPER_SILOWNIA_MAIN, DIALOG_STYLE_LIST, "Panel Mapera - Silownia", "Dodaj maszyne\nEdytuj maszyne\nUsun maszyne", "Dalej", "Wstecz");
			}
		}
		return 1;
	}

	if(dialogid == DIALOG_MAPER_OBIEKT_MAIN && response) {
		switch(listitem) {
			case 0: { //dodaj obiekt
				ShowPlayerDialog(playerid, DIALOG_MAPER_OBIEKT_NEW_TYPE, DIALOG_STYLE_INPUT, "Panel mapera - dodaj nowy obiekt", "Ponizej wpisz typ obiektu\n{bf0d00}0{ffffff} - zwykly obiekt\n{bf0d00}1{ffffff} - bankomat\n{bf0d00}2{ffffff} - przejazd graniczny", "Dodaj", "Wroc");
				return 1;
			}
			case 1: { //edytuj obiekt
				ShowPlayerDialog(playerid, DIALOG_MAPER_OBIEKT_EDIT_MAIN, DIALOG_STYLE_LIST, "Panel mapera - edytuj obiekt", "Przesun obiekt\nKopiuj obiekt\nUsun obiekt", "Wykonaj", "Wstecz");
			}
		}
	}
    
	

	return 1;
}

//end dialogid


public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	if(checkpointid == PlayerData[playerid][pPraktykaCP])
	{
		CheckNextCheckpointDriver(playerid);
		return 1;
	}
	if(checkpointid == PlayerData[playerid][pGPSZlom])
	{
		if(IsValidDynamicCP(PlayerData[playerid][pGPSZlom])) DestroyDynamicCP(PlayerData[playerid][pGPSZlom]);
		SpawnVehicle(PlayerData[playerid][pUIDZlom]);
		return 1;
	}
	if(checkpointid == PlayerData[playerid][pGPSVehicle])
	{
		DestroyDynamicCP(PlayerData[playerid][pGPSVehicle]);
		SendClientMessage(playerid, -1, "{a4a4a4}Dotarles do celu!");
		return 1;
	}
	if(checkpointid == PlayerData[playerid][pKlodaCP][kloda_activity])
	{
		if(IsValidDynamicCP(PlayerData[playerid][pKlodaCP][kloda_activity])) 
		{
			DestroyDynamicCP(PlayerData[playerid][pKlodaCP][kloda_activity]);
			return 1;
		}	
		return 1;
	}	
	if(checkpointid == PlayerData[playerid][pPlamaCP][plama_activity])
	{
		if(IsValidDynamicCP(PlayerData[playerid][pPlamaCP][plama_activity])) 
		{
			DestroyDynamicCP(PlayerData[playerid][pPlamaCP][plama_activity]);
			SendClientMessage(playerid, -1, "{DF7401}Wyciagnij sorbent z samochodu (/panel) i zacznij sypac plame aby ja zneutralizowac.");
		}
		return 1;
	}
	for(new pf_c_v = 0; pf_c_v != MAX_POZARY; pf_c_v++)
	{
		if(checkpointid == PlayerData[playerid][pPozarCP][pf_c_v])
		{
			if(IsValidDynamicCP(PlayerData[playerid][pPozarCP][pf_c_v])) 
			{
				DestroyDynamicCP(PlayerData[playerid][pPozarCP][pf_c_v]);
				SendClientMessage(playerid, -1, "{DF7401}Wyciagnij gasnice (/gasnica) i zacznij gasic ogien.");
			}
			return 1;
		}
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
	if(PlayerData[playerid][CheckNowSobeit] != 0)
	{
		if(PlayerData[playerid][CheckNowSobeit] == 1 && PlayerData[playerid][CheckNowSobeitL] == 0)
		{
			GetPlayerPos(playerid,PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
		}
		PlayerData[playerid][CheckNowSobeit]++;
		if(PlayerData[playerid][CheckNowSobeit] < 5)
		{
			ClearAnimations(playerid);
			TogglePlayerControllable(playerid, 0);
			TogglePlayerControllable(playerid, 1);
			TogglePlayerControllable(playerid, 0);
			SetPlayerPos(playerid, 1278.0042, 2792.2031, 113.0554);
		}
		
		if(PlayerData[playerid][CheckNowSobeit] == 7)
		{
			new weapon, ammo;
			GetPlayerWeaponData(playerid, 1, weapon, ammo);
			if(weapon == 2)
			{
				RemovePlayerWeapon(playerid, 2); //Jezeli posiadal uprzednio bron - kij golfowy, zostaje mu zxabierany na czas sprawdzania s0beita.
				PlayerData[playerid][CheckNowSobeitB] = 1;
			}
			else
			{
				ClearAnimations(playerid);
				TogglePlayerControllable(playerid, 0);
				TogglePlayerControllable(playerid, 1);
				TogglePlayerControllable(playerid, 0);
				SetPlayerPos(playerid, 1278.0042, 2792.2031, 113.0554);
				new Float:s[4];
				GetPlayerPos(playerid, s[0], s[1], s[2]);
				GetPlayerFacingAngle(playerid, s[3]);
				if(PlayerData[playerid][CheckNowSobeitV] != 0)
				{
					if(GetVehicleModel(PlayerData[playerid][CheckNowSobeitV]) == 457) //Upewnienie sie czy to na pewno wozek golfowy
					{
						DestroyVehicle(PlayerData[playerid][CheckNowSobeitV]);
					}
					PlayerData[playerid][CheckNowSobeitV] = 0;
				}
				PlayerData[playerid][CheckNowSobeitV] = CreateVehicle(457, s[0], s[1], s[2], s[3], 0,0, 999999999);
				LinkVehicleToInterior(PlayerData[playerid][CheckNowSobeitV], GetPlayerInterior(playerid));
				SetVehicleVirtualWorld(PlayerData[playerid][CheckNowSobeitV], GetPlayerVirtualWorld(playerid));
				PutPlayerInVehicleEx(playerid, PlayerData[playerid][CheckNowSobeitV], 0);
				SetPlayerArmedWeapon(playerid, 2);
			}
		}
		
		if(PlayerData[playerid][CheckNowSobeit] == 10)
		{
			if(GetPlayerVehicleID(playerid) != PlayerData[playerid][CheckNowSobeitV] && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			{
				TogglePlayerControllable(playerid, 1);
				PlayerData[playerid][CheckNowSobeit] = 0;
				PlayerData[playerid][CheckNowSobeitL] = 0;
				PlayerData[playerid][CheckNowSobeitB] = 0;
				SetPlayerPos(playerid, START_PLAYER_POS_X, START_PLAYER_POS_Y, START_PLAYER_POS_Z);
				
				KickTimer(playerid, playerid, "S0beit v2"); //Nie znajduje sie w wozku golfowym
			}
			DestroyVehicle(PlayerData[playerid][CheckNowSobeitV]);
			PlayerData[playerid][CheckNowSobeitV] = 0;
		}
		
		if(PlayerData[playerid][CheckNowSobeit] >= 13)
		{
			new weapon, ammo, buffer[500];
			GetPlayerWeaponData(playerid, 1, weapon, ammo);
			
			if(weapon == 2)
			{
				RemovePlayerWeapon(playerid, 2);
				GameTextForPlayer(playerid, "~r~ODINSTALUJ SZKODLIWE MODYFIKACJE", 9999999, 3);
				KickTimer(playerid, playerid, "S0beit v1"); //Wykryto bron golfowy kij - s0beit 100%
			}
			
			
			else if(weapon != 2)
			{
				format(buffer, sizeof buffer, "{F5A9BC}Gracz [%s]%d nie posiada s0beita.", PlayerData[pName], playerid);
			//	SCMToAdmins(-1,buffer);
			}
			
			if(PlayerData[playerid][CheckNowSobeitB] == 1) GivePlayerWeaponEx(playerid, 2, 1);
			
			SetPlayerPos(playerid,PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
			PlayerData[playerid][CheckNowSobeit] = 0;
			PlayerData[playerid][CheckNowSobeitV] = 0;
			PlayerData[playerid][CheckNowSobeitL] = 0;
			PlayerData[playerid][CheckNowSobeitB] = 0;
			TogglePlayerControllable(playerid, 0);
		}
	}
	new vehicleid = GetPlayerVehicleID(playerid);
	if(vehicleid != 0)
	{
		PlayerTextDrawLicznik(playerid, 4);
		if(!GetPlayerFrakcja(playerid, FRAKCJA_POGOTOWIA) || !GetPlayerFrakcja(playerid, FRAKCJA_POLICJI) || !GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_GRANICZNA) || !GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_MIEJSKA) || !GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_POZARNA))
		{
			if(PlayerData[playerid][pSluzba] == false)
			{
				//System kolczatek
				for(new i = 0; i < sizeof(KolczatkiData); i++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 4.4, KolczatkiData[i][kPos][0], KolczatkiData[i][kPos][1], KolczatkiData[i][kPos][2]))
					{
						if(KolczatkiData[i][kPos][0] != 0 && KolczatkiData[i][kPos][1] != 0 && KolczatkiData[i][kPos][2] != 0)
						{
							VehicleData[vehicleid][vOponaLT_DMG] = 0.0;
							VehicleData[vehicleid][vOponaLP_DMG] = 0.0;
							VehicleData[vehicleid][vOponaPP_DMG] = 0.0;
							VehicleData[vehicleid][vOponaPT_DMG] = 0.0;
						}
					}
				}
			}
		}
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(newstate == PLAYER_STATE_DRIVER)
	{
		if(PlayerData[playerid][pCanBeInThisVehicle] != GetPlayerVehicleID(playerid))
		{
			KickTimer(playerid, -1, "Desync: entered unstreamed vehicle");
		}
	}
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		PlayerData[playerid][pLastEnterVehicleID] =  GetPlayerVehicleID(playerid);
		PlayerTextDrawLicznik(playerid, 1);
	}
	if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
		PlayerData[playerid][pCanBeInThisVehicle] = -1;
		PlayerTextDrawLicznik(playerid, 2);
	}
	return 1;
}


public OnVehicleSpawn(vehicleid)
{

	VehicleData[vehicleid][vAdminCar]  = false;
	VehicleData[vehicleid][vPrivateCar] = 0;
	VehicleData[vehicleid][vFirmyCar] = 0;
	VehicleData[vehicleid][vFrakcjiCar] = 0;
	VehicleData[vehicleid][vUID] = 0;
	VehicleData[vehicleid][vKanalCB] = 19;
	VehicleData[vehicleid][vEngine] = 0;
	VehicleData[vehicleid][vLocked] = 0;
	VehicleData[vehicleid][vSwiatla] = 0;
	VehicleData[vehicleid][vLastDriver] = -1;
	VehicleData[vehicleid][vModel] = GetVehicleModel(vehicleid);
	VehicleData[vehicleid][vHP] = 1000;
	VehicleData[vehicleid][vWheelsBlock] = 0;
	VehicleData[vehicleid][vPaliwoTyp] = 0;
	VehicleData[vehicleid][vPaliwo] = VehicleData[vehicleid][vPaliwoMax];

	VehicleData[vehicleid][vOponaLT_DMG] = 10.0;
	VehicleData[vehicleid][vOponaLP_DMG] = 10.0;
	VehicleData[vehicleid][vOponaPP_DMG] = 10.0;
	VehicleData[vehicleid][vOponaPT_DMG] = 10.0;
	
	RepairVehicleEx(vehicleid);
	SetVehiclePaliwo(vehicleid);

					
	SetVehicleParamsEx(vehicleid,false,false,false,false,false,false,false);
	
	if(GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 510)  //Odpalamy silniki dla rowerow
	{
		SetVehicleParamsEx(vehicleid, 1, false,false,false,false,false,false);
	}
	RefreshVehicle3DText(vehicleid);
	return 1;
}
public OnVehicleDeath(vehicleid)
{
	new v_uid = VehicleData[vehicleid][vUID], driver = VehicleData[vehicleid][vLastDriver];
	if(v_uid != 0)
	{
		VehicleData[vehicleid][vPos][0] = -1901.78;
		VehicleData[vehicleid][vPos][1] = -1710.13;
		VehicleData[vehicleid][vPos][2] = 23.41;
		VehicleData[vehicleid][vPos][3] = 0.0;
		VehicleData[vehicleid][vZlom] = 1;
		VehicleData[vehicleid][vHP] = 271;
		

		if(VehicleData[vehicleid][vOwnerUID] == -1)  //Pojazd ogolno dostepny...
		{
			SaveVehicle(vehicleid, 3);
		}
		else //Pojazd firmowy/frakcyjny/prywatny
		{
			if(driver != -1) 
			{
				ClearAnimations(driver);
				SendClientMessage(driver, -1, "{a4a4a4}Pojazd wybuchl lub zostal zwodowany, znajduje sie on teraz na zlomowisku.");
			}
			SaveVehicle(vehicleid);
		}
	}
    if(VehKierunki[vehicleid][2]) DestroyDynamicObject(VehKierunki[vehicleid][2]), DestroyDynamicObject(VehKierunki[vehicleid][3]),DestroyDynamicObject(VehKierunki[vehicleid][5]),VehKierunki[vehicleid][2]=0;
    if(VehKierunki[vehicleid][0]) DestroyDynamicObject(VehKierunki[vehicleid][0]), DestroyDynamicObject(VehKierunki[vehicleid][1]),DestroyDynamicObject(VehKierunki[vehicleid][4]),VehKierunki[vehicleid][0]=0;
    return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(killerid != INVALID_PLAYER_ID && PlayerData[killerid][pLogged] == false) return KickTimer(playerid, -1, "Cheater - killer");
	if(PlayerData[playerid][pDeath] == true) return 1;
        
	
	
	PlayerData[playerid][pDeath] = true;
	PlayerData[playerid][pDeathTime] = 0;
		
	GetPlayerCameraPos(playerid, PlayerData[playerid][pDeathCamera][0], PlayerData[playerid][pDeathCamera][1], PlayerData[playerid][pDeathCamera][2]);
	GetPlayerPos(playerid, PlayerData[playerid][pDeathPos][0], PlayerData[playerid][pDeathPos][1], PlayerData[playerid][pDeathPos][2]);
	GetPlayerFacingAngle(playerid, PlayerData[playerid][pDeathPos][3]);

	PlayerData[playerid][pDeathSkin] = GetPlayerSkin(playerid);
	PlayerData[playerid][pDeathInt] = GetPlayerInterior(playerid);
	PlayerData[playerid][pDeathVW] = GetPlayerVirtualWorld(playerid);
	ApplyAnimation(playerid, "PED", "KO_shot_stom", 4.1, 0, 1, 1, 1, 1, 1);
	ApplyAnimation(playerid, "PED", "KO_shot_stom", 4.1, 0, 1, 1, 1, 1, 1);
		
	TogglePlayerControllable(playerid, false);
	SetPlayerHealth(playerid, 999);
	ResetPlayerWeaponsEx(playerid);
	//SpawnPlayer(playerid);
	SetTimerEx("timerbw", 100, false, "d", playerid);
	return 1;
}

public OnPlayerSpawn(playerid)
{
	AntiDeAMX();
	if(IsPlayerNPC(playerid)) return 1;
	TogglePlayerControllable(playerid, false);
	//InterpolateCameraPos(playerid, 1532.311645, 842.877197, 43.490371, 1832.044921, 839.722167, 18.615722, 20000);
	//InterpolateCameraLookAt(playerid, 1537.118164, 843.131225, 42.136398, 1832.147949, 834.874877, 17.393850, 20000);
	SetPVarInt(playerid, "edit_gym", -1);
	SetPlayerColor(playerid, 0x00C3FFAA);
	
	if(PlayerData[playerid][pLogged] == false)
	{
		PlayerData[playerid][CheckNowSobeit] = 1;
		return 1;
	}
	
	if(PlayerData[playerid][pPierwszySpawn] == 0)
	{
		PlayerData[playerid][pPierwszySpawn] = 999999;
		SetPlayerPos(playerid, START_PLAYER_POS_X,START_PLAYER_POS_Y,START_PLAYER_POS_Z);
		SetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
		SetPlayerVirtualWorldEx(playerid, PlayerData[playerid][pVW]);
		SetPlayerInteriorEx(playerid, PlayerData[playerid][pInt]);
		SetPlayerHealth(playerid, PlayerData[playerid][pHP]);
		TogglePlayerControllable(playerid, false);
		SetTimerEx("UnFreeze", 2000, false, "d", playerid);
		return 1;
	}

	if(PlayerData[playerid][pDeath] == true)
	{
		SetPlayerSkin(playerid, PlayerData[playerid][pDeathSkin]);
		SetPlayerVirtualWorldEx(playerid, PlayerData[playerid][pDeathVW]);
		SetPlayerInteriorEx(playerid, PlayerData[playerid][pDeathInt]);
		ClearAnimations(playerid);
		SetPlayerPos(playerid, PlayerData[playerid][pDeathPos][0], PlayerData[playerid][pDeathPos][1], PlayerData[playerid][pDeathPos][2]);
		SetPlayerDrunkLevel(playerid, 0);
		return 1;
	}
	
	KickTimer(playerid, -1, "Desync: force spawned");
	return 1;
}
	


public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(!ispassenger)
	{
		if(VehicleData[vehicleid][vPrivateCar] == 1)
		{
			if(VehicleData[vehicleid][vOwnerUID] != PlayerData[playerid][pUID] && VehicleData[vehicleid][vUID] != PlayerData[playerid][pKluczeCar])
			{
				if(PlayerData[playerid][pRanga] >= RANGA_WSPOLWLASCICIEL)
				{
					SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz uprawnien do prowadzenia tego pojazdu, jednakze jestes wspol/wlascicielem.");
				}
				else
				{
					PlayerData[playerid][pCanBeInThisVehicle] = -1;
					new Float: x, Float: y, Float: z;
					GetPlayerPos(playerid, x,y,z);
					SetPlayerPos(playerid, x,y,z);
					ClearAnimations(playerid);
					SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz prowadzic tego pojazdu gdyz nie jestes jego wlascicielem.");
					return 1;
				}
			}
		}
		if(VehicleData[vehicleid][vFrakcjiCar] != 0 && PlayerData[playerid][pFrakcja] != VehicleData[vehicleid][vFrakcjiCar])
		{
			if(PlayerData[playerid][pRanga] >= RANGA_WSPOLWLASCICIEL)
			{
				SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz uprawnien do prowadzenia tego pojazdu, jednakze jestes wspol/wlascicielem.");
			}
			else
			{
				PlayerData[playerid][pCanBeInThisVehicle] = -1;
				new Float: x, Float: y, Float: z;
				GetPlayerPos(playerid, x,y,z);
				SetPlayerPos(playerid, x,y,z);
				ClearAnimations(playerid);
				SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz prowadzic tego pojazdu gdyz nie jestes w frakcji gdzie jest on podpisany.");
				return 1;
			}
		}
		if(VehicleData[vehicleid][vFirmyCar] != 0 && PlayerData[playerid][pFirma] != VehicleData[vehicleid][vFirmyCar])
		{
			if(PlayerData[playerid][pRanga] >= RANGA_WSPOLWLASCICIEL)
			{
				SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz uprawnien do prowadzenia tego pojazdu, jednakze jestes wspol/wlascicielem.");
			}
			else
			{
				PlayerData[playerid][pCanBeInThisVehicle] = -1;
				new Float: x, Float: y, Float: z;
				GetPlayerPos(playerid, x,y,z);
				SetPlayerPos(playerid, x,y,z);
				ClearAnimations(playerid);
				SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz prowadzic tego pojazdu gdyz nie jestes w firmie gdzie jest on podpisany.");
				return 1;
			}
		}
		if(VehicleData[vehicleid][vAdminCar] == true && PlayerData[playerid][pRanga] <= RANGA_POMOCNIK)
		{
			PlayerData[playerid][pCanBeInThisVehicle] = -1;
			new Float: x, Float: y, Float: z;
			GetPlayerPos(playerid, x,y,z);
			SetPlayerPos(playerid, x,y,z);
			ClearAnimations(playerid);
			SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz prowadzic tego pojazdu gdyz nie jestes w administracji.");
			return 1;
		}
		if(VehicleData[vehicleid][vMapperCar] == true && PlayerData[playerid][pRanga] <= RANGA_POMOCNIK)
		{
			PlayerData[playerid][pCanBeInThisVehicle] = -1;
			new Float: x, Float: y, Float: z;
			GetPlayerPos(playerid, x,y,z);
			SetPlayerPos(playerid, x,y,z);
			ClearAnimations(playerid);
			SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz prowadzic tego pojazdu gdyz nie jestes Mapperem.");
			return 1;
		}
	}
	VehicleData[vehicleid][vLastDriver] = playerid;
	PlayerData[playerid][pCanBeInThisVehicle] = vehicleid;
	PlayerData[playerid][pPasy] = false;
	GetVehicleHealth(vehicleid, VehicleData[vehicleid][vHP]);
	RefreshVehicle3DText(vehicleid);
	return 1;
}






public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	if (gettime() - GetPVarInt(playerid, "stop_spam_pickupid") < 5) return 1;
	SetPVarInt(playerid, "stop_spam_pickupid", gettime()); 
	

	for(new buid = 0; buid < build_value; buid++)
	{
		if(BudynekData[buid][bAktywny] == 1 && pickupid == BudynekData[buid][bPickup] || BudynekData[buid][bAktywny] == 1 && pickupid == BudynekData[buid][bPickup2])
		{
			PlayerBuildInfo(playerid, 1, buid);
			PlayerBuildInfo(playerid, 2, buid);
			KillTimer(PlayerData[playerid][pTimerBuildInfo]);
			PlayerData[playerid][pTimerBuildInfo] = SetTimerEx("HideBuildInfo", 4800, false, "d", playerid);
			return 1;
		}
	}
	return 1;
}


public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(newkeys == KEY_ANALOG_UP) // num 8
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz uzyc teraz ten funkcji.");
		if(VehicleData[vehicleid][vPrivateCar] == 0 && VehicleData[vehicleid][vFirmyCar] == 0 && VehicleData[vehicleid][vFrakcjiCar] == 0 && PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{a4a4a4}To auto nie moze byc zaparkowane przez ciebie.");
		if(VehicleData[vehicleid][vOwnerUID] != -1 && VehicleData[vehicleid][vOwnerUID] != PlayerData[playerid][pUID]) return SendClientMessage(playerid, -1, "{a4a4a4}To auto nie nalezy do ciebie.");			
		GetVehiclePos(vehicleid, VehicleData[vehicleid][vPos][0], VehicleData[vehicleid][vPos][1], VehicleData[vehicleid][vPos][2]);
		GetVehicleZAngle(vehicleid, VehicleData[vehicleid][vPos][3]);

		new data[128];
		format(data,sizeof(data), "{a4a4a4}Pojazd: %s (V: %d, UID: %d) zostal zaparkowany ( %f %f %f )", CarList[GetVehicleModel(vehicleid)-400], vehicleid, VehicleData[vehicleid][vUID], VehicleData[vehicleid][vPos][0], VehicleData[vehicleid][vPos][1], VehicleData[vehicleid][vPos][2]);
		SendClientMessage(playerid, -1, data);
		SaveVehicle(vehicleid, 0);

		if(GetVehicleTrailer(vehicleid))
		{
			SaveVehicle(GetVehicleTrailer(vehicleid), 0);
		}
					
		if(VehicleData[vehicleid][vOwnerUID] != PlayerData[playerid][pUID])
		{
			SendClientMessage(playerid, -1, "{a4a4a4}Zapakowales ten pojazd jedynie dlatego, ze jestes Head Adminem.");
		}
		return 1;
	}
	if(newkeys == KEY_WALK) // LEFT ALT
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			new uid = GetPlayerGym(playerid, 2.0);
			if(GymData[uid][gType] == 1) // laweczka
			{
				if(BENCH_IN_USE[uid] == false && PLAYER_INBENCH[playerid] == false)
				{
					PlayerData[playerid][pSilowniaBar] = CreateProgressBar(171.00, 184.00, 293.50, 5.19, 0x00F900FF, 100.0);
					BENCH_IN_USE[uid]=true;
					PLAYER_INBENCH[playerid]=true;
					PLAYER_CURRECT_BENCH[playerid]=uid;
					PLAYER_BENCH_COUNT[playerid]=0;
					SetProgressBarValue(PlayerData[playerid][pSilowniaBar],0);
					TogglePlayerControllable( playerid, 0 );
					SetPlayerPos( playerid, GymData[uid][gPos][6],  GymData[uid][gPos][7], GymData[uid][gPos][8]+0.1);
					SetPlayerFacingAngle( playerid, GymData[uid][gPos][9] );
					ApplyAnimation( playerid, "benchpress", "gym_bp_geton", 1, 0, 0, 0, 1, 0, 1 );
					ApplyAnimation( playerid, "benchpress", "gym_bp_geton", 1, 0, 0, 0, 1, 0, 1 );
					SetTimerEx( "BENCH_START", 3800, 0, "i", playerid);
					ShowProgressBarForPlayer(playerid,PlayerData[playerid][pSilowniaBar]);
					PlayerTextDrawGym(playerid, 0);
					PlayerTextDrawSetString(playerid, Txdraw_Gym[playerid][3], "Powtorzenia");
					PlayerTextDrawSetPreviewModel(playerid, Txdraw_Gym[playerid][6], 2629);
					PlayerTextDrawSetPreviewRot(playerid, Txdraw_Gym[playerid][6], -10.000000, -3.000000, -225.000000, 1.049998);
					PlayerTextDrawSetPreviewVehCol(playerid, Txdraw_Gym[playerid][6], 17, 253);
					return 1;
				}
				else
				{
					GameTextForPlayer(playerid,"Ta maszyna jest wlasnie uzywana!", 5000, 4);
				}
			}	
			else if(GymData[uid][gType] == 2) // Bierznia
			{
				if(TREAM_IN_USE[uid] == false && PLAYER_INTREAM[playerid] == false)
				{
					PlayerData[playerid][pSilowniaBar] = CreateProgressBar(171.00, 184.00, 293.50, 5.19, 0x00F900FF, 100.0);
					TREAM_IN_USE[uid]=true;
					PLAYER_INTREAM[playerid]=true;
					PLAYER_CURRECT_TREAD[playerid]=uid;
					PLAYER_TREAM_DIS_COUNT[playerid]=0;
					SetProgressBarValue(PlayerData[playerid][pSilowniaBar],0);
					TogglePlayerControllable( playerid, 0 );
					SetPlayerPos( playerid, GymData[uid][gPos][6],  GymData[uid][gPos][7], GymData[uid][gPos][8]+0.1);
					SetPlayerFacingAngle( playerid, GymData[uid][gPos][9]);
					ApplyAnimation( playerid, "GYMNASIUM", "gym_tread_geton", 1, 0, 0, 0, 1, 0, 1 );
					SetTimerEx( "TREAM_START", 2000, 0, "i", playerid);
					ShowProgressBarForPlayer(playerid,PlayerData[playerid][pSilowniaBar]);
					SetProgressBarValue(PlayerData[playerid][pSilowniaBar],50);
					PlayerTextDrawGym(playerid, 0);
					PlayerTextDrawSetString(playerid, Txdraw_Gym[playerid][3], "Dystans");
					PlayerTextDrawSetPreviewModel(playerid, Txdraw_Gym[playerid][6], 2627);
					PlayerTextDrawSetPreviewRot(playerid, Txdraw_Gym[playerid][6], -10.000000, -3.000000, -225.000000, 1.049998);
					PlayerTextDrawSetPreviewVehCol(playerid, Txdraw_Gym[playerid][6], 17, 253);
					return 1;
				}
				else
				{
					GameTextForPlayer(playerid,"Ta maszyna jest wlasnie uzywana!", 5000, 4);
				}	
			}
		}			
	}

	if(newkeys == KEY_HANDBRAKE)  //Prawy przycisk myszy
	{
		new b_u_enter = GetBuildUID(playerid), b_u_exit = GetBuildUID2(playerid), uid = -1;
		if(b_u_enter != 0 && b_u_exit != 0) return 1;
		
		if(b_u_enter != 0)
		{
			uid = b_u_enter;
			if(BudynekData[uid][bLocked] == 1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz wejsc do tego budynku gdyz jest zamkniety.");
			if(BudynekData[uid][bInt_IN] == 0 && BudynekData[uid][bPos_IN][0] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Budynek nie ma ustalonych pozycji wyjscia, skorzystaj z funkcji administracji (/editbudynek [type]).");
			SetPlayerPos(playerid, BudynekData[uid][bPos_IN][0], BudynekData[uid][bPos_IN][1], BudynekData[uid][bPos_IN][2]);

			SetPlayerInteriorEx(playerid, BudynekData[uid][bInt_IN]);
			SetPlayerVirtualWorldEx(playerid, uid);

			if(PlayerData[playerid][pBuildEnterUID] == 0)
			{
				PlayerData[playerid][pBuildEnterUID] = uid;
				BudynekData[uid][bEnterPeople]++;
			}
		}
		else if(b_u_exit != 0)
		{
			uid = b_u_exit;
			if(BudynekData[uid][bLocked] == 1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz wyjsc z tego budynku gdyz jest zamkniety.");
			SetPlayerPos(playerid, BudynekData[uid][bPos_OUT][0], BudynekData[uid][bPos_OUT][1], BudynekData[uid][bPos_OUT][2]);
			SetPlayerInteriorEx(playerid, 0);
			SetPlayerVirtualWorldEx(playerid, 0);
			
			if(PlayerData[playerid][pBuildEnterUID] != 0)
			{
				BudynekData[uid][bEnterPeople]--;
				PlayerData[playerid][pBuildEnterUID] = 0;
			}
		}
		
		CheckActionWithPickup(playerid);
		CheckDynamicObjectScript(playerid);
		return 1;
	}
	
	
	if(PRESSED(KEY_FIRE) && PRESSED(KEY_FIRE) || PRESSED(KEY_SECONDARY_ATTACK) || PRESSED(128))
 	{
 		if(GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_POZARNA)&& GetPlayerWeapon(playerid) == 9 && kloda_activity != -1)
 		{
 			KillTimer(PlayerData[playerid][pTimerKloda]);
			PlayerData[playerid][pTimerKloda] = SetTimerEx("TimerPlayerKloda", 100, true, "d", playerid);
		}
		if(GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_POZARNA) && GetPlayerWeapon(playerid) == 42 && pozar_activity != -1)
 		{
 			KillTimer(PlayerData[playerid][pTimerPozar]);
			PlayerData[playerid][pTimerPozar] = SetTimerEx("TimerPlayerPozar", 100, true, "d", playerid);
		}
		if(GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_POZARNA) && GetPVarInt(playerid, "ma_sorbent") == 1 && plama_activity != -1)
 		{
 			KillTimer(PlayerData[playerid][pTimerPlama]);
			PlayerData[playerid][pTimerPlama] = SetTimerEx("TimerPlayerPlama", 100, true, "d", playerid);
		}
	}
	if(RELEASED(KEY_FIRE))
 	{
 		if(GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_POZARNA) && GetPlayerWeapon(playerid) == 9 && kloda_activity != -1)
 		{
 			KillTimer(PlayerData[playerid][pTimerKloda]);
		}
		if(GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_POZARNA) && GetPlayerWeapon(playerid) == 42 && pozar_activity != -1)
 		{
 			KillTimer(PlayerData[playerid][pTimerPozar]);
		}
		if(GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_POZARNA) && GetPVarInt(playerid, "ma_sorbent") == 1 && plama_activity != -1)
 		{
 			KillTimer(PlayerData[playerid][pTimerPlama]);
		}
	}
	
	
	if(newkeys == KEY_NO) //Klawisz N
	{
		if(GetPlayerState(playerid)==PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid), engine = 0, lights = 0, alarm = 0, doors = 0, bonnet = 0, boot = 0, objective = 0;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			if(VehicleData[vehicleid][vSwiatla] == 1)
			{
					SetVehicleParamsEx(vehicleid, engine, 0, alarm, doors, bonnet, boot, objective);
					VehicleData[vehicleid][vSwiatla] = 0;
			}
			else if(VehicleData[vehicleid][vSwiatla] == 0)
			{
				SetVehicleParamsEx(vehicleid, engine, 1, alarm, doors, bonnet, boot, objective);
				VehicleData[vehicleid][vSwiatla] = 1;
			}
		}
		return 1;
	}
	if(newkeys == KEY_YES) //Klawisz Y
	{
		
	
		if(GetPlayerState(playerid)==PLAYER_STATE_DRIVER)
		{	
			new vehicleid = GetPlayerVehicleID(playerid);
		
			new Float:vehiclehp;
			GetVehicleHealth(vehicleid, vehiclehp);
			new engine = 0, lights = 0, alarm = 0, doors = 0, bonnet = 0, boot = 0, objective = 0;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1)
			{
				GameTextForPlayer(playerid, "~b~~h~Gaszenie silnika..", 999, 3);
				
				SetTimerEx("ZgasSilnik", 1000, false, "d", playerid);
				return 1;
			}
			else
			{
				if(VehicleData[vehicleid][vWheelsBlock] != 0)
				{
					new data[250];
					format(data,sizeof(data), "Nie mozesz odpalic tego pojazdu gdyz jest nalozona blokada na kolo, pokrycie kosztu zdjecia jej to $%d\nPolicja jest w stanie zdejmowac i nakladac blokady na kolo - warto wiec do nich zagadac.", VehicleData[vehicleid][vWheelsBlock]);
					ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Wystapil problem (blokada):", data, "Zamknij", "");
					return 1;
				}
				if(vehiclehp > 900)
				{
					SetTimerEx("OdpalSilnik", 2500, false, "d", playerid);
					GameTextForPlayer(playerid, "~b~~h~Odpalanie silnika..", 2500, 3);
				}
				else if(vehiclehp > 800)
				{
					SetTimerEx("OdpalSilnik", 2600, false, "d", playerid);
					GameTextForPlayer(playerid, "~b~~h~Odpalanie silnika..", 2600, 3);
				}
				else if(vehiclehp > 700)
				{
					SetTimerEx("OdpalSilnik", 2700, false, "d", playerid);
					GameTextForPlayer(playerid, "~b~~h~Odpalanie silnika..", 2700, 3);
				}
				else if(vehiclehp > 600)
				{
					SetTimerEx("OdpalSilnik", 2800, false, "d", playerid);
					GameTextForPlayer(playerid, "~b~~h~Odpalanie silnika..", 2800, 3);
				}
				else if(vehiclehp > 500)
				{
					SetTimerEx("OdpalSilnik", 2900, false, "d", playerid);
					GameTextForPlayer(playerid, "~g~~Trwa odpalanie silnika...", 2900, 3);
				}
				else if(vehiclehp > 400)
				{
					SetTimerEx("OdpalSilnik", 3000, false, "d", playerid);
					GameTextForPlayer(playerid, "~b~~h~Odpalanie silnika..", 3000, 3);
				}
				else if(vehiclehp > 300)
				{
					SetTimerEx("OdpalSilnik", 3200, false, "d", playerid);
					GameTextForPlayer(playerid, "~b~~h~Odpalanie silnika..", 3200, 3);
				}
				else
				{
					SetTimerEx("OdpalSilnik", 5200, false, "d", playerid);
					GameTextForPlayer(playerid, "~b~~h~Odpalanie silnika..", 5200, 3);
				}
			}
			return 1;
		}
	}
	
	if(!IsPlayerInAnyVehicle(playerid))
	{
		if ( ( newkeys & KEY_SECONDARY_ATTACK ) && !( oldkeys & KEY_SECONDARY_ATTACK ) )
		{
			
			if(PLAYER_INTREAM[playerid]==true && BAR_CAN_BE_USED[playerid]==true)
			{
				KillTimer(PLAYER_TREAD_TIMER[playerid]);
				GetOffTread(playerid);
				PlayerTextDrawGym(playerid, 1);
				return 1;
			}
			if(PLAYER_INBENCH[playerid]==true && BAR_CAN_BE_USED[playerid]==true)
			{
				KillTimer(PLAYER_BENCH_TIMER[playerid]);
				GetOffBENCH(playerid);
			PlayerTextDrawGym(playerid, 1);
				return 1;
			} 
		}	
	}

	if ( ( newkeys & KEY_SPRINT ) && !( oldkeys & KEY_SPRINT ) )
 	{
        if(PLAYER_INBENCH[playerid]==true && BAR_CAN_BE_USED[playerid]==true)
        {
            SetProgressBarValue(PlayerData[playerid][pSilowniaBar], GetProgressBarValue(PlayerData[playerid][pSilowniaBar] ) + 5 );
            UpdateProgressBar( PlayerData[playerid][pSilowniaBar], playerid );
        }
        if(PLAYER_INTREAM[playerid]==true && BAR_CAN_BE_USED[playerid]==true)
 	    {
            SetProgressBarValue( PlayerData[playerid][pSilowniaBar], GetProgressBarValue( PlayerData[playerid][pSilowniaBar] ) + 5 );
            UpdateProgressBar( PlayerData[playerid][pSilowniaBar], playerid );
            new LocalLabel[10];
            PLAYER_TREAM_DIS_COUNT[playerid]++;
            format(LocalLabel,sizeof(LocalLabel),"%d",PLAYER_TREAM_DIS_COUNT[playerid]);
            PlayerTextDrawSetString(playerid, Txdraw_Gym[playerid][4], LocalLabel);
	    }
    }
    
    if ( ( newkeys & KEY_CTRL_BACK ))
    {
		if(!IsPlayerInAnyVehicle(playerid))
		{
			if(PlayerData[playerid][pAddGateTerminal] != 0)
			{
				new uid = PlayerData[playerid][pAddGateTerminal];            
				new Float: x, Float: y, Float: z;
				GetPlayerPos(playerid, x, y, z);
				GateData[uid][gPos][12] = x;
				GateData[uid][gPos][13] = y;
				GateData[uid][gPos][14] = z;
				PlayerData[playerid][pAddGateTerminal] = 0;
				SCM(playerid, -1, "{a4a4a4}Pozycje terminalu zostaly poprawnie zapisane.");
				PlayerData[playerid][pAddGateTerminal] = 0;
				SaveGates(uid);
			}
			else
			{
				new i = GetPlayerGateTerminal(playerid, 2.0);
				if(PlayerData[playerid][pFrakcja] == GateData[i][gFrakcja])
				{
						
					if(GateData[i][gGateState] == GATE_STATE_OPEN)
					{
						MoveDynamicObject(GateData[i][gObject], GateData[i][gPos][6], GateData[i][gPos][7], GateData[i][gPos][8], 1.0, GateData[i][gPos][9], GateData[i][gPos][10], GateData[i][gPos][11]);
						GateData[i][gGateState] = GATE_STATE_CLOSE;
						return 1;
					}
					if(GateData[i][gGateState] == GATE_STATE_CLOSE)
					{
						MoveDynamicObject(GateData[i][gObject], GateData[i][gPos][0], GateData[i][gPos][1], GateData[i][gPos][2], 1.0, GateData[i][gPos][3], GateData[i][gPos][4], GateData[i][gPos][5]);
						GateData[i][gGateState] = GATE_STATE_OPEN;
						return 1;
					}
				}
				else
				{
					SCM(playerid, -1, "{a4a4a4}Nie masz uprawnien do poruszania ta brama.");
					return 1;
				}
			}
		}
    }
	if ( ( newkeys & KEY_CROUCH ) && !( oldkeys & KEY_CROUCH ) )
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
		{
			new i = GetPlayerGateTerminalVehicle(playerid, 10.0);
			if(PlayerData[playerid][pFrakcja] == GateData[i][gFrakcja])
			{	
				if(GateData[i][gGateState] == GATE_STATE_OPEN)
				{
					MoveDynamicObject(GateData[i][gObject], GateData[i][gPos][6], GateData[i][gPos][7], GateData[i][gPos][8], 1.0, GateData[i][gPos][9], GateData[i][gPos][10], GateData[i][gPos][11]);
					GateData[i][gGateState] = GATE_STATE_CLOSE;
					return 1;
				}
				if(GateData[i][gGateState] == GATE_STATE_CLOSE)
				{
					MoveDynamicObject(GateData[i][gObject], GateData[i][gPos][0], GateData[i][gPos][1], GateData[i][gPos][2], 1.0, GateData[i][gPos][3], GateData[i][gPos][4], GateData[i][gPos][5]);
					GateData[i][gGateState] = GATE_STATE_OPEN;
					return 1;
				}
			}
			else
			{
				SCM(playerid, -1, "{a4a4a4}Nie masz uprawnien do poruszania ta brama.");
				return 1;
			}
		}	
	}		
	
	//System kierunkowskazow
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2)
	{
		if(!IsAPlane(GetPlayerVehicleID(playerid)) && !IsABoat(GetPlayerVehicleID(playerid)))
		{
			new vid = GetPlayerVehicleID(playerid);
			if(newkeys & ( KEY_LOOK_LEFT ) && newkeys & ( KEY_LOOK_RIGHT ))
			{
				if(VehKierunki[vid][2] ) DestroyDynamicObject(VehKierunki[vid][5]),DestroyDynamicObject(VehKierunki[vid][2]), DestroyDynamicObject(VehKierunki[vid][3]),VehKierunki[vid][2]=0;
				else if(VehKierunki[vid][0]) DestroyDynamicObject(VehKierunki[vid][4]),DestroyDynamicObject(VehKierunki[vid][0]), DestroyDynamicObject(VehKierunki[vid][1]),VehKierunki[vid][0]=0;
				else
				SetVehicleKierunek(vid,1,1);
				return 1;
			}
			if(newkeys & KEY_LOOK_RIGHT)
			{
				if(VehKierunki[vid][0]) DestroyDynamicObject(VehKierunki[vid][4]), DestroyDynamicObject(VehKierunki[vid][0]), DestroyDynamicObject(VehKierunki[vid][1]),VehKierunki[vid][0]=0;
				else if(VehKierunki[vid][2]) DestroyDynamicObject(VehKierunki[vid][5]), DestroyDynamicObject(VehKierunki[vid][2]), DestroyDynamicObject(VehKierunki[vid][3]),VehKierunki[vid][2]=0;
				else
				SetVehicleKierunek(vid,0,1);
			}
			if(newkeys & KEY_LOOK_LEFT)
			{
				if(VehKierunki[vid][2]) DestroyDynamicObject(VehKierunki[vid][5]),DestroyDynamicObject(VehKierunki[vid][2]), DestroyDynamicObject(VehKierunki[vid][3]),VehKierunki[vid][2]=0;
				else if(VehKierunki[vid][0]) DestroyDynamicObject(VehKierunki[vid][4]),DestroyDynamicObject(VehKierunki[vid][0]), DestroyDynamicObject(VehKierunki[vid][1]),VehKierunki[vid][0]=0;
				else
				SetVehicleKierunek(vid,1,0);
			}
		}
	}
	return 1;
}
public OnPlayerModelSelection(playerid, response, listid, modelid)
{
    if(listid == bramyid && response)
    {
        new Float: x, Float: y, Float: z;
        new uid = PlayerData[playerid][pGateAdd];
        GetPlayerPos(playerid, x, y, z);
        GateData[uid][gObject] = CreateDynamicObject(modelid, x+2, y, z, 0.0, 0.0, 0.0);
        EditDynamicObject(playerid, GateData[uid][gObject]);
        SCM(playerid, -1, "Ustaw brame w pozycje zamknieta.");
        PlayerData[playerid][pAddCloseGate] = uid;
        GateData[uid][gBramaID] = modelid;
        return 1;
    }
    return 1;
}

CMD:clabels(playerid,params[])
{
 	if(IsPlayerAdmin(playerid))
	{
			new Float:x,Float:y,Float:z,string[64],file[128],lebel[999];
		    GetPlayerPos(playerid,x,y,z);
		    for(new i; i < MAX_LABELS; i++)
		    {
		    format(file,sizeof(file),Label_Save,i);
		    if(!fexist(file))
		    {
		    LabelID = i;
		    break;
		    }
		    }
			if(unformat(params, "s[128]",params)) return SendClientMessage(playerid, 0xFF0000FF, "{FF0000}USAGE:/clabels [Text]");
		    format(lebel, sizeof(lebel), ""lred"%s\n"lgreen"ID:%d", params, LabelID);
		    LabelsInfo[LabelID][Label] = CreateDynamic3DTextLabel(lebel, -1, x, y, z, 15.0);
            LabelsInfo[LabelID][POSX] = x;
			LabelsInfo[LabelID][POSY] = y;
        	LabelsInfo[LabelID][POSZ] = z;
   		    format(file,sizeof(file),Label_Save,LabelID);
		    dini_Create(file);
            dini_Set(file, "Text", params);
			dini_FloatSet(file, "X", LabelsInfo[LabelID][POSX]);
            dini_FloatSet(file, "Y", LabelsInfo[LabelID][POSY]);
            dini_FloatSet(file, "Z", LabelsInfo[LabelID][POSZ]);
            format(string,sizeof(string),"Label "lyellow2"%i "lgreen"created!", LabelID);
			SendClientMessage(playerid,lightgreen,string);
	}
	else return 0;
	return 1;
}
CMD:rlabels(playerid,params[])
{
	new lId, file[999];
	if(!IsPlayerAdmin(playerid)) return 0;
	if(sscanf(params, "d", lId)) return SendClientMessage(playerid, 0x99FF00AA, "{FF0000}USAGE:/rlabels [ID]");
	format(file,sizeof(file),Label_Save,lId);
	if(!dini_Exists(file))
	{
		SendClientMessage(playerid, 0xFF0000FF, ""lred"Label Id Is Not Exist!");
	}
	else if(dini_Exists(file))
	{
		new string[999];
		format(string,sizeof(string),"Label "lyellow2"%i "lgreen"removed!", lId);
		SendClientMessage(playerid,lightgreen,string);
		DestroyDynamic3DTextLabel(LabelsInfo[lId][Label]);
		dini_Remove(file);
	}
	else return 0;
	return 1;
}
stock LoadLabels()
{
    for(new i = 0; i < MAX_LABELS;i++)
    {
		new fail[999],lebel[999],labels[999];
        format(fail, sizeof(fail), Label_Save, i);
        if(dini_Exists(fail))
        {
        labels = dini_Get(fail, "Text");
        LabelsInfo[i][POSX] = dini_Float(fail, "X");
        LabelsInfo[i][POSY] = dini_Float(fail, "Y");
        LabelsInfo[i][POSZ] = dini_Float(fail, "Z");
        format(lebel, sizeof(lebel), ""lred"%s\n"lgreen"ID:%d", labels, i);
        LabelsInfo[i][Label] = CreateDynamic3DTextLabel(lebel, -1, LabelsInfo[i][POSX], LabelsInfo[i][POSY], LabelsInfo[i][POSZ], 15.0);
        }
    }
    return 1;
}

//USUNĄĆ

CMD:poli(playerid, params[])
{
	new Id;
	if(sscanf(params, "d", Id)) return SendClientMessage(playerid, -1, "/poli ID");
//	pInfo[playerid][pFrakcja] = 1;
	SetPlayerPos(playerid, 2554.2012,2172.8296,10.9710);
	return 1;
}
CMD:sp(playerid, params[])
{
	new Id;
	if(sscanf(params, "d", Id)) return SendClientMessage(playerid, -1, "/sp ID");
//	pInfo[playerid][pFrakcja] = 1;
//	pInfo[playerid][pPoziomSzefa] = 1;
	return 1;
}

CMD:pogo(playerid, params[])
{
	new Id;
	if(sscanf(params, "d", Id)) return SendClientMessage(playerid, -1, "/pogo ID");
//	gTeam[Id] = TEAM_POGO;
	SetPlayerPos(playerid, 1607.4116,1815.2412,10.8203);
	return 1;
}

CMD:pd(playerid, params[])
{
	new Id;
	if(sscanf(params, "d", Id)) return SendClientMessage(playerid, -1, "/pd ID");
//	gTeam[Id] = TEAM_PD;
	return 1;
}

CMD:psp(playerid, params[])
{
	new Id;
	if(sscanf(params, "d", Id)) return SendClientMessage(playerid, -1, "/psp ID");
//	pInfo[Id][pFrakcja] = 2;
    SetPlayerPos(Id, 2599.6790,676.9983,10.8267);
	return 1;
}

CMD:ctruck(playerid, params[])
{
	new Id;
	if(sscanf(params, "d", Id)) return SendClientMessage(playerid, -1, "/truck ID");
//	gTeam[Id] = TEAM_PTRC;
	return 1;
}

CMD:etruck(playerid, params[])
{
	new Id;
	if(sscanf(params, "d", Id)) return SendClientMessage(playerid, -1, "/truck ID");
//	gTeam[Id] = TEAM_PTRT;
	return 1;
}


CMD:naj(playerid, params[])
{
	new string[256];
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid,name, sizeof(name));
	format(string, sizeof(string), "{FF7F50}Gracz {FF0000}%s {FF7F50}mowi ze {FF0000}Polski {FFFFFF}Truck {FF0000}Rozrywki {FF7F50}jest najlepszy!",name);
	SendClientMessageToAll(CZERWONY,string);
    GameTextForAll(string, 3000, 15);
	return 1;
}

CMD:faq(playerid, params[])
{
	new bufffffDialog[3500];
	strcat(bufffffDialog,"{bdbdbd}1.Jak sprawdzić informacje do konta?\n");
	strcat(bufffffDialog,"{dedede}\t-Wpisz /konto.\n");
	strcat(bufffffDialog,"{bdbdbd}2.Jak zmienić nick na serwerze?\n");
	strcat(bufffffDialog,"{dedede}\t-Zgłoś się do Admina lub napisz wniosek o zmiane nicku\n");
	strcat(bufffffDialog,"{bdbdbd}3.Jak mogę znajść pracę?\n");
	strcat(bufffffDialog,"{dedede}\t-Jeśli chcesz należeć do frakcji takich jak policja czy Taxi i inne musisz posiadać odpowiednią ilość\n");
	strcat(bufffffDialog,"{dedede}\tdostarczeń wymaganych przez daną frakcje. Szczegółowe informacje na ten temat znajdziesz na naszym forum: ptr-serw.xaa.pl\n");
	strcat(bufffffDialog,"{bdbdbd}4.Jak zdobyć pieniądze?\n");
	strcat(bufffffDialog,"{dedede}\t-To proste jeśli nie należysz do żadnej frakcji możesz udać się do pracy dorywczej lub po prostu podjąć się zlecenia\n");
	strcat(bufffffDialog,"{dedede}\tudaj się na spawn tirów, weź dobrego tira lub dostawczaka i zrób porządny kurs!\n");
	strcat(bufffffDialog,"{bdbdbd}5.Czy mogę zostać członkiem administracji?\n");
	strcat(bufffffDialog,"{dedede}\t-Oczywiście, że możesz musisz napisać odpowiednie podanie w czasie rekrucji na naszym forum: ptr-serw.xaa.pl\n");
	strcat(bufffffDialog,"{bdbdbd}6.Jak uzyskać kontakt z najwyższą rangą serwera?\n");
	strcat(bufffffDialog,"{dedede}\t-Napisz po prostu na GG: numer gg\n");
	strcat(bufffffDialog,"{bdbdbd}7.Czy można bugować szybkość motoru? (BA)\n");
	strcat(bufffffDialog,"{dedede}\t-Tak. Jedynym wyjątkiem używania tego jest bycie podczas pościgu w tym czasie jest całkowity zakaz używania tego bugu\n");
	ShowPlayerDialog(playerid, 99999, DIALOG_STYLE_MSGBOX, "FAQ - Polski Truck Rozrywki", bufffffDialog, "OK", #);
	return 1;
}

CMD:reg(playerid, params[]) return cmd_regulamin(playerid, params);
CMD:regulamin(playerid,params[])
{
	new bufffffDialog[3500];
	strcat(bufffffDialog,"{dedede}------------{ff0000}Regulamin serwera {bdbdbd}Polski Truck Rozrywki{dedede}------------\n");
	strcat(bufffffDialog,"{ff0000}ban|{bdbdbd}\t\t\t\t\t\t1.  {dedede}Zakaz używania programów ułatwiających grę m.in. sobeit,sonictZ, szkodliwe CLEO\n");
	strcat(bufffffDialog,"{ff0000}ban|{bdbdbd}\t\t\t\t\t\t2.  {dedede}Zakaz reklamowania innych serwerów\n");
	strcat(bufffffDialog,"{ff0000}ban|{bdbdbd}\t\t\t\t\t\t3.  {dedede}Zakaz rozmów na temat innych serwerów\n");
	strcat(bufffffDialog,"{ff0000}kick/warn/mute(15)|{bdbdbd}\t\t\t\t4.  {dedede}Zakaz ubliżania, wyzywania, używania wulgaryzmów na czacie OOC\n");
	strcat(bufffffDialog,"{ff0000}ban|{bdbdbd}\t\t\t\t\t\t5.  {dedede}Zakaz tworzenia multikont  (MK)\n");
	strcat(bufffffDialog,"{ff0000}kick/warn/ban|{bdbdbd}\t\t\t\t6.  {dedede}Zakaz używania programów spamujących\n");
	strcat(bufffffDialog,"{ff0000}ban|{bdbdbd}\t\t\t\t\t\t7.  {dedede}Zakaz podszywania się pod graczy a także administrację serwera!\n");
	strcat(bufffffDialog,"{ff0000}jail(30)/kick/warn|{bdbdbd}\t\t\t\t8.  {dedede}Zakaz nadużywania skina frakcyjnego\n");
	strcat(bufffffDialog,"{ff0000}różnie:)|{bdbdbd}\t\t\t\t\t9.  {dedede}Każdy gracz oraz członek administracji powinien słuchać się Head-Admina.\n");
	strcat(bufffffDialog,"{ff0000}mute(15)/jail(5)/warn|{bdbdbd}\t\t\t\t11. {dedede}Zakaz OOC w IC  oraz IC w OOC\n");
	strcat(bufffffDialog,"{ff0000}jail(50)/kick/warn|{bdbdbd}\t\t\t\t12. {dedede}Zakaz demolotion derby  (DD)\n");
	strcat(bufffffDialog,"\n\n\n\n{a4a4a4}Regulamin serwera Polski Truck Rozrywki RolePlay");
	ShowPlayerDialog(playerid, 99999, DIALOG_STYLE_MSGBOX, "REGULAMIN - Polski Truck Rozrywki", bufffffDialog, "OK", #);
	return 1;
}

CMD:sniegoff(playerid)
{
//RemovePlayerAttachedObject(playerid,1);//Funkcja ktora usuwa snieg
RemovePlayerAttachedObject(playerid,2);//Funkcja ktora usuwa snieg
SendClientMessage(playerid, -1, "{a4a4a4}Wylaczyles snieg. {00FFFF}Milej gry!");//Wiadomosc wysylana na czacie
return 1;
}

CMD:snieg(playerid)
{
SetPlayerAttachedObject(playerid, 2, 18864, 2, 0.09, 0.03, 0, 88, 75, 0);//Funkcja ktora dodaje snieg graczowi po spawnie
SendClientMessage(playerid, -1, "{a4a4a4}Wlaczyles snieg. {00FFFF}Milej gry!");//Wiadomosc wysylana na czacie
return 1;
}

CMD:santa(playerid)
{
    SetPlayerAttachedObject(playerid, 3, 19065, 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
    SendClientMessage(playerid, -1,"{a4a4a4}Zalozyles Czapke Mikolaja");
	return 1;
}

CMD:santaoff(playerid)
{
    if(IsPlayerAttachedObjectSlotUsed(playerid, 3))
    {
        RemovePlayerAttachedObject(playerid, 3);
        SendClientMessage(playerid, -1,"{a4a4a4}Zdjeles Czapke Mikolaja");
    }
    return 1;
}

CMD:radio(playerid)
{
	PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
	new tekstradio[1500];
	strcat(tekstradio, ""C_ZIELONY"R"C_BIALY"adio ZET.\n");
	strcat(tekstradio, ""C_ZIELONY"R"C_BIALY"adio RMF FM.\n");
	strcat(tekstradio, ""C_ZIELONY"R"C_BIALY"adio ESKA.\n");
	strcat(tekstradio, ""C_ZIELONY"R"C_BIALY"adio HOT100.\n");
	strcat(tekstradio, ""C_ZIELONY"R"C_BIALY"adio PARTY.\n");
	strcat(tekstradio, ""C_ZIELONY"R"C_BIALY"adio ELECTRO HOUSE.\n");
	strcat(tekstradio, ""C_ZIELONY"R"C_BIALY"adio HOUSE DANCE.\n");
	strcat(tekstradio, ""C_ZIELONY"R"C_BIALY"adio POLSKI HIP-HOP.\n");
	strcat(tekstradio, ""C_ZIELONY"R"C_BIALY"adio CZARNY HIP-HOP.\n");
	strcat(tekstradio, ""C_ZIELONY"R"C_BIALY"adio DISCO-POLO.\n");
	strcat(tekstradio, ""C_ZIELONY"R"C_BIALY"adio IBIZA-HITS.\n");
	strcat(tekstradio, ""C_ZIELONY"R"C_BIALY"adio POLSKIE PRZEBOJE.\n");
	strcat(tekstradio, ""C_ZIELONY"R"C_BIALY"adio NA TOPIE.\n");
	strcat(tekstradio, ""C_ZIELONY"R"C_BIALY"adio HARD STYLE.\n");
	strcat(tekstradio, ""C_CZERWONY"W"C_BIALY"ylacz stacje radiowa.\n");
	ShowPlayerDialog(playerid, DIALOG_RADIO, DIALOG_STYLE_LIST, "Wybierz radio:", tekstradio, "Graj", "Wroc");
	return 1;
}


CMD:radiooff(playerid)
{
	if(PlayerData[playerid][pRadioOn] == true)
	{
		PlayerData[playerid][pRadioOn] = false;
		StopAudioStreamForPlayer(playerid);
		SendClientMessage(playerid, -1, "{a4a4a4}Wylaczyles Radio PTR.");
		return 1;
	}
	else
	{
		SendClientMessage(playerid, -1, "{a4a4a4}Nie masz wlaczonego Radia PTR !");
	}
return 1;
}
  

CMD:slap(playerid, params[])
{
	new id, Float:x, Float: y, Float: z;
	if(PlayerData[playerid][pRanga] < RANGA_ADMINISTRATOR) return SendClientMessage(playerid, -1, "{a4a4a4}Nie masz uprawnien do tej komendy!");
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, -1, "{a4a4a4}Uzyj /slap [ID]");
	GetPlayerPos(id, x, y, z);
	SetPlayerPos(id, x, y, z+10);
	return 1;
}

//========== [ SYSTEM SĄDOWNICTWA ] ==========

CMD:zeznanie(playerid, params[]){
	new zeznanie[300];
	if(rozprawa_trwa == false) return SCM(playerid, -1, "{a4a4a4}Zadna roprawa nie trwa!");
	if(PlayerData[playerid][pSwiadek] == 0) return SCM(playerid, -1, "{a4a4a4}Nie jestes swiadkiem w zadnej rozprawie!");
	if(PlayerData[playerid][pZeznaje] == 0) return SCM(playerid, -1, "{a4a4a4}Sedzia nie poprosil Cie o zlozenie zeznan! Poczekaj na swoja kolej!");
	//dodac sprawdzenie czy jest w sadzie
	if(sscanf(params, "s[256]", zeznanie)) return SCM(playerid, -1, "{a4a4a4}Wpisz /zeznianie [text]");
	if(!strcmp(zeznanie, "koniec", false)) {
		SCM(playerid, -1, "{a4a4a4}Zakonczyles skladanie zeznan, zostaly one zapisane. Dziekujemy");
		return 1;
	}
	if(strlen(zeznanie) > 256) return 1;
	format(zeznanie, sizeof(zeznanie), " %s", zeznanie);
	if(strlen(zeznanie) >= 100){
		format(zeznanie, sizeof(zeznanie), "%s\n", zeznanie);
	}
	strcat(zeznania[playerid], zeznanie);
	SCM(playerid, -1, "{a4a4a4}Zlozyles zeznanie. Aby zakonczyc skladanie zeznan wpisz /zeznanie koniec");
	return 1;
}

CMD:rozprawa(playerid, params[]){
	if(PlayerData[playerid][pSedzia] != 1 || PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SCM(playerid, -1, "{a4a4a4}Nie jestes sedzia wiec nie mozesz prowadzic rozprawy!");
	if(PlayerData[playerid][pSluzba] == true) SCM(playerid, -1, "{a4a4a4}Nie mozesz byc sedzia bedac na sluzbie!");
	if(rozprawa_trwa == true) {
		ShowPlayerDialog(playerid, DIALOG_ROZPRAWA_MENU_ROZPRAWA, DIALOG_STYLE_LIST, "Rozprawa sadowa - menu", "{ff0000}Dodaj oskarzonego\n{ff0000}Dodaj swiadka\n{ff0000}Wydaj wyrok\n{ff0000}Swiadkowie", "Dalej", "Wroc");
		return 1;
	}
	if(PlayerData[playerid][pSwiadek] == 1) return SCM(playerid, -1, "{a4a4a4}Nie mozesz byc sedzia bedac swiadkiem w tej rozpwie!");
	//sprawdzanie pozycji(ma byc w sadzie)
	ShowPlayerDialog(playerid, DIALOG_ROZPRAWA_MENU, DIALOG_STYLE_LIST, "Rozprawa sadowa", "Rozpocznij rozprawe\nZakoncz rozprawe", "Dalej", "Wyjdz");
	return 1;
}

//========== [ KOMENDY FRAKCYJNE ] ==========

CMD:fcmd(playerid)
{
	new data[1000];
	data = "Komenda\t#\n";
	
	if(PlayerData[playerid][pFrakcja] == FRAKCJA_POLICJI) //Policja
	{
		format(data,sizeof(data),"%s\
		/scigani\totwierasz liste osob poszukiwanych online\n\
		/gw\t[id] [0-6] [powod] ustawiasz stopien poszukiwania\n\
		/zgw\t[id] [0-6] [powod] zmniejszasz stopien poszukiwania\n\
		/mandat\t[id] [kwota] - wystawiasz mandat\n\
		/rachunek\t[id] [kwota] - wystawiasz rachunek\n\
		/skuj\t[id] - skuwasz\n\
		/odkuj\t[id] - odkuwasz\n\
		/s\tsprawdzasz predkosc pojazdu jadacego przy tobie\n\
		/wiezienie\t[id] [czas] - wsadzasz do wiezienia\n\
		/uwolnij\t[id] - uwalniasz z wiezenia\n", data);
		format(data,sizeof(data),"%s\
		/meg\t[tekst] - mowisz przez megafon\n\
		/blokadakola\tzarzadzasz blokada kola na pojazd\n\
		/r\tmowisz na sluchawce frakcyjnej\n\
		/rmf\tmowisz na sluchawce miedzyfrakcyjnej\n\
		/pkt\t[id] - dajesz pkt karne\n\
		/zpkt\t[id] - odejmujesz pkt karne\n\
		/przeszukaj\t[id] - przeszukujesz gracza przedmioty\n\
		/zabierz\t[id] - zabierasz gracza przedmioty\n", data);
		format(data,sizeof(data),"%s\
		/bprzeszukaj\tprzeszukujesz bagaznik pojazdu z jego zawartosci\n\
		/sprawdz\t[id] - sprawdzasz informacje na temat gracza\n\
		/zdejmijworek\t[id] - zdejmujesz worek z glowy gracza\n\
		/kolaczatka\t - wyjmujesz kolczatke\n\
		/ukolczatke\t- usuwasz kolczatke\n\
		/lista\t - lista zawiadomien\n\
		/przyjmij\t- akceptacja zawiadomien\n\
		",data);
	}
	if(PlayerData[playerid][pFrakcja] == FRAKCJA_POGOTOWIA) //Pogotowie
	{
		format(data,sizeof(data),"%s\
		/r\tmowisz na sluchawce frakcyjnej\n\
		/rmf\tmowisz na sluchawce miedzyfrakcyjnej\n\
		/torba\twyjmuje torbe bandarze\n\
		/wypadek\twyciagasz gracza z wypadku\n\
		/nosze\tprzenoszenie innego gracza (do karetki)\n\
		/lek\tpodajesz lek graczu (do uleczenia - HP)\n\
		/ketanol\tmija krecenie ekranu dla gracza\n\
		/reanimuj\twylaczsz bw graczu\n\
		/apap\tpodajesz apap graczu (krecenie kamerka ustaje)\n\
		/lista\t- lista zawiadomien\n\
		/przyjmij\t- akceptacja zawiadomien\n\
		",data);
	}
	if(PlayerData[playerid][pFrakcja] == FRAKCJA_STRAZ_MIEJSKA) //Straz Miejska
	{
		format(data,sizeof(data),"%s\
		/scigani\totwierasz liste osob poszukiwanych online\n\
		/gw\t[id] [0-6] [powod] ustawiasz stopien poszukiwania\n\
		/zgw\t[id] [0-6] [powod] zmniejszasz stopien poszukiwania\n\
		/mandat\t[id] [kwota] - wystawiasz mandat\n\
		/rachunek\t[id] [kwota] - wystawiasz rachunek\n\
		/skuj\t[id] - skuwasz\n\
		/odkuj/t[id] - odkuwasz\n\
		/blokadakola\tzarzadzasz blokada kola na pojazd\n\
		/kolaczatka\t - wyjmujesz kolczatke\n", data);
		format(data,sizeof(data),"%s\
		/ukolczatke\t- usuwasz kolczatke\n\
		/r\tmowisz na sluchawce frakcyjnej\n\
		/rmf\tmowisz na sluchawce miedzyfrakcyjnej\n\
		/sprawdz\t[id] - sprawdzasz informacje na temat gracza\n\
		/lista\t- lista zawiadomien\n\
		/przyjmij\t- akceptacja zawiadomien\n\
		",data);
	}
	if(PlayerData[playerid][pFrakcja] == FRAKCJA_STRAZ_GRANICZNA) //Straz graniczna
	{
		format(data,sizeof(data),"%s\
		/scigani\totwierasz liste osob poszukiwanych online\n\
		/gw\t[id] [0-6] [powod] ustawiasz stopien poszukiwania\n\
		/zgw\t[id] [0-6] [powod] zmniejszasz stopien poszukiwania\n\
		/mandat\t[id] [kwota] - wystawiasz mandat\n\
		/rachunek\t[id] [kwota] - wystawiasz rachunek\n\
		/skuj\t[id] - skuwasz\n\
		/odkuj/t[id] - odkuwasz\n\
		/r\tmowisz na sluchawce frakcyjnej\n",data);
		format(data,sizeof(data),"%s\
		/rmf\tmowisz na sluchawce miedzyfrakcyjnej\n\
		/sprawdz\t[id] - sprawdzasz informacje na temat gracza\n\
		/meg\t[tekst] - mowisz przez megafon\n\
		/pkt\t[id] - dajesz pkt karne\n\
		/zpkt\t[id] - odejmujesz pkt karne\n\
		/przeszukaj\t[id] - przeszukujesz gracza przedmioty\n",data);
		format(data,sizeof(data),"%s\
		/zabierz\t[id] - zabierasz gracza przedmioty\n\
		/zdejmijworek\t[id] - zdejmujesz worek z glowy gracza\n\
		/lista\t- lista zawiadomien\n\
		/przyjmij\t- akceptacja zawiadomien\n\
		",data);
	}
	if(PlayerData[playerid][pFrakcja] == FRAKCJA_STRAZ_POZARNA) //Straz pozarna
	{
		format(data,sizeof(data),"%s\
		/r\tmowisz na sluchawce frakcyjnej\n\
		/rmf\tmowisz na sluchawce miedzyfrakcyjnej\n\
		/lista\t- lista zawiadomien\n\
		/przyjmij\t- akceptacja zawiadomien\n\
		/gasnica\t- dajesz sobie gasnice\n\
		/nozyce\t- dajesz sobie nozyce\n\
		",data);
	}
	if(PlayerData[playerid][pFrakcja] == FRAKCJA_POMOC_DROGOWA) //Pomoc drogowa
	{
		format(data,sizeof(data),"%s\
		/paliwo\t zmieniasz rodzaj paliwa dla danego pojazdu\n\
		/napraw\t Naprawiasz pojazd\n\
		/tankuj\t Tankujesz graczowi pojazd\n\
		/rejestracja\t zmieniasz rejestracje pojazdu\n\
		/lakier\t Malujesz auto\n\
		/tuning [id] \t Tuningujesz graczowi auto\n\
		/rachunek [id]\t Wystawiasz rachunek\n\
        /stan \t Sprawdzasz stan techniczny pojazdu\n",data);
		format(data,sizeof(data),"%s\
        /opona [id]\t Wymieniasz opony\n\
		/r \t Radio frakcyjne\n\
		/nitro \t Dodajesz nitro do pojazdu\n\
		/hydraulika \t Dodajesz Hydraulike do pojazdu\n\
		/pach \t Stawiasz pacholek\n\
		/usunp \t Usuwasz pacholek\n\
		/lista\t lista zawiadomien\n\
		/przyjmij\t Akceptacja wezwania\n\
		", data);
	}
	if(PlayerData[playerid][pFrakcja] == FRAKCJA_SAN_NEWS) //San news
	{
		format(data,sizeof(data),"%s\
		/r\tmowisz na sluchawce frakcyjnej\n\
		/ogloszenie\twysylasz newsa\n\
		/aparat\tdajesz sobie aparat\n\
		/czat\tpiszesz na czacie ooc\n\
		/lista\t- lista zawiadomien\n\
		/przyjmij\t- akceptacja zawiadomien\n\
		",data);
	}
	if(PlayerData[playerid][pFrakcja] == FRAKCJA_TAXI) //Taxi
	{
		format(data,sizeof(data),"%s\
		/r\tmowisz na sluchawce frakcyjnej\n\
		/licznik\turuchamiasz taksometr\n\
		/lista\t- lista zawiadomien\n\
		/przyjmij\t- akceptacja zawiadomien\n\
		/rachunek\t[id] [kwota] - wystawiasz rachunek\n\
		",data);
	}
	if(PlayerData[playerid][pFrakcja] == FRAKCJA_GANG_OLSENA)//Gang Olsena
	{
		format(data,sizeof(data),"%s\
		/r\tmowisz na sluchawce frakcyjnej\n\
		/zasadz\tproces tworzenia narkotyku\n\
		/zbierz\t[uid] zbierasz narkotyk\n\
		/worek\t[id] zakladasz worek na glowe gracza\n\
		/zwiaz\t[id] zwiazujesz gracza\n\
		/odwiaz\t[id] odwiazujesz gracza\n\
		/napad\taktywacja napadu\n\
		",data);
	}
	if(PlayerData[playerid][pFrakcja] == FRAKCJA_MAKAVELI) //makaveli
	{
		format(data,sizeof(data),"%s\
		/r\tmowisz na sluchawce frakcyjnej\n\
		/zasadz\tproces tworzenia narkotyku\n\
		/zbierz\t[uid] zbierasz narkotyk\n\
		/worek\t[id] zakladasz worek na glowe gracza\n\
		/zwiaz\t[id] zwiazujesz gracza\n\
		/odwiaz\t[id] odwiazujesz gracza\n\
		/napad\taktywacja napadu\n\
		",data);
	}
	
	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_TABLIST_HEADERS, "Komendy frakcyjne.", data, "Zamknij", "");
	return 1;
}

//========== [ KOMENDY GANGI ] ==========

CMD:napad(playerid)
{
	if(GetPlayerFrakcja(playerid, FRAKCJA_MAKAVELI) || GetPlayerFrakcja(playerid, FRAKCJA_GANG_OLSENA)) 
	{
		if(PlayerData[playerid][pBuildEnterUID] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Musisz znajdowac sie w budynku ktory chcesz napadac.");
		if(NapadData[nAktywny] == true) return SendClientMessage(playerid, -1, "{a4a4a4}Aktualnie trwa jakis napad.");
		
		new 
			buid =  PlayerData[playerid][pBuildEnterUID],
			str_frakcja[24];
		
		switch(PlayerData[playerid][pFrakcja])
		{	
			case 0: str_frakcja = "Brak";
			case 1: str_frakcja = ""#GRUPA_LEVEL_1"";
			case 2: str_frakcja = ""#GRUPA_LEVEL_2"";
			case 3: str_frakcja = ""#GRUPA_LEVEL_3"";
			case 4: str_frakcja = ""#GRUPA_LEVEL_4"";
			case 5: str_frakcja = ""#GRUPA_LEVEL_5"";
			case 6: str_frakcja = ""#GRUPA_LEVEL_6"";
			case 7: str_frakcja = ""#GRUPA_LEVEL_7"";
			case 8: str_frakcja = ""#GRUPA_LEVEL_8"";
			case 9: str_frakcja = ""#GRUPA_LEVEL_9"";
			case 10: str_frakcja = ""#GRUPA_LEVEL_10"";
		}
		
		PlayerData[playerid][pTimerNapadActive] =  SetTimerEx("ActiveNapadPlayer", 1000*30, false, "d", playerid);
		GameTextForPlayer(playerid, "~r~Masz 30 sekund na zmobilizowanie 3 osob z organizacji", 6500, 3);
		NapadData[nAktywny] = true;
		format(NapadData[nFrakcjaSTR], 24, "%s", str_frakcja);
		format(NapadData[nBudynek], 24, "%s", BudynekData[buid][bName]);
		NapadData[nBudynekUID] = PlayerData[playerid][pBuildEnterUID];
		NapadData[nLudzieOrg] = 1;
		NapadData[nLudzieLSPD] = 0;
		PlayerData[playerid][pNapadCzlonek] = true;
		 
		PlayerNapadPanel(playerid, 5); 
	}
	else return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	return 1;
}


CMD:zwiaz(playerid, params[])
{
	new player = strval(params), data[128];
	if(isnull(params)) return  SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /zwiaz [id]");
	if(GetPlayerFrakcja(playerid, FRAKCJA_MAKAVELI) || GetPlayerFrakcja(playerid, FRAKCJA_GANG_OLSENA)) 
	{
		if(!OdlegloscGracze(3.0,playerid,player)) return SendClientMessage(playerid, -1, "{a4a4a4}Jestes zbyt daleko gracza aby wejsc z nim w interakcje.");
		if(PlayerData[player][pSkuty] == 1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz tego uzyc na tym graczu poniewaz jest on skuty.");
		

		PlayerData[player][pSkuty] = 1;
		SetPlayerSpecialAction(player, SPECIAL_ACTION_CUFFED);
		SetPlayerAttachedObject(player, 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
			
		format(data,sizeof(data),"{C2A2DA}*%s wyciaga linke holownicza poczym obwiazuje rece %s z dosc duza sila", PlayerData[playerid][pName], PlayerData[player][pName]);
		SCMIC(playerid, 10, -1, data);
		PlayerData[player][pTimerSkuty] = SetTimerEx("TimerPlayerSkuty", 1000, true, "dd", playerid, player);
	}
	else return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	return 1;
}

CMD:odwiaz(playerid, params[])
{
	new player = strval(params), data[128];
	if(isnull(params)) return  SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /odwiaz [id]");
	if(GetPlayerFrakcja(playerid, FRAKCJA_MAKAVELI) || GetPlayerFrakcja(playerid, FRAKCJA_GANG_OLSENA)) 
	{
		if(!OdlegloscGracze(3.0,playerid,player)) return SendClientMessage(playerid, -1, "{a4a4a4}Jestes zbyt daleko gracza aby wejsc z nim w interakcje.");
		if(PlayerData[player][pSkuty] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz tego uzyc na tym graczu poniewaz jest on skuty.");
		

		PlayerData[player][pSkuty] = 0;
		SetPlayerSpecialAction(player, SPECIAL_ACTION_NONE);
		RemovePlayerAttachedObject(player, 0);
		ClearAnimations(player);
		format(data,sizeof(data),"{C2A2DA}*%s podchodzi do %s poczym odwiazuje jego rece z linki", PlayerData[playerid][pName], PlayerData[player][pName]);
		SCMIC(playerid, 10, -1, data);
	}
	else return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	return 1;
}


CMD:worek(playerid, params[])
{
	new player = strval(params), data[128];
	if(isnull(params)) return  SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /worek [id]");
	if(!OdlegloscGracze(3.0,playerid,player)) return SendClientMessage(playerid, -1, "{a4a4a4}Jestes zbyt daleko gracza aby wejsc z nim w interakcje.");
	if(GetPlayerFrakcja(playerid, FRAKCJA_MAKAVELI) || GetPlayerFrakcja(playerid, FRAKCJA_GANG_OLSENA)) 
	{
		if(PlayerData[playerid][pGlowaWorek] == 1)
		{
			PlayerData[playerid][pGlowaWorek] = 0;
			format(data,sizeof(data),"{C2A2DA}*%s podchodzi do %s poczym sciaga mu worek z glowy.", PlayerData[playerid][pName], PlayerData[player][pName]);
			SCMIC(playerid, 10, -1, data);
			PlayerTextDrawHide(player, Txd_others_txds[player][0]);
		}
		else
		{
			PlayerData[playerid][pGlowaWorek] = 1;
			format(data,sizeof(data),"{C2A2DA}*%s podchodzi do %s poczym zaklada mu worek na glowe.", PlayerData[playerid][pName], PlayerData[player][pName]);
			SCMIC(playerid, 10, -1, data);
			PlayerTextDrawShow(player, Txd_others_txds[player][0]);
		}
	}
	else return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	return 1;
}

CMD:zasadz(playerid, params[])
{
	new type = strval(params), uid = narko_value, time, data[200];
	if(isnull(params)) return  SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /zasadz [1 - Marihuana / 2 - Haszysz / 3 - Kokaina]");
	if(GetPlayerCash(playerid) < SETTINGS_PRICE_NARKOTYK) return SendClientMessage(playerid, -1, "{a4a4a4}Jezeli pragniesz zasadzic narkotyk musisz wydac na to $"#SETTINGS_PRICE_NARKOTYK", ktorych nie masz.");
	if(GetPlayerFrakcja(playerid, FRAKCJA_MAKAVELI) || GetPlayerFrakcja(playerid, FRAKCJA_GANG_OLSENA)) 
	{
		if(type > 3 || type < 1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie poprawny typ narkotyku. ( 1 - 3 ).");
		
		
		GivePlayerCash(playerid, - SETTINGS_PRICE_NARKOTYK);
		GetPlayerPos(playerid, NarkotykiData[uid][nPos][0], NarkotykiData[uid][nPos][1], NarkotykiData[uid][nPos][2]);
		NarkotykiData[uid][nUID] = uid;
		NarkotykiData[uid][nAktywny] = 1;
		NarkotykiData[uid][nVW]  = GetPlayerVirtualWorld(playerid);
		NarkotykiData[uid][nInt] = GetPlayerInterior(playerid);
		NarkotykiData[uid][nType] = type;
		NarkotykiData[uid][nFrakcja] = PlayerData[playerid][pFrakcja];
		format(NarkotykiData[uid][nTworca], MAX_PLAYER_NAME, "%s", PlayerData[playerid][pName]);
		
		switch(type)
		{
			case 1: time = 3600*3+gettime();
			case 2: time = 3600*7+gettime();
			case 3: time = 3600*4+gettime();
		}
		NarkotykiData[uid][nCzas] = time;
		


		format(data,sizeof(data),"INSERT INTO `data_narkotyki` SET `x`='%f', `y`='%f', `z`='%f', `type` = '%d'", NarkotykiData[uid][nPos][0], NarkotykiData[uid][nPos][1], NarkotykiData[uid][nPos][2], NarkotykiData[uid][nType]);
		mysql_query(data);
		
		SaveNarko(uid);
		narko_value++;
	}
	else return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	return 1;
}

CMD:zbierz(playerid, params[])
{
	new uid = strval(params), str_narko[24];
	if(NarkotykiData[uid][nFrakcja] != PlayerData[playerid][pFrakcja]) return SendClientMessage(playerid, -1, "{a4a4a4}Nie nalezysz do frakcji dla ktorej zostal zasadzony ten narkotyk.");
	if(isnull(params)) return SendClientMessage(playerid, -1, "{A4a4a4}Wpisz: /zbierz [uid]");
	if(uid>MAX_NARKOTYKI || uid < 1) return SendClientMessage(playerid, -1, "{a4a4a4}Uid nie moze byc mniejsze od 1 i wieksze niz "#MAX_NARKOTYKI"");
	if(NarkotykiData[uid][nAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Narkotyk o tym uid nie jest aktywny.");
	if(NarkotykiData[uid][nCzas] > gettime()) return SendClientMessage(playerid, -1, "{a4a4a4}Musisz odczekac pozostaly czas od zasadzenia narkotyku.");
	if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
	switch(NarkotykiData[uid][nType])
	{
		case 1: str_narko = "Marihuana";
		case 2: str_narko = "Haszysz";
		case 3: str_narko = "Kokaina";
	}
	NarkotykiData[uid][nAktywny] = 0;
	SaveNarko(uid);
	CreatePlayerItem(playerid, str_narko, TYPE_ITEM_NARKOTYK, NarkotykiData[uid][nType], 0, 0, 0, 0);
	//CreatePlayerItem(playerid, przedmiot[], var1 = 0, var2 = 0, var3 = 0, var4 = 0, var5 = 0, var6 = 0)
	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Narkotyk:", "\
																			{01DF01}\
																			Narkotyk zostal zebrany, znajduje sie on od teraz w twoim ekwipunku (/p).\n\
																			Mozesz go uzyc dla siebie lub sprzedac go innej osobie.\n\
																			Powodzenia!", "Zamknij", "");
	return 1;
}

//========== [ KOMENDY SAN NEWS ] ==========

CMD:ogloszenie(playerid,params[])
{
	if(isnull(params)) return  SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /ogloszenie [tresc]");
	if(!GetPlayerFrakcja(playerid, FRAKCJA_SAN_NEWS)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie reporterow, nie mozesz uzyc tej komendy.");
	
	PlayerNewsReporta(playerid, 4, params);
	return 1;
}

CMD:czat(playerid,params[])
{
	new data[128];
	if(isnull(params)) return  SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /czat [tresc]");
	if(!GetPlayerFrakcja(playerid, FRAKCJA_SAN_NEWS)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie reporterow, nie mozesz uzyc tej komendy.");
	
	format(data,sizeof(data),"[PTR-Serw](PTR-News | Reporter: [%d]%s): %s", playerid, PlayerData[playerid][pName], params);
	SendClientMessageToAll(-1, data);
	return 1;
}

CMD:aparat(playerid, params[])
{
	if(!GetPlayerFrakcja(playerid, FRAKCJA_SAN_NEWS)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pogotowia, nie mozesz uzyc tej komendy.");

	GivePlayerWeaponEx(playerid, 43, 9999);
	return 1;
}

//========== [ KOMENDY TAXI ] ==========

CMD:licznik(playerid,params[])
{
	new player, kwota;
	if(!GetPlayerFrakcja(playerid, FRAKCJA_TAXI)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie taxi, nie mozesz uzyc tej komendy.");
	if(sscanf(params, "dd", player, kwota)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /licznik [ID] [Koszt przejazdu za 1 km]");
	if(GetPlayerCash(player)<kwota) return SendClientMessage(playerid,-1,"{a4a4a4}Gracz nie ma pieniedzy na pokrycie kosztu tego przejazdu.");
	if(!OdlegloscGracze(10.0,playerid,player)) return SendClientMessage(playerid,-1,"{a4a4a4}Jestes zbyt daleko gracza aby wejsc z nim w interakcje.");
	if(GetPlayerVehicleID(player) != GetPlayerVehicleID(playerid)) return SendClientMessage(playerid,-1,"{a4a4a4}Gracz nie jest w twoim pojezdzie");

	PlayerLicznikTaxi(playerid, 1);
	PlayerLicznikTaxi(player,   1);
	PlayerLicznikTaxi(playerid, 4, player,   kwota, 0, kwota);
	PlayerLicznikTaxi(player, 4, player,   kwota, 0, kwota);
	VehicleData[GetPlayerVehicleID(playerid)][vPrzebiegTaxi] = 0;
	KillTimer(PlayerData[player][pTimerLicznikTaxi]);
	PlayerData[player][pTimerLicznikTaxi] = SetTimerEx("TimerTaxiLicznik", 3000, true, "dddd", playerid, player, kwota, GetPlayerVehicleID(playerid));
	return 1;
}

stock RGBAToHex(r, g, b, a) //By Betamaster
{
	return (r<<24 | g<<16 | b<<8 | a);
}

stock GetPlayerID(text[]){
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(!strcmp(PlayerData[i][pName], text, true){
			return i;
		}
	}
	return 0;
}

stock ileprzesluchuje(){
	new ile;
	for(new i = 0; i < MAX_PLAYERS; i++){
		if(PlayerData[i][pZeznaje] == 1){
			ile++;
		}
	}
	return ile;
}

stock ShowPlayerPrawko(playerid)
{
    /*
	id_p,
	type_prawko,
	dobra_odp,
	pytA[50],
	pytB[50],
	pytC[50],
	pytD[50]
	*/
	if(PlayerData[playerid][pNowPrawkoTZdaje] != 0) //Teoria
	{
		new data[1024], naglowek[50], find = -1;
		for(new i=0; i<sizeof(PJ_Teoria); i++)
		{
			if(PJ_Teoria[i][type_prawko] != PlayerData[playerid][pNowPrawkoTZdaje]) continue;
			find = i;
			break;
		}
		if(find != -1)
		{
			PlayerData[playerid][pNowPrawkoID] = find;
			PlayerData[playerid][pNowPrawkoLicz]++;
			format(naglowek,sizeof(naglowek),"Prawo jazdy: %d/10 (uid: %d) (type: %d)", PlayerData[playerid][pNowPrawkoLicz], PlayerData[playerid][pNowPrawkoID], PlayerData[playerid][pNowPrawkoTZdaje]);
			format(data,sizeof(data),"%s\n\   
                                    %s\n\
									%s\n\
									%s\n\
									%s\n",  PJ_Teoria[find][pytanie], PJ_Teoria[find][pytA], PJ_Teoria[find][pytB], PJ_Teoria[find][pytC], PJ_Teoria[find][pytD] );
			ShowPlayerDialog(playerid, DIALOG_PRAWKO_TEORIA, DIALOG_STYLE_LIST, naglowek, data,  "Zatwierdz", #);
            return 1;
		}
	}
	if(PlayerData[playerid][pNowPrawkoPZdaje] != 0) //Praktyka
	{
		if(IsValidVehicle(PlayerData[playerid][pPraktykaVehicle])) DestroyVehicle(PlayerData[playerid][pPraktykaVehicle]);
        {
			switch(PlayerData[playerid][pNowPrawkoPZdaje])
			{
				case PRAWKO_TYPE_A:
				{
					SetPlayerPos(playerid, 1157.11, 1399.94, 5.82);
					PlayerData[playerid][pPraktykaVehicle] = CreateVehicleEx(522, 1157.11, 1399.94, 5.82, 0, 123, 123, 99999999999999999999999999999);
					PutPlayerInVehicleEx(playerid, PlayerData[playerid][pPraktykaVehicle], 0);
					CheckNextCheckpointDriver(playerid);
                    return 1;
				}
				case PRAWKO_TYPE_B:
				{
					SetPlayerPos(playerid, 1157.11, 1399.94, 5.82);
					PlayerData[playerid][pPraktykaVehicle] = CreateVehicleEx(400, 1157.11, 1399.94, 5.82, 0, 123, 123, 99999999999999999999999999999);
					PutPlayerInVehicleEx(playerid, PlayerData[playerid][pPraktykaVehicle], 0);
					CheckNextCheckpointDriver(playerid);
                    return 1;
				}
				case PRAWKO_TYPE_C:
				{
					SetPlayerPos(playerid, 1157.11, 1399.94, 5.82);
					PlayerData[playerid][pPraktykaVehicle] = CreateVehicleEx(418, 1157.11, 1399.94, 5.82, 0, 123, 123, 99999999999999999999999999999);
                    PutPlayerInVehicleEx(playerid, PlayerData[playerid][pPraktykaVehicle], 0);
					CheckNextCheckpointDriver(playerid);
                    return 1;
				}
				case PRAWKO_TYPE_D:
				{
					SetPlayerPos(playerid, 1157.11, 1399.94, 5.82);
					PlayerData[playerid][pPraktykaVehicle] = CreateVehicleEx(437, 1157.11, 1399.94, 5.82, 0, 123, 123, 99999999999999999999999999999);
					PutPlayerInVehicleEx(playerid, PlayerData[playerid][pPraktykaVehicle], 0);
					CheckNextCheckpointDriver(playerid);
                    return 1;
				}
				case PRAWKO_TYPE_L:
				{
					SetPlayerPos(playerid, 1157.11, 1399.94, 5.82);
					PlayerData[playerid][pPraktykaVehicle] = CreateVehicleEx(593, 1157.11, 1399.94, 5.82, 0, 123, 123, 99999999999999999999999999999);
					PutPlayerInVehicleEx(playerid, PlayerData[playerid][pPraktykaVehicle], 0);
					CheckNextCheckpointDriver(playerid);
                    return 1;
				}
			}
			VehicleData[PlayerData[playerid][pPraktykaVehicle]][vNaukaJazdy] = 1;
        }
        return 1;
    }
    return 1;
}

stock UpdatePlayerTextDraw(playerid, PlayerText:textdrawid)
{
    PlayerTextDrawDestroy(playerid, PlayerText:textdrawid);
    PlayerTextDrawShow(playerid, PlayerText:textdrawid);
    return 1;
}

stock PutPlayerInVehicleEx(playerid, vehicleid, type)
{
	PlayerData[playerid][pCanBeInThisVehicle] = vehicleid;
	PlayerData[playerid][pLastEnterVehicleID] = vehicleid;
	PutPlayerInVehicle(playerid, vehicleid, type);
	return 1;
}

//========== [ KOMENDY POGO ] ==========

CMD:nosze(playerid, params[])
{
	new player = strval(params);
	if(isnull(params)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /nosze [id]");
	if(PlayerData[player][pLogged] == false) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz ten nie jest zalogowany na serwerze.");
	if(!OdlegloscGracze(10.0,playerid,player)) return SendClientMessage(playerid,-1,"{a4a4a4}Jestes zbyt daleko gracza aby wejsc z nim w interakcje.");
	if(GetPlayerVehicleID(player) != 0)  return SendClientMessage(playerid, -1, "{a4a4a4}Gracz nie moze byc w pojezdzie, aby uzyc tej komendy.");
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POGOTOWIA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pogotowia, nie mozesz uzyc tej komendy.");
	
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 416)
	{
		PutPlayerInVehicleEx(player, GetPlayerVehicleID(playerid), 2);
		
	}
	else
	{
		SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w karetce, wejdz do niej jesli zamierzasz przenies gracza do karetki.");
	}
	return 1;
}

CMD:torba(playerid, params[])
{
	new data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POGOTOWIA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pogotowia, nie mozesz uzyc tej komendy.");

	format(data,sizeof(data),"{C2A2DA}*%s wyjmuje torbe z bandarzami", PlayerData[playerid][pName]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:ketanol(playerid, params[])
{
	new player = strval(params), data[128];

	if(isnull(params)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /ketanol [id]");
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POGOTOWIA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pogotowia, nie mozesz uzyc tej komendy.");
	if(PlayerData[player][pLogged] == false) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz ten nie jest zalogowany na serwerze.");
	if(!OdlegloscGracze(10.0,playerid,player)) return SendClientMessage(playerid,-1,"{a4a4a4}Jestes zbyt daleko gracza aby wejsc z nim w interakcje.");
	if(playerid == player) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz zrobic tego samemu sobie.");
	
	SetPlayerDrunkLevel(player, 0);

	
	format(data,sizeof(data),"{C2A2DA}*%s podaje ketanol dla %s", PlayerData[playerid][pName], PlayerData[player][pName]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:reanimuj(playerid, params[])
{
	new player = strval(params), data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POGOTOWIA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pogotowia, nie mozesz uzyc tej komendy.");
	if(isnull(params)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /reanimuj [id]");
	if(PlayerData[player][pLogged] == false) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz ten nie jest zalogowany na serwerze.");
	if(!OdlegloscGracze(10.0,playerid,player)) return SendClientMessage(playerid,-1,"{a4a4a4}Jestes zbyt daleko gracza aby wejsc z nim w interakcje.");
	if(PlayerData[player][pDeath] == false) return SendClientMessage(playerid, -1, "{a4a4a4}Ten gracz nie jest podczas BW");
	if(playerid == player) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz reanimowac samego siebie.");
	
	SetPlayerPos(player, PlayerData[player][pDeathPos][0], PlayerData[player][pDeathPos][1], PlayerData[player][pDeathPos][2]);
	PlayerData[player][pDeath] = false;
	SetCameraBehindPlayer(player);
	SetPlayerHealth(player, SETTINGS_PLAYER_HP_AFTER_BW);
	SetPlayerDrunkLevel(player, 0);
	ClearAnimations(player);
	TogglePlayerControllable(player, true);
	
	format(data,sizeof(data),"{C2A2DA}*%s przykuca przy %s i probuje go reanimowac", PlayerData[playerid][pName], PlayerData[player][pName]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:wypadek(playerid, params[])
{
	new player = strval(params), data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POGOTOWIA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pogotowia, nie mozesz uzyc tej komendy.");
	if(isnull(params)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /wypadek [id]");
	if(PlayerData[player][pLogged] == false) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz ten nie jest zalogowany na serwerze.");
	if(!OdlegloscGracze(10.0,playerid,player)) return SendClientMessage(playerid,-1,"{a4a4a4}Jestes zbyt daleko gracza aby wejsc z nim w interakcje.");
	if(PlayerData[player][pWypadek] != 9999) return SendClientMessage(playerid, -1, "{a4a4a4}Ten gracz nie ma wypadku.");
	if(playerid == player || PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz uwolnic samego siebie.");
	
	if(PlayerData[playerid][pFrakcja] != 2 || PlayerData[playerid][pRanga] >= RANGA_WSPOLWLASCICIEL || player == playerid || PlayerData[playerid][pRanga] >= RANGA_WSPOLWLASCICIEL)
	{
		SendClientMessage(playerid, -1, "{a4a4a4}Mogles uzyc tej komendy tylko dlatego, ze jestes wspol/wlascicielem.");
	}
	PlayerData[player][pWypadek] = 0;
	GiveFrakcjaCash(PlayerData[playerid][pFrakcja], 1200+random(500));
	SetPlayerHealth(player, SETTINGS_PLAYER_HP_AFTER_BW);
	SetPlayerDrunkLevel(player, 0);
	ClearAnimations(player);
	TogglePlayerControllable(player, true);
	loadWypadki(false);
	FadeColorForPlayer(player, 204, 58, 41, 125, 0, 0, 0, 0, 25, 0);
	format(data,sizeof(data),"{C2A2DA}*%s przykuca przy %s i probuje go reanimowac", PlayerData[playerid][pName], PlayerData[player][pName]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:apap(playerid, params[])
{
	new player = strval(params), data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POGOTOWIA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pogotowia, nie mozesz uzyc tej komendy.");
	if(isnull(params)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /apap [id]");
	if(PlayerData[player][pLogged] == false) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz ten nie jest zalogowany na serwerze.");
	if(!OdlegloscGracze(10.0,playerid,player)) return SendClientMessage(playerid,-1,"{a4a4a4}Jestes zbyt daleko gracza aby wejsc z nim w interakcje.");
	
	SetPlayerDrunkLevel(player,0);
	PlayerData[player][pSen] = 100;
	PlayerData[player][pGlod] = 100;
	
	format(data,sizeof(data),"{C2A2DA}*%s chwyta za apteczke i wyjmuje z niej apap ktory podaje %s", PlayerData[playerid][pName], PlayerData[player][pName]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:lek(playerid, params[])
{
	new player = strval(params), data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POGOTOWIA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pogotowia, nie mozesz uzyc tej komendy.");
	if(isnull(params)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /lek [id]");
	if(PlayerData[player][pLogged] == false) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz ten nie jest zalogowany na serwerze.");
	if(!OdlegloscGracze(10.0,playerid,player)) return SendClientMessage(playerid,-1,"{a4a4a4}Jestes zbyt daleko gracza aby wejsc z nim w interakcje.");
	if(GetPlayerVehicleID(player) != 0)  return SendClientMessage(playerid, -1, "{a4a4a4}Gracz nie moze byc w pojezdzie, aby uzyc tej komendy.");
	
	
	SetPlayerHealth(player, 100);
	

	format(data,sizeof(data),"{C2A2DA}*%s chwyta za apteczke i wyjmuje z niej lek ktory podaje %s", PlayerData[playerid][pName], PlayerData[player][pName]);
	SCMIC(playerid, 10, -1, data);	
	return 1;
}

//========== [ KOMENDY STRAZ POZARNA ] ==========

new drabina[3]={-1,...};

CMD:drabina(playerid, params[])
{
	if(!GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_POZARNA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes Strazakiem.");
	{
	new string[256];
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	for(new i=0; i<sizeof drabina; i++)
	{
		if(drabina[i] != -1) continue;
		drabina[i] = CreateDynamicObject(1437, x+0.6, y, z - 0.5, 340, 0.0, 0.0);
		EditObject(playerid, drabina[i]);
		format(string, sizeof(string), "Postawiles/as drabine !");
		SendClientMessage(playerid, SZARY, string);
		break;
	}
	}
	return 1;
}

CMD:udrabina(playerid, params[])
{
	if(!GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_POZARNA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes Strazakiem.");
	
	{
	new string[256];
	new Float:e[3];
	for(new i=0; i<sizeof drabina; i++)
	{
		for(new i1 = 0; i1 < MAX_PLAYERS; i1++)
		{
			GetObjectPos(drabina[i],e[0],e[1],e[2]);
			if(IsPlayerInRangeOfPoint(playerid,1,e[0],e[1],e[2]))
			{
				DestroyObject(drabina[i]);
				drabina[i] = -1;
				format(string, sizeof(string), "Schowales/as drabine !");
                SendClientMessage(playerid, SZARY, string);
			}
		}
	}
	}
	return 1;
}

CMD:sprzet(playerid, params[])
{
	if(GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_POZARNA))
	{
		for(new i; i < MAX_VEHICLES; i++)
		{
			new Float:x,Float:y,Float:z;
			GetVehiclePos(i, x, y, z);
			if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z))
			{
				if(GetVehicleModel(i) == 407)
				{
					ShowPlayerDialog(playerid, DIALOG_SPRZET_PSP, DIALOG_STYLE_LIST, " ", "{00AAFF}•{FFFFFF}Pila spalinowa\n{00AAFF}•{FFFFFF}Lopata\n{00AAFF}•{FFFFFF}Kamera na podczerwien\n{00AAFF}•{FFFFFF}Gasnica\n{00AAFF}•{FFFFFF}Aparat ochrony drog oddechowych\n{00AAFF}•{FFFFFF}Latarka\n{00AAFF}•{FFFFFF}Torba Medczyna PSP-R1\n{00AAFF}•{FFFFFF}Sorbent\n{FF1400}__________________\n{00AAFF}•{FFFFFF}Odloz przedmiot", "OK", "Anuluj");
				}
			}
		}
		
	}
	return 1;
}

CMD:wyciagnij(playerid, params[])
{
	new player = strval(params), data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_POZARNA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie strazy pozarnej, nie mozesz uzyc tej komendy.");
	if(isnull(params)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /wyciagnij [id]");
	if(PlayerData[player][pLogged] == false) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz ten nie jest zalogowany na serwerze.");
	if(!OdlegloscGracze(10.0,playerid,player)) return SendClientMessage(playerid,-1,"{a4a4a4}Jestes zbyt daleko gracza aby wejsc z nim w interakcje.");
	if(GetPlayerVehicleID(player)) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz nie znajduje sie w pojezdzie.");
	if(PlayerData[player][pDeath] == false) return SendClientMessage(playerid, -1, "{a4a4a4}Ten gracz nie jest podczas BW");
	if(playerid == player) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz wyciagac samego siebie.");
	
	
	
	SetCameraBehindPlayer(player);
	SetPlayerDrunkLevel(player, 0);
	ClearAnimations(player);
	TogglePlayerControllable(player, true);
	
	format(data,sizeof(data),"{C2A2DA}*%s wyciaga %s z pojazdu", PlayerData[playerid][pName], PlayerData[player][pName]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

//========== [ KOMENDY OGOLNO-FRAKCYJNE ] ==========

CMD:r(playerid, params[])
{
	new data[128];
	if(PlayerData[playerid][pFrakcja] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Nie nalezysz do zadnej grupy.");
	if(isnull(params)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /r [Tekst]");

	format(data, sizeof(data), "{CC2EFA}(Radio Frakcyjne) {AC58FA}[%d]%s: {CC2EFA}%s", playerid,PlayerData[playerid][pName],params);
	SCMToFrakcja(PlayerData[playerid][pFrakcja], -1, data);
	return 1;
}
CMD:rmf(playerid, params[])
{
	new data[128];
	if(PlayerData[playerid][pFrakcja] != FRAKCJA_POGOTOWIA || PlayerData[playerid][pFrakcja] != FRAKCJA_POLICJI || PlayerData[playerid][pFrakcja] != FRAKCJA_STRAZ_GRANICZNA || PlayerData[playerid][pFrakcja] != FRAKCJA_STRAZ_MIEJSKA || PlayerData[playerid][pFrakcja] != FRAKCJA_STRAZ_POZARNA) return SendClientMessage(playerid, -1, "{a4a4a4}Brak uprawnien.");
	if(isnull(params)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /rmf [Tekst]");

	format(data, sizeof(data), "{CC2EFA}(Radio Sluzb) {AC58FA}[%d]%s: {CC2EFA}%s", playerid,PlayerData[playerid][pName],params);
	
	for(new x = 0, j = GetPlayerPoolSize(); x <= j; x++)
	{
		if(!IsPlayerConnected(x)) continue;
		
		if(PlayerData[x][pFrakcja] == FRAKCJA_POGOTOWIA || PlayerData[x][pFrakcja] == FRAKCJA_POLICJI || PlayerData[x][pFrakcja] == FRAKCJA_STRAZ_GRANICZNA || PlayerData[x][pFrakcja] == FRAKCJA_STRAZ_MIEJSKA || PlayerData[x][pFrakcja] == FRAKCJA_STRAZ_POZARNA)
		{
			SendClientMessage(x, -1, data);
		}
	}
	return 1;
}

CMD:fc(playerid, params[])
{
	new data[128], fuid = PlayerData[playerid][pFirma], str_ranga[24];
	if(fuid == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Nie nalezysz do zadnej firmy.");
	if(isnull(params)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /fc [Tekst]");

	
	switch(PlayerData[playerid][pFirmaRanga])
	{
		case 0: str_ranga = "Kierowca";
		case 1: str_ranga = "Zasluzony";
		case 2: str_ranga = "Vice Szef";
		case 3: str_ranga = "Szef";
	}
			
	format(data, sizeof(data), "{CC2EFA}(%s) {AC58FA}[%d]%s (%s): {CC2EFA}%s", FirmaData[fuid][fName], playerid,PlayerData[playerid][pName], str_ranga, params);
	SCMToFirma(fuid, -1, data);
	return 1;
}

//Komendy dla pomocy drogowej:

CMD:paliwo(playerid, params[])
{
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /paliwo [Typ]  (0 - BENZYNA, 1 - LPG, 2 - ON, 3 - NVG, 4 - Uniwersalna 95, 5 - Bezolowiowa 95, 6 - Bezolowiowa 98)");
	if(strval(params) > 6 || strval(params) < 0) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /paliwo [Typ]  (0 - BENZYNA, 1 - LPG, 2 - ON, 3 - NVG, 4 - Uniwersalna 95, 5 - Bezolowiowa 95, 6 - Bezolowiowa 98"); 
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Podjedz blizej do pojazdu ktory chcesz zmodyfikowac.");
	
	new data[128], stan5[30];
	VehicleData[vehicleid][vPaliwoTyp] = strval(params);
	switch(VehicleData[vehicleid][vPaliwoTyp])
	{
		case 0: stan5 = "Benzyna";
					
		case 1: stan5= "Gaz (LPG)";
					
		case 2: stan5 = "ON (Olej napedowy)";
				
		case 3: stan5 = "Gazy ziemne (NVG)";
					
		case 4: stan5 = "Uniwersalna 95";
					
		case 5: stan5 = "Bezolowiowa 95";
					
		case 6: stan5 = "Bezolowiowa 98";
	}
	
	format(data,sizeof(data),"{C2A2DA}*%s zmienia rodzaj paliwa dla pojazdu %s na %s.", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400], stan5);
	SCMIC(playerid, 10, -1, data);
	return 1;
}
/*
CMD:usunmody(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, "Nie prowadzisz samochodu!");
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetPlayerVehicleID(playerid) == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes kierowca zadnego pojazdu");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes kierowca zadnego pojazdu");
	if(VehicleData[vehicleid][vPrivateCar] == 1 && VehicleData[vehicleid][vOwnerUID] != PlayerData[playerid][pUID]) return SendClientMessage(playerid, -1, "{a4a4a4}To auto nie nalezy do ciebie.");

	ChangeVehiclePaintjob(VehicleID[id], 255);
	SaveVehicle(id);
	SendClientMessage(playerid, COLOR_WHITE, "Usunąłeś cały tuning pojazdu");
	return 1;
}
*/
CMD:tuning(playerid, params[])
{
    #pragma unused params
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");		
	if(PlayerData[playerid][pSluzba] == false) return SendClientMessage(playerid, -1, "{a4a4a4}Podjedz blizej do pojazdu ktory chcesz zmodyfikowac.");

	{
		ShowPlayerDialog(playerid, TUNING, DIALOG_STYLE_LIST, "Menu pracownika Pomocy Drogowej", "Blade\nBroadway\nElegy\nFlash\nJester\nRemington\nSavanna\nSlamvan\nSultan\nStratum\nTornado\nUranus", "Ok", "Wyjdz");
	}
	return 1;
}

CMD:menupd(playerid, params[])
{
    #pragma unused params
	if(PlayerData[playerid][pSluzba] == false) return SendClientMessage(playerid, -1, "{a4a4a4}Podjedz blizej do pojazdu ktory chcesz zmodyfikowac.");
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
	{
		ShowPlayerDialog(playerid, MENUPD, DIALOG_STYLE_LIST, "Menu", "Napraw pojazd\nZamontuj Nitro\nZamontuj Hydraulika\nZamontuj Felgi\nZamontuj Neony\nMalowanie pojazdu", "Ok", "Wyjdz");
	}
	return 1;
}

CMD:rejestracja(playerid, params[])
{
	if(PlayerData[playerid][pSluzba] == false) return SendClientMessage(playerid, -1, "{a4a4a4}Podjedz blizej do pojazdu ktory chcesz zmodyfikowac.");
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /rejestracja [Nazwa]");
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Podjedz blizej do pojazdu ktory chcesz zmodyfikowac.");
	
	SetVehicleNumberPlate(vehicleid, params);
	format(VehicleData[vehicleid][vRegister], 31, "%s", params);
	new Float:vx, Float:vy, Float:vz, Float:vhp;
	GetVehiclePos(vehicleid, vx,vy,vz);
	GetVehicleHealth(vehicleid, vhp);
	SetVehicleToRespawn(vehicleid);
	SetVehiclePos(vehicleid, vx,vy,vz);
	SetVehicleHealth(vehicleid, vhp);
	ChangeVehicleColor(vehicleid, VehicleData[vehicleid][vColor1], VehicleData[vehicleid][vColor2]);
	return 1;
}

CMD:napraw(playerid, params[])
{
	new data[128];
	if(PlayerData[playerid][pSluzba] == false)
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Podjedz blizej do pojazdu ktory chcesz zmodyfikowac.");
	
	new Float:hp;
	GetVehicleHealth(vehicleid, hp);
	VehicleData[vehicleid][vNaprawy] += 1000-hp;
	RepairVehicleEx(vehicleid, false);
	SetVehicleHealth(vehicleid, 1000);
	VehicleData[vehicleid][vHP] = 1000;

	format(data,sizeof(data),"{C2A2DA}*%s chwyta za narzedzia poczym zaczyna naprawiac pojazd %s", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:nitro(playerid, params[])
{
	new data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Podjedz blizej do pojazdu ktory chcesz zmodyfikowac.");
	if(PlayerData[playerid][pSluzba] == false) return SendClientMessage(playerid, -1, "{a4a4a4}Podjedz blizej do pojazdu ktory chcesz zmodyfikowac.");
	
	new vid = GetPlayerVehicleID(playerid);
	AddVehicleComponent(vid, 1010);

	format(data,sizeof(data),"{C2A2DA}*%s Dodaje komponent Nitro do pojazdu %s", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:hydraulika(playerid, params[])
{
	new data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Podjedz blizej do pojazdu ktory chcesz zmodyfikowac.");
	if(PlayerData[playerid][pSluzba] == false) return SendClientMessage(playerid, -1, "{a4a4a4}Podjedz blizej do pojazdu ktory chcesz zmodyfikowac.");
	
	new varh = 0;
	varh = GetPlayerVehicleID(playerid);
	AddVehicleComponent(varh, 1087);

	format(data,sizeof(data),"{C2A2DA}*%s Dodaje komponent Hydraulika do pojazdu %s", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:cczarny(playerid, params[])
{
	new data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{a4a4a4}Musisz byc w pojedzie jako kierowca.");

	ChangeVehicleColor(GetPlayerVehicleID(playerid), 0, 0);

	format(data,sizeof(data),"{C2A2DA}*%s Przemalowal pojazd %s na kolor Czarny", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:cbialy(playerid, params[])
{
	new data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{a4a4a4}Musisz byc w pojedzie jako kierowca.");

	ChangeVehicleColor(GetPlayerVehicleID(playerid), 1, 1);

	format(data,sizeof(data),"{C2A2DA}*%s Przemalowal pojazd %s na kolor Bialy", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:cniebieski(playerid, params[])
{
	new data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{a4a4a4}Musisz byc w pojedzie jako kierowca.");

	ChangeVehicleColor(GetPlayerVehicleID(playerid), 79, 79);

	format(data,sizeof(data),"{C2A2DA}*%s Przemalowal pojazd %s na kolor Niebieski", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:czolty(playerid, params[])
{
	new data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{a4a4a4}Musisz byc w pojedzie jako kierowca.");

	ChangeVehicleColor(GetPlayerVehicleID(playerid), 6, 6);

	format(data,sizeof(data),"{C2A2DA}*%s Przemalowal pojazd %s na kolor Zolty", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:cczerwony(playerid, params[])
{
	new data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{a4a4a4}Musisz byc w pojedzie jako kierowca.");

	ChangeVehicleColor(GetPlayerVehicleID(playerid), 3, 3);

	format(data,sizeof(data),"{C2A2DA}*%s Przemalowal pojazd %s na kolor Czerwony", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:czielony(playerid, params[])
{
	new data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{a4a4a4}Musisz byc w pojedzie jako kierowca.");

	ChangeVehicleColor(GetPlayerVehicleID(playerid), 16, 16);

	format(data,sizeof(data),"{C2A2DA}*%s Przemalowal pojazd %s na kolor zielony", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:cfioletowy(playerid, params[])
{
	new data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{a4a4a4}Musisz byc w pojedzie jako kierowca.");

	ChangeVehicleColor(GetPlayerVehicleID(playerid), 149, 149);

	format(data,sizeof(data),"{C2A2DA}*%s Przemalowal pojazd %s na kolor Fioletowy", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:cbordowy(playerid, params[])
{
	new data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{a4a4a4}Musisz byc w pojedzie jako kierowca.");

	ChangeVehicleColor(GetPlayerVehicleID(playerid), 58, 58);

	format(data,sizeof(data),"{C2A2DA}*%s Przemalowal pojazd %s na kolor Bordowy", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:csrebrny(playerid, params[])
{
	new data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{a4a4a4}Musisz byc w pojedzie jako kierowca.");

	ChangeVehicleColor(GetPlayerVehicleID(playerid), 25, 25);

	format(data,sizeof(data),"{C2A2DA}*%s Przemalowal pojazd %s na kolor Srebrny", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:crozowy(playerid, params[])
{
	new data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{a4a4a4}Musisz byc w pojedzie jako kierowca.");

	ChangeVehicleColor(GetPlayerVehicleID(playerid), 126, 126);

	format(data,sizeof(data),"{C2A2DA}*%s Przemalowal pojazd %s na kolor Rozowy", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:cbezowy(playerid, params[])
{
	new data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{a4a4a4}Musisz byc w pojedzie jako kierowca.");

	ChangeVehicleColor(GetPlayerVehicleID(playerid), 15, 15);

	format(data,sizeof(data),"{C2A2DA}*%s Przemalowal pojazd %s na kolor Bezowy", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:cblekitny(playerid, params[])
{
	new data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{a4a4a4}Musisz byc w pojedzie jako kierowca.");

	ChangeVehicleColor(GetPlayerVehicleID(playerid), 7, 7);

	format(data,sizeof(data),"{C2A2DA}*%s Przemalowal pojazd %s na kolor Blekitny", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:pach(playerid, params[])
{
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
	{
		new string[256];
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		for(new i=0; i<sizeof pacholek; i++)
		{
			if(pacholek[i] != -1) continue;
			pacholek[i] = CreateObject(1238, x+0.6, y, z - 0.5, 0.0, 0.0, 0.0);
			EditObject(playerid, pacholek[i]);
			format(string, sizeof(string), "Postawiles/as pacholek!");
			break;
		}
	}
	return 1;
}

CMD:usunp(playerid, params[])
{
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
	{
	//	new string[256];
		new Float:e[3];
		for(new i=0; i<sizeof pacholek; i++)
		{
			for(new i1 = 0; i1 < MAX_PLAYERS; i1++)
			{
				GetObjectPos(pacholek[i],e[0],e[1],e[2]);
				if(IsPlayerInRangeOfPoint(playerid,1,e[0],e[1],e[2]))
				{
					DestroyObject(pacholek[i]);
					pacholek[i] = -1;
					SendClientMessage(playerid, 0xFFFFFFAA, "Schowales/as pacholek");
				}
			}
		}
	}
	return 1;
}

CMD:tankuj(playerid, params[])
{
	new data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Podjedz blizej do pojazdu ktory chcesz zmodyfikowac.");
	
	SetVehiclePaliwo(vehicleid);

	format(data,sizeof(data),"{C2A2DA}*%s chwyta za kanister poczym otwiera bak i wlewa paliwo do pojazdu %s", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}
CMD:lakier(playerid, params[])
{
	new kolor1, kolor2, data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
    if(sscanf(params, "dd", kolor1, kolor2)) return SendClientMessage(playerid, -1,"{a4a4a4}Wpisz: /lakier [kolor] [kolor]");
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Podjedz blizej do pojazdu ktory chcesz zmodyfikowac.");
	
	ChangeVehicleColor(vehicleid, kolor1, kolor2);
	VehicleData[vehicleid][vColor1] = kolor1;
	VehicleData[vehicleid][vColor2] = kolor2;
	
	format(data,sizeof(data),"{C2A2DA}*%s chwyta za spray i zaczyna przemalowywac pojazd %s", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}
CMD:opona(playerid, params[])
{
	new id = strval(params), data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
	if(isnull(params)) return SendClientMessage(playerid, -1,"{a4a4a4}Wpisz: /opona [1 - Lewy Tyl | 2 - lewy Przod | 3 - Prawy Tyl | 4 - Prawy Przod]");
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Podjedz blizej do pojazdu ktory chcesz zmodyfikowac.");
	if(id >= 5 || id <= 0) return SendClientMessage(playerid, -1,"{a4a4a4}Wpisz: /opona [1 - Lewy Tyl | 2 - lewy Przod | 3 - Prawy Tyl | 4 - Prawy Przod] ( WPISANO NIEPOPRAWNY NUMER OPONY )");
	
	
	switch(id)
	{
		case 1: //tyl lewy
		{
			VehicleData[vehicleid][vOponaLT_DMG] = 10.0;
			setTire(vehicleid, 2, 0);
			SendClientMessage(playerid, -1, "{a4a4a4}Naprawiono tylnia lewa opone.");
		}
		case 2: //przod lewy
		{
			VehicleData[vehicleid][vOponaLP_DMG] = 10.0;
			setTire(vehicleid, 3, 0);
			SendClientMessage(playerid, -1, "{a4a4a4}Naprawiono przednia lewa opone.");
		}
		case 3: //tyl prawy
		{
			VehicleData[vehicleid][vOponaPT_DMG] = 10.0;
			setTire(vehicleid, 0, 0);
			SendClientMessage(playerid, -1, "{a4a4a4}Naprawiono tylnia prawa opone.");
		}
		case 4: //przod prawy
		{
			VehicleData[vehicleid][vOponaPP_DMG] = 10.0;
			setTire(vehicleid, 1, 0);
			SendClientMessage(playerid, -1, "{a4a4a4}Naprawiono przednia prawa opone.");
		}
	}
	
	format(data,sizeof(data),"{C2A2DA}*%s chwyta za nowa opone, sciaga stara i naklada nowa do pojazdu %s", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}
CMD:stan(playerid, params[])
{
	new data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie pomocy drogowej, nie mozesz uzyc tej komendy.");
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Podjedz blizej do pojazdu ktory chcesz zmodyfikowac.");
	
	
	new Float:hp;
	GetVehicleHealth(GetPlayerVehicleID(playerid), hp);
	hp = (hp - 249.9) / 7.5;
						

	format(data,sizeof(data),"{C2A2DA}*%s podchodzi do pojazdu %s i zaczyna go dokladnie ogladac z kazdych stron", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
	SCMIC(playerid, 10, -1, data);
	

		
	format(data,sizeof(data),"\
									Stan pojazdu: %d/100% HP\n\
									Lewa tylnia opona: %d/100%\n\
									Lewa przednia opona: %d/100%\n\
									Prawa tylnia opona: %d/100%\n\
									Prawa przednia opona: %d/100%\n\		
	", 
	floatround(hp),
	110 - floatround(VehicleData[vehicleid][vOponaLT_DMG]),
	110 - floatround(VehicleData[vehicleid][vOponaLP_DMG]),
	110 - floatround(VehicleData[vehicleid][vOponaPT_DMG]),
	110 - floatround(VehicleData[vehicleid][vOponaPP_DMG])
	);
	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Stan pojazdu:", data, "Zamknij", "");
	return 1;
}

//Komendy policji
CMD:lizak(playerid, cmdtext[])
{
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POLICJI)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes Policjantem.");
	new id;
	if(sscanf(cmdtext, "d", id))
		return SendClientMessage(playerid, BIALY, "Wpisz: /lizak [id]");
	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, -1, "{a4a4a4}zle id!");
	else
	{
		if(GetDistanceBetweenPlayers(playerid, id) >= 70.0) return SendClientMessage(playerid, BIALY, "JesteĹ“ za daleko od gracza!");
		new s[256];
		format(s, sizeof(s), "Otrzymujesz polecenie zjechania na pobocze od funkcjonariusza %s", PlayerData[playerid][pName]);
		ShowPlayerDialog(id, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Lizak Policyjny",s,"Zamknij",#);
	}
	return 1;
}

CMD:blokadakola(playerid, params[])
{
	new data[128], type, koszt;
	if(GetPlayerFrakcja(playerid, FRAKCJA_POLICJI) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_MIEJSKA)) 
	{
		if(sscanf(params, "dd", type, koszt)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /blokadakola [typ 0 = sciaga blokade | 1 = naklada blokade] [koszt sciagniecia blokady]");
		new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
		if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Podjedz blizej do pojazdu ktory chcesz zmodyfikowac.");
		
		if(type == 1)
		{
			VehicleData[vehicleid][vWheelsBlock] = koszt;

			format(data,sizeof(data),"{C2A2DA}*%s wyciaga blokade poczym przykuca i naklada blokade na kolo pojazdu %s", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
			SCMIC(playerid, 10, -1, data);
		}
		else if(type == 0)
		{
			format(data,sizeof(data),"{C2A2DA}*%s przykuca przy pojezdzie %s i zaczyna sciagac blokade z kola", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
			SCMIC(playerid, 10, -1, data);
			
			format(data,sizeof(data),"{a4a4a4}Koszt za zdjecie tej blokady na kolo wynosil $%d.", VehicleData[vehicleid][vWheelsBlock]);
			SendClientMessage(playerid, -1, data);
			
			VehicleData[vehicleid][vWheelsBlock] = 0;
		}
	}
	else return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie policji i strazy miejskiej, nie mozesz uzyc tej komendy.");
	return 1;
}


CMD:wiezienie(playerid, params[])
{
	new player, czas, powod[30], data[128];
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POLICJI)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie policji, nie mozesz uzyc tej komendy.");
	if(sscanf(params, "ddS(Brak)[30]", player, czas, powod)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /wiezienie [id] [czas] [powod]");
	if(player == playerid) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz aresztowac samego siebie!");
	if(PlayerData[player][pWantedLevel] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz nie jest poszukiwany.");
	if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "{a4a4a4}Podane id nie znajduje sie na serwerze online.");
	if(!OdlegloscGracze(3.0,playerid,player)) return SendClientMessage(playerid, -1, "{a4a4a4}Jestes zbyt daleko gracza aby wejsc z nim w interakcje.");
	
	PlayerData[player][pSkuty] = 0;
	PlayerData[player][pJail] = czas;
	PlayerData[player][pWantedLevel] = 0;
	SetPlayerWantedLevel(player, 0);
    SetPlayerInteriorEx(player, 0);
	SetPlayerVirtualWorldEx(player, 0);
	ClearAnimations(player);
	SetPlayerSpecialAction(player, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(player, 1);
	SetPlayerPos(player, 1681.9360,991.9390,-39.8240);
	SetPlayerInteriorEx(player, 6);
	SetPlayerVirtualWorldEx(player, player+100);
	
	
	
	format(data,sizeof(data),"{a4a4a4}Policjant [%d]%s zaaresztowal cie z powodem: %s", playerid, PlayerData[playerid][pName], powod);
	SendClientMessage(player, -1, data);
	format(data,sizeof(data),"{a4a4a4}Gracz [%d]%s zostal aresztowany na czas: %d min.", player, PlayerData[player][pName], czas);
	SendClientMessage(playerid, -1, data);
	format(data,sizeof(data),"{a4a4a4}(Frakcja) [%d]%s zaaresztowal [%d]%s na czas %d min.", playerid, PlayerData[playerid][pName], player, PlayerData[player][pName], czas);
	SCMToFrakcja(PlayerData[playerid][pFrakcja], -1, data);
	return 1;
}
CMD:uwolnij(playerid, params[])
{
	if(!GetPlayerFrakcja(playerid, FRAKCJA_POLICJI)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie policji, nie mozesz uzyc tej komendy.");
	new player = strval(params), data[128];
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /uwolnij [id]");
	if(player == playerid) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz uwolnic samego siebie!");
	if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "{a4a4a4}Podane id nie znajduje sie na serwerze online.");
	if(PlayerData[player][pJail] <= 0) return SendClientMessage(playerid, -1, "{a4a4a4}Ten gracz nie jest w wiezieniu.");
	
	
	PlayerData[player][pJail] = 0;
	SetPlayerPos(player, START_PLAYER_POS_X,START_PLAYER_POS_Y,START_PLAYER_POS_Z);
	SetPlayerInteriorEx(player, 0);
	SetPlayerVirtualWorldEx(player, 0);
	
	
	format(data,sizeof(data),"{a4a4a4}Gracz [%d]%s uwolnil cie z wiezienia.", playerid, PlayerData[playerid][pName]);
	SendClientMessage(player, -1, data);
	format(data,sizeof(data),"{a4a4a4}Gracz [%d]%s zostal uwolniony z wiezienia.", player, PlayerData[player][pName]);
	SendClientMessage(playerid, -1, data);
	format(data,sizeof(data),"{a4a4a4}(Frakcja) [%d]%s uwolnil [%d]%s z wiezienia.", playerid, PlayerData[playerid][pName], player, PlayerData[player][pName]);
	SCMToFrakcja(PlayerData[playerid][pFrakcja], -1, data);
	return 1;
}
CMD:meg(playerid, params[])
{
	new data[128], text[128];
	if(sscanf(params, "s[128]", text)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /meg [text]");
	if(GetPlayerFrakcja(playerid, FRAKCJA_POLICJI) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_GRANICZNA))
	{
		format(data,sizeof(data),"[MEGAFON]  %s", text);
		SCMIC(playerid, 25, -1, data);
	}
	else return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie policji lub strazy granicznej, nie mozesz uzyc tej komendy.");
	return 1;
}


CMD:mandat(playerid, params[])
{
	new data[250], player, mandat;
	if(GetPlayerFrakcja(playerid, FRAKCJA_POLICJI) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_GRANICZNA) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_MIEJSKA))
	{
		if(sscanf(params, "dd", player, mandat)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /mandat [id] [kwota]");
		if(player == playerid) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz sam sobie wystawic mandatu!");
		if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "{a4a4a4}Podane id nie znajduje sie na serwerze online.");
		if(!OdlegloscGracze(5.0,playerid,player)) return SendClientMessage(playerid, -1, "{a4a4a4}Jestes zbyt daleko gracza aby wejsc z nim w interakcje.");
		if(mandat > 100000) return SendClientMessage(playerid, -1, "{a4a4a4}Zbyt duza kwota!");
		

		PlayerData[player][pMandat] = mandat;
		PlayerData[player][pMandatGive] = playerid;
		
		format(data,sizeof(data),"\
									{F2F2F2}Gracz {2ECCFA}[%d]%s {F2F2F2}wystawil ci mandat w wysokosci {01DF01}$%d{F2F2F2}, czy chcesz przyjac ten mandat?", playerid, PlayerData[playerid][pName], mandat);
		ShowPlayerDialog(player, DIALOG_MANDAT_MENU, DIALOG_STYLE_MSGBOX, "Mandat:", data,  "Przyjmij", "Odrzuc");
		
		format(data,sizeof(data),"{a4a4a4}(Frakcja) [%d]%s wystawil mandat [%d]%s $%d", playerid, PlayerData[playerid][pName], player, PlayerData[player][pName], mandat);
		SCMToFrakcja(PlayerData[playerid][pFrakcja], -1, data);
	}
	else return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie policji i strazy granicznej, nie mozesz uzyc tej komendy.");
	return 1;
}

CMD:rachunek(playerid, params[])
{
	new data[250], player, mandat;
	if(GetPlayerFrakcja(playerid, FRAKCJA_TAXI) || GetPlayerFrakcja(playerid, FRAKCJA_POLICJI) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_GRANICZNA) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_MIEJSKA) || GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA))
	{
		if(sscanf(params, "dd", player, mandat)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /rachunek [id] [kwota]");
		if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "{a4a4a4}Podane id nie znajduje sie na serwerze online.");
		if(!OdlegloscGracze(5.0,playerid,player)) return SendClientMessage(playerid, -1, "{a4a4a4}Jestes zbyt daleko gracza aby wejsc z nim w interakcje.");
		if(mandat > 100000) return SendClientMessage(playerid, -1, "{a4a4a4}Zbyt duza kwota!");

		PlayerData[player][pMandat] = mandat;
		PlayerData[player][pMandatGive] = playerid;
		
		format(data,sizeof(data),"\
									{F2F2F2}Gracz {2ECCFA}[%d]%s {F2F2F2}wystawil ci rachunek w wysokosci {01DF01}$%d{F2F2F2}, czy chcesz przyjac ten rachunek?", playerid, PlayerData[playerid][pName], mandat);
		ShowPlayerDialog(player, DIALOG_MANDAT_MENU, DIALOG_STYLE_MSGBOX, "Rachunek:", data,  "Przyjmij", "Odrzuc");
		
		format(data,sizeof(data),"{a4a4a4}(Frakcja) [%d]%s wystawil rachunek [%d]%s $%d", playerid, PlayerData[playerid][pName], player, PlayerData[player][pName], mandat);
		SCMToFrakcja(PlayerData[playerid][pFrakcja], -1, data);
	}
	else return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie policji, strazy granicznej lub pomocy drogowej, nie mozesz uzyc tej komendy.");
	return 1;
}

CMD:pkt(playerid, params[])
{
	new data[250], player, pkt;
	if(GetPlayerFrakcja(playerid, FRAKCJA_POLICJI) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_GRANICZNA))
	{
		if(sscanf(params, "dd", player, pkt)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /pkt [id] [ilosc pkt]");
		if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "{a4a4a4}Podane id nie znajduje sie na serwerze online.");
		if(!OdlegloscGracze(3.0,playerid,player)) return SendClientMessage(playerid, -1, "{a4a4a4}Jestes zbyt daleko gracza aby wejsc z nim w interakcje.");
		if(pkt > 24) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz daj wiecej niz 24 pkt karne!");
		if(PlayerData[player][pPkt] == 24) return SendClientMessage(playerid, -1, "{a4a4a4}Ten gracz ma 24pkt karnych");

		PlayerData[player][pPkt] += pkt;
		if(PlayerData[player][pPkt] > 24)
		{
			PlayerData[player][pPkt] = 24;
		}
		
		format(data,sizeof(data),"{a4a4a4}Gracz [%d]%s dal ci %d pkt karnych", playerid, PlayerData[playerid][pName], pkt);
		SendClientMessage(player, -1, data);
		format(data,sizeof(data),"{a4a4a4}Gracz [%d]%s otrzymal %d pkt karnych.", player, PlayerData[player][pName], pkt);
		SendClientMessage(playerid, -1, data);
		format(data,sizeof(data),"{a4a4a4}(Frakcja) [%d]%s dal pkt karne [%d]%s + %d", playerid, PlayerData[playerid][pName], player, PlayerData[player][pName], pkt);
		SCMToFrakcja(PlayerData[playerid][pFrakcja], -1, data);
	}
	else return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie policji i strazy granicznej, nie mozesz uzyc tej komendy.");
	return 1;
}

CMD:zpkt(playerid, params[])
{
	new data[250], player, pkt;
	if(GetPlayerFrakcja(playerid, FRAKCJA_POLICJI) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_GRANICZNA))
	{
		if(sscanf(params, "dd", player, pkt)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /zpkt [id] [ilosc pkt]");
		if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "{a4a4a4}Podane id nie znajduje sie na serwerze online.");
		if(!OdlegloscGracze(3.0,playerid,player)) return SendClientMessage(playerid, -1, "{a4a4a4}Jestes zbyt daleko gracza aby wejsc z nim w interakcje.");
		if(PlayerData[player][pPkt] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Ten gracz nie ma punktow karnych.");

		PlayerData[player][pPkt] -= pkt;
		
		if(PlayerData[player][pPkt] < 0)
		{
			PlayerData[player][pPkt] = 0;
		}
		
		
		format(data,sizeof(data),"{a4a4a4}Gracz [%d]%s zdjal ci %d pkt karnych", playerid, PlayerData[playerid][pName], pkt);
		SendClientMessage(player, -1, data);
		format(data,sizeof(data),"{a4a4a4}Gracz [%d]%s nie ma juz %d pkt karnych.", player, PlayerData[player][pName], pkt);
		SendClientMessage(playerid, -1, data);
		format(data,sizeof(data),"{a4a4a4}(Frakcja) [%d]%s zdjal pkt karne [%d]%s - %d", playerid, PlayerData[playerid][pName], player, PlayerData[player][pName], pkt);
		SCMToFrakcja(PlayerData[playerid][pFrakcja], -1, data);
	}
	else return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie policji i strazy granicznej, nie mozesz uzyc tej komendy.");
	return 1;
}

CMD:kolczatka(playerid, params[])
{
	new data[128], Float:x,Float:y,Float:z,Float:a;
	if(GetPlayerFrakcja(playerid, FRAKCJA_POLICJI) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_GRANICZNA) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_MIEJSKA))
	{
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid,a);
		
		for(new i = 0; i < sizeof(KolczatkiData); i++)
		{
			if(KolczatkiData[i][kPos][0] == 0 || KolczatkiData[i][kPos][1] == 0 || KolczatkiData[i][kPos][2] == 0)
			{
				KolczatkiData[i][kObject] = CreateDynamicObject(2892, x, y, z-0.9, 0, 0, a-90, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		
				KolczatkiData[i][kPos][0] = x;
				KolczatkiData[i][kPos][1] = y;
				KolczatkiData[i][kPos][2] = z;
				KolczatkiData[i][kPos][3] = a;
				if(IsValidDynamic3DTextLabel(KolczatkiData[i][kText3D])) DestroyDynamic3DTextLabel(KolczatkiData[i][kText3D]);
				format(data,sizeof(data),"[Kolczatka UID: %d | ID: %d]\nStworzyl: %s", i, KolczatkiData[i][kObject], PlayerData[playerid][pName]);
				KolczatkiData[i][kText3D] = CreateDynamic3DTextLabel(data, 0x088A08EE, x,y,z, 4);
				format(data,sizeof(data),"{C2A2DA}*%s wyjmuje z radiowozu kolczatke i zaczyna ja rozstawiac.", PlayerData[playerid][pName]);
				SCMIC(playerid, 10, -1, data);
				break;
			}
		}
	}
	else
	{
		SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie policji, strazy granicznej lub strazy miejskiej, nie mozesz uzyc tej komendy.");
		return 1;
	}
	return 1;
}
	
CMD:ukolczatka(playerid, params[])
{
	new data[128];
	if(GetPlayerFrakcja(playerid, FRAKCJA_POLICJI) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_GRANICZNA) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_MIEJSKA)) 
	{
		for(new i = 0; i < sizeof(KolczatkiData); i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5.0, KolczatkiData[i][kPos][0], KolczatkiData[i][kPos][1], KolczatkiData[i][kPos][2]))
			{
				if(IsValidDynamicObject(KolczatkiData[i][kObject])) DestroyDynamicObject(KolczatkiData[i][kObject]);
				if(IsValidDynamic3DTextLabel(KolczatkiData[i][kText3D])) DestroyDynamic3DTextLabel(KolczatkiData[i][kText3D]);

				KolczatkiData[i][kPos][0] = 0;
				KolczatkiData[i][kPos][1] = 0;
				KolczatkiData[i][kPos][2] = 0;
				
				format(data,sizeof(data),"{C2A2DA}*%s zbiera kolczatki z drogi i wklada je do radiowozu.", PlayerData[playerid][pName]);
				SCMIC(playerid, 10, -1, data);
				break;
			}
		}
	}
	else return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie policji, strazy granicznej lub strazy miejskiej, nie mozesz uzyc tej komendy.");
	return 1;
}

CMD:zdejmijworek(playerid, params[])
{
	new player = strval(params), data[128];
	if(GetPlayerFrakcja(playerid, FRAKCJA_POLICJI) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_GRANICZNA)) 
	{
		if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /zdejmijworek [id]");
		if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "{a4a4a4}Podane id nie znajduje sie na serwerze online.");
		if(!OdlegloscGracze(3.0,playerid,player)) return SendClientMessage(playerid, -1, "{a4a4a4}Jestes zbyt daleko gracza aby wejsc z nim w interakcje.");
		
		format(data,sizeof(data),"{C2A2DA}*%s podchodzi do %s poczym sciaga mu worek z glowy.", PlayerData[playerid][pName], PlayerData[player][pName]);
		SCMIC(playerid, 10, -1, data);
		HideBlackScreen(player);
	}
	else return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie policji, strazy granicznej, nie mozesz uzyc tej komendy.");
	return 1;
}

CMD:przeszukaj(playerid, params[])
{
	new player = strval(params), data[350], dataa[1000], i = 0, get_uid, get_owneruid, get_przedmiot[30], get_use, get_var1, get_var2, get_var3, get_var4, get_var5, get_var6;
	if(GetPlayerFrakcja(playerid, FRAKCJA_POLICJI) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_GRANICZNA)) 
	{
		if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /przeszukaj [id]");
		if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "{a4a4a4}Podane id nie znajduje sie na serwerze online.");
		if(!OdlegloscGracze(3.0,playerid,player)) return SendClientMessage(playerid, -1, "{a4a4a4}Jestes zbyt daleko gracza aby wejsc z nim w interakcje.");
		format(data,sizeof(data),"SELECT * FROM `data_przedmioty` where `owneruid` = '%d' ORDER BY `uid` ASC", PlayerData[player][pUID]);
		mysql_query(data);
		mysql_store_result();

		dataa = "uid\tprzemiot\t#\t#\n";
		
		while(mysql_fetch_row(data))
		{
			sscanf(data, "p<|>iis[30]iiiiiii", get_uid, get_owneruid, get_przedmiot, get_use, get_var1, get_var2, get_var3, get_var4, get_var5, get_var6);
			PlayerData[playerid][pFindItemUID][i]=get_uid;
			i++;
			
			
			if(get_use != 0)
			{
				format(dataa,sizeof(dataa),"%s{58FA58}%d\t%s\t%d\t%d\n",
											dataa,
											get_uid,
											get_przedmiot,
											get_var1,
											get_var2);
			}
			else
			{
				format(dataa,sizeof(dataa),"%s{F5DA81}%d\t%s\t%d\t%d\n",
											dataa,
											get_uid,
											get_przedmiot,
											get_var1,
											get_var2);
			}
		}
		if(i == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Ten gracz nie ma zadnych przedmiotow.");
		ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_TABLIST_HEADERS, "Przedmioty tego gracza:", dataa, "Zamknij", "");
		
		format(data,sizeof(data),"{C2A2DA}*%s podchodzi do %s i zaczyna go dokladnie przeszukiwac nie pomijajac intymnych miejsc", PlayerData[playerid][pName], PlayerData[player][pName]);
		SCMIC(playerid, 10, -1, data);
	}
	else return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie policji i strazy granicznej, nie mozesz uzyc tej komendy.");
	return 1;
}
CMD:bprzeszukaj(playerid)
{
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(GetPlayerFrakcja(playerid, FRAKCJA_POLICJI) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_GRANICZNA)) 
	{
		if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Musisz podejsc do bagaznika pojazdu ktory chcesz sprawdzic.");
		if(VehicleData[vehicleid][vOwnerUID] == -1 || VehicleData[vehicleid][vPrivateCar] == 0 || VehicleData[vehicleid][vFirmyCar] == 0 || VehicleData[vehicleid][vFrakcjiCar] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Ten pojazd nie ma dostepu do bagaznika.");
		if(ToRower(vehicleid) || ToMotor(vehicleid)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozna przechowywac przedmiotow w rowerach/motocyklach, nic tam sie nie znajduje.");
		
		
		new data[350], dataa[1000], i = 0, get_uid, get_owneruid, get_przedmiot[30], get_use, get_var1, get_var2, get_var3, get_var4, get_var5, get_var6;
		format(data,sizeof(data),"SELECT * FROM `data_przedmioty` where `var6` = '%d' and `owneruid` = '-1' ORDER BY `uid` ASC", VehicleData[vehicleid][vUID]);
		mysql_query(data);
		mysql_store_result();
		
		dataa = "uid\tprzemiot\t#\t#\n";
		
		while(mysql_fetch_row(data))
		{
			sscanf(data, "p<|>iis[30]iiiiiii", get_uid, get_owneruid, get_przedmiot, get_use, get_var1, get_var2, get_var3, get_var4, get_var5, get_var6);
			PlayerData[playerid][pFindItemUID][i]=get_uid;
			i++;
			
			
			
			format(dataa,sizeof(dataa),"%s%d\t%s\t%d\t%d\n",
			dataa,
			get_uid,
			get_przedmiot,
			get_var1,
			get_var2);
			
		}
		if(i == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Nie ma zadnych przedmiotow w bagazniku.");
		ShowPlayerDialog(playerid, DIALOG_PRZEDMIOTY_VEHICLE, DIALOG_STYLE_TABLIST_HEADERS, "Przedmioty (bagaznik):", dataa, "Zabierz", "Zamknij");
		
		format(data,sizeof(data),"{C2A2DA}*%s podchodzi do bagaznika pojazdu %s poczym zaczyna dokladnie sprawdzac jego zawartosc.", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
		SCMIC(playerid, 10, -1, data);
	}
	else return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie policji, strazy granicznej, nie mozesz uzyc tej komendy.");
	return 1;
}
CMD:zabierz(playerid, params[])
{
	new player = strval(params), data[350], dataa[1000], i = 0, get_uid, get_owneruid, get_przedmiot[30], get_use, get_var1, get_var2, get_var3, get_var4, get_var5, get_var6;
	if(GetPlayerFrakcja(playerid, FRAKCJA_POLICJI) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_GRANICZNA))
	{
		if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /zabierz [id]");
		if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "{a4a4a4}Podane id nie znajduje sie na serwerze online.");
		if(!OdlegloscGracze(3.0,playerid,player)) return SendClientMessage(playerid, -1, "{a4a4a4}Jestes zbyt daleko gracza aby wejsc z nim w interakcje.");
		
		format(data,sizeof(data),"SELECT * FROM `data_przedmioty` where `owneruid` = '%d' ORDER BY `uid` ASC", PlayerData[player][pUID]);
		mysql_query(data);
		mysql_store_result();

		dataa = "uid\tprzemiot\t#\t#\n";
		
		while(mysql_fetch_row(data))
		{
			sscanf(data, "p<|>iis[30]iiiiiii", get_uid, get_owneruid, get_przedmiot, get_use, get_var1, get_var2, get_var3, get_var4, get_var5, get_var6);
			PlayerData[playerid][pFindItemUID][i]=get_uid;
			i++;
			
			
			if(get_use != 0)
			{
				format(dataa,sizeof(dataa),"%s{58FA58}%d\t%s\t%d\t%d\n",
											dataa,
											get_uid,
											get_przedmiot,
											get_var1,
											get_var2);
			}
			else
			{
				format(dataa,sizeof(dataa),"%s{F5DA81}%d\t%s\t%d\t%d\n",
											dataa,
											get_uid,
											get_przedmiot,
											get_var1,
											get_var2);
			}
		}
		if(i == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Ten gracz nie ma zadnych przedmiotow.");
		ShowPlayerDialog(playerid, DIALOG_PRZEDMIOTY_ZABIERZ, DIALOG_STYLE_TABLIST_HEADERS, "Przedmioty tego gracza:", dataa, "Zabierz", "Zamknij");
	}
	else return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie policji i strazy granicznej, nie mozesz uzyc tej komendy.");
	return 1;
}

CMD:sprawdz(playerid, params[])
{
	new player = strval(params), data[800], data2[300], tuid = PlayerData[player][pAcceptTowarUID];
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /sprawdz [id]");
	if(GetPlayerFrakcja(playerid, FRAKCJA_POLICJI) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_GRANICZNA)) 
	{
		if(PlayerData[player][pLogged] == false) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz ten nie jest zalogowany na serwerze.");
		

		if(tuid != -1)
		{
			format(data2,sizeof(data2),"{D8D8D8}\
									Nazwa towaru: %s\n\
									Rozladunek w: %s\n\
									Zaladunek w: %s\n\
									Status towaru: %s\n",
									TowarData[tuid][tNazwa],
									TowarData[tuid][tRozladunekW],
									TowarData[tuid][tZaladunekW],
									((TowarData[tuid][tLegalny] == 1) ? ("Legalny") : ("Nie legalny")));
		}
		else
		{
			data2 = "{D8D8D8}Gracz nie przewozi zadnego towaru.";
		}
		format(data,sizeof(data),"{F2F2F2}\
									{D8D8D8}Gracz: %s (ID: %d, UID: %d)\n\n\
									Czy posiada ADR (?): %s\n\
									Ilosc puntkow karnych: %d pkt.\n\
									Status poszukiwania: %d/6\n\
									Czas jazdy: %dh %dmin.\n\
									Dowod osobisty (?): %s\n\
									Paszport (?): %s\n\
									{F2F2F2}Prawo jazdy:{D8D8D8}\n\
									Teoria kat. A: %s\n\
									Teoria kat. B: %s\n\
									Teoria kat. C: %s\n\
									Teoria kat. D: %s\n\
									Teoria kat. L: %s\n\
									Praktyka kat. A: %s\n\
									Praktyka kat. B: %s\n\
									",
									PlayerData[player][pName],
									playerid,
									PlayerData[player][pUID],
									((PlayerData[player][pKartaADR] == 1) ? ("Posiada") : ("Nie posiada")),
									PlayerData[player][pPkt],
									PlayerData[player][pWantedLevel],
									PlayerData[player][pDriveTimeH], PlayerData[player][pDriveTimeM],
									((PlayerData[player][pDowodOsobisty] == 1) ? ("Posiada") : ("Nie posiada")),
									((PlayerData[player][pPaszport] == 1) ? ("Posiada") : ("Nie posiada")), 
									((PlayerData[player][pPrawoJazdyT][PRAWKO_TYPE_A] != 0) ? ("Posiada") : ("Nie posiada")),
									((PlayerData[player][pPrawoJazdyT][PRAWKO_TYPE_B] != 0) ? ("Posiada") : ("Nie posiada")),
									((PlayerData[player][pPrawoJazdyT][PRAWKO_TYPE_C] != 0) ? ("Posiada") : ("Nie posiada")),
									((PlayerData[player][pPrawoJazdyT][PRAWKO_TYPE_D] != 0) ? ("Posiada") : ("Nie posiada")),
									((PlayerData[player][pPrawoJazdyT][PRAWKO_TYPE_L] != 0) ? ("Posiada") : ("Nie posiada")),
									((PlayerData[player][pPrawoJazdyP][PRAWKO_TYPE_A] != 0) ? ("Posiada") : ("Nie posiada")),
									((PlayerData[player][pPrawoJazdyP][PRAWKO_TYPE_B] != 0) ? ("Posiada") : ("Nie posiada")));
		format(data,sizeof(data),"%s\
									Praktyka kat. C: %s\n\
									Praktyka kat. D: %s\n\
									Praktyka kat. L: %s\n\n\n\
									{F2F2F2}Informacje na temat towaru gracza:\n\
									%s\
								",
									data,
									((PlayerData[player][pPrawoJazdyP][PRAWKO_TYPE_C] != 0) ? ("Posiada") : ("Nie posiada")),
									((PlayerData[player][pPrawoJazdyP][PRAWKO_TYPE_D] != 0) ? ("Posiada") : ("Nie posiada")),
									((PlayerData[player][pPrawoJazdyP][PRAWKO_TYPE_L] != 0) ? ("Posiada") : ("Nie posiada")),
									data2);
		ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Sprawdzanie gracza:", data,  "Zamknij", "");
	}
	else return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie policji, strazy granicznej lub strazy miejskiej, nie mozesz uzyc tej komendy.");
	return 1;
}
CMD:scigani(playerid, params[])
{
	new data[128];
	if(GetPlayerFrakcja(playerid, FRAKCJA_POLICJI) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_GRANICZNA) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_MIEJSKA)) 
	{
		data =  "ID\tGracz\tStopien poszukiwania\n";
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(GetPlayerWantedLevel(i) != 0)
			{
				format(data, sizeof(data), "%s%d\t%s\t%d *\n", data, i, PlayerData[i][pName], GetPlayerWantedLevel(i));
			}
		}
		ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_TABLIST_HEADERS, "Poszukiwani:", data, "Zamknij", "");
	}
	else return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie policji i strazy granicznej oraz strazy miejskiej, nie mozesz uzyc tej komendy.");
	return 1;
}

CMD:zgw(playerid, params[])
{
	new player, gwiazdki, powod[30], data[128];
	if(GetPlayerFrakcja(playerid, FRAKCJA_POLICJI) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_GRANICZNA) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_MIEJSKA))
	{
		if(sscanf(params, "ddS(Brak)[30]", player, gwiazdki, powod)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /zgw [id] [gwiazdki (0-6)] [powod]");
		SetPlayerWantedLevel(player, GetPlayerWantedLevel(player) - gwiazdki);
		PlayerData[player][pWantedLevel] = PlayerData[player][pWantedLevel] - gwiazdki;
		
		format(data,sizeof(data),"{a4a4a4}Gracz [%d]%s zdjal Ci poziom poszukiwan o %d gwiazdek. Obecny to %d/6", playerid, PlayerData[playerid][pName], gwiazdki, PlayerData[player][pWantedLevel]);
		SendClientMessage(player, -1, data);
		format(data,sizeof(data),"{a4a4a4}Gracz [%d]%s od teraz posiada stopien poszukiwania %d/6", player, PlayerData[player][pName], PlayerData[player][pWantedLevel]);
		SendClientMessage(playerid, -1, data);
		format(data,sizeof(data),"{a4a4a4}(Frakcja) [%d]%s zmienil stopien poszukiwania dla [%d]%s na %d/6", playerid, PlayerData[playerid][pName], player, PlayerData[player][pName], PlayerData[player][pWantedLevel]);
		SCMToFrakcja(PlayerData[playerid][pFrakcja], -1, data);
	}
	else return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie policji i strazy granicznej oraz strazy miejskiej, nie mozesz uzyc tej komendy.");
	return 1;
}

CMD:skuj(playerid, params[])
{
	new player = strval(params), data[128];
	if(GetPlayerFrakcja(playerid, FRAKCJA_POLICJI) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_GRANICZNA) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_MIEJSKA))
	{
		if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /skuj [id]");
		if(playerid == player) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz skuc samego siebie!");
		if(PlayerData[player][pLogged] == false) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz ten nie jest zalogowany na serwerze.");
		if(GetPlayerVehicleID(player) != 0) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz nie moze byc w pojezdzie.");
		if(!OdlegloscGracze(3.0,playerid,player)) return SendClientMessage(playerid, -1, "{a4a4a4}Jestes zbyt daleko gracza aby wejsc z nim w interakcje.");
			
		if(PlayerData[player][pSkuty] == 0)
		{
			PlayerData[player][pSkuty] = 1;
			SetPlayerSpecialAction(player, SPECIAL_ACTION_CUFFED);
			SetPlayerAttachedObject(player, 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
			
			format(data,sizeof(data),"{C2A2DA}*%s wyciaga kajdanki poczym naklada je z dosc duza sila na rece %s", PlayerData[playerid][pName], PlayerData[player][pName]);
			SCMIC(playerid, 10, -1, data);
			PlayerData[player][pTimerSkuty] = SetTimerEx("TimerPlayerSkuty", 1000, true, "dd", playerid, player);
		}
		else
		{
			SendClientMessage(playerid, -1, "{a4a4a4}Gracz jest juz skuty.");
		}
	}
	else  return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie policji i strazy granicznej oraz strazy miejskiej, nie mozesz uzyc tej komendy.");
	return 1;
}
CMD:odkuj(playerid, params[])
{
	new player = strval(params), data[128];
	if(GetPlayerFrakcja(playerid, FRAKCJA_POLICJI) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_GRANICZNA) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_MIEJSKA)) 
	{
		if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /odkuj [id]");
		if(playerid == player) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz skuc samego siebie!");
		if(PlayerData[player][pLogged] == false) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz ten nie jest zalogowany na serwerze.");
		if(GetPlayerVehicleID(player) != 0) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz nie moze byc w pojezdzie.");
		if(!OdlegloscGracze(3.0,playerid,player)) return SendClientMessage(playerid, -1, "{a4a4a4}Jestes zbyt daleko gracza aby wejsc z nim w interakcje.");
			
		if(PlayerData[player][pSkuty] == 1)
		{
			PlayerData[player][pSkuty] = 0;
			SetPlayerSpecialAction(player, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(player, 0);
			ClearAnimations(player);
			format(data,sizeof(data),"{C2A2DA}*%s podchodzi do %s poczym sciaga z niego kajdanki i chowa je.", PlayerData[playerid][pName], PlayerData[player][pName]);
			SCMIC(playerid, 10, -1, data);
		}
		else
		{
			SendClientMessage(playerid, -1, "{a4a4a4}Gracz nie jest skuty.");
		}
	}
	else return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie policji i strazy granicznej oraz strazy miejskiej, nie mozesz uzyc tej komendy.");
	return 1;
}

	
CMD:s(playerid, params[])
{
	new data[128];
	if(GetPlayerFrakcja(playerid, FRAKCJA_POLICJI) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_GRANICZNA) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_MIEJSKA))
	{
		if(GetPlayerInterior(playerid)!=0) return SendClientMessage(playerid, -1, "Nie mozesz uzywac tej komendy w interiorze.");

		new Float:Pos[3];
		GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(i != playerid || GetPlayerState(i) == PLAYER_STATE_DRIVER || GetVehicleSpeed(GetPlayerVehicleID(i) > 5 || IsPlayerInRangeOfPoint(i, 150.0,Pos[0],Pos[1],Pos[2])))
			{
				new w=GetVehicleSpeed(GetPlayerVehicleID(i));
				format(data,sizeof(data),"{a4a4a4}Twoj pojazd zostal namierzony suszarka. Twoja predkosc wynosi {dedede}%d{a4a4a4}km/h",w);
				SendClientMessage(i,-1,data);
				format(data,sizeof(data),"{a4a4a4}Suszarka namierzyla kierowce: {dedede}[%d]%s {a4a4a4} pojazd: {dedede}%s{a4a4a4} oraz {dedede}%d {a4a4a4}km/h",i,PlayerData[i][pName],CarList[GetVehicleModel(GetPlayerVehicleID(i))-400],w);
				SendClientMessage(playerid,-1,data);
			}
		}
	}
	else return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w grupie policji i strazy granicznej oraz strazy miejskiej, nie mozesz uzyc tej komendy.");
	return 1;
}

CMD:vkorzysci(playerid)
{
	new data[1000];
	data = "\t\n";
	format(data,sizeof(data),"%s\
								1.\tMozliwosc tankowania pojazdu\n\
								2.\tMozliwosc naprawy pojazdu\n\
								3.\tMozliwosc zmiany pogody\n\
								4.\tMozliwosc zmiany godziny\n\
								5.\tMozliwosc uleczenia sie\n\
								6.\tMozliwosc postawienia pojazdu na cztery kola\n\
								7.\tMozliwosc pisania na czacie dla vip'ow\n\
								", data);

	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_TABLIST_HEADERS, "Korzysci (V.I.P):", data,  "Zamknij", "");
	return 1;
}

CMD:vkomendy(playerid)
{
	new data[1000];
	data = "Komenda\tOpis\n";
	format(data,sizeof(data),"%s\
								/vtankuj\tTankujesz Swoj Pojazd\n\
								/vnapraw\tNaprawiasz Swoj Pojazd\n\
								/vpogoda\tZmieniasz pogode\n\
								/vczas\tUstawiasz czas\n\
								/flip\tUstawiasz pojazd na cztery kola\n\
								/c\tCzat Vip'a\n\
								/vulecz\tUleczasz sie\n\
								", data);

	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_TABLIST_HEADERS, "Pomoc (V.I.P):", data,  "Zamknij", "");
	return 1;
}

CMD:vpogoda(playerid, params[])
{
	new type = strval(params);
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /vpogoda [id]");
	if(!GetPlayerVipStatus(playerid)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w posiadaniu konta vip, brak uprawnien do uzywania tej komendy.");
	
	SetPlayerWeather(playerid, type);
	SendClientMessage(playerid, -1, "{a4a4a4}Pogoda zostala zmieniona.");
	return 1;
}

CMD:vc(playerid, params[])
{
	new text[128], data[150];
	if(sscanf(params, "s[128]", text)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /vc [tekst]");
	if(!GetPlayerVipStatus(playerid)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w posiadaniu konta vip, brak uprawnien do uzywania tej komendy.");
	
	format(data,sizeof(data),"(CZAT VIP) [%d]%s pisze: %s", playerid, PlayerData[playerid][pName], text);
	
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(GetPlayerVipStatus(i))
		{
			SendClientMessage(i, -1, data);
		}
	}
	return 1;
}

CMD:vflip(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Wsiadz do pojazdu.");
	if(!GetPlayerVipStatus(playerid)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w posiadaniu konta vip, brak uprawnien do uzywania tej komendy.");

	
	SetVehicleZAngle(vehicleid, 0);
	return 1;
}


CMD:vnapraw(playerid)
{
	new data[128], Float:hp;
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Podjedz blizej do pojazdu ktory chcesz zmodyfikowac.");
	if(!GetPlayerVipStatus(playerid)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w posiadaniu konta vip, brak uprawnien do uzywania tej komendy.");
	BlockCMD(playerid, "vnapraw", 300);
    if(PlayerData[playerid][pBlockCMD] != -1) return 1;
	
	GetVehicleHealth(vehicleid, hp);
	if(hp > 700) return SendClientMessage(playerid, -1, "{a4a4a4}Pojazd ma ponad 700hp.");
	
	SetVehicleHealth(vehicleid, 700);
	
	format(data,sizeof(data),"{C2A2DA}*%s chwyta za narzedzia poczym zaczyna naprawiac pojazd %s", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:vtankuj(playerid)
{
	new data[128];
	new vehicleid = GetPlayerVehicleRange(playerid, 5.0);
	if(vehicleid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Podjedz blizej do pojazdu ktory chcesz zmodyfikowac.");
	if(!GetPlayerVipStatus(playerid)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w posiadaniu konta vip, brak uprawnien do uzywania tej komendy.");
	BlockCMD(playerid, "vtank", 170);
    if(PlayerData[playerid][pBlockCMD] != -1) return 1;
	
	
	VehicleData[vehicleid][vPaliwo] += 15;
	if(VehicleData[vehicleid][vPaliwo] > VehicleData[vehicleid][vPaliwoMax]) 
	{
		VehicleData[vehicleid][vPaliwo] = VehicleData[vehicleid][vPaliwoMax];
	}

	format(data,sizeof(data),"{C2A2DA}*%s chwyta za kanister poczym otwiera bak i wlewa paliwo do pojazdu %s", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:vczas(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /vczas [godzina]");
	if(PlayerData[playerid][pRanga] < RANGA_VIP) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	SetPlayerTime(playerid, strval(params), 0);
	return 1;
}

CMD:vulecz(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /vulecz");
	if(PlayerData[playerid][pRanga] < RANGA_VIP) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	
	SetPlayerHealth(playerid, 100);
	return 1;
}
//Komendy dla graczy.
CMD:komendy(playerid, params[])
{
	new s[1800];
    strcat(s,"{FF8000}/opinie {FFFFFF}- Opinie serwera\n");
    strcat(s,"{FF8000}/nowosci {FFFFFF}- Ostatni dodane rzeczy na serwer\n");
    strcat(s,"{FF8000}/autor {FFFFFF}- Informacje dotyczace Autora Skryptu\n");
	strcat(s,"{FF8000}/o {FFFFFF}- Piszesz na czacie globalnym ooc do wszystkich graczy\n");
	strcat(s,"{FF8000}/b {FFFFFF}- Piszesz na czacie ooc w poblizu znajdujacych sie obok ciebie graczy\n");
	strcat(s,"{FF8000}/me {FFFFFF}- Opisujesz czynnosc [roleplay]\n");
	strcat(s,"{FF8000}/do {FFFFFF}- Czat lokalny\n");
	strcat(s,"{FF8000}/sz {FFFFFF}- Czat lokalny - szept\n");
	strcat(s,"{FF8000}/k {FFFFFF}- Czat lokalny - krzyk\n");
	strcat(s,"{FF8000}/dajpieniadze{FFFFFF}- Dajesz innemu graczowi pieniadze\n");
	strcat(s,"{FF8000}/cb {FFFFFF}- Mowisz na cb radiu\n");
	strcat(s,"{FF8000}/pasy {FFFFFF}- Zapinasz/Odpinasz pasy\n");
	strcat(s,"{FF8000}/zamknij {FFFFFF}- Zamykasz otwierasz drzwi od budynku\n");
	strcat(s,"{FF8000}/dom {FFFFFF}- Otwierasz liste komend dostepnych dla domu\n");
	strcat(s,"{FF8000}/kup {FFFFFF}- Kupujesz budynek\n");
	strcat(s,"{FF8000}/sprzedaj{FFFFFF}- Sprzedajesz budynek\n");
	strcat(s,"{FF8000}/zw {FFFFFF}- Mowisz wszystkim ze zaraz wracasz\n");
	strcat(s,"{FF8000}/jj {FFFFFF}- Mowisz wszystkim ze juz jestes\n");
	strcat(s,"{FF8000}/animacja {FFFFFF}- Otwierasz liste z dostepnymi animacjami\n");
	strcat(s,"{FF8000}/astop {FFFFFF}- wylaczasz aktualna animacje\n");
	strcat(s,"{FF8000}/raport {FFFFFF}- Raport do Administracji na gracza,ÂlamiÂacego prawa serwera\n");
	strcat(s,"{FF8000}/towary {FFFFFF}- Otwierasz liste z towarami\n");
	strcat(s,"{FF8000}/ev {FFFFFF}- Zapisujesz sie na Event Serwerowy\n");
	strcat(s,"{FF8000}/zegnam {FFFFFF}- Zegnasz sie z graczami\n");
	strcat(s,"{FF8000}/witam {FFFFFF}- Witasz sie z graczami\n");
	strcat(s,"{FF8000}/admins {FFFFFF}- Lista Administracji online\n");
	strcat(s,"{FF8000}/p {FFFFFF}- Otwierasz swoj Ekwipunek\n");
	strcat(s,"{FF8000}/v {FFFFFF}- zarzadasz pojazdem\n");
	strcat(s,"{FF8000}/wyrzucklucze {FFFFFF}- Wyrzucasz klucze zapasowe od prywatnego auta\n");
	strcat(s,"{FF8000}/frakcja {FFFFFF}- Otwierasz panel frakcyjny\n");
	strcat(s,"{FF8000}/firma {FFFFFF}- Otwierasz panel firmowy\n");
	strcat(s,"{FF8000}/fonline {FFFFFF}- Otwierasz liste osob online frakcyjnych\n");
	strcat(s,"{FF8000}/odczep {FFFFFF}- Odczepiasz naczepe\n");
	strcat(s,"{FF8000}/raport {FFFFFF}- Wysylasz raport na gracz do Administracji\n");
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Lista podstawowych komend", s, "Zamknij",#);
	return 1;
}

CMD:nowosci(playerid, params[])
{
	new s[512];
	strcat(s,"{FFFFFF}1.{ADBFC2}Pierwsza publikacja GM\n");
	strcat(s,"{FFFFFF}2.{ADBFC2}Poprawki oraz naprawa zgloszonych problemow\n");
	ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Nowosci na Serwerze", s, "Zamknij",#);
	return 1;
}

CMD:opinie(playerid)
{
	new data[500] = "#\tAutor\tTresc\nDodaj wlasna opinie...\t#\t#\n", dataa[200], x = 1, get_uid, get_autor[MAX_PLAYER_NAME], get_opinia[30];
	format(dataa,sizeof(dataa),"SELECT `uid`, `autor`, `tresc` FROM `data_opinie`");
	mysql_query(dataa);
	mysql_store_result();
	
	while(mysql_fetch_row(dataa))
	{
		sscanf(dataa, "p<|>is[24]s[30]", get_uid, get_autor, get_opinia);
		
		PlayerData[playerid][pWybieraOpinie][x] = get_uid;
		format(data,sizeof(data),"%s%d\t%s\t%s\n", data, get_uid, get_autor, get_opinia);
		x++;

	}
	mysql_free_result();
		
	ShowPlayerDialog(playerid, DIALOG_OPINIE_LISTA, DIALOG_STYLE_TABLIST_HEADERS, "Opinie serwera (lista):", data, "Wybierz", "Zamknij");
	return 1;
}
CMD:telefon(playerid)
{
	if(GetPlayerTelefon(playerid) == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz telefonu.");
	
	if(PlayerData[playerid][pShowPanelTelefon] == true)
	{
		PlayerTelefon1(playerid, 3);
		PlayerData[playerid][pShowPanelTelefon] = false;
	}
	else
	{
		PlayerTelefon1(playerid, 2);
		PlayerData[playerid][pShowPanelTelefon] = true;
	}
	return 1;
}

CMD:konto(playerid)
{
	new data[1000], str_frakcja[50], str_firma[50], str_its_vip[10], str_time_vip[50], Days, Hours, Minutes, CzasVipa = PlayerData[playerid][pVipTime] - gettime(), Float:hp;
	
	GetPlayerHealth(playerid, hp);
	
	
	switch(PlayerData[playerid][pFrakcja])
	{	
		case 0: str_frakcja = "Brak";
		case 1: str_frakcja = ""#GRUPA_LEVEL_1"";
		case 2: str_frakcja = ""#GRUPA_LEVEL_2"";
		case 3: str_frakcja = ""#GRUPA_LEVEL_3"";
		case 4: str_frakcja = ""#GRUPA_LEVEL_4"";
		case 5: str_frakcja = ""#GRUPA_LEVEL_5"";
		case 6: str_frakcja = ""#GRUPA_LEVEL_6"";
		case 7: str_frakcja = ""#GRUPA_LEVEL_7"";
		case 8: str_frakcja = ""#GRUPA_LEVEL_8"";
		case 9: str_frakcja = ""#GRUPA_LEVEL_9"";
		case 10: str_frakcja = ""#GRUPA_LEVEL_10"";
	}
	
	if(PlayerData[playerid][pFirma] == 0)
	{
		str_firma = "Brak";
	}
	else
	{
		new fuid = PlayerData[playerid][pFirma];
		format(str_firma,sizeof(str_firma), "%s", FirmaData[fuid][fName]);
	}
		
		
	if(GetPlayerVipStatus(playerid) == 0)
	{
		str_its_vip = "Nie";
		str_time_vip = "";
	}
	else
	{
		if(CzasVipa >= 86400)
		{
			Days = CzasVipa / 86400;
			CzasVipa = CzasVipa - (Days * 86400);
		}
		if(CzasVipa >= 3600)
		{
			Hours = CzasVipa / 3600;
			CzasVipa = CzasVipa - (Hours * 3600);
		}
		if(CzasVipa >= 60)
		{
			Minutes = CzasVipa / 60;
			CzasVipa = CzasVipa - (Minutes * 60);
		}
		
		str_its_vip = "Tak";
		format(str_time_vip, sizeof(str_time_vip), "  (%d dni, %d godzin, %d minut)", Days, Hours, Minutes);
	}
	format(data,sizeof(data),"\
								Postac: %s\n\
								UID: %d\n\
								SAMPID: %d\n\
								IP: %s\n\
								Identyfikator: %s\n\
								VIP: %s%s\n\
								Glod: %d\n\
								Sen: %d\n\
								Stan HP: %.1f%\n\
								Sila: %d\n\
								Skin ID: %d\n\
								Score:  %d\n\
								Poziom: %d\n\
								Pieniadze (gotowka): $%d\n\
								Pieniadze (bank): $%d\n\
								Ilosc prywatnych pojazdow: %d\n\
								Ilosc prywatnych domow: %d\n\
								Frakcja: %s\n\
								Firma: %s\n\
								Czas gry (online): %dh %d min\n\
								Czas gry (lacznie): %dh %d min\n\
								Czas sluzby (na skinie frakcyjnym): %dh %d min\n\
	",
	PlayerData[playerid][pName],
	PlayerData[playerid][pUID],
	playerid,
	PlayerData[playerid][pIP],
	PlayerData[playerid][pGPCI],
	str_its_vip, str_time_vip,
	PlayerData[playerid][pGlod],
	PlayerData[playerid][pSen],
	hp,
	PlayerData[playerid][pSila],
	GetPlayerSkin(playerid),
	GetPlayerScore(playerid),
	PlayerData[playerid][pLevel],
	GetPlayerMoney(playerid),
	PlayerData[playerid][pCashBank],
	PlayerData[playerid][pPrivCars],
	PlayerData[playerid][pPrivHouse],
	str_frakcja,
	str_firma,
	PlayerData[playerid][pCzasGryGodz], PlayerData[playerid][pCzasGryMin],
	PlayerData[playerid][pCzasGodzin], PlayerData[playerid][pCzasMinut],
	PlayerData[playerid][pCzasSluzbaGodz], PlayerData[playerid][pCzasSluzbaMin]
	);
	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Statystyki konta:", data,  "Zamknij", "");
	return 1;
}


CMD:astop(playerid) return ClearAnimations(playerid);
CMD:animacja(playerid) return cmd_anim(playerid);
CMD:anim(playerid)
{
	new data[650];
	for(new i = 0; i < sizeof(Animacja); i++)
	{
		format(data, sizeof(data), "%s%s\n", data, Animacja[i][Komenda]);
	}
	ShowPlayerDialog(playerid, DIALOG_ANIMACJE, DIALOG_STYLE_LIST, "Lista animacji:", data,  "Wybierz", "Zamknij");
	return 1;
}
	
CMD:dom(playerid)
{
	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Dom (komendy):", "\
																			Dostepne komendy:\n\n\
																			/kup - kupujesz budynek\n\
																			/sprzedaj - sprzedajesz budynek\n\
																			/zamknij - otwierasz lub zamykasz budynek\n\
																			/opis - ustawiasz opis dla swojego budynku\n\
																			", "Zamknij", "");
	return 1;
}

CMD:raport(playerid, params[]) return cmd_report(playerid, params);
CMD:report(playerid, params[])
{
	new data[128+1], text[128+1], id;
	if(sscanf(params, "Ds[128]", id, text)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /report [Id] [Tresc]");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz o podanym ID nie jest polaczony z serwerem!");
	if(id == playerid) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz zlozyc raportu na samego siebie!");
	
	new name[MAX_PLAYER_NAME];
	GetPlayerName(id, name, sizeof(name));
	
	format(data,sizeof(data),"{ff0000}[REPORT] Gracz [%d]%s wysyla report na gracza [%d]%s o tresci: %s", playerid, PlayerData[playerid][pName], id, name, text);
	
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(PlayerData[i][pRanga] <= RANGA_POMOCNIK) continue;
		SendClientMessage(i, -1, data);
	}
	return 1;
}

CMD:witam(playerid)
{
	new data[128];
	format(data,sizeof(data), "[PTR-Serw]{33CCFF}[%d]%s {FFFFFF}wita wszystkich na serwerze.", playerid, PlayerData[playerid][pName]);
	SendClientMessageToAll(-1, data);
	return 1;
}
CMD:zegnam(playerid)
{
	new data[128];
	format(data,sizeof(data), "[PTR-Serw]{33CCFF}[%d]%s {FFFFFF}zegna wszystkich graczy.", playerid, PlayerData[playerid][pName]);
	SendClientMessageToAll(-1, data);
	return 1;
}
CMD:jj(playerid)
{
	new data[128];
	format(data,sizeof(data), "[PTR-Serw]{33CCFF}[%d]%s {FFFFFF}juz jest.", playerid, PlayerData[playerid][pName]);
	SendClientMessageToAll(-1, data);
	TogglePlayerControllable(playerid, true);
	GameTextForPlayer(playerid, "~g~AFK OFF", 1500, 3);
	return 1;
}
CMD:zw(playerid)
{
	new data[128];
	format(data,sizeof(data), "[PTR-Serw]{33CCFF}[%d]%s {FFFFFF}zaraz wraca.", playerid, PlayerData[playerid][pName]);
	SendClientMessageToAll(-1, data);
	TogglePlayerControllable(playerid, false);
	GameTextForPlayer(playerid, "~r~AFK", 999999*999999, 3);
	return 1;
}

CMD:ts(playerid)
{
	GameTextForPlayer(playerid, "SERWER TS", 5000, 2);
	return 1;
}
CMD:forum(playerid)
{
	GameTextForPlayer(playerid, "SERWER FORUM", 5000, 2);
	return 1;
}

CMD:bar2(playerid,params[])
{
		
        LoopingAnim(playerid, "BAR", "Barserve_bottle", 4.000000, 0, 1, 1, 1, -1);
        return 1;
        #pragma unused params
}
 
CMD:bar3(playerid,params[])
{
        LoopingAnim(playerid, "BAR", "Barserve_give", 4.000000, 0, 1, 1, 1, -1);
        return 1;
        #pragma unused params
}
 
CMD:opalaj(playerid,params[])
{
        LoopingAnim(playerid, "BEACH", "ParkSit_W_loop", 4.000000, 0, 1, 1, 1, -1);

        return 1;
        #pragma unused params
}
 
CMD:opalaj2(playerid,params[])
{
        LoopingAnim(playerid, "BEACH", "SitnWait_loop_W", 4.000000, 0, 1, 1, 1, -1);

        return 1;
        #pragma unused params
}
 
CMD:rozmowaauto(playerid,params[])
{
        LoopingAnim(playerid, "CAR_CHAT", "car_talkm_loop", 4.000000, 0, 1, 1, 1, -1);
        return 1;
        #pragma unused params
}
 
CMD:szafka(playerid,params[])
{
        LoopingAnim(playerid, "COP_AMBIENT", "Copbrowse_nod", 4.000000, 0, 1, 1, 1, 0);
        return 1;
        #pragma unused params
}
 
CMD:zegarek(playerid,params[])
{
        LoopingAnim(playerid, "COP_AMBIENT", "Coplook_nod", 4.000000, 0, 1, 1, 1, 0);
        return 1;
        #pragma unused params
}
 
CMD:cpun2(playerid,params[])
{
        LoopingAnim(playerid, "CRACK", "crckdeth1", 4.000000, 0, 1, 1, 1, 0);
        return 1;
        #pragma unused params
}
 
CMD:cpun3(playerid,params[])
{
        LoopingAnim(playerid, "CRACK", "crckdeth3", 4.000000, 0, 1, 1, 1, 0);
        return 1;
        #pragma unused params
}
 
CMD:cpun4(playerid,params[])
{
        LoopingAnim(playerid, "CRACK", "crckdeth4", 4.000000, 0, 1, 1, 1, 0);
        return 1;
        #pragma unused params
}
 
CMD:cpun5(playerid,params[])
{
        LoopingAnim(playerid, "CRACK", "crckidle4", 4.000000, 0, 1, 1, 1, 0);
        return 1;
        #pragma unused params
}
 
CMD:rolki(playerid,params[])
{
        LoopingAnim(playerid, "SKATE", "skate_sprint", 4.0999, 1, 1, 1, 1, 1);
        return 1;
        #pragma unused params
}
 
CMD:skok3(playerid,params[]){
        LoopingAnim(playerid, "DAM_JUMP", "Jump_Roll", 4.000000, 0, 1, 1, 1, 0);
        return 1;
        #pragma unused params
}
 
CMD:taniec(playerid,params[])
{
        LoopingAnim(playerid, "DANCING", "bd_clap", 4.000000, 1, 1, 1, 1, 1);
        return 1;
        #pragma unused params
}
 
CMD:taniec2(playerid,params[])
{
        LoopingAnim(playerid, "DANCING", "bd_clap1", 4.000000, 1, 1, 1, 1, 1);
        return 1;
        #pragma unused params
}
 
CMD:taniec3(playerid,params[])
{
        LoopingAnim(playerid, "DANCING", "DAN_Down_A", 4.000000, 1, 1, 1, 1, 1);
        return 1;
        #pragma unused params
}
 
CMD:taniec4(playerid,params[])
{
        LoopingAnim(playerid, "DANCING", "DAN_Left_A", 4.000000, 1, 1, 1, 1, 1);
        return 1;
        #pragma unused params
}
 
CMD:taniec5(playerid,params[])
{
        LoopingAnim(playerid, "DANCING", "DAN_Right_A", 4.000000, 1, 1, 1, 1, 1);
        return 1;
        #pragma unused params
}
 
CMD:taniec6(playerid,params[])
{
        LoopingAnim(playerid, "DANCING", "DAN_Up_A", 4.000000, 1, 1, 1, 1, 1);
        return 1;
        #pragma unused params
}
 
CMD:taniec7(playerid,params[])
{
        LoopingAnim(playerid, "DANCING", "dnce_M_a", 4.000000, 1, 1, 1, 1, 1);
        return 1;
        #pragma unused params
}
 
CMD:grubas(playerid,params[])
{
        LoopingAnim(playerid, "FAT", "FatWalk", 4.000000, 1, 1, 1, 1, 1);
        return 1;
        #pragma unused params
}
 
CMD:grubas2(playerid,params[])
{
        LoopingAnim(playerid, "FAT", "FatRun", 4.000000, 1, 1, 1, 1, 1);
        return 1;
        #pragma unused params
}
 
CMD:jedz2(playerid,params[])
{
        LoopingAnim(playerid, "FOOD", "FF_Die_Bkw", 4.000000, 0, 1, 1, 1, 0);
        return 1;
        #pragma unused params
}
 
CMD:jedz3(playerid,params[])
{
        LoopingAnim(playerid, "FOOD", "FF_Sit_Eat1", 4.000000, 0, 1, 1, 1, 0);
        return 1;
        #pragma unused params
}
 
CMD:rece4(playerid,params[])
{
        LoopingAnim(playerid, "GANGS", "hndshkfa", 4.000000, 0, 1, 1, 1, 0);
        return 1;
        #pragma unused params
}
 
CMD:rece5(playerid,params[])
{
        LoopingAnim(playerid, "GHANDS", "gsign1", 4.000000, 0, 1, 1, 1, 0);
        return 1;
        #pragma unused params
}
 
CMD:rece6(playerid,params[])
{
        LoopingAnim(playerid, "GHANDS", "gsign1LH", 4.000000, 0, 1, 1, 1, 0);
        return 1;
        #pragma unused params
}
 
CMD:krzeslo2(playerid,params[])
{
        LoopingAnim(playerid, "JST_BUISNESS", "girl_02", 4.000000, 1, 1, 1, 1, 0);
        return 1;
        #pragma unused params
}
 
CMD:turlaj(playerid,params[])
{
        return 1;
        #pragma unused params
}
 
CMD:boks(playerid,params[])
{
        LoopingAnim(playerid, "GYMNASIUM", "GYMshadowbox", 4.000000, 1, 1, 1, 1, 0);
        return 1;
        #pragma unused params
}
 
CMD:kopniak(playerid,params[])
{
        LoopingAnim(playerid, "POLICE", "Door_Kick", 4.000000, 0, 1, 1, 1, 0);
        return 1;
        #pragma unused params
}
 
CMD:opalaj3(playerid,params[])
{
        LoopingAnim(playerid, "SUNBATHE", "ParkSit_W_idleA", 4.000000, 0, 1, 1, 1, 0);
        return 1;
        #pragma unused params
}
 
CMD:swat(playerid,params[])
{
        LoopingAnim(playerid, "SWAT", "swt_breach_01", 4.000000, 0, 1, 1, 1, 0);
        return 1;
        #pragma unused params
}
 
CMD:swat2(playerid,params[])
{
        LoopingAnim(playerid, "SWAT", "swt_breach_02", 4.000000, 0, 1, 1, 1, 0);
        return 1;
        #pragma unused params
}
 
CMD:swat3(playerid,params[])
{
        LoopingAnim(playerid, "SWAT", "swt_breach_03", 4.000000, 0, 1, 1, 1, 0);
        return 1;
        #pragma unused params
}
 
CMD:skok2(playerid,params[]){
        LoopingAnim(playerid, "DAM_JUMP","DAM_Launch",4.1,0,1,1,1,1); // Umierasz
        return 1;
        #pragma unused params
}
 
CMD:trup2(playerid,params[]){
        LoopingAnim(playerid, "SWAT","gnstwall_injurd",4.0,1,0,0,0,0); // Umierasz
        return 1;
        #pragma unused params
}
 
CMD:ratunku(playerid,params[])
{
        LoopingAnim(playerid,"BD_FIRE","BD_PaniKOLOR_03",4.0,1,0,0,0,0); // Ratunku
        return 1;
        #pragma unused params
}
 
CMD:trup(playerid,params[])
{
        LoopingAnim(playerid, "WUZI", "CS_Dead_Guy", 4.1,0,1,1,1,1); // Umierasz
        return 1;
        #pragma unused params
}
 
CMD:calus(playerid,params[])
{
        LoopingAnim(playerid, "KISSING", "Playa_Kiss_02", 4.0,0,0,0,0,0); // CAlOWANIE
        return 1;
        #pragma unused params
}
 
CMD:sikaj(playerid,params[])
{
        SetPlayerSpecialAction(playerid,68);
        return 1;
        #pragma unused params
}
 
CMD:krzeslo(playerid,params[])
{
        LoopingAnim(playerid,"INT_OFFICE","OFF_Sit_Idle_Loop",4.0,1,0,0,0,0); // Krzeslo
        return 1;
        #pragma unused params
}
 
CMD:rece(playerid,params[])
{
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
        return 1;
        #pragma unused params
}
 
CMD:wankin(playerid,params[])
{
        LoopingAnim(playerid, "PAULNMAC", "wank_loop", 4.0,1,0,0,0,0); // Walenie konia
        return 1;
        #pragma unused params
}
 
CMD:wankout(playerid,params[])
{
        LoopingAnim(playerid, "PAULNMAC", "wank_out", 4.0, 0, 0, 0, 0, 0); // Wytrysk
        return 1;
        #pragma unused params
}
 
CMD:cellin(playerid,params[])
{
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
        return 1;
        #pragma unused params
}
 
CMD:piwo(playerid,params[])
{
        SetPlayerDrunkLevel(playerid,1000000);
        KillTimer(GetPVarInt(playerid, "DrunkTimer"));
        SetPVarInt(playerid, "DrunkTimer", SetTimerEx("NotDrunk",30000,0,"i",playerid));
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
        return 1;
        #pragma unused params
}
 
CMD:wino(playerid,params[])
{
        SetPlayerDrunkLevel(playerid,1000000);
        KillTimer(GetPVarInt(playerid, "DrunkTimer"));
        SetPVarInt(playerid, "DrunkTimer", SetTimerEx("NotDrunk",60000,0,"i",playerid));
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
        return 1;
        #pragma unused params
}

forward timerbw(playerid);
public timerbw(playerid)
{
	//BW
	if(PlayerData[playerid][pDeath] == true)
	{
		PlayerData[playerid][pDeathTime]--;
		PlayerData[playerid][pDeath] = false;
		SetCameraBehindPlayer(playerid);
		SetPlayerHealth(playerid, 100);
		SetPlayerDrunkLevel(playerid, 100);
		ClearAnimations(playerid);
		TogglePlayerControllable(playerid, true);
		PlayerData[playerid][pGlod] = 100;
		PlayerData[playerid][pSen] = 100;
		return 1;
	}
	return 1;
}

forward NotDrunk(playerid);
public NotDrunk(playerid)
{
        SetPlayerDrunkLevel(playerid,0);
        KillTimer(GetPVarInt(playerid, "DrunkTimer"));
        return 1;
}
 
CMD:papieros(playerid,params[])
{
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
        return 1;
        #pragma unused params
}
 
CMD:sprunk(playerid,params[])
{
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
        return 1;
        #pragma unused params
}
 
CMD:cellout(playerid,params[])
{
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
        return 1;
        #pragma unused params
}
 
CMD:drunk(playerid,params[])
{
        LoopingAnim(playerid,"PED","WALK_DRUNK",4.0,1,1,1,1,1);
        return 1;
        #pragma unused params
}
 
CMD:bomb(playerid,params[])
{
        ClearAnimations(playerid);
        OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0); // Podkladasz bombe.
        return 1;
        #pragma unused params
}
 
CMD:aresztuj(playerid,params[])
{
        LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1); // aresztujesz kogos.
        return 1;
        #pragma unused params
}
 
CMD:rap(playerid,params[])
{
        LoopingAnim(playerid, "RAPPING", "RAP_B_Loop", 4.0,1,0,0,0,0); // Rapujesz
        return 1;
        #pragma unused params
}
 
CMD:lookout(playerid,params[])
{
        OnePlayAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0); // Patrzysz czy nie ma policji.
        return 1;
        #pragma unused params
}
 
CMD:napada(playerid)
{
        LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0); // Napad
        return 1;
}
 
CMD:rece2(playerid,params[])
{
        LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1); // Rece
        return 1;
        #pragma unused params
}
 
CMD:lez(playerid,params[])
{
        LoopingAnim(playerid,"SUNBATHE","batherdown",4.1,0,1,1,1,1); // Lez
        return 1;
        #pragma unused params
}
 
CMD:hide(playerid,params[])
{
        LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0); // Oslaniasz sie.
        return 1;
        #pragma unused params
}
 
CMD:rzygaj(playerid,params[])
{
        OnePlayAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0); // Rzygasz
        return 1;
        #pragma unused params
}
 
CMD:jedz(playerid,params[])
{
        OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0); // jesz buregera
        return 1;
        #pragma unused params
}
 
CMD:deal(playerid,params[])
{
        OnePlayAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0); // Dilujesz
        return 1;
        #pragma unused params
}
 
CMD:cpun(playerid,params[])
{
        LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0); // Cpun
        return 1;
        #pragma unused params
}
 
CMD:smoke(playerid,params[])
{
        LoopingAnim(playerid,"SMOKING","M_smklean_loop",4.0, 1, 0, 0, 0, 0); // Palisz
        return 1;
        #pragma unused params
}
 
CMD:fsmoke(playerid,params[])
{
        LoopingAnim(playerid,"SMOKING","F_smklean_loop",4.0, 1, 0, 0, 0, 0); // Palisz
        return 1;
        #pragma unused params
}
 
CMD:smoke2(playerid,params[])
{
        LoopingAnim(playerid,"SMOKING","M_smkstnd_loop",4.0, 1, 0, 0, 0, 0); // Palisz
        return 1;
        #pragma unused params
}
 
CMD:rece3(playerid,params[])
{
        LoopingAnim(playerid,"DAM_JUMP","DAM_Dive_Loop",4.0, 1, 0, 0, 0, 0); // Palisz
        return 1;
        #pragma unused params
}
 
CMD:siadaj(playerid,params[])
{
        LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0); // Siadasz
        return 1;
        #pragma unused params
}
 
CMD:chat(playerid,params[])
{
        LoopingAnim(playerid,"PED","IDLE_CHAT", 4.0,1,0,0,0,0);
        return 1;
        #pragma unused params
}
 
CMD:fucku(playerid,params[])
{
        OnePlayAnim(playerid,"PED","fucku",4.0,0,0,0,0,0);
        return 1;
        #pragma unused params
}
 
CMD:taichi(playerid,params[])
{
        LoopingAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
        return 1;
        #pragma unused params
}
 
CMD:pij(playerid,params[])
{
        LoopingAnim(playerid,"BAR","dnk_stndF_loop",4.0,1,0,0,0,0);
        return 1;
        #pragma unused params
}
 
CMD:dance(playerid,params[])
{
        new dance;
        if(sscanf(params,"d",dance) || dance < 1 || dance > 4)  return SendClientMessage(playerid, -1, "{a4a4a4}Uzyj: /dance [1-4]");
 
        switch(dance)
        {
            case 1:
                {
                        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
                }
                case 2:
                {
                        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
                }
                case 3:
                {
                        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
                }
                case 4:
                {
                        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
                }
        }
        return 1;
}

CMD:odczep(playerid)
{
	new v=GetPlayerVehicleID(playerid);
	if(GetVehicleModel(v)==403||GetVehicleModel(v)==514||GetVehicleModel(v)==515)//ciezarowe
	{
		if(!GetVehicleTrailer(v)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie masz podczepionej naczepy.");
		if(GetVehicleSpeed(v) > 3) return SendClientMessage(playerid, -1, "{a4a4a4}Zatrzymaj sie, aby moc to zrobic.");
		DetachTrailerFromVehicle(v);
		return 1;
	}
	else
	{
		SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie w odpowiednim pojezdzie, aby to zrobic.");
	}
	return 1;
}


CMD:fonline(playerid, params[])
{
	new data[1000] = "ID\tNick\tFrakcja\n", str_frakcja[30];
		
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(PlayerData[i][pLogged] == true && PlayerData[i][pFrakcja] != 0 && PlayerData[i][pSluzba] == true)
		{
			switch(PlayerData[i][pFrakcja])
			{
				case 1: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_1);
				case 2: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_2);
				case 3: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_3);
				case 4: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_4);
				case 5: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_5);
				case 6: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_6);
				case 7: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_7);
				case 8: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_8);
			}
			format(data,sizeof(data),"%s\
										%d\t\
										%s\t\
										%s\t\
										", data, i, PlayerData[i][pName], str_frakcja);
		}
	}
	ShowPlayerDialog(playerid, 9999 ,DIALOG_STYLE_TABLIST_HEADERS,"Frakcje online:", data, "Zamknij", "");
	return 1;
}
	
CMD:frakcja(playerid)
{
	if(PlayerData[playerid][pFrakcja] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w zadnej frakcji.");
	
	if(PlayerData[playerid][pShowPanelFrakcji] == true)
	{
		PlayerFrakcjaPanel(playerid, 2);
		PlayerData[playerid][pShowPanelFrakcji] = false;
	}
	else
	{
		PlayerFrakcjaPanel(playerid, 1);
		PlayerData[playerid][pShowPanelFrakcji] = true;
	}
	return 1;
}
	

CMD:firma(playerid)
{
	if(PlayerData[playerid][pFirma] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w zadnej firmie.");
	
	if(PlayerData[playerid][pShowPanelFirmy] == true)
	{
		PlayerFirmaPanel(playerid, 2);
		PlayerData[playerid][pShowPanelFirmy] = false;
	}
	else
	{
		PlayerFirmaPanel(playerid, 1);
		PlayerData[playerid][pShowPanelFirmy] = true;
	}
	return 1;
}

CMD:kasyno(playerid)
{
	new buid = PlayerData[playerid][pBuildEnterUID];
	if(buid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w budynku kasyna.");
	if(BudynekData[buid][bType] != 1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes w budynku kasyna.");
	

	if(PlayerData[playerid][pShowPanelKasyna] == true)
	{
		PlayerKasynoPanel(playerid, 2);
		PlayerData[playerid][pShowPanelKasyna] = false;
	}
	else
	{
		PlayerKasynoPanel(playerid, 1);
		PlayerData[playerid][pShowPanelKasyna] = true;
	}
	return 1;
}

CMD:wyrzucklucze(playerid)
{
	if(PlayerData[playerid][pKluczeCar] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Nie masz zadnych kluczy.");
	PlayerData[playerid][pKluczeCar] = 0;
	new data[128];
	format(data,sizeof(data),"{C2A2DA}*%s wyciaga klucze z kieszeni i wyrzuca je.", PlayerData[playerid][pName]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}


CMD:v(playerid)
{
	new vehicleid = GetPlayerVehicleRange(playerid, 5), data[400], naglowek[50] = "Panel zarzadzania pojazdu:";
	if(GetPlayerVehicleID(playerid) == 0 && GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes kierowca zadnego pojazdu");
//	if(IsVehicleATrailer(vehicleid)) return SendClientMessage(playerid, -1, "{a4a4a4}Ta komenda nie dziala na naczepy!");
	if(vehicleid != -1)
	{
		PlayerVehicleInfo(playerid, 1, vehicleid);
		format(naglowek,sizeof(naglowek), "Pojazd: %s (V: %d)", CarList[GetVehicleModel(vehicleid)-400], vehicleid);
	
		data = "#\t#\n";
		format(data,sizeof(data),"%s\
								1\tWlacz/wylacz swiatla\n\
								2\tOtworz/zamknij maske\n\
								3\tOtworz/zamknij bagaznik\n\
								4\tOtworz/zamknij drzwi\n\
								5\tSprzedaj pojazd graczowi\n\
								6\tDaj klucze innemu graczowi\n\
								7\tZabierz klucze innemu graczowi\n\
								8\tZaparkuj ten pojazd\n\
								9\tPodpisz ten pojazd pod firme\n\
								10\tOdpisz ten pojazd od firmy\n\
								11\tZobacz zawartosc bagaznika\n\
								12\tNamierz lokalizacje pojazdu\n\
		", data);
		
		ShowPlayerDialog(playerid, DIALOG_VEHICLE, DIALOG_STYLE_TABLIST_HEADERS, naglowek, data,  "Wybierz", "Zamknij");
	}
	/*else
	{
		new dataa[1000], i, get_uid, get_sampid, get_model, Float:get_hp, Float:get_przebieg;
		format(data,sizeof(data),"SELECT uid, sampid, model, hp, przebieg FROM `data_vehicles` where `owneruid` = '%d' and `private` = '1'", PlayerData[playerid][pUID]);
		mysql_query(data);
		mysql_store_result();

		dataa = "uid\tpojazd\thp\tprzebieg\n";
		while(mysql_fetch_row(data))
		{
			sscanf(data, "p<|>iiiff", get_uid, get_sampid, get_model, get_hp, get_przebieg);
			PlayerData[playerid][pCheckVehicleUID][i]=get_uid;
			i++;
						
						
			if(get_sampid != -1)
			{
				GetVehicleHealth(get_sampid, VehicleData[get_sampid][vHP]);
				format(dataa,sizeof(dataa),"%s{04B404}%d\t%s\t%f\t%f\n",
						dataa,
						get_uid,
						CarList[get_model-400],
						VehicleData[get_sampid][vHP],
						VehicleData[get_sampid][vPrzebieg]);
			}
			else
			{
				format(dataa,sizeof(dataa),"%s{FF0000}%d\t%s\t%f\t%f\n",
					dataa,
					get_uid,
					CarList[get_model-400],
					get_hp,
					get_przebieg);
            }
		}
			if(i == 0) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Namierzanie pojazdu: (priv):", "Nie masz zadnych pojazdow prywatnych.",  "Zamknij", "");
			ShowPlayerDialog(playerid, DIALOG_VEHICLE_NAMIERZ, DIALOG_STYLE_TABLIST_HEADERS, "Namierzanie pojazdu: (priv):", dataa, "GPS", "Zamknij");
	}*/
    else
    {
        ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz stac przy pojeĹşdzie", "OK", #);
    }
	return 1;
}


CMD:reczny(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(handbrake[vehicleid] == false)
	{
		GameTextForPlayer(playerid,"~r~ZACIAGNALES RECZNY",3000,6);
		GetVehiclePos(vehicleid, handbrake_pos[vehicleid][0], handbrake_pos[vehicleid][1], handbrake_pos[vehicleid][2]);
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, 0, 0, alarm, doors, bonnet, boot, objective); //wylaczanie silnika
		GetVehicleZAngle(vehicleid, handbrake_pos[vehicleid][3]);
		SetVehicleVelocity(vehicleid, 0, 0, 0);
		handbrake[vehicleid] = true;
    }
    else if(handbrake[vehicleid] == true)
    {
   		GameTextForPlayer(playerid,"~g~ODCIAGNALES RECZNY",3000,6);
		handbrake[vehicleid] = false;
		handbrake_pos[vehicleid][0] = 0.0;
		handbrake_pos[vehicleid][1] = 0.0;
		handbrake_pos[vehicleid][2] = 0.0;
		handbrake_pos[vehicleid][3] = 0.0;
	}
    return 1;
}

	//Typ 1  = jednoslady
	//Typ 2 = sportowe
	//Typ 3 = osobowe
	//Typ 4 = dostawcze
	//Typ 5 = reszta nienadajaca sie do salonu (auta lspd itp)
	
	
CMD:pojazd(playerid)
{
	new data[400], dataa[1000], i = 0, get_uid, get_sampid, get_model, Float:get_hp, Float:get_przebieg, get_owneruid;
	format(data,sizeof(data),"SELECT uid, sampid, model, hp, przebieg, owneruid FROM `data_vehicles` where `owneruid` = '%d' and `private` = '1' and `type` = '1' or `type` = '2' or `type` = '3'", PlayerData[playerid][pUID]);
	mysql_query(data);
	mysql_store_result();
	
	dataa = "uid\tpojazd\thp\tprzebieg\n";
	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>iiiffi", get_uid, get_sampid, get_model, get_hp, get_przebieg, get_owneruid);
		PlayerData[playerid][pCheckVehicleUID][i]=get_uid;
		i++;
		if(get_owneruid != -1)
		{
			if(get_sampid != -1)
			{
				GetVehicleHealth(get_sampid, VehicleData[get_sampid][vHP]);
				format(dataa,sizeof(dataa),"%s{04B404}%d\t%s\t%f\t%f\n",
				dataa,
				get_uid,
				CarList[get_model-400],
				VehicleData[get_sampid][vHP],
				VehicleData[get_sampid][vPrzebieg]);
			}
			else
			{
				format(dataa,sizeof(dataa),"%s{FF0000}%d\t%s\t%f\t%f\n",
				dataa,
				get_uid,
				CarList[get_model-400],
				get_hp,
				get_przebieg);
			}
		}
	}
	if(i == 0) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Panel zarzadzania pojazdami (lista-priv):", "Nie posiadasz zadnych prywatnych pojazdow.",  "Zamknij", "");
	ShowPlayerDialog(playerid, DIALOG_VEHICLES_LISTA, DIALOG_STYLE_TABLIST_HEADERS, "Panel zarzadzania pojazdami (lista-priv):", dataa, "Wybierz", "Zamknij");
	return 1;
}
CMD:van(playerid)
{
	new data[400], dataa[1000], i = 0, get_uid, get_sampid, get_model, Float:get_hp, Float:get_przebieg;
	format(data,sizeof(data),"SELECT uid, sampid, model, hp, przebieg FROM `data_vehicles` where `owneruid` = '%d' and `private` = '1' and `type` = '4'", PlayerData[playerid][pUID]);
	mysql_query(data);
	mysql_store_result();
	
	dataa = "uid\tpojazd\thp\tprzebieg\n";
	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>iiiff", get_uid, get_sampid, get_model, get_hp, get_przebieg);
		PlayerData[playerid][pCheckVehicleUID][i]=get_uid;
		i++;
		
		if(get_sampid != -1)
		{
			GetVehicleHealth(get_sampid, VehicleData[get_sampid][vHP]);
			format(dataa,sizeof(dataa),"%s{04B404}%d\t%s\t%f\t%f\n",
			dataa,
			get_uid,
			CarList[get_model-400],
			VehicleData[get_sampid][vHP],
			VehicleData[get_sampid][vPrzebieg]);
		}
		else
		{
			format(dataa,sizeof(dataa),"%s{FF0000}%d\t%s\t%f\t%f\n",
			dataa,
			get_uid,
			CarList[get_model-400],
			get_hp,
			get_przebieg);
		}
	}
	if(i == 0) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Panel zarzadzania pojazdami (lista-priv):", "Nie posiadasz zadnych prywatnch truckow/vanow/naczep.",  "Zamknij", "");
	ShowPlayerDialog(playerid, DIALOG_VEHICLES_LISTA, DIALOG_STYLE_TABLIST_HEADERS, "Panel zarzadzania pojazdami (lista-priv):", dataa, "Wybierz", "Zamknij");
	return 1;
}

CMD:eq(playerid) return cmd_p(playerid);
CMD:p(playerid)
{
	new data[350], dataa[1000], i = 0, get_uid, get_owneruid, get_przedmiot[30], get_use, get_var1, get_var2, get_var3, get_var4, get_var5, get_var6;
	format(data,sizeof(data),"SELECT * FROM `data_przedmioty` where `owneruid` = '%d' ORDER BY `uid` ASC", PlayerData[playerid][pUID]);
    mysql_query(data);
	mysql_store_result();

	dataa = "uid\tprzemiot\t#\t#\n";
	
	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>iis[30]iiiiiii", get_uid, get_owneruid, get_przedmiot, get_use, get_var1, get_var2, get_var3, get_var4, get_var5, get_var6);
		PlayerData[playerid][pFindItemUID][i]=get_uid;
		i++;
		
		if(i >= SETTINGS_PLAYER_MAX_ITEMS) break;
		if(get_use != 0)
		{
			format(dataa,sizeof(dataa),"%s{58FA58}%d\t%s\t%d\t%d\n",
										dataa,
										get_uid,
										get_przedmiot,
										get_var1,
										get_var2);
		}
		else
		{
			format(dataa,sizeof(dataa),"%s{F5DA81}%d\t%s\t%d\t%d\n",
										dataa,
										get_uid,
										get_przedmiot,
										get_var1,
										get_var2);
		}
	}
	if(i == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Nie masz zadnych przedmiotow.");
	ShowPlayerDialog(playerid, DIALOG_PRZEDMIOTY, DIALOG_STYLE_TABLIST_HEADERS, "Przedmioty:", dataa, "Wybierz", "Zamknij");
	return 1;
}






CMD:a(playerid) return cmd_admins(playerid);
CMD:admins(playerid)
{
	new data[500], find_ranga[30];
	data = "ID\tNick\tRanga\n";
	
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(PlayerData[i][pRanga] >= RANGA_POMOCNIK)
		{
			switch(PlayerData[i][pRanga])
			{
				case 994: find_ranga = ""#RANGA_LEVEL_994"";
				case 995: find_ranga = ""#RANGA_LEVEL_995"";
				case 996: find_ranga = ""#RANGA_LEVEL_996"";
				case 997: find_ranga = ""#RANGA_LEVEL_997"";
				case 998: find_ranga = ""#RANGA_LEVEL_998"";
				case 999: find_ranga = ""#RANGA_LEVEL_999"";
				case 1000: find_ranga = ""#RANGA_LEVEL_1000"";
			}
			format(data,sizeof(data),"%s\
								%d\t%s\t%s\n\
								", data, i, PlayerData[i][pName], find_ranga);
		}
	}
	
	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_TABLIST_HEADERS, "Administracja online:", data,  "Zamknij", "");
	return 1;
}


CMD:pasy(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(vehicleid == 0) return GameTextForPlayer(playerid, "~r~Nie jestes w pojezdzie", 3000, 3);
	if(ToLodz(vehicleid) || ToSamolot(vehicleid) || ToHelikopter(vehicleid) || ToRC(vehicleid) || ToPrzyczepa(vehicleid) || ToRower(vehicleid) || ToMotor(vehicleid)) return GameTextForPlayer(playerid, "~g~PASY NIE DZIALAJA NA TYM POJEZDZIE", 3000, 3);

	if(PlayerData[playerid][pPasy] == true)
	{
		PlayerData[playerid][pPasy] = false;
		GameTextForPlayer(playerid, "~y~PASY ODPIETE", 3000, 3);
	}
	else
	{
		PlayerData[playerid][pPasy] = true;
		GameTextForPlayer(playerid, "~y~PASY ZAPIETE", 3000, 3);
	}
	return 1;
}

CMD:dokumenty(playerid, params[])
{
	new player = strval(params), data[900];
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /dokumenty [id]");
	if(!GetPlayerFrakcja(player, FRAKCJA_POLICJI) || !GetPlayerFrakcja(player, FRAKCJA_STRAZ_GRANICZNA) || !GetPlayerFrakcja(player, FRAKCJA_STRAZ_MIEJSKA)) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz, ktoremu chcesz dac dokumenty nie ma prawa ich widziec!");
	
	format(data,sizeof(data),"\
								#\t#\n\
								Dowod osobisty\t%s\n\
								Dowod rejestracyjny\t%s\n\
								Ubezpieczenie\t%s\n\
								Paszport\t%s\n\
								Prawo jazdy:{D8D8D8}\n\
								Teoria kat. A: %s\n\
								Teoria kat. B: %s\n\
								Teoria kat. C: %s\n\
								Teoria kat. D: %s\n\
								Teoria kat. L: %s\n\
								Praktyka kat. A: %s\n\
								Praktyka kat. B: %s\n\
								Praktyka kat. C: %s\n\
								Praktyka kat. D: %s\n\
								Praktyka kat. L: %s\n\
								",
								((PlayerData[player][pDowodOsobisty] == 1) ? ("Posiada") : ("Nie posiada")),
								((PlayerData[player][pDowodRejestracyjny] == 1) ? ("Posiada") : ("Nie posiada")),
								((PlayerData[player][pUbezpieczenie] == 1) ? ("Posiada") : ("Nie posiada")),
								((PlayerData[player][pPaszport] == 1) ? ("Posiada") : ("Nie posiada")),
								((PlayerData[player][pPrawoJazdyT][PRAWKO_TYPE_A] != 0) ? ("Posiada") : ("Nie posiada")),
								((PlayerData[player][pPrawoJazdyT][PRAWKO_TYPE_B] != 0) ? ("Posiada") : ("Nie posiada")),
								((PlayerData[player][pPrawoJazdyT][PRAWKO_TYPE_C] != 0) ? ("Posiada") : ("Nie posiada")),
								((PlayerData[player][pPrawoJazdyT][PRAWKO_TYPE_D] != 0) ? ("Posiada") : ("Nie posiada")),
								((PlayerData[player][pPrawoJazdyT][PRAWKO_TYPE_L] != 0) ? ("Posiada") : ("Nie posiada")),
								((PlayerData[player][pPrawoJazdyP][PRAWKO_TYPE_A] != 0) ? ("Posiada") : ("Nie posiada")),
								((PlayerData[player][pPrawoJazdyP][PRAWKO_TYPE_B] != 0) ? ("Posiada") : ("Nie posiada")),
								((PlayerData[player][pPrawoJazdyP][PRAWKO_TYPE_C] != 0) ? ("Posiada") : ("Nie posiada")),
								((PlayerData[player][pPrawoJazdyP][PRAWKO_TYPE_D] != 0) ? ("Posiada") : ("Nie posiada")),
								((PlayerData[player][pPrawoJazdyP][PRAWKO_TYPE_L] != 0) ? ("Posiada") : ("Nie posiada")));
								
								
	ShowPlayerDialog(player, 9999, DIALOG_STYLE_TABLIST_HEADERS, "Dokumenty:", data, "Zamknij", "");
	return 1;
}

CMD:towary(playerid)
{
	if(PlayerData[playerid][pShowPanelTowary] == true)
	{
		PlayerTowaryWybierz(playerid, 2);
		PlayerData[playerid][pShowPanelTowary] = false;
	}
	else
	{
		PlayerTowaryWybierz(playerid, 1);
		PlayerData[playerid][pShowPanelTowary] = true;
	}
	return 1;
}


//--------------------------------------------------------------------------vip---------------------------------------------



//--------------------------------------------------------------------------vip---------------------------------------------

CMD:ooc(playerid,params[]) return cmd_o(playerid, params);
CMD:o(playerid, params[])
{
	new data[511+1], text[250+1], str_ranga[50], str_frakcja[50];
	if(sscanf(params, "s[250]", text)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /o [Tekst]");
	if(PlayerData[playerid][pMuted] != 0) return format(data,sizeof(data),"{a4a4a4}Nie mozesz uzyc tej komendy z powodu wyciszenia. (Pozostalo: %d minut/y).", PlayerData[playerid][pMuted]), SendClientMessage(playerid,-1,data);


	str_ranga = "{848484}[Gracz]";
	
	if(GetPlayerVipStatus(playerid))
	{
		str_ranga = "{D7DF01}[V.I.P]";
	}
	
	switch(PlayerData[playerid][pRanga])
	{
		case RANGA_VIP: 				str_ranga = "{D7DF01}["#RANGA_LEVEL_990"]";
		case RANGA_ZASLUZONY: 			str_ranga = "{4B088A}["#RANGA_LEVEL_991"]";
		case RANGA_TECHNIK_TS3: 		str_ranga = "{21610B}["#RANGA_LEVEL_992"]";
		case RANGA_PROGRAMISTA: 		str_ranga = "{00ffff}["#RANGA_LEVEL_993"]";
		case RANGA_MAPER: 				str_ranga = "{B18904}["#RANGA_LEVEL_994"]";
		case RANGA_POMOCNIK: 			str_ranga = "{FF7F50}["#RANGA_LEVEL_995"]";
		case RANGA_MODERATOR: 			str_ranga = "{4169E1}["#RANGA_LEVEL_996"]";
		case RANGA_JUNIORADMIN: 		str_ranga = "{BA55D3}["#RANGA_LEVEL_997"]";
		case RANGA_ADMINISTRATOR: 		str_ranga = "{ADFF2F}["#RANGA_LEVEL_998"]";
		case RANGA_WSPOLWLASCICIEL: 	str_ranga = "{FF1111}["#RANGA_LEVEL_999"]";
		case RANGA_WLASCICIEL: 			str_ranga = "{FF1111}["#RANGA_LEVEL_1000"]";
	}
	if(PlayerData[playerid][pSluzba] == true)
	switch(PlayerData[playerid][pFrakcja])
	
	{
		case 0: str_frakcja = "";
		case 1: str_frakcja = "{4169E1}("#GRUPA_LEVEL_1")";
		case 2: str_frakcja = "{ADFF2F}("#GRUPA_LEVEL_2")";
		case 3: str_frakcja = "{419800}("#GRUPA_LEVEL_3")";
		case 4: str_frakcja = "{4169E1}("#GRUPA_LEVEL_4")";
		case 5: str_frakcja = "{FF7F50}("#GRUPA_LEVEL_5")";
		case 6: str_frakcja = "{996600}("#GRUPA_LEVEL_6")";
		case 7: str_frakcja = "{ADBFC2}("#GRUPA_LEVEL_7")";
		case 8: str_frakcja = "{FFFF00}("#GRUPA_LEVEL_8")";
		case 9: str_frakcja = "{C0C0C0}("#GRUPA_LEVEL_9")";
		case 10: str_frakcja = "{C0C0C0}("#GRUPA_LEVEL_10")";
	}
	
	//format(data, sizeof(data), "{4169E1}[CZAT-OOC]{ffffff} %s %s %s {ffffff}[{a4a4a4}%d{ffffff}]{E6E6E6}: %s", PlayerData[playerid][pName], str_ranga, str_frakcja, playerid, text);
	format(data, sizeof(data), "{4169E1}[CZAT-OOC]%s[%d]%s %s{F79F81}(%s){E6E6E6}: %s", PlayerData[playerid][pName], playerid, str_ranga, str_frakcja, PlayerData[playerid][pLevelRanga], text);

	SendClientMessageToAll(0xC71585FF, data);

	if(DzialaniaData[wystartowal] == true)
	{
		new wynikk = strval(text);
		if(wynikk == DzialaniaData[wynik])
		{
			new dataa[512];
			new wygrana = ExRandom(WYGRANA_MIN, WYGRANA_MAX);
			new exp = ExRandom(EXP_MIN, EXP_MAX);
			format(dataa, sizeof(dataa), "[PTR-Serw]"C_BORDOWY"Odgadles poprawny wynik testu matematycznego! Otrzymujesz %i$ i %i exp.", wygrana, exp);
			SCM(playerid, -1, dataa);
			format(dataa, sizeof(dataa), "[PTR-Serw]"C_BIALY"Poprawny wynik odgadl %s! Poprawny wynik to %i", PlayerName(playerid), DzialaniaData[wynik]);
			SCMToAll(-1, dataa);
			GivePlayerScore(playerid, exp);
			GivePlayerCash(playerid, wygrana);
			DzialaniaData[wynik] = -1;
			DzialaniaData[wystartowal] = false;
			KillTimer(DzMatResetTimer);
			return 1;
		}
	}
	return 1;
}


CMD:b(playerid, params[])
{
	new data[128+1], text[128+1];
	if(sscanf(params, "s[128]", text)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /b [Tekst]");
	if(PlayerData[playerid][pMuted] >= 1) return format(data,sizeof(data),"{a4a4a4)Nie mozesz uzyc tej komendy z powodu wyciszenia. (Pozostalo: %d minut/y).", PlayerData[playerid][pMuted]), SendClientMessage(playerid,-1,data);
		
	format(data, sizeof(data), "(( CZAT OOC: %s pisze: %s ))", PlayerData[playerid][pName], text);
	SCMIC(playerid, 15, -1, data);
	return 1;
}

CMD:me(playerid, params[])
{
	new data[128+1], text[128+1];
	if(sscanf(params, "s[128]",text)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /me [Akcja RolePlay]");
	format(data,sizeof(data),"** {C2A2DA}%s : %s.", PlayerData[playerid][pName], text);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:do(playerid, params[])
{
	new data[128+1], text[128+1];
	if(sscanf(params, "s[128]",text)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /do [Tekst]");
	format(data,sizeof(data), "* {4482BF}%s {00FFFF}: {4482BF}((%s))", PlayerData[playerid][pName], text);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:k(playerid, params[])
{
	new data[128+1], text[128+1];
	if(sscanf(params, "s[128]",text)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /k [Tekst] (krzyk)");
	ApplyAnimation(playerid, "ON_LOOKERS", "shout_in", 4.0, 0, 0, 0, 0, 0);
	format(data,sizeof(data),"{4482BF}%s {C2A2DA}krzyczy: {C2A2DA}%s !!", PlayerData[playerid][pName], text);
	SCMIC(playerid, 10, -1, data);
	return 1;
}

CMD:sz(playerid, params[])
{
	new data[128+1], text[128+1];
	if(sscanf(params, "s[128]",text)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /sz [Tekst]");
	format(data,sizeof(data),"{4482BF}%s {C2A2DA}szepta: {C2A2DA}%s ", PlayerData[playerid][pName], text);
	SCMIC(playerid, 3, -1, data);
	return 1;
}

CMD:zm(playerid, params[])
{
	if(DzialaniaData[wystartowal] == true)
	{
		new wynikk;
		if(sscanf(params, "i", wynikk))
		{
			SendClientMessage(playerid, -1, "{a4a4a4}Uzyj: /zm [WYNIK]");
			return 1;
		}
		else
		{
			if(wynikk == DzialaniaData[wynik])
			{
				new data[512];
				new wygrana = ExRandom(WYGRANA_MIN, WYGRANA_MAX);
				new exp = ExRandom(EXP_MIN, EXP_MAX);
				format(data, sizeof(data), ""C_BORDOWY"Odgadles poprawny wynik testu matematycznego! Otrzymujesz %i$ i %i exp.", wygrana, exp);
				SCM(playerid, -1, data);
				format(data, sizeof(data), ""C_BIALY"Poprawny wynik odgadl %s! Poprawny wynik to %i", PlayerName(playerid), DzialaniaData[wynik]);
				SCMToAll(-1, data);
				GivePlayerScore(playerid, exp);
				GivePlayerCash(playerid, wygrana);
				DzialaniaData[wynik] = -1;
				DzialaniaData[wystartowal] = false;
				KillTimer(DzMatResetTimer);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, -1, "{a4a4a4}Wynik jest zly !");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, -1, "{a4a4a4}Aktualnie nie ma zadnego dzialania do rozwiazania !");
	}
	return 1;
}

CMD:dajpieniadze(playerid, params[])
{
	new player, kasa, data[128];
	if(sscanf(params,"dd", player, kasa)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /dajpieniadze [ID] [Kasa]");
	if(player==playerid) return SendClientMessage(playerid,-1, "{a4a4a4}Nie mozesz dawac sobie samemu pieniedzy!");
	if(kasa<1) return SendClientMessage(playerid,-1, "{a4a4a4}Nie mozesz dac pieniedzy na minusie!");
	if(!OdlegloscGracze(5.0,playerid,player)) return SendClientMessage(playerid, -1, "{a4a4a4}Jestes zbyt daleko gracza aby wejsc z nim w interakcje.");
	if(PlayerData[player][pLogged]==false) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz o podanym id nie jest na serwerze");
	if(kasa>GetPlayerCash(playerid)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz takiej ilosci pieniedzy.");
	
	format(data,sizeof(data),"{C2A2DA}*%s podaje troche gotowki dla %s", PlayerData[playerid][pName], PlayerData[player][pName]);
	SCMIC(playerid, 10, -1, data);
	
	GivePlayerCash(player,kasa);
	GivePlayerCash(playerid,-kasa);
	return 1;
}

CMD:cb(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /cb [Tekst]");
	if(GetPlayerVehicleID(playerid) == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes kierowca zadnego pojazdu");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes kierowca zadnego pojazdu");
	if(VehicleData[GetPlayerVehicleID(playerid)][vCBRadio] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Pojazd ten nie posiada cb radia.");	
	
	
	new data[128];
	
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(IsPlayerInAnyVehicle(i))
		{
			if(VehicleData[GetPlayerVehicleID(playerid)][vCBRadio] != 0 && VehicleData[GetPlayerVehicleID(playerid)][vKanalCB] == VehicleData[GetPlayerVehicleID(i)][vKanalCB] && PlayerData[i][pRanga] <= RANGA_POMOCNIK)
			{
				format(data,sizeof(data), "{F5A9BC}[CB %d] {848484}%s",VehicleData[GetPlayerVehicleID(playerid)][vKanalCB], params);
				SendClientMessage(i,-1, data);
			}
		}
		if(!IsPlayerInAnyVehicle(i) || IsPlayerInAnyVehicle(i) && PlayerData[i][pRanga] >= RANGA_POMOCNIK)
		{
			format(data,sizeof(data), "{F5A9BC}(CHAT CB) [%d]%s pisze: %s", playerid, PlayerData[playerid][pName], params);
			SendClientMessage(i,-1,data);
		}
	}
	return 1;
}
CMD:cbkanal(playerid, params[])
{
	new data[128];
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /cbkanal [Numer kanalu]");
	if(GetPlayerVehicleID(playerid) == 0 && GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes kierowca zadnego pojazdu");
	if(VehicleData[GetPlayerVehicleID(playerid)][vCBRadio] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Pojazd ten nie posiada cbradia.");
	VehicleData[GetPlayerVehicleID(playerid)][vKanalCB] = strval(params);
	format(data,sizeof(data),"{C2A2DA}*%s zmienia kanal cb radia w pojezdzie %s", PlayerData[playerid][pName], CarList[GetVehicleModel(GetPlayerVehicleID(playerid))-400]);
	SCMIC(playerid, 10, -1, data);
	return 1;
}



CMD:zamknij(playerid)
{
	new b_u_enter = GetBuildUID(playerid), b_u_exit = GetBuildUID2(playerid), uid = -1, data[128];
	if(b_u_enter == 0 && b_u_exit == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes przy zadnym budynku.");
	
	if(b_u_enter != 0) uid = b_u_enter;
	if(b_u_exit != 0)  uid = b_u_exit;
	
	if(BudynekData[uid][bType] != 14 && PlayerData[playerid][pRanga] <= RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozna zamykac tego typu budynku, jedynie domy.");
	if(BudynekData[uid][bOwnerUID] != PlayerData[playerid][pUID]) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes wlascicielem tego budynku.");
	
	

	if(BudynekData[uid][bLocked] == 0)
	{
		BudynekData[uid][bLocked] = 1;
		format(data,sizeof(data),"{C2A2DA}*%s zamyka drzwi budynku.", PlayerData[playerid][pName]);
		SCMIC(playerid, 5.0, -1, data);
	}
	else
	{
		BudynekData[uid][bLocked] = 0;
		format(data,sizeof(data),"{C2A2DA}*%s otwiera drzwi budynku.", PlayerData[playerid][pName]);
		SCMIC(playerid, 5.0, -1, data);
	}
	
	HouseText3D(uid);
	SaveBuild(uid);
	return 1;
}

CMD:opis(playerid, params[])
{
	new b_u_enter = GetBuildUID(playerid), b_u_exit = GetBuildUID2(playerid), uid = -1, data[128];
	if(b_u_enter != 0 && b_u_exit != 0) return 1;
	
	if(b_u_enter != 0) uid = b_u_enter;
	if(b_u_exit != 0)  uid = b_u_exit;
	
	if(BudynekData[uid][bType] != 14 && PlayerData[playerid][pRanga] <= RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozna opisywac tego typu budynku, jedynie domy.");
	if(BudynekData[uid][bOwnerUID] != PlayerData[playerid][pUID]) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes wlascicielem tego budynku.");
	
	new value[30];
	if(sscanf(params, "s[30]", value)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /opis [tresc opisu] (dla domu)");
	format(BudynekData[uid][bHouseOpis], 49, value);

	format(data,sizeof(data),"{a4a4a4}Opis tego budynku (uid: %d) zostal zmieniony na {dedede}%s", uid, BudynekData[uid][bHouseOpis]);
	SendClientMessage(playerid, -1, data);
	
	HouseText3D(uid);
	SaveBuild(uid);
	return 1;
}

CMD:kup(playerid, params[])
{
	new uid = GetBuildUID(playerid), data[500];
	
	if(uid != 0)
	{
		if(BudynekData[uid][bType] != 14) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozna zakupic tego typu budynku, jedynie domy.");
		if(BudynekData[uid][bOwnerUID] != -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozna zakupic tego budynku, posiada juz jednego aktywnego wlasciciela.");

		format(data,sizeof(data),"\
							Informacje na temat budynku:\n\
							UID: %d\n\
							Interior: %d\n\
							Poziom: %d\n\
							Cena: $%d\n\nCzy chcesz go zakupic ?",
		uid,
		BudynekData[uid][bHouseInterior],
		BudynekData[uid][bHouseLevel],
		BudynekData[uid][bPrice]);
		ShowPlayerDialog(playerid, DIALOG_HOUSE_BUY, DIALOG_STYLE_MSGBOX, "Zakup domu.", data, "Zakup", "Zamknij");
	}
	else
	{
		SendClientMessage(playerid, -1, "{a4a4a4}Nie odnaleziono zadnego budynku. Sprawdz czy, aby na pewno znajdujesz sie przy wejsciu do budynku ktory chcesz zakupic.");
	}
	return 1;
}

CMD:sprzedaj(playerid, params[])
{
	new uid = GetBuildUID(playerid), data[500];
	
	if(uid != 0)
	{
		if(BudynekData[uid][bType] != 14) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozna sprzedac tego typu budynku, jedynie domy.");
		if(BudynekData[uid][bOwnerUID] != PlayerData[playerid][pUID]) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes wlascicielem tego budynku.");

		format(data,sizeof(data),"\
					Informacje na temat budynku:\n\
					UID: %d\n\
					Interior: %d\n\
					Poziom: %d\n\
					Cena: $%d\n\nCzy chcesz go sprzedac ?- pamietaj, ze odzyskasz jedynie polowe pieniedzy wartosci tego domu!",
		uid,
		BudynekData[uid][bHouseInterior],
		BudynekData[uid][bHouseLevel],
		BudynekData[uid][bPrice]);
		ShowPlayerDialog(playerid, DIALOG_HOUSE_SELL, DIALOG_STYLE_MSGBOX, "Sprzedarz domu.", data, "Sprzedaj", "Zamknij");
	}
	else
	{
		SendClientMessage(playerid, -1, "{a4a4a4}Nie odnaleziono zadnego budynku. Sprawdz czy, aby na pewno znajdujesz sie przy wejsciu do budynku ktory chcesz zakupic.");
	}
	return 1;
}

CMD:acmd(playerid)
{
	new data[2000];
	data = "Komenda\t#\n";
	switch(PlayerData[playerid][pRanga])
	{
		case RANGA_TECHNIK_TS3: //Technik ts3
		{
			format(data,sizeof(data),	"%s\
											/zpogoda\t (tylko dla siebie nie dla wszystkich graczy)\n\
											/zczas\t id - zmienia czas dla siebie\n\
										",data);
		}
		case RANGA_ZASLUZONY: //Zasluzony
		{
			format(data,sizeof(data),	"%s\
											/zpogoda\t (tylko dla siebie nie dla wszystkich graczy)\n\
											/zczas\t id - zmienia czas dla siebie\n\
											/mute\t [id] [czas w minutach max 15min] [powod] (Mutuje gracza na czacie)\n\
											/unmute\t [id] usuwa mute (tylko temu co on dal)\n\
										",data);
		}
		case RANGA_MAPER: //Mapper
		{
			format(data,sizeof(data),	"%s\
											/addo\tid - stawia obiekt\n\
											/edito\t [opcje] - edycja obiektu\n\
											/zpogode\t id - zmienia pogode dla siebie\n\
											/czas\t id - zmienia czas dla siebie\n\
											/tp\t id id - teleportuje sie do gracza\n\
											/kick\t [id] [powod] - kick gracza (jakby przeszkadzal)\n\
										",data);
		}
		case RANGA_POMOCNIK: //Pomocnik
		{
			format(data,sizeof(data),	"%s\
											/kick\t[ID] [powod]\n\
											/zmiennick\t [ID]  [NowyNick Gracza]\n\
											/mute\t [Id] [Czas] [Powod]\n\
											/spec\t[id]\n\
											/setvw\t[id] [vw] zmieniasz graczu virtualworld\n\
											/setint\t[id] [interior] zmieniasz graczu interior\n\
											/tp id id - teleportuje sie do gracza\n\
										",data);
		}
		case RANGA_MODERATOR: //Moderator
		{
			format(data,sizeof(data),	"%s\
											/ban\t [ID] [Powod]   (Ban na IP)\n\
											/kick\t [ID] powod]\n\
											/zmiennick\t [ID]  [NowyNick Gracza]\n\
											/mute\t [Id] [Czas] [Powod]\n\
											/spec\t [id]\n\
											/spawn\t [nazwa] (Pojazd Administracyjny)\n\
											/adelcars\t usuwasz auta administracyjne\n\
											/aj\t [id] - wrzucasz gracza do admin jail\n\
											/setvw\t [id] [vw] zmieniasz graczu virtualworld\n\
											/setint\t [id] [interior] zmieniasz graczu interior\n\
											/rsp\t respawnujesz wszystkie pojazdy\n\
											", data);
			
			format(data,sizeof(data),	"%s\
									/azmienpogode\t zmieniasz pogode na serwerze\n\
									/freeze\t [ID]\n\
									/unfreeze\t [ID]\n\
									/czysc\n\
									", data);
		}
		case RANGA_JUNIORADMIN: //Junior Admin
		{
			format(data,sizeof(data),"%s\
										/ban\t [ID] [Powod]   (Ban na IP)\n\
										/kick \t[ID] powod]\n\
										/zmiennick\t [ID]  [NowyNick Gracza]\n\
										/mute\t [Id] [Czas] [Powod]\n\
										/event\t [Nazwa Eventu]  [Czas na zapisy]\n\
										/spawn\t [nazwa] (Pojazd Administracyjny)\n\
										/adelcars\t usuwasz auta administracyjne\n\
										/evwyrzuc\t [id]\n\
										/evdodaj\t [id]\n\
										/evzakoncz\tkonczysz event\n\
									",data);
			format(data,sizeof(data),"%s\
										/spec\t[id]\n\
										/dajscore\t [ilosc] [w poblizu wszystkim w 50metrach]  (Chodzi o Eventy)\n\
										/dajkase\t [ilosc] [w poblizu wszystkim w 50metrach]  (Chodzi o Eventy)\n\
										/spawn\t [id/nazwa] (Pojazd Administracyjny)\n\
										/tp\t [ID1] [ID2]\n\
										/aj\t [id] - wrzucasz gracza do admin jail\n\
										/setskin\t [id] [skin] - zmieniasz skin\n\
										/setfrakcja\t [id] [id frakcja] - zmiana frakcji\n", data);
			format(data,sizeof(data),"%s\
										/setvw\t[id] [vw] zmieniasz graczu virtualworld\n\
										/setint\t[id] [interior] zmieniasz graczu interior\n\
										/warn\t[id] [powod] dajesz ostrzezenie dla gracza\n\
										/setlider\t[id] [lider] - dajesz/zabierasz lidera\n\
										/rsp\trespawnujesz wszystkie pojazdy\n\
										/sethp\tustawiasz hp graczom w promieniu 50m\n\
										/azmienpogode\tzmieniasz pogode na serwerze\n\
									", data);
		}
		case RANGA_ADMINISTRATOR: //Admin
		{
			format(data,sizeof(data),"%s\
										/ban\t [ID] [Powod]   (Ban na IP)\n\
										/kick\t [ID] powod]\n\
										/zmiennick\t [ID]  [NowyNick Gracza]",data);
			format(data,sizeof(data),"%s\
										/mute\t [Czas] [Powod]\n\
										/spec\t[id]\n\
										/dajscore\t [ilosc] [w poblizu wszystkim w 50metrach]  (Chodzi o Eventy)",data);
			format(data,sizeof(data),"%s\
										/dajkase\t [ilosc] [w poblizu wszystkim w 50metrach]  (Chodzi o Eventy)\n\
										/spawn\t [id/nazwa] (Pojazd Administracyjny)",data);
			format(data,sizeof(data),"%s\
										/tp\t [ID 1] [ID 2]\n\
										/dajvipa\t [ID][Dni]-max 7Dni\n\
										/dajkaseid\t [ID] [Ilosc] - dajesz pieniadze dla gracza\n\
										/dajscoreid\t [ID] [Ilosc] - dajesz score dla gracza\n\
										/aj\t [id] - wrzucasz gracza do admin jail\n\
										/setskin\t [id] [skin] - zmieniasz skin\n\
										/setfrakcja\t [id] [id frakcja] - zmiana frakcji\
										",data);
			format(data,sizeof(data),"%s\
										/adelcars\t usuwasz auta administracyjne\n\
										/evwyrzuc\t [id]\n\
										/evdodaj\t [id]\n\
										/evzakoncz\tkonczysz event\n\
										/setvw\t[id] [vw] zmieniasz graczu virtualworld\n\
										/setint\t[id] [interior] zmieniasz graczu interior\n\
										/warn\t[id] [powod] dajesz ostrzezenie dla gracza\n\
										/setlider\t[id] [lider] - dajesz/zabierasz lidera\n\
										/rsp\trespawnujesz wszystkie pojazdy\n\
										/sethp\tustawiasz hp graczom w promieniu 50m\n\
										/azmienpogode\tzmieniasz pogode na serwerze\n",data);
			format(data,sizeof(data),"%s\
										/banlista\totwierasz liste banow\n\
										/freeze\t[id] - zamrazasz gracza\n\
										/unfreeze\t[id] - odmrazasz gracza\n\
										/ekran\t[tekst] - piszesz na srodku ekranu\n\
										/bron\t[id broni] - dajesz sobie bron\n\
			", data);
		}
		case RANGA_WSPOLWLASCICIEL: //Wspolwlasciciel
		{
			format(data,sizeof(data),"%s\
									/ban\t [ID] [Powod]   (Ban na IP)\n\
									/kick\t [ID] powod]\n\
									/zmiennick\t [ID]  [NowyNick Gracza]\n\
									/mute\t [Czas] [Powod]", data);
			format(data,sizeof(data),"%s\
									/Event\t [Nazwa Eventu]  [Czas na zapisy]\n\
									/spec\t [ID]\n\
									/dajscore\t [ilosc] [w poblizu wszystkim w 50metrach]  (Chodzi o Eventy)\n\
									/dajkase\t [ilosc] [w poblizu wszystkim w 50metrach]  (Chodzi o Eventy)\n\
									/spawn\t [id/nazwa] (Pojazd Administracyjny)",data);
			format(data,sizeof(data),"%s\
									/tp\t [ID 1] [ID 2]\n\
									/dajvipa\t [ID]\n\
									/addbudynek\ttworzenie budynku\n\
									/editbudynek\tedycja budynku\n\
									/dajkaseid\t [ID] [Ilosc] - dajesz pieniadze dla gracza\n\
									/dajscoreid\t [ID] [Ilosc] - dajesz score dla gracza", data);
			format(data,sizeof(data),"%s\
									/aj\t [id] - wrzucasz gracza do admin jail\n\
									/setskin\t [id] [skin] - zmieniasz skin\n\
									/setfrakcja\t [id] [id frakcja] - zmiana frakcji\n\
									",data);
			format(data,sizeof(data),"%s\
										/adelcars\t usuwasz auta administracyjne (z /spawn)\n\
										/evwyrzuc\t [id] wyrzucasz z eventu\n\
										/evdodaj\t [id] dodajesz na event\n\
										/evzakoncz\tkonczysz event\n\
										/addpickup\ttworzysz pickup\n\
										/editpickup\t[uid] edycja pickupa\n\
										/setranga\t[id] [ranga] ustawiasz range\n\
			", data);
			format(data,sizeof(data),"%s\
										/addtowar\ttworzenie towaru\n\
										/edittowar\t[uid] edycja towaru\n\
										/setvw\t[id] [vw] zmieniasz graczu virtualworld\n\
										/setint\t[id] [interior] zmieniasz graczu interior\n\
										/warn\t[id] [powod] dajesz ostrzezenie dla gracza\n\
										/apanel\tzmieniasz ustawienia serwerowe\n\
										/createitem\ttworzysz przedmiot do /p\n\
										/setlider\t[id] [lider] - dajesz/zabierasz lidera\n\
			", data);
			format(data,sizeof(data),"%s\
										/addfoto\ttworzenie fotoradaru\n\
										/editfoto\tedycja fotoradaru\n\
										/addo\ttworzenie obiektu\n\
										/edito\tedycja obiektu\n\
										/createvehicle\ttworzysz skryptowy pojazd (dla firm, frakcji itd)\n\
										/rsp\trespawnujesz wszystkie pojazdy\n\
										/sethp\tustawiasz hp graczom w promieniu 50m\n\
										/azmienpogode\tzmieniasz pogode na serwerze\n\
										/banlista\totwierasz liste banow\n\n", data);
			format(data,sizeof(data),"%s\
										/freeze\t[id] - zamrazasz gracza\n\
										/unfreeze\t[id] - odmrazasz gracza\n\
										/ekran\t[tekst] - piszesz na srodku ekranu\n\
										/bron\t[id broni] - dajesz sobie bron\n\
										/unbw\t[id] - konczysz bw gracza\n\
										/addvia\t - tworzenie viatoll bramki\n\
										/editvia\t - edycja viatoll bramki\n\
										/addkloda\t - tworzenie klody\n\
			", data);
		}
		case RANGA_WLASCICIEL: //Head Admin
		{
			format(data,sizeof(data),"%s\
									/ban\t [ID] [Powod]   (Ban na IP)\n\
									/kick\t [ID] powod]\n\
									/zmiennick\t [ID]  [NowyNick Gracza]\n\
									/mute\t [Czas] [Powod]", data);
			format(data,sizeof(data),"%s\
									/Event\t [Nazwa Eventu]  [Czas na zapisy]\n\
									/spec\t [ID]\n\
									/dajscore\t [ilosc] [w poblizu wszystkim w 50metrach]  (Chodzi o Eventy)\n\
									/dajkase\t [ilosc] [w poblizu wszystkim w 50metrach]  (Chodzi o Eventy)\n\
									/spawn\t [id/nazwa] (Pojazd Administracyjny)",data);
			format(data,sizeof(data),"%s\
									/tp\t [ID 1] [ID 2]\n\
									/dajvipa\t [ID]\n\
									/addbudynek\ttworzenie budynku\n\
									/editbudynek\tedycja budynku\n\
									/dajkaseid\t [ID] [Ilosc] - dajesz pieniadze dla gracza\n\
									/dajscoreid\t [ID] [Ilosc] - dajesz score dla gracza", data);
			format(data,sizeof(data),"%s\
									/aj\t [id] - wrzucasz gracza do admin jail\n\
									/setskin\t [id] [skin] - zmieniasz skin\n\
									/setfrakcja\t [id] [id frakcja] - zmiana frakcji\n\
									",data);
			format(data,sizeof(data),"%s\
										/adelcars\t usuwasz auta administracyjne (z /spawn)\n\
										/evwyrzuc\t [id] wyrzucasz z eventu\n\
										/evdodaj\t [id] dodajesz na event\n\
										/evzakoncz\tkonczysz event\n\
										/addpickup\ttworzysz pickup\n\
										/editpickup\t[uid] edycja pickupa\n\
										/setranga\t[id] [ranga] ustawiasz range\n\
			", data);
			format(data,sizeof(data),"%s\
										/addtowar\ttworzenie towaru\n\
										/edittowar\t[uid] edycja towaru\n\
										/setvw\t[id] [vw] zmieniasz graczu virtualworld\n\
										/setint\t[id] [interior] zmieniasz graczu interior\n\
										/warn\t[id] [powod] dajesz ostrzezenie dla gracza\n\
										/apanel\tzmieniasz ustawienia serwerowe\n\
										/createitem\ttworzysz przedmiot do /p\n\
										/setlider\t[id] [lider] - dajesz/zabierasz lidera\n\
			", data);
			format(data,sizeof(data),"%s\
										/addfoto\ttworzenie fotoradaru\n\
										/editfoto\tedycja fotoradaru\n\
										/addo\ttworzenie obiektu\n\
										/edito\tedycja obiektu\n\
										/createvehicle\ttworzysz skryptowy pojazd (dla firm, frakcji itd)\n\
										/rsp\trespawnujesz wszystkie pojazdy\n\
										/sethp\tustawiasz hp graczom w promieniu 50m\n\
										/azmienpogode\tzmieniasz pogode na serwerze\n\
										/banlista\totwierasz liste banow\n", data);
			format(data,sizeof(data),"%s\
										/freeze\t[id] - zamrazasz gracza\n\
										/unfreeze\t[id] - odmrazasz gracza\n\
										/ekran\t[tekst] - piszesz na srodku ekranu\n\
										/bron\t[id broni] - dajesz sobie bron\n\
										/unbw\t[id] - konczysz bw gracza\n\
										/addvia\t - tworzenie viatoll bramki\n\
										/editvia\t - edycja viatoll bramki\n\
										/addkloda\t - tworzenie klody\n\
			", data);
		}
	}
	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_TABLIST_HEADERS, "Komendy Admina PTR", data,  "Zamknij", "");
	return 1;
}



CMD:lista(playerid)
{
	if(PlayerData[playerid][pFrakcja] == 0) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	new data[500] = "ID\tGracz\tTresc\tLokalizacja\n";
	for(new i = 0; i != MAX_ZAWIADOMIEN; i ++)
	{
		if(ZawiadomieniaData[i][zAktywny] == true && ZawiadomieniaData[i][zFrakcja] == PlayerData[playerid][pFrakcja])
		{
			format(data,sizeof(data), "\
										%s\
										%d\t\
										%s\t\
										%s\t\
										%s\t\n\
			", data, i, ZawiadomieniaData[i][zGracz], ZawiadomieniaData[i][zTresc], ZawiadomieniaData[i][zGPS]);
		}
	}
	ShowPlayerDialog(playerid, DIALOG_ZDARZENIA, DIALOG_STYLE_TABLIST_HEADERS, "Lista zawiadomien:", data,  "Zamknij", "");
	return 1;
}
CMD:przyjmij(playerid, params[])
{
	new id = strval(params), data[250];
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /przyjmij [id zawiadomienia]");
	if(PlayerData[playerid][pFrakcja] == 0) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	if(PlayerData[playerid][pSluzba] == false) return SendClientMessage(playerid, -1, "{a4a4a4}Nie jestes na sluzbie.");
	if(ZawiadomieniaData[id][zAktywny] == false) return SendClientMessage(playerid, -1, "{a4a4a4}Zawiadomienie o tym id nie jest aktywne.");
	if(ZawiadomieniaData[id][zFrakcja] != PlayerData[playerid][pFrakcja]) return SendClientMessage(playerid, -1, "{a4a4a4}Zawiadomienie o tym id nie nalezy do twojej frakcji.");
	
	ZawiadomieniaData[id][zAktywny] = false;
	format(data,sizeof(data),"\
									Przyjmujesz zawiadomienie id: %d\n\
									Informacje dodatkowe:\n\
									Tresc zawiadomienia: %s\n\
									Zawiadamiajacy (gracz): %s (id): %d\n\
									Zawiadomienie wyslane z lokalizacji: %s\n\
									Lokalizacja tego gracza zostala zaznaczona teraz na twojej mapie.",
									id, ZawiadomieniaData[id][zTresc], ZawiadomieniaData[id][zGracz], ZawiadomieniaData[id][zGraczID], ZawiadomieniaData[id][zGPS]);
	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Zawiadomienie:", data,  "Zamknij", "");
	new Float:x, Float:y, Float:z;
	GetPlayerPos(ZawiadomieniaData[id][zGraczID], x,y,z);
	if(IsValidDynamicMapIcon(PlayerData[playerid][pGPSZawiadom])) DestroyDynamicMapIcon(PlayerData[playerid][pGPSZawiadom]);
	PlayerData[playerid][pGPSZawiadom] = CreateDynamicMapIcon(x,y,z, 2, -1, 0, 0, playerid, 100000, MAPICON_GLOBAL_CHECKPOINT);
	return 1;
}
CMD:freeze(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /freeze [id]");
	if(PlayerData[playerid][pRanga] < RANGA_MODERATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	TogglePlayerControllable(strval(params), false);
	return 1;
}
/*
CMD:restartt(playerid, params[])
{
    if(PlayerData[playerid][pRanga] < RANGA_ADMINISTRATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	format(s, sizeof(s), "[PTR-Serw]{FF0000}Administrator {FFFFFF}%s (%d) {FF0000}RESTART SERWERA", PlayerData[playerid][pName], playerid);
    SetTimer("GameModeExit", params[0] * 1000, 0); 
    new s[256];
	f("ponownego uruchomienia serwera Uwaga nastapi poprzez %d sekund!", params[0]);
    format(s, sizeof(s), "{FF0000}[PTR-Serw]ponownego uruchomienia serwera Uwaga nastapi poprzez %d sekund!", params[0]);
	SCMTA(LRED, string); 
}
*/
CMD:restart(playerid, params[])
{   
	new s[256];   
    new string[128];
	if(PlayerData[playerid][pRanga] < RANGA_ADMINISTRATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	format(s, sizeof(s), "[PTR-Serw]{FF0000}Administrator {FFFFFF}%s (%d) {FF0000}RESTART SERWERA", PlayerData[playerid][pName], playerid);
    if(sscanf(params, "d", params[0])) return SCM(playerid, LRED, "/Restart (serwera)"); 
    SetTimer("GameModeExit", params[0] * 1000, 0); 
    f("{FF0000}[PTR-Serw]ponownego uruchomienia serwera Uwaga nastapi poprzez %d sekund!!", params[0]);
    SCMTA(LRED, string); 
    return 1;
}
CMD:rest(playerid, params[])
{
    if(PlayerData[playerid][pRanga] < RANGA_ADMINISTRATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	{
		ClearGlobalChat();
		new s[256];
		format(s, sizeof(s), "[PTR-Serw]{FF0000}Administrator {FFFFFF}%s (%d) {FF0000}RESTART SERWERA", PlayerData[playerid][pName], playerid);
		SendClientMessageToAll(-1, s);
	}
	SendRconCommand("gmx");
    return 1;
}


CMD:unfreeze(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /unfreeze [id]");
	if(PlayerData[playerid][pRanga] < RANGA_MODERATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	TogglePlayerControllable(strval(params), true);
	return 1;
}
CMD:ekran(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /ekran [tekst]");
	if(PlayerData[playerid][pRanga] < RANGA_ADMINISTRATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	GameTextForAll(params, 10000, 3);
	return 1;
}
CMD:bron(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /bron [id broni]");
	if(PlayerData[playerid][pRanga] < RANGA_ADMINISTRATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	GivePlayerWeaponEx(playerid, strval(params), 9999);
	return 1;
}
CMD:czysc(playerid, params[])
{
	if(PlayerData[playerid][pRanga] < RANGA_POMOCNIK) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	{
		ClearGlobalChat();
		new s[256];
		format(s, sizeof(s), "[PTR-Serw]{FF0000}Administrator {FFFFFF}%s (%d) {FF0000}wyczyscil czat", PlayerData[playerid][pName], playerid);
		SendClientMessageToAll(-1, s);
	}
	return 1;
}
CMD:unbw(playerid, params[])
{
	new player = strval(params);
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /unbw [id]");
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	if(PlayerData[player][pDeath] == false) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz o podanym id nie ma bw.");
	PlayerData[player][pDeath] = false;
	SetCameraBehindPlayer(player);
	SetPlayerHealth(player, SETTINGS_PLAYER_HP_AFTER_BW);
	SetPlayerDrunkLevel(player, 0);
	ClearAnimations(player);
	TogglePlayerControllable(player, true);
	return 1;
}
CMD:zczas(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /zczas [godzina]");
	if(PlayerData[playerid][pRanga] < RANGA_ZASLUZONY) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	SetPlayerTime(playerid, strval(params), 0);
	return 1;
}
CMD:settime(playerid, params[])
{
	new czas;
	
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /settime [godzina]");
	if(PlayerData[playerid][pRanga] < RANGA_JUNIORADMIN) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	SetWorldTime(czas);
	return 1;
}
CMD:zpogode(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /zpogode [id pogody]");
	if(PlayerData[playerid][pRanga] < RANGA_ZASLUZONY) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	SetPlayerWeather(playerid, strval(params));
	return 1;
}
CMD:azmienpogode(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /azmienpogode [id pogody]");
	if(PlayerData[playerid][pRanga] < RANGA_TECHNIK_TS3) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	SetWeather(strval(params));
	ServerData[sPogoda] = strval(params);
	return 1;
}


CMD:rsp(playerid)
{
	if(PlayerData[playerid][pRanga] < RANGA_MODERATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	GameTextForAll("~r~Respawn ~b~pojazdow ~r~za:~n~~w~10", 1000, 4);
	resp = 10;
	RespTimerTImer = SetTimer("resptimer", 1000, true);
	return 1;
}

CMD:createvehicle(playerid, params[])
{
	new modelid, owner, frakcja, firma, check_owner, check_private, check_ownern[24], data[250], uid, Float: x, Float: y, Float: z, Float:a, typee, v;
	if(sscanf(params, "dD(0)D(0)D(0)", modelid, owner, frakcja, firma)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /createvehicle [modelid] [owneruid ('-1' - publiczny, '0' - dla ciebie)] [frakcja(?) uid] [firma(?) [uid]]");
	if(frakcja < 0 || frakcja > 10) return SendClientMessage(playerid, -1, "{a4a4a4}Na serwerze mamy frakcje od uid 0 do 10. Wpisales niepoprawna wartosc w polu 'frakcja'");
	if(firma != 0 && FirmaData[firma][fAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}UID firmy ktorej chcesz nadac pojazd nie istnieje.");
	if(owner < -1) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisales niepoprawna wartosc w polu 'owneruid'.");
	if(frakcja != 0 && firma != 0) return SendClientMessage(playerid, -1, "{a4a4a4}Pojazd nie moze byc podpisany pod firme i frakcje jednoczesnie. Zdecyduj sie i popraw pola 'frakcja' oraz 'firma'.");
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	
	if(owner == 0)
	{
		check_owner = PlayerData[playerid][pUID];
		check_private = 1;
	}
	else
	{
		check_owner = owner;
		check_private = 1;
		format(check_ownern, 24, "%s", "---");
	}
	if(frakcja == 0 && firma == 0 && owner != -1)
	{
		check_private = 1;
		format(check_ownern, 24, "%s", PlayerData[playerid][pName]);
	}
	else if(frakcja != 0 || firma != 0)
	{
		check_private = 0;
	}
	if(frakcja != 0)
	{
		new str_frakcja[30];
		switch(frakcja)
		{
			case 1: str_frakcja = ""#GRUPA_LEVEL_1"";
			case 2: str_frakcja = ""#GRUPA_LEVEL_2"";
			case 3: str_frakcja = ""#GRUPA_LEVEL_3"";
			case 4: str_frakcja = ""#GRUPA_LEVEL_4"";
			case 5: str_frakcja = ""#GRUPA_LEVEL_5"";
			case 6: str_frakcja = ""#GRUPA_LEVEL_6"";
			case 7: str_frakcja = ""#GRUPA_LEVEL_7"";
			case 8: str_frakcja = ""#GRUPA_LEVEL_8"";
			case 9: str_frakcja = ""#GRUPA_LEVEL_9"";
			case 10: str_frakcja = ""#GRUPA_LEVEL_10"";
		}
		format(check_ownern, 24, "%s", str_frakcja);
		check_owner = -1;
		check_private = 0;
	}
	if(firma != 0)
	{
		format(check_ownern, 24, "%s", FirmaData[firma][fName]);
	}
	if(owner == -1)
	{
		check_owner = -1;
		check_private = 0;
		format(check_ownern, 24, "%s", "Publiczny");
	}
	
	
	
	GetPlayerPos(playerid, x,y,z);
	GetPlayerFacingAngle(playerid, a);
	format(data,sizeof(data),"INSERT INTO `data_vehicles` SET `private` = '%d', `owneruid`='%d', `owner` = '%s', `model` = '%d', `hp` = '-1234', `sampid` = '-1', `firmy` = '%d', `frakcji` = '%d', `x` = '%f', `y` = '%f', `z` = '%f', `type` = '%d'", 
	check_private, check_owner, check_ownern, modelid, firma, frakcja, x,y,z, typee);
	mysql_query(data);
		
		
	format(data, sizeof data, "SELECT `uid` FROM `data_vehicles` WHERE `hp` = '-1234'");
	mysql_query(data);
	mysql_store_result();
	mysql_fetch_row(data, "|");
	mysql_free_result();
	sscanf(data, "p<|>d",
	uid);
		
	format(data,sizeof(data), "UPDATE `data_vehicles` set `hp` = '1000' where `uid` = '%d'",  uid ), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_vehicles` set `a` = '%f' where `uid` = '%d'", a, uid ), mysql_query(data);
		
		
	v = SpawnVehicle(uid);
	
	for(new xx=0; xx<sizeof(SalonInfo); xx++)
	{
		if(GetVehicleModel(v) == GetVehicleModelIdByName(SalonInfo[xx][3]))
		{
			typee = SalonInfo[xx][0];
			break;
		}
	}
	
	
	format(data,sizeof(data), "UPDATE `data_vehicles` set `type` = '%d' where `uid` = '%d'",  typee, uid ), mysql_query(data);
	
	VehicleData[v][vType] = typee;
	//Typ 1  = jednoslady
	//Typ 2 = sportowe
	//Typ 3 = osobowe
	//Typ 4 = dostawcze
	//Typ 5 = reszta nienadajaca sie do salonu (auta lspd itp)
	new vid;
	format(data,sizeof(data),"{a4a4a4}Tworzyles pojazd (uid: %d) (modelid: %d) (f: %d) (fr: %d) (ownuid: %d) (own: %s)", uid, modelid, firma, frakcja, check_owner, check_ownern);
	SendClientMessage(playerid, -1, data);
	format(data, sizeof(data), "SELECT `sampid` FROM `data_vehicles` WHERE `uid` = '%d'", uid);
	mysql_query(data);
	mysql_store_result();
	mysql_fetch_row(data, "|");
	sscanf(data, "p<|>d",
	vid);
	PutPlayerInVehicle(playerid, vid, 0);
	mysql_free_result();
	return 1;
}

CMD:editvehicle(playerid, params[])
{
	new arg1[128], arg2[128];
	new data[511+1];
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{a4a4a4}Nie masz uprawnien do uzywania tej komendy!");
	if(sscanf(params, "s[128]s()[128]", arg1, arg2)) return SCM(playerid, -1, "{a4a4a4}Uzyj /editvehicle [vid / usun / tp]");
	if(!strcmp(arg1, "vid", true))
	{
		if(!GetPlayerVehicleID(playerid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SCM(playerid, -1, "{a4a4a4}Musisz byc kierowca pojazdu!");
		new vid = GetPlayerVehicleID(playerid);
		new query[511+1];
		new i;
		if(sscanf(arg2, "d", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editvehicle vid [vehicleid]");
		format(query, sizeof(query), "UPDATE `data_vehicles` SET `model` = '%i' WHERE `sampid` = '%i'", i, vid); mysql_query(query);
		VehicleData[vid][vModel] = i;
		format(data, sizeof(data), "{a4a4a4}Pojazdowi o sampid %i zostal nadany nowy modelid %d!", vid, i);
		SCM(playerid, -1, data);
		return 1;
	}
	if(!strcmp(arg1, "tp", true))
	{
		new i;
		if(sscanf(arg2, "d", i)) return SCM(playerid, -1, "{a4a4a4}Wpisz /editvehicle tp [vehicleid pojazdu]");
		SetPlayerPos(playerid, VehicleData[i][vPos][0]+1, VehicleData[i][vPos][1], VehicleData[i][vPos][2]);
		return 1;
	}
	if(!strcmp(arg1, "pos", true)) {
		new i, Float:x, Float: y, Float: z, Float: a;
		if(!IsPlayerOnFoot(playerid)) return SCM(playerid, -1, "{a4a4a4}Aby to zrobic musisz byc na nogach!");
		if(sscanf(arg2, "d", i)) return SCM(playerid, -1, "{a4a4a4}Wpisz /editvehicle pos [vehicleid pojazdu]");
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);
		SetVehiclePos(i, x, y, z);
		SetVehicleZAngle(i, a);
		PutPlayerInVehicle(playerid, i, 0);
		format(data, sizeof(data), "{a4a4a4}Pojazd UID: %d (vid: %d): Nadane tymczasowe pozycje: x: %f ; y: %f ; z: %f ; rotZ: %f. Aby zapisać pozycje zaparkuj pojazd! (/v lub NUM8", VehicleData[i][vUID], i, x, y, z, a);
		SCM(playerid, -1, data);
		return 1;
	}
	return 1;
}

/*CMD:deletevehicle(playerid, params[])
{
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	new vid = GetPlayerVehicleID(playerid);
	new query[256];
	format(query, sizeof(query), "UPDATE `data_vehicles` set `aktywny` = '%d' where `uid` = '%d'", 1, VehicleData[vid][vUID]); mysql_query(query);
	SendClientMessage(playerid, -1, "{a4a4a4}Status pojazdu zostal zmieniony!");
	LoadVehicles(0, 1);
	LoadVehicles(0, 0);
	return 1;
}*/

CMD:savevehicle(playerid, params[])
{
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	LoadVehicles(0, 2); // zapis pojazdow
	SendClientMessage(playerid, -1, " {a4a4a4}Pojazdy zostaly zapisane! ");
	return 1;
}

CMD:reloadvehicle(playerid, params[])
{
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	LoadVehicles(0, 0); //resp pojazdow
	SendClientMessage(playerid, -1, " {a4a4a4}Pojazdy zostaly zaladowane ponownie! ");
	return 1;
}


CMD:createitem(playerid, params[])
{
	new data[1355], przedmiot[30], var1, var2, var3, var4, var5, var6;
	if(sscanf(params, "s[30]iiiiii", przedmiot, var1, var2, var3, var4, var5, var6))
	{
		SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /createitem <przedmiot> <var1> <var2> <var3> <var4> <var5> <var6>");
		
		format(data,sizeof(data),"%s\
									Wpisz: /createitem <przedmiot> <var1> <var2> <var3> <var4> <var5> <var6>\n\n\
									Wpisujac:\n\
									1) /createitem <nazwa> <1> <1> <0> <0> <0> <0> - Telefon\n\
									2) /createitem <nazwa> <2> <1> <0> <0> <0> <0> - Telefon Luksusowy\n\
									3) /createitem <nazwa> <3> <1> <0> <0> <0> <0> - Zestaw naprawczy\n\
									4) /createitem <nazwa> <4> <1> <0> <0> <0> <0> - Zapasowa opona\n\
									5) /createitem <nazwa> <5> <1> <0> <0> <0> <0> - Spadochron\n\
		",data);
		format(data,sizeof(data),"%s\
									6) /createitem <nazwa> <6> <1> <0> <0> <0> <0> - Kask motocyklowy\n\
									7) /createitem <nazwa> <7> <1> <0> <0> <0> <0> - Czapka swiateczna\n\
									8) /createitem <nazwa> <8> <1> <0> <0> <0> <0> - GBS\n\
									9) /createitem <nazwa> <9> <25> <0> <0> <0> <0> - Doladowanie $25\n\
									10) /createitem <nazwa> <10> <150> <0> <0> <0> <0> - Doladowanie $150\n\
									11) /createitem <nazwa> <11> <1> <0> <0> <0> <0> - CB\n\
		",data);
		format(data,sizeof(data),"%s\
									12) /createitem <nazwa> <12> <GLOD> <SEN> <0> <0> <0> - Jedzenie\n\
									13) /createitem <nazwa> <13> <BRON_ID> <AMUNICJA> <-1> <0> <0> - Bron\n\
									14) /createitem <nazwa> <14> <SKIN_ID> <0> <0> <0> <0> - Ubrania\n\
									15) /createitem <nazwa> <15> <1> <0> <0> <0> <0> - Discman\n\
								",data);
		ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Tworzenie przedmiotu:", data, "Zamknij", "");
		return 1;
	}	
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	CreatePlayerItem(playerid, przedmiot, var1, var2, var3, var4, var5, var6);
	SendClientMessage(playerid, -1, "{a4a4a4}Przedmiot zostal stworzony i dodany do listy twoich przedmiotow.");
	return 1;
}

CMD:setvw(playerid, params[])
{
	new player, vw;
	if(sscanf(params, "dD(0)", player, vw)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /setvw [id] [vw]");
	if(PlayerData[playerid][pRanga] < RANGA_POMOCNIK) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	SetPlayerVirtualWorldEx(player, vw);
	return 1;
}
CMD:acp(playerid, params[])
{
	if(PlayerData[playerid][pRanga] < RANGA_POMOCNIK) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	ShowPlayerDialog(playerid, DIALOG_TAP_PANEL_ADMINA, DIALOG_STYLE_LIST, "Menu Teleportu", "Teleport gracza do siebie\nTeleport siebie do gracza\nTeleport gracza do gracza\nTeleport do warpa (WKROTCE)", "Dalej", "Anuluj");

	return 1;
}
CMD:apanel(playerid)
{
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	new data[1000];
	data = "#\t#\t#\t#\n";
	
	format(data,sizeof(data),"%s\	
							{FF8000}#Lotto...\t#\t#\t#\n\
							Godzina losowania\t%d\t#\t*click*\n\
							Minuta losowania\t%d\t#\t*click*\n\
							Pula wygranej\t%d\t#\t*click*\n\
							Pula z zakupionych kuponow\t%d\t#\t*click*\n\
							{FF8000}#Salda frakcji...\t#\t#\t#\n\
							Saldo konta frakcji "#GRUPA_LEVEL_1"\t%d\t#\t*click*\n\
							Saldo konta frakcji "#GRUPA_LEVEL_2"\t%d\t#\t*click*\n\
							Saldo konta frakcji "#GRUPA_LEVEL_3"\t%d\t#\t*click*\n\
							Saldo konta frakcji "#GRUPA_LEVEL_4"\t%d\t#\t*click*\n", 
							data, 
							lotto_godzina, lotto_minuta, pula_wygranej, pula_zakup_players, 
							GetFrakcjaCash(1), GetFrakcjaCash(2), GetFrakcjaCash(3), GetFrakcjaCash(4));
	format(data,sizeof(data),"%s\	
							Saldo konta frakcji "#GRUPA_LEVEL_5"\t%d\t#\t*click*\n\
							Saldo konta frakcji "#GRUPA_LEVEL_6"\t%d\t#\t*click*\n\
							Saldo konta frakcji "#GRUPA_LEVEL_7"\t%d\t#\t*click*\n\
							Saldo konta frakcji "#GRUPA_LEVEL_8"\t%d\t#\t*click*\n\
							Saldo konta frakcji "#GRUPA_LEVEL_9"\t%d\t#\t*click*\n\
							Saldo konta frakcji "#GRUPA_LEVEL_10"\t%d\t#\t*click*\n\
							", data, 
							GetFrakcjaCash(5),GetFrakcjaCash(6),GetFrakcjaCash(7),
							GetFrakcjaCash(8),GetFrakcjaCash(9),GetFrakcjaCash(10));	
	format(data,sizeof(data),"%s\
							{FF8000}#Natychmiastowe dzialania...\t#\t#\t#\n\
							Wywolaj zapadniecie sie klody...\t#\t#\t#\n\
							Wywolaj wytworzenie sie pozaru...\t#\t#\t#\n\
							Wywolaj wytworzenie sie plamy...\t#\t#\t#\n",
							data);
	ShowPlayerDialog(playerid, DIALOG_PANEL_ADMINA, DIALOG_STYLE_TABLIST_HEADERS, "Panel:", data,  "Wybierz", "Zamknij");
	return 1;
}


CMD:warn(playerid, params[])
{
	if(PlayerData[playerid][pRanga] < RANGA_JUNIORADMIN) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	ShowPlayerDialog(playerid, DIALOG_TAP_PANEL_ADMINA1, DIALOG_STYLE_LIST, "Menu Warn", "Teleport gracza do siebie\nTeleport siebie do gracza", "Dalej", "Anuluj");

	return 1;
}
/*
CMD:setvw(playerid, params[])
{
	new player, vw;
	if(sscanf(params, "dD(0)", player, vw)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /setvw [id] [vw]");
	if(PlayerData[playerid][pRanga] < RANGA_POMOCNIK) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	SetPlayerVirtualWorldEx(player, vw);
	return 1;
}
*/
CMD:setint(playerid, params[])
{
	new player, vw;
	if(sscanf(params, "dD(0)", player, vw)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /setint [id] [interior]");
	if(PlayerData[playerid][pRanga] < RANGA_POMOCNIK) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	SetPlayerInteriorEx(player, vw);
	return 1;
}
CMD:edittowar(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz /edittowar [uid]");
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	new data[500], uid = strval(params), towar_dla[30];
	PlayerData[playerid][pTowarTworzUID] = uid;
	data = "#\t#\n";
	
	switch(TowarData[uid][tTowarRequiste])
	{
		case 0: towar_dla = "gracz + vip";
		case 1: towar_dla = "gracz";
		case 2: towar_dla = "vip";
	}
	format(data,sizeof(data),"%s\
										UID\t%d\n\
										Towar\t%s\n\
										Stan\t%s\n\
										Towar dla ...\t%s\n\
										Score za przewoz (gracz)\t%d\n\
										Score za przewoz (vip)\t%d\n\
										Kasa za przewoz (gracz)\t%d\n\
										Kasa za przewoz (vip)\t%d\n\
										Zaladunek\t%f %f %f\n\
										Rozladunek\t%f %f %f\n\
										Zaladunek w ...\t%s\n\
										Rozladunek w ...\t%s\n\
										ADR...\t%s\n\
										EXP...\t%d\n\
										Kasa za przewoz (firma)...\t%d\n\
										Typ towaru...\t%s\n\
										Od godziny (..) do godziny (..):\t%d - %d\n\
										Nadpisz ten towar...\t#\n\
	", 
	data, 
	uid, 
	TowarData[uid][tNazwa], 
	((TowarData[uid][tTowarStan] == 1) ? ("Aktywny") : ("Nie aktywny")),
	towar_dla,
	TowarData[uid][tScorePlayer],
	TowarData[uid][tScoreVip],
	TowarData[uid][tKasaPlayer],
	TowarData[uid][tKasaVip],
	TowarData[uid][tZaladunek][0],TowarData[uid][tZaladunek][1],TowarData[uid][tZaladunek][2],
	TowarData[uid][tRozladunek][0],TowarData[uid][tRozladunek][1],TowarData[uid][tRozladunek][2],
	TowarData[uid][tZaladunekW],
	TowarData[uid][tRozladunekW],
	((TowarData[uid][tADR] == 1) ? ("Potrzebny") : ("Nie potrzebny")),
	TowarData[uid][tExp],
	TowarData[uid][tKasaFirma],
	((TowarData[uid][tLegalny] == 1) ? ("Legalny") : ("Nie legalny")),
	TowarData[uid][tOdGodz],
	TowarData[uid][tDoGodz]
	);
	
	ShowPlayerDialog(playerid, DIALOG_TWORZENIE_TOWARU, DIALOG_STYLE_TABLIST_HEADERS, "Edycja towaru:", data,  "Zmien", "Wyjdz");
	return 1;
}


CMD:addprawko(playerid, params[])
{
	
	if(isnull(params)) 
	{
		SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /addprawko [typ]");
		SendClientMessage(playerid, -1, "{a4a4a4}( "#PRAWKO_TYPE_A" - kat. A | "#PRAWKO_TYPE_B" - kat. B | "#PRAWKO_TYPE_C" - kat. C |"#PRAWKO_TYPE_D" - kat. D | "#PRAWKO_TYPE_L" - kat. L )");
		return 1;
	}
	
	new data[250], Float:x,Float:y,Float:z;
	GetPlayerPos(playerid,x,y,z);
	
	format(data,sizeof(data),"INSERT INTO `data_prawojazdy` SET `x`='%f', `y`='%f', `z`='%f', `type` = '%d'", x,y,z, strval(params));
	mysql_query(data);
	
	format(data,sizeof(data),"{a4a4a4}Checkpoint dla prawa jazdy, praktyki zostal stworzony na x: %f, y: %f, z: %f", x,y,z);
	SendClientMessage(playerid, -1, data);
	return 1;
}


CMD:addtowar(playerid)
{
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	new data[500], uid = towar_value+1, towar_dla[30];
	PlayerData[playerid][pTowarTworzUID] = uid;
	
	if(uid - 1 != -1)
	{
		if(TowarData[uid-1][tTowarUID] == 0) 
		{
			PlayerData[playerid][pTowarTworzUID]--;
			uid = PlayerData[playerid][pTowarTworzUID];
		}
	}
	
	data = "#\t#\n";
	
	switch(TowarData[uid][tTowarRequiste])
	{
		case 0: towar_dla = "gracz + vip";
		case 1: towar_dla = "gracz";
		case 2: towar_dla = "vip";
	}
	format(data,sizeof(data),"%s\
										UID\t%d\n\
										Towar\t%s\n\
										Stan\t%s\n\
										Towar dla ...\t%s\n\
										Score za przewoz (gracz)\t%d\n\
										Score za przewoz (vip)\t%d\n\
										Kasa za przewoz (gracz)\t%d\n\
										Kasa za przewoz (vip)\t%d\n\
										Zaladunek\t%f %f %f\n\
										Rozladunek\t%f %f %f\n\
										Zaladunek w ...\t%s\n\
										Rozladunek w ...\t%s\n\
										ADR...\t%s\n\
										EXP...\t%d\n\
										Kasa za przewoz (firma)...\t%d\n\
										Typ towaru...\t%s\n\
										Od godziny (..) do godziny (..):\t%d - %d\n\
										ZAKONCZ DODAWANIE TOWARU\t#\n\
	", 
	data, 
	uid, 
	TowarData[uid][tNazwa], 
	((TowarData[uid][tTowarStan] == 1) ? ("Aktywny") : ("Nie aktywny")),
	towar_dla,
	TowarData[uid][tScorePlayer],
	TowarData[uid][tScoreVip],
	TowarData[uid][tKasaPlayer],
	TowarData[uid][tKasaVip],
	TowarData[uid][tZaladunek][0],TowarData[uid][tZaladunek][1],TowarData[uid][tZaladunek][2],
	TowarData[uid][tRozladunek][0],TowarData[uid][tRozladunek][1],TowarData[uid][tRozladunek][2],
	TowarData[uid][tZaladunekW],
	TowarData[uid][tRozladunekW],
	((TowarData[uid][tADR] == 1) ? ("Potrzebny") : ("Nie potrzebny")),
	TowarData[uid][tExp],
	TowarData[uid][tKasaFirma],
	((TowarData[uid][tLegalny] == 1) ? ("Legalny") : ("Nie legalny")),
	TowarData[uid][tOdGodz],
	TowarData[uid][tDoGodz]
	);
	
	ShowPlayerDialog(playerid, DIALOG_TWORZENIE_TOWARU, DIALOG_STYLE_TABLIST_HEADERS, "Tworzenie towaru:", data,  "Zmien", "Wyjdz");
	return 1;
}



CMD:arangi(playerid)
{	
	new data[700];
	
	format(data,sizeof(data),"\
	0 - Kierowca\n\
	"#RANGA_ZASLUZONY" - Zasluzony\n\
	"#RANGA_TECHNIK_TS3" - Technik TS3\n\
	"#RANGA_PROGRAMISTA" - Programista\n\
	"#RANGA_MAPER" - Mapper\n\
	"#RANGA_POMOCNIK" - Pomocnik\n\
	"#RANGA_MODERATOR" - Moderator\n\
	"#RANGA_JUNIORADMIN" - Junior Admin\n\
	"#RANGA_ADMINISTRATOR" - Administrator\n\
	"#RANGA_WSPOLWLASCICIEL" - Wspolwlasciciel\n\
	"#RANGA_WLASCICIEL" - Wlasciciel");
	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "SPIS UID RANG:", data, "Zamknij", "");
	return 1;
}


CMD:setranga(playerid, params[])
{
	new player, ranga, data[128];
	if(sscanf(params, "dd", player, ranga)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /setranga [ID] [ID Rangi (/arangi)]");
	//if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");  //DODAĆ!
	PlayerData[player][pRanga] = ranga;
	format(data,sizeof(data),"{a4a4a4}Poprawnie zmioniono graczu %s range na %d.", PlayerData[player][pName], ranga);
	SendClientMessage(playerid, -1, data);
	return 1;
}


CMD:setskin(playerid, params[])
{
	new player, skin;
	if(sscanf(params, "dd", player, skin)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /setskin [ID] [SKIN ID]");
	if(skin < 0 || skin > 311) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /setskin [ID] [SKIN ID] (0 - 311)");
	if(PlayerData[playerid][pRanga] < RANGA_JUNIORADMIN) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	PlayerData[player][pSkin] = skin;
	SetPlayerSkin(player, PlayerData[player][pSkin]);
	return 1;
}


CMD:afrakcje(playerid)
{	
	new data[700];
	
	format(data,sizeof(data),"\
	0 - Gracz\n\
	1 - Policja\n\
	2 - Pogotowie\n\
    3 - Frakcja-Wolna\n\
	4 - Straz Graniczna\n\
	5 - Straz Pozarna\n\
	6 - Pomoc drogowa\n\
    7 - San News\n\
	8 - Taxi\n\
    9 - Gang Olsena\n\
    10 - Makaveli");
	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Spis uid frakcji", data, "Zamknij", "");
	return 1;
}
CMD:setfrakcja(playerid, params[])
{
	new player, frakcja, data[128];
	if(sscanf(params, "dd", player, frakcja)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /setfrakcja [ID] [ID Frakcji] (Wpisz: /afrakcje, aby zobaczyc typy)");
	if(PlayerData[playerid][pRanga] < RANGA_JUNIORADMIN) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	PlayerData[player][pFrakcja] = frakcja;
	format(data,sizeof(data),"{a4a4a4}Poprawnie zmioniono graczu %s frakcje na %d.", PlayerData[player][pName], frakcja);
	SendClientMessage(playerid, -1, data);
	
	format(data,sizeof(data), "UPDATE `data_players` set `frakcja` = '%d' where `uid` = '%d'", 			frakcja,  	 PlayerData[player][pUID]);
	mysql_query(data);
	return 1;
}

CMD:eska(playerid, params[])
	{
	#pragma unused params
	PlayAudioStreamForPlayer(playerid, "http://www.miastomuzyki.pl/n/rmfmaxxx.pls");
	return 1;
	}
	
CMD:jresp(playerid, params[])
	{
	if(PlayerData[playerid][pRanga] < RANGA_JUNIORADMIN) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	#pragma unused params
	SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	return 1;
	}

CMD:tpdo(playerid, params[])
{
    new player = strval(params);
   	new v = GetPlayerVehicleID(player);
	new Float:Pos[3];
	if(isnull(params)) return SCM(playerid,-1,"{a4a4a4}Wpisz /tpdo [nick/id gracza]");
	if(PlayerData[playerid][pRanga] < RANGA_JUNIORADMIN) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	if(!IsPlayerConnected(player)) return SCM(playerid, -1, "{a4a4a4}Ten gracz nie jest połączony z serwerem!");
 //   if(PlayerData[player][pAFK] == true) SCM(playerid,-1,"{a4a4a4}Uwaga! gracz do którego się teleportowaleś jest AFK.");
    SetPlayerInterior(playerid,GetPlayerInterior(player));
	SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(player));
//	PlayerData[playerid][uidDom] = PlayerData[player][uidDom];
//	PlayerData[playerid][uidMotel] = PlayerData[player][uidMotel];
//	PlayerData[playerid][uidBurger] = PlayerData[player][uidBurger];
//	PlayerData[playerid][uidBank] = PlayerData[player][uidBank];
//	PlayerData[playerid][pInHospital] = PlayerData[player][pInHospital];
	GetPlayerPos(player,Pos[0],Pos[1],Pos[2]);

//	format(buffer,sizeof(buffer),"[CMD:tpdo] Operator %s teleportowal sie  do gracza %s",pName[playerid],pName[player]);
//	WriteLog(buffer,LOG_TYP_ADMIN_USE);

	if(IsPlayerInAnyVehicle(playerid))
	{
		SetVehiclePos(GetPlayerVehicleID(playerid), Pos[0]+3,Pos[1],Pos[2]);
		return 1;
	}
	if(IsPlayerInAnyVehicle(player))  PutPlayerInVehicleEx(playerid, v , 1);
	if(!IsPlayerInAnyVehicle(player))  SetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
	return 1;
}

CMD:tpp(playerid, params[])
{
	new id1, id2, v;
	if(sscanf(params, "dd", id1, id2)) return SCM(playerid, -1, "{a4a4a4}Wpisz: /tpp [id 1] [id 2]");
	if(PlayerData[playerid][pRanga] < RANGA_JUNIORADMIN) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
//	if(PlayerData[id1][Zalogowany]==false) return Info(playerid,"Gracz o podanym pierwszym id nie jest na serwerze");
//	if(PlayerData[id2][Zalogowany]==false) return Info(playerid,"Gracz o podanym drugim id nie jest na serwerze");
 //   if(PlayerData[id2][pAFK] == true) SCM(playerid,-1,"{a4a4a4}Uwaga! drugi gracz jest AFK.");
 //   if(PlayerData[id1][pAFK] == true) SCM(playerid,-1,"{a4a4a4}Uwaga! pierwszy gracz jest AFK.");
	SetPlayerInterior(id1,GetPlayerInterior(id2));
	SetPlayerVirtualWorld(id1,GetPlayerVirtualWorld(id2));
//	PlayerData[id1][uidDom] = PlayerData[id2][uidDom];
//	PlayerData[id1][uidMotel] = PlayerData[id2][uidMotel];
//	PlayerData[id1][uidBurger] = PlayerData[id2][uidBurger];
//	PlayerData[id1][uidBank] = PlayerData[id2][uidBank];
//	PlayerData[id1][pInHospital] = PlayerData[id2][pInHospital];
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(id2, X,Y,Z);
	v = GetPlayerVehicleID(id2);

//	format(buffer,sizeof(buffer),"[CMD:tp] Operator %s teleportowal gracza %s do gracza %s",pName[playerid],pName[id1],pName[id2]);
//	WriteLog(buffer,LOG_TYP_ADMIN_USE);


	if(IsPlayerInAnyVehicle(id1))
	{
		SetVehiclePos(GetPlayerVehicleID(id1), X+3,Y,Z);
		return 1;
	}

	if(IsPlayerInAnyVehicle(id2))  PutPlayerInVehicleEx(id1, v , 1);
	if(!IsPlayerInAnyVehicle(id2))  SetPlayerPos(id1, X, Y, Z);


	return 1;
}
	
CMD:repair(playerid,params[])
{
	new player = strval(params);
	if(isnull(params)) return SCM(playerid,-1,"{a4a4a4}Wpisz: /repair <id gracza>");
	if(PlayerData[playerid][pRanga] < RANGA_JUNIORADMIN) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");

	RepairVehicle(GetPlayerVehicleID(player));
	SetVehicleHealth(GetPlayerVehicleID(player), 999.9);
//	UpdateLicznikPlayer(playerid, GetPlayerVehicleID(player), 0);
//	format(buffer, sizeof buffer,"{FF0000}[PSTG] {BDBDBD}Operator {74DF00}[%d]%s {BDBDBD}użył funkcji admin repair", playerid, pName[playerid]);
//	SCMToAdmins(-1,buffer);
//	format(buffer,sizeof(buffer),"[CMD:repair] Operator %s naprawil pojazd graczowi %s",pName[playerid],pName[player]);
//	WriteLog(buffer,LOG_TYP_ADMIN_USE);

	return 1;
}
	
CMD:naprawall(playerid, params[])
	{
	#pragma unused params
	if(PlayerData[playerid][pRanga] < RANGA_JUNIORADMIN) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	{
		for(new i; i < MAX_VEHICLES; i++)
		{
			RepairVehicle(i);
		}
		new Gname[MAX_PLAYER_NAME];
		new string[100];
		GetPlayerName(playerid, Gname ,sizeof(Gname));
		format(string, sizeof(string), "{FFFFFF}Admin {FF0000}%s {FFFFFF}naprawil pojazdy wszystkim graczom {FF0000}!", Gname);
		SendClientMessageToAll(ZIELONY, string);
	}
	return 1;
	}



/*
CMD:raaangaaa(playerid, params[])
{
	if(IsPlayerAdmin(playerid))
	return PlayerData[playerid][pRanga] = strval(params);
}
*/

CMD:test(playerid, params[])
{
	new uid, czas_h, czas_m;
	if(sscanf(params, "ddd", uid, czas_h, czas_m)) return SendClientMessage(playerid, -1, "Wpisz: /test [uid] [czas = godziny] [czas = minuty] (narkotyki)");
	if(NarkotykiData[uid][nAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Uid niepoprawne....");
	
	
	NarkotykiData[uid][nCzas] = czas_h*3600 + czas_m*60 + gettime();
	SaveNarko(uid);
	return 1;
}

CMD:przeladujbt(playerid)
{
	new data[128];
	for(new i = 0; i < build_value; i++)
	{
		if(BudynekData[i][bAktywny] == 1)
		{
			SetBuildType(i, BudynekData[i][bType]);
			SaveBuild(i);
			format(data,sizeof(data),"Przeladowano budynek uid: %d, type: %d", i, BudynekData[i][bType]);
			SendClientMessage(playerid, -1, data);
		}
	}

	return 1;
}



//--------------------------------------------------------------------------vip---------------------------------------------
/*CMD:dj(playerid, params[])
{
	{
		if(isnull(params))
		{
		    SendClientMessage(playerid, ZIELONY, "Użyj: /dj[URL]");
		    SendClientMessage(playerid, ZIELONY, "Użyj /stopdj aby zatrzymać!");
		}
		else
		{
			new string[128], name[24];
   			GetPlayerName(playerid,name,24);
   			format(string,sizeof(string),"Dj %s włączył muzykę!",name);
			SendClientMessageToAll(-1,string);
			for(new i;i<MAX_PLAYERS;i++)
			{
				PlayAudioStreamForPlayer(i, params);
			ShowPlayerDialog(playerid, DIALOG_SPEC_KICK, DIALOG_STYLE_INPUT, "Spec (kick):", "Wpisz ponizej powod wyrzucenia gracza z serwera:",  "Zatwierdz", "Zamknij");
			}
		}
	}  //  else SendClientMessage(playerid, -1, "Zła komenda.");
	return 1;
}
*/
//DJ
CMD:dj(playerid)
{
	SendClientMessage(playerid, ZIELONY, "Użyj /stopdj aby zatrzymać!");
	ShowPlayerDialog(playerid, DIALOG_DJ, DIALOG_STYLE_INPUT, "Panel (dj):", "Wpisz URL piosenki",  "Zatwierdz", "Zamknij");

	return 1;
}
CMD:stopdj(playerid)
{
	{
	    for(new i;i<MAX_PLAYERS;i++)
	    {
	        StopAudioStreamForPlayer(i);
	    }
	} 
	//else SendClientMessage(playerid, -1, "Zła komenda.");
	return 1;
}
CMD:stop(playerid)
{
	StopAudioStreamForPlayer(playerid);
	return 1;
}


//--------------------------------------------------------------------------vip---------------------------------------------


CMD:n(playerid)
{
	SelectTextDraw(playerid, 0x00FF00FF);
	return 1;
}

CMD:play(playerid, params[])
{	
	new wartosc, pozycja, Float:xpos[3];
	if(sscanf(params, "dd", pozycja, wartosc)) return SendClientMessage(playerid, -1, "Wpisz: /play <pozycja? (0/1)> <wartosc>");
	GetPlayerPos(playerid, xpos[0], xpos[1], xpos[2]);
	
	if(pozycja == 0)
	{
		PlayerPlaySound(playerid, wartosc, 0.0, 0.0, 0.0);
	}
	else
	{
		PlayerPlaySound(playerid, wartosc, xpos[0], xpos[1], xpos[2]);
	}
	return 1;
}

CMD:error(playerid)
{
	new data[128];
	for(new i = 0; i < pickup_value; i++)
	{
		if(PickupData[i][pPickup_PWN_ID] == 0)
		{
			format(data,sizeof(data),"i: %d | uid: %d | aktywny: %d | x: %f | y: %f | z: %f", i, PickupData[i][pUID], PickupData[i][pAktywny], PickupData[i][pPos][0], PickupData[i][pPos][1], PickupData[i][pPos][2]);
			SendClientMessage(playerid, -1, data);
		}
	}
	return 1;
}	
CMD:ajet(playerid, params[])
{
	//	new JetPack
		if(PlayerData[playerid][pRanga] < RANGA_JUNIORADMIN) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
		PlayerData[playerid][pJetPack] = 69;
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
  return 1;
}
	
CMD:setlider(playerid, params[])
{
	new player, lider, data[450];
	if(PlayerData[playerid][pRanga] < RANGA_JUNIORADMIN) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	if(sscanf(params, "dd", player, lider)) 
	{
	
		format(data,sizeof(data),"%s\
					Wpisz: /setlider [ID] [LIDER]\n\n\
					Dostepne opcje:\n\n\
					Jezeli pragniesz nadac graczu lidera frakcji, w pole ''[LIDER]'' wpisz numer 1\n\
					Jezeli pragniesz nadac graczu lidera firmy, w pole ''[LIDER]'' wpisz numer 2\n\
		", data);
		format(data,sizeof(data),"%s\
						Jezeli pragniesz nadac graczu lidera firmy i frakcji, w pole ''[LIDER]'' wpisz numer 3\n\
						Jezeli pragniesz zabrac graczu calkowicie lidera (wszystkie), w pole ''[LIDER]'' wpisz numer 0\n\
		", data);
		
		ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "/setlider (typy):", data, "Zamknij", "");
		SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /setlider [ID] [LIDER]");
		return 1;
	}
	
	
	if(lider == 3 || lider == 2)
	{
		PlayerData[player][pFirmaRanga] = 3;
		format(data,sizeof(data), "UPDATE `data_players` set `firma_ranga` = '%d' where `uid` = '%d'", 			3,  	 PlayerData[player][pUID]);
		mysql_query(data);
	}
	PlayerData[player][pLider] = lider;
	
	format(data,sizeof(data),"{a4a4a4}Poprawnie zmioniono graczu %s lidera na %d.", PlayerData[player][pName], lider);
	SendClientMessage(playerid, -1, data);
	
	format(data,sizeof(data), "UPDATE `data_players` set `lider` = '%d' where `uid` = '%d'", 			lider,  	 PlayerData[player][pUID]);
	mysql_query(data);
	return 1;
}

CMD:setsedzia(playerid, params[]){
	new id, data[256];
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SCM(playerid, -1, "{a4a4a4}Nie masz uprawnien do uzywania tej komendy");
	if(sscanf(params, "d", id))  return SCM(playerid, -1, "{a4a4a4}Uzyj /setsedzia [ID]");
	if(PlayerData[id][pSedzia] == 1) return SCM(playerid, -1, "{a4a4a4}Gracz o podanym ID jest juz sedzia!");
	PlayerData[id][pSedzia] = 1;
	format(data, sizeof(data), "{a4a4a4}Gracz {0000ff}%s {ffffff}[{0000ff}%d{ffffff}] {a4a4a4}zostal sedzia!", PlayerName(id), id);
	SCM(playerid, -1, data);
	return 1;
}


CMD:spec(playerid, params[])
{
	new player = strval(params);
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /spec [ID]");
	if(PlayerData[playerid][pRanga] < RANGA_POMOCNIK) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "{a4a4a4}Podane id nie znajduje sie na serwerze online.");

	if(PlayerData[playerid][pSpecID] == -1)
	{
		PlayerData[playerid][pVW] = GetPlayerVirtualWorld(playerid);
		PlayerData[playerid][pInt] = GetPlayerInterior(playerid);
		GetPlayerHealth(playerid, PlayerData[playerid][pHP]);
		GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
		GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
		PlayerData[playerid][pSkin] = GetPlayerSkin(playerid);
	}
	
	SetPlayerVirtualWorldEx(playerid, GetPlayerVirtualWorld(player));
	SetPlayerInteriorEx(playerid, GetPlayerInterior(player));
	PlayerData[playerid][pSpecID] = player;
	
	TogglePlayerSpectating(playerid, 1);
	
	if(IsPlayerInAnyVehicle(player))  PlayerSpectateVehicle(playerid, GetPlayerVehicleID(player));
	if(!IsPlayerInAnyVehicle(player)) PlayerSpectatePlayer(playerid, player);
	
	KillTimer(PlayerData[playerid][pTimerSpec]);
	PlayerData[playerid][pTimerSpec]=SetTimerEx("SpecSystem",5000,true,"dd",playerid,player);
	
	PlayerSpecPanel(playerid, 1);
	PlayerSpecPanel(playerid, 4);
	return 1;
}

CMD:specoff(playerid, params[])
{
	if(PlayerData[playerid][pRanga] < RANGA_POMOCNIK) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	if(PlayerData[playerid][pSpecID] == -1) return SendClientMessage(playerid, -1,"{a4a4a4}Nikogo nie specujesz");
	
	SpecOffSystem(playerid);
	return 1;
}

CMD:zmiennick(playerid, params[])
{
	new player, newnick[MAX_PLAYER_NAME], data[128];
	if(sscanf(params, "ds[MAX_PLAYER_NAME]", player, newnick)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /zmiennick [ID] [Nick]");
	if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "{a4a4a4}Podane id nie znajduje sie na serwerze online.");
	if(PlayerData[playerid][pRanga] < RANGA_POMOCNIK) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	format(data,sizeof(data),"{a4a4a4}Poprawnie zmioniono graczu %s nick na %s.", PlayerData[player][pName], newnick);
	SendClientMessage(playerid, -1, data);
	
	SetPlayerName(player, newnick);
	format(PlayerData[player][pName], MAX_PLAYER_NAME, "%s", newnick);
	return 1;
}

CMD:kick(playerid, params[])
{
	new player, powod[30];
	if(sscanf(params, "ds[29]", player, powod)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /kick [ID] [Powod]");
	if(PlayerData[playerid][pRanga] < RANGA_MAPER) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "{a4a4a4}Podane id nie znajduje sie na serwerze online.");
	KickTimer(player, playerid, powod);
	return 1;
}

CMD:mute(playerid, params[])
{
	new player, powod[30], czas;
	if(sscanf(params, "ds[29]d", player, powod, czas)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /mute [ID] [Powod] [Czas (Minuty)]");
	if(PlayerData[playerid][pRanga] < RANGA_POMOCNIK && PlayerData[playerid][pRanga] != RANGA_ZASLUZONY) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "{a4a4a4}Podane id nie znajduje sie na serwerze online.");
	if(czas <= 0) return SendClientMessage(playerid, -1, "{a4a4a4}Niepoprawny czas wyciszenia.");
	Muted(player, playerid, powod, czas);
	return 1;
}
CMD:unmute(playerid, params[])
{
	new player = strval(params), data[128];
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /unmute [id gracza]");
	if(PlayerData[playerid][pRanga] < RANGA_POMOCNIK && PlayerData[playerid][pRanga] != RANGA_ZASLUZONY) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "{a4a4a4}Podane id nie znajduje sie na serwerze online.");
	if(PlayerData[player][pMuted] <= 0) return SendClientMessage(playerid, -1, "{a4a4a4}Ten gracz nie jest wyciszony!");


	PlayerData[player][pMuted] = 0;

	new naglowek[128];
	format(naglowek,sizeof(naglowek),"~p~~r~Gracz: %s~n~Admin: %s", PlayerData[player][pName], PlayerData[playerid][pName]);
	PlayerDataTXD(playerid, 4, "UN-Wyciszenie", "_", "_", naglowek);
	
	format(data,sizeof(data),"[PTR-Serw]{FE2E2E}Gracz [%d]%s zostal odciszony przez [%d]%s.", player, PlayerData[player][pName], playerid, PlayerData[playerid][pName]);
	SendClientMessageToAll(-1, data);
	return 1;
}

CMD:aj(playerid, params[])
{
	new player, czas, powod[128], data[128];

	if(sscanf(params, "dds[128]", player, czas, powod)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /aj [ID] [Czas (Minuty)] [Powod]");
	if(PlayerData[playerid][pRanga] < RANGA_MODERATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "{a4a4a4}Podane id nie znajduje sie na serwerze online.");
	if(czas <= 0) return  SendClientMessage(playerid, -1, "{a4a4a4}Niepoprawny czas aj.");

	
	PlayerData[player][pSkuty] = 0;
	PlayerData[player][pJail] = czas;
	PlayerData[player][pWantedLevel] = 0;
	SetPlayerWantedLevel(player, 0);
    SetPlayerInteriorEx(player, 0);
	SetPlayerVirtualWorldEx(player, 0);
	ClearAnimations(player);
	SetPlayerSpecialAction(player, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(player, 1);
	SetPlayerPos(player, 346.870025,309.259033,999.155700);
	SetPlayerInteriorEx(player, 6);
	SetPlayerVirtualWorldEx(player, player+100);
	
	
	new naglowek[128];
	format(naglowek,sizeof(naglowek),"~p~~r~Gracz: %s~n~Admin: %s~n~Powod: %s~n~Czas: %d minut", PlayerData[player][pName], PlayerData[playerid][pName], powod, czas);
	PlayerDataTXD(playerid, 4, "Admin Jail", "_", "~r~~h~Zachecamy do zapoznania sie z regulaminem.", naglowek);
	
	format(data,sizeof(data),"[PTR-Serw]{FE2E2E}Gracz [%d]%s zostal wsadzony do Admin Jail przez [%d]%s  z powodu: %s, czas: %d", player, PlayerData[player][pName], playerid, PlayerData[playerid][pName], powod, czas);
	SendClientMessageToAll(-1, data);
	return 1;
}

CMD:unaj(playerid, params[])
{
	new player = strval(params), data[128];
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /unaj [id gracza]");
	if(PlayerData[playerid][pRanga] < RANGA_MODERATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "{a4a4a4}Podane id nie znajduje sie na serwerze online.");
	if(PlayerData[player][pJail] <= 0) return SendClientMessage(playerid, -1, "{a4a4a4}Ten gracz nie jest w aj!");


	PlayerData[player][pJail] = 0;
	SetPlayerPos(player, START_PLAYER_POS_X,START_PLAYER_POS_Y,START_PLAYER_POS_Z);
	SetPlayerInteriorEx(player, 0);
	SetPlayerVirtualWorldEx(player, 0);

	new naglowek[128];
	format(naglowek,sizeof(naglowek),"~p~~r~Gracz: %s~n~Admin: %s", PlayerData[player][pName], PlayerData[playerid][pName]);
	PlayerDataTXD(playerid, 4, "UN-Admin Jail", "_", "_", naglowek);
	
	format(data,sizeof(data),"[PTR-Serw]{FE2E2E}Gracz [%d]%s zostal uwolniony z Admin Jail przez [%d]%s.", player, PlayerData[player][pName], playerid, PlayerData[playerid][pName]);
	SendClientMessageToAll(-1, data);
	return 1;
}


CMD:spawn(playerid,params[])
{
	new carid[62], Float:X, Float:Y, Float:Z, Float:angle, vehicle;
	if(PlayerData[playerid][pRanga] < RANGA_MODERATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	if(sscanf(params,"s[62]", carid)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /spawn [Nazwa Pojazdu]");
	if(!IsNumeric(carid) && GetVehicleModelIdByName(carid) == 0) return  SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /spawn [Nazwa Pojazdu]");
	if(GetPlayerVehicleID(playerid) != 0) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz byc w pojezdzie podczas wykonywania tej komendy.");
	
	
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, angle);
	
	vehicle = CreateVehicleEx(GetVehicleModelIdByName(carid), X, Y, Z, angle, 0, 1, 9999999999999999999999999999999999999999999999999);
	
	LinkVehicleToInterior(vehicle, GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(vehicle, GetPlayerVirtualWorld(playerid));

	PutPlayerInVehicleEx(playerid, vehicle, 0);

	VehicleData[vehicle][vAdminCar] = true;
	VehicleData[vehicle][vUID] = -1;
	VehicleData[vehicle][vModel] = GetVehicleModel(vehicle);
	VehicleData[vehicle][vPrivateCar] = 0;
	VehicleData[vehicle][vFirmyCar] = 0;
	VehicleData[vehicle][vFrakcjiCar] = 0;
	VehicleData[vehicle][vNaukaJazdy] = 0;
	VehicleData[vehicle][vWheelsBlock] = 0;
	VehicleData[vehicle][vLocked] = 0;
	VehicleData[vehicle][vPaliwo] = VehicleData[vehicle][vPaliwoMax];
	VehicleData[vehicle][vHP] = 1000;
	VehicleData[vehicle][vPrzebieg] = 0;
	VehicleData[vehicle][vOwnerUID] = -1;
	VehicleData[vehicle][vNaprawy] = 0;
	format(VehicleData[vehicle][vOwner], 24, "%s", "Administracji");
	return 1;
}
CMD:adelcars(playerid, params[])
{
	if(PlayerData[playerid][pRanga] < RANGA_MODERATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	new bool:Used[MAX_VEHICLES], zlicz = 0, data[128];
	
	
	for(new x = 0, j = GetPlayerPoolSize(); x<= j; x++)
	{
		if(GetPlayerVehicleID(x) != 0)
		{
			Used[GetPlayerVehicleID(x)] = true;
		}
	}
	
	for(new vehicleid = 1, j = GetVehiclePoolSize(); vehicleid <= j; vehicleid++)
	{
		if(VehicleData[vehicleid][vAdminCar] == true && Used[vehicleid] == false)
		{
			DestroyVehicle(vehicleid);
			VehicleData[vehicleid][vAdminCar] = false;
			zlicz++;
		}
	}
	
	format(data,sizeof(data),"{ff0000}Wszystkie pojazdy (%d), stworzone przez Administratorow zostaly usuniete.", zlicz);
	SendClientMessage(playerid, -1, data);
	return 1;
}


CMD:spawnmapper(playerid,params[])
{
	new carid[62], Float:X, Float:Y, Float:Z, Float:angle, vehicle;
	
	if(sscanf(params,"s[62]", carid)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /spawn [Nazwa Pojazdu]");
	if(PlayerData[playerid][pRanga] < RANGA_MODERATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	if(!IsNumeric(carid) && GetVehicleModelIdByName(carid) == 0) return  SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /spawn [Nazwa Pojazdu]");
	if(GetPlayerVehicleID(playerid) != 0) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz byc w pojezdzie podczas wykonywania tej komendy.");
	
	
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, angle);
	
	vehicle = CreateVehicleEx(GetVehicleModelIdByName(carid), X, Y, Z, angle, 0, 1, 9999999999999999999999999999999999999999999999999);
	
	LinkVehicleToInterior(vehicle, GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(vehicle, GetPlayerVirtualWorld(playerid));

	PutPlayerInVehicleEx(playerid, vehicle, 0);

	VehicleData[vehicle][vMapperCar] = true;
	VehicleData[vehicle][vUID] = -1;
	VehicleData[vehicle][vModel] = GetVehicleModel(vehicle);
	VehicleData[vehicle][vPrivateCar] = 0;
	VehicleData[vehicle][vFirmyCar] = 0;
	VehicleData[vehicle][vFrakcjiCar] = 0;
	VehicleData[vehicle][vNaukaJazdy] = 0;
	VehicleData[vehicle][vWheelsBlock] = 0;
	VehicleData[vehicle][vLocked] = 0;
	VehicleData[vehicle][vPaliwo] = VehicleData[vehicle][vPaliwoMax];
	VehicleData[vehicle][vHP] = 1000;
	VehicleData[vehicle][vPrzebieg] = 0;
	VehicleData[vehicle][vOwnerUID] = -1;
	VehicleData[vehicle][vNaprawy] = 0;
	format(VehicleData[vehicle][vOwner], 24, "%s", "Mapper");
	return 1;
}
CMD:adelmapper(playerid, params[])
{
	if(PlayerData[playerid][pRanga] < RANGA_MODERATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	new bool:Used[MAX_VEHICLES], zlicz = 0, data[128];
	
	
	for(new x = 0, j = GetPlayerPoolSize(); x<= j; x++)
	{
		if(GetPlayerVehicleID(x) != 0)
		{
			Used[GetPlayerVehicleID(x)] = true;
		}
	}
	
	for(new vehicleid = 1, j = GetVehiclePoolSize(); vehicleid <= j; vehicleid++)
	{
		if(VehicleData[vehicleid][vMapperCar] == true && Used[vehicleid] == false)
		{
			DestroyVehicle(vehicleid);
			VehicleData[vehicleid][vMapperCar] = false;
			zlicz++;
		}
	}
	
	format(data,sizeof(data),"{ff0000}Wszystkie pojazdy (%d), stworzone przez Administratorow zostaly usuniete.[Mappera pojazdy]", zlicz);
	SendClientMessage(playerid, -1, data);
	return 1;
}



CMD:spawnev(playerid,params[])
{
	new carid[62], Float:X, Float:Y, Float:Z, Float:angle, vehicle;
	
	if(sscanf(params,"s[62]", carid)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /spawn [Nazwa Pojazdu]");
	if(PlayerData[playerid][pRanga] < RANGA_MODERATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	if(!IsNumeric(carid) && GetVehicleModelIdByName(carid) == 0) return  SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /spawn [Nazwa Pojazdu]");
	if(GetPlayerVehicleID(playerid) != 0) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz byc w pojezdzie podczas wykonywania tej komendy.");
	
	
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, angle);
	
	vehicle = CreateVehicleEx(GetVehicleModelIdByName(carid), X, Y, Z, angle, 0, 1, 9999999999999999999999999999999999999999999999999);
	
	LinkVehicleToInterior(vehicle, GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(vehicle, GetPlayerVirtualWorld(playerid));

	PutPlayerInVehicleEx(playerid, vehicle, 0);

	VehicleData[vehicle][vEventCar] = true;
	VehicleData[vehicle][vUID] = -1;
	VehicleData[vehicle][vModel] = GetVehicleModel(vehicle);
	VehicleData[vehicle][vPrivateCar] = 0;
	VehicleData[vehicle][vFirmyCar] = 0;
	VehicleData[vehicle][vFrakcjiCar] = 0;
	VehicleData[vehicle][vNaukaJazdy] = 0;
	VehicleData[vehicle][vWheelsBlock] = 0;
	VehicleData[vehicle][vLocked] = 0;
	VehicleData[vehicle][vPaliwo] = VehicleData[vehicle][vPaliwoMax];
	VehicleData[vehicle][vHP] = 1000;
	VehicleData[vehicle][vPrzebieg] = 0;
	VehicleData[vehicle][vOwnerUID] = -1;
	VehicleData[vehicle][vNaprawy] = 0;
	format(VehicleData[vehicle][vOwner], 24, "%s", "Eventowe");
	return 1;
}
CMD:adelevent(playerid, params[])
{
	if(PlayerData[playerid][pRanga] < RANGA_MODERATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	new bool:Used[MAX_VEHICLES], zlicz = 0, data[128];
	
	
	for(new x = 0, j = GetPlayerPoolSize(); x<= j; x++)
	{
		if(GetPlayerVehicleID(x) != 0)
		{
			Used[GetPlayerVehicleID(x)] = true;
		}
	}
	
	for(new vehicleid = 1, j = GetVehiclePoolSize(); vehicleid <= j; vehicleid++)
	{
		if(VehicleData[vehicleid][vEventCar] == true && Used[vehicleid] == false)
		{
			DestroyVehicle(vehicleid);
			VehicleData[vehicleid][vEventCar] = false;
			zlicz++;
		}
	}
	
	format(data,sizeof(data),"{ff0000}Wszystkie pojazdy (%d), stworzone przez Administratorow zostaly usuniete.[Eventowe pojazdy]", zlicz);
	SendClientMessage(playerid, -1, data);
	return 1;
}


CMD:unbanip(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /unbanip [IP]");
	if(PlayerData[playerid][pRanga] < RANGA_MODERATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
    
	UnBanIP(playerid, params);
    return 1;
}
CMD:unban(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /unban [Nick]");
	if(PlayerData[playerid][pRanga] < RANGA_MODERATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	UnBanNick(playerid, params);
    return 1;
}
CMD:unblock(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /unblock [Nick]");
	if(PlayerData[playerid][pRanga] < RANGA_MODERATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	new data[128];
	format(data,sizeof(data),"UPDATE `data_players` SET `block` = '0' WHERE `nick` = '%s'", params);
 	mysql_query(data);
	
	format(data,sizeof(data),"{a4a4a4}Gracza konto %s zostalo odblokowane pomyslnie.", params);
	SendClientMessage(playerid, -1, data);
    return 1;
}

CMD:banlista(playerid)
{
	if(PlayerData[playerid][pRanga] < RANGA_ADMINISTRATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	new dataa[1000], data[200], i, get_uid, get_zbanowany[24], get_banujacy[24], get_powod[30], get_data[30], get_ip[18], get_gpci[40], get_time, Dni, Godzin, Minut;
	dataa = "Zbanowany\tBanujacy\tPowod\tDane\n";
	
	format(data,sizeof(data),"SELECT * FROM `data_bans` ORDER BY `uid` ASC");
	mysql_query(data);
	mysql_store_result();
	
	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>is[24]s[24]s[30]s[30]s[18]s[40]i", get_uid, get_zbanowany, get_banujacy, get_powod, get_data, get_ip, get_gpci, get_time);
		i++;
		
		
		ConvertSec(get_time - gettime(),  Dni, Godzin, Minut);
		
		format(dataa,sizeof(dataa),"%s\
									%s\t\
									%s\t\
									%s\t\
									%s - IP: %s - GPCI: %s - Dni %d - Godzin %d - Minut %d\n",
		dataa,
		get_zbanowany,
		get_banujacy,
		get_powod,
		get_data,
		get_ip,
		get_gpci,
		Dni,
		Godzin,
		Minut);
		
	}
	if(i == 0) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Lista banow (serwer):", "Brak wynikow - nikt na serwerze nie jest zbanowany.",  "Zamknij", "");
	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_TABLIST_HEADERS, "Lista banow (serwer):", dataa, "Zamknij", "");
	return 1;
}

CMD:ban(playerid,params[])
{
	new player, powod[30], gpcii, ipp, dni, godzin, minut, time;
	
	if(PlayerData[playerid][pRanga] < RANGA_MODERATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	if(sscanf(params, "iD(0)D(0)D(0)D(1)D(0)S(Brak)[30]", player, dni, godzin, minut, ipp, gpcii, powod)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /ban [ID] [Dni] [Godzin] [Minut] [IP 0/1] [GPCI 0/1] [Powod] ");
	if(IsPlayerConnected(player) == 0)  return SendClientMessage(playerid,-1,"{a4a4a4}Gracz o tym id jest offline.");
	
	
	if(dni != 0 || godzin != 0 || minut != 0) 
	{
		time = dni*86400 + godzin*3600 + minut*60 + gettime();
	}
	if(gpcii == 0 && ipp == 0) 
	{
		Baned(player, playerid, powod, "0", "0", time);
	}
	if(gpcii == 1 && ipp == 1) 
	{
		Baned(player, playerid, powod, PlayerData[player][pIP], PlayerData[player][pGPCI], time);
	}
	if(gpcii == 0 && ipp == 1) 
	{
		Baned(player, playerid, powod, PlayerData[player][pIP], "0", time);
	}
	if(gpcii == 1 && ipp == 0) 
	{
		Baned(player, playerid, powod, "0", PlayerData[player][pGPCI], time);
	}
	return 1;
}


CMD:sethp(playerid, params[])
{
	new hp;
	if(sscanf(params, "d", hp)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /sethp [Ilosc hP (50m)]");
	if(PlayerData[playerid][pRanga] < RANGA_JUNIORADMIN) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(OdlegloscGracze(50.0,i,playerid)) 
		{
			SetPlayerHealth(i, hp);
			
			printf("%s ustawil %s - %d hp [ 50 METROW ]", PlayerData[playerid][pName], PlayerData[i][pName], hp);
		}
	}
	return 1;
}
CMD:hp(playerid, params[])
{
	new id;
	new Float:hp;
	if(sscanf(params, "df", id, hp)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /hp [ID] [Ilosc hP]"); 
	if(PlayerData[playerid][pRanga] < RANGA_JUNIORADMIN) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	SetPlayerHealth(id, hp);
	return 1;
}

CMD:dajkaseid(playerid, params[])
{
	new player, kasa, data[128];
	if(sscanf(params, "dd", player, kasa)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /dajkaseid [ID] [Kasa]");
	if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "{a4a4a4}Podane id nie znajduje sie na serwerze online.");
	if(PlayerData[playerid][pRanga] < RANGA_ADMINISTRATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	
	GivePlayerCash(player, kasa);
	
	format(data,sizeof(data),"{a4a4a4}[%d]%s podarowal Ci $%d.",playerid,PlayerData[playerid][pName], kasa);
	SendClientMessage(player, -1, data);
	format(data,sizeof(data),"{a4a4a4}Podarowales $%d dla [%d]%s.",kasa,player,PlayerData[player][pName]);
	SendClientMessage(playerid, -1, data);
	
	printf("%s dal %s + $%d", PlayerData[playerid][pName], PlayerData[player][pName], kasa);
	return 1;
}

CMD:dajscoreid(playerid, params[])
{
	new player, score, data[128];
	if(sscanf(params, "dd", player, score)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /dajscoreid [ID] [Score]");
	if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "{a4a4a4}Podane id nie znajduje sie na serwerze online.");
	if(PlayerData[playerid][pRanga] < RANGA_ADMINISTRATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	
	GivePlayerScore(player, score);
	
	
	format(data,sizeof(data),"{a4a4a4}[%d]%s podarowal Ci %d score.",playerid,PlayerData[playerid][pName], score);
	SendClientMessage(player, -1, data);
	format(data,sizeof(data),"{a4a4a4}Podarowales %d dla [%d]%s score.",score,player,PlayerData[player][pName]);
	SendClientMessage(playerid, -1, data);
	
	printf("%s dal %s + %d score", PlayerData[playerid][pName], PlayerData[player][pName], score);
	return 1;
}

CMD:dajscore(playerid, params[])
{
	new score = strval(params), data[128];
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /dajscore [Ilosc]");
	if(PlayerData[playerid][pRanga] < RANGA_JUNIORADMIN) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(OdlegloscGracze(50.0,i,playerid)) 
		{
			GivePlayerScore(i, score);
			
			format(data,sizeof(data),"{a4a4a4}[%d]%s podarowal Ci %d score.",playerid,PlayerData[playerid][pName], score);
			SendClientMessage(i, -1, data);
			format(data,sizeof(data),"{a4a4a4}Podarowales %d dla [%d]%s score.",score,i,PlayerData[i][pName]);
			SendClientMessage(playerid, -1, data);
			
			printf("%s dalp%s + %d score [ 50 METROW ]", PlayerData[playerid][pName], PlayerData[i][pName], score);
		}
	}
	return 1;
}
CMD:dajkase(playerid, params[])
{
	new kasa = strval(params), data[128];
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /dajscore [Ilosc]");
	if(PlayerData[playerid][pRanga] < RANGA_JUNIORADMIN) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(OdlegloscGracze(50.0,i,playerid)) 
		{
			GivePlayerCash(i, kasa);

			format(data,sizeof(data),"{a4a4a4}[%d]%s podarowal Ci $%d.",playerid,PlayerData[playerid][pName], kasa);
			SendClientMessage(i, -1, data);
			format(data,sizeof(data),"{a4a4a4}Podarowales $%d dla [%d]%s.",kasa,i,PlayerData[i][pName]);
			SendClientMessage(playerid, -1, data);
			
			printf("%s dal %s + $%d [ 50 METROW ]", PlayerData[playerid][pName], PlayerData[i][pName], kasa);
		}
	}
	return 1;
}

CMD:tp(playerid, params[])
{
	new id1, id2, Float: x, Float: y, Float: z;
	if(sscanf(params, "dd", id1, id2)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /tp [ID 1] [ID 2]");
	if(!IsPlayerConnected(id1)) return SendClientMessage(playerid, -1, "{a4a4a4}Podane id1 nie znajduje sie na serwerze online.");
	if(!IsPlayerConnected(id2)) return SendClientMessage(playerid, -1, "{a4a4a4}Podane id2 nie znajduje sie na serwerze online.");
	if(PlayerData[playerid][pRanga] < RANGA_MAPER) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	if(PlayerData[id1][pDeath] == true) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz id1 jest w stanie bw, nie mozna go teleportowac");
	if(PlayerData[id2][pDeath] == true) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz id2 jest w stanie bw, nie mozna go teleportowac");
	

	GetPlayerPos(id2, x, y, z);
	SetPlayerPos(id1, x, y, z);
	SetPlayerVirtualWorldEx(id1, GetPlayerVirtualWorld(id2));
	SetPlayerInteriorEx(id1, GetPlayerInterior(id2));
	return 1;
}

CMD:tpall(playerid, params[])
{
	new Float: x, Float: y, Float: z;
	if(PlayerData[playerid][pRanga] < RANGA_MAPER) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	GetPlayerPos(playerid, x, y, z);
	for(new i; i < MAX_PLAYERS; i++)
	{
		SetPlayerPos(i, x, y, z);
	}
	return 1;
}

CMD:dajvipa(playerid,params[])
{
	new player, dni, godzin, minut;
	if(sscanf(params,"dddd",player,dni,godzin,minut)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /dajvipa [ID] [Dni] [Godzin] [Minut]");
	if(!IsPlayerConnected(player)) return SendClientMessage(playerid, -1, "{a4a4a4}Podane id nie znajduje sie na serwerze online.");
	if(PlayerData[playerid][pRanga] < RANGA_ADMINISTRATOR) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	SetPlayerVipStatus(player, playerid, 0, dni, godzin, minut);
	return 1;
}

forward resptimer();
public resptimer()
{
	resp--;
	new data[128];
	if(resp > 0)
	{
		format(data, 128, "~r~Respawn ~b~pojazdow ~r~za: \n ~w~%d", resp);
		GameTextForAll(data, 1000, 4);
	}
	if(resp == 0)
	{
		format(data, 12, "~r~RESPAWN");
		GameTextForAll(data, 1000, 4);
		new bool:Used[MAX_VEHICLES];
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(GetPlayerVehicleID(i) != 0)
			{
				Used[GetPlayerVehicleID(i)] = true;
			}
		}
		for(new vehicleid = 1, j = GetVehiclePoolSize(); vehicleid <= j; vehicleid++)
		{
			if(IsTrailerAttachedToVehicle(vehicleid)) continue;
			if(VehicleData[vehicleid][vAdminCar] == true) continue;
			if(Used[vehicleid] == true) continue;
			if(VehicleData[vehicleid][vAdminCar] == true) continue;

			SaveVehicle(vehicleid, 2);
			resp = -1;
		}
		KillTimer(RespTimerTImer);
	}
	return 1;
}

forward DzialaniaStart();
public DzialaniaStart()
{
	new dzialanie = random(2);
	new data[512];
	if(dzialanie == 0) //dzialanie 1 "plus"
	{
		new liczba1 = ExRandom(PLUS_MIN, PLUS_MAX);
		new liczba2 = ExRandom(PLUS_MIN, PLUS_MAX);
		DzialaniaData[wynik] = liczba1 + liczba2;
		format(data, sizeof(data), ""C_BIALY"["C_BORDOWY"Test Matematyczny"C_BIALY"]: "C_ZIELONY"%i "C_BIALY"+ "C_ZIELONY"%i "C_BIALY"= "C_BORDOWY"?", liczba1, liczba2);
	}
	if(dzialanie == 1) //dzialanie "minus"
	{
		new liczba1 = ExRandom(MINUS_MIN, MINUS_MAX);
		new liczba2 = ExRandom(MINUS_MIN, MINUS_MAX);
		DzialaniaData[wynik] = liczba1 - liczba2;
		format(data, sizeof(data), ""C_BIALY"["C_BORDOWY"Test Matematyczny"C_BIALY"]: "C_ZIELONY"%i "C_BIALY"- "C_ZIELONY"%i "C_BIALY"= "C_BORDOWY"?", liczba1, liczba2);
	}
	if(dzialanie == 2) //dzialanie "razy"
	{
		new liczba1 = ExRandom(RAZY_MIN, RAZY_MAX);
		new liczba2 = ExRandom(RAZY_MIN, RAZY_MAX);
		DzialaniaData[wynik] = liczba1 * liczba2;
		format(data, sizeof(data), ""C_BIALY"["C_BORDOWY"Test Matematyczny"C_BIALY"]: "C_ZIELONY"%i "C_BIALY"* "C_ZIELONY"%i "C_BIALY"= "C_BORDOWY"?", liczba1, liczba2);
	}
	SendClientMessageToAll(-1, data);
	SendClientMessageToAll(-1, "{ff0000}Jesli znasz rozwiazanie uzyj komendy /zm {ffffff}({0000ff}/o{ffffff})");
	DzialaniaData[wystartowal] = true;
	DzMatResetTimer = SetTimer("ResetDzMat", MATTIMERRESET, false);
	return 1;
}

forward ResetDzMat();
public ResetDzMat()
{
	new data[512];
	DzialaniaData[wystartowal] = false;
	format(data, sizeof(data), ""C_CZERWONY"Nikt nie odgadl testu matematycznego! Poprawyny wynik to: "C_ZIELONY"%i", DzialaniaData[wynik]);
	SCMToAll(-1, data);
	DzialaniaData[wynik] = -1;
	return 1;
}

forward TimerZdarzenia();
public TimerZdarzenia()
{
	new los = ExRandom(1, 3);
	switch(los)
	{
		case 1: // pozar
		{
			if(pozar_activity != -1) return 1;
			if(GetOnlineFractions(FRAKCJA_STRAZ_POZARNA) == 0) return 1;
			EventPozarStart();
			return 1;
		}
		case 2: // kloda
		{
			if(kloda_activity != -1) return 1;
			if(GetOnlineFractions(FRAKCJA_STRAZ_POZARNA) == 0) return 1;
			EventKlodaStart();
			return 1;
		}
		case 3: // plama
		{
			if(plama_activity != -1) return 1;
			if(GetOnlineFractions(FRAKCJA_STRAZ_POZARNA) == 0) return 1;
			EventPlamaStart();
			return 1;
		}
	}
	return 1;
}

forward StartEvent();
public StartEvent()
{
	for(new playerid = 0, j = GetPlayerPoolSize(); playerid <= j; playerid++)
	{
		if(PlayerData[playerid][pEventMember] == true)
		{
			SetPlayerPos(playerid, ev_pos[0], ev_pos[1], ev_pos[2]);
			SetPlayerInteriorEx(playerid, ev_interior);
			SetPlayerVirtualWorldEx(playerid, ev_vw);
		}
	}
	SendClientMessageToAll(-1, "[PTR-Serw]{0080FF}[EVENT] Wszyscy uczestnicy eventu zostali przeteleportowani.");
	return 1;
}

CMD:event(playerid, params[])
{	
	new nazwa[30], czas, data[128];
	if(sscanf(params, "s[30]d", nazwa, czas)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /event [Nazwa Eventu] [Czas (na zapisy)]");
	if(PlayerData[playerid][pRanga] < RANGA_JUNIORADMIN) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	
	format(data,sizeof(data),"[PTR-Serw]{0080FF}[EVENT] [%d]%s uruchomil zapisy na event %s. Wpisz /ev, aby dolaczyc. (czas na dolaczenie: %d min.)", playerid, PlayerData[playerid][pName], nazwa, czas);
	SendClientMessageToAll(-1, data);
	
	PlayerData[playerid][pEventMember] = true;
	ev_vw = GetPlayerVirtualWorld(playerid);
	ev_interior = GetPlayerInterior(playerid);
	GetPlayerPos(playerid, ev_pos[0], ev_pos[1], ev_pos[2]);
	ev_czas = gettime() + czas*60;
	
	SetTimer("StartEvent", 1000*czas*60, false);
	return 1;
}
CMD:evzakoncz(playeridd)
{
	if(PlayerData[playeridd][pRanga] < RANGA_JUNIORADMIN) return SendClientMessage(playeridd, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	new data[128];
	for(new playerid = 0, j = GetPlayerPoolSize(); playerid <= j; playerid++)
	{
		if(PlayerData[playerid][pEventMember] == true)
		{
			PlayerData[playerid][pEventMember] = false;
			SetPlayerPos(playerid, START_PLAYER_POS_X,START_PLAYER_POS_Y,START_PLAYER_POS_Z);
			SetPlayerInteriorEx(playerid, PlayerData[playerid][pInt]);
			SetPlayerVirtualWorldEx(playerid, PlayerData[playerid][pVW]);
			SetPlayerHealth(playerid, PlayerData[playerid][pHP]);
		}
	}
	format(data,sizeof(data),"[PTR-Serw]{0080FF}[EVENT] [%d]%s zakonczyl event.", playeridd, PlayerData[playeridd][pName]);
	SendClientMessageToAll(-1, data);
	return 1;
}
CMD:evwyrzuc(playerid, params[])
{
	new data[128], player = strval(params);
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /evwyrzuc [ID]");
	if(PlayerData[playerid][pRanga] < RANGA_POMOCNIK) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	if(PlayerData[playerid][pEventMember] == false) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz ten nie jest czlonkiem eventu.");
	
	SetPlayerPos(player, PlayerData[player][pPos][0], PlayerData[player][pPos][1], PlayerData[player][pPos][2]);
	SetPlayerInteriorEx(player, PlayerData[player][pInt]);
	SetPlayerVirtualWorldEx(player, PlayerData[player][pVW]);
	SetPlayerHealth(player, PlayerData[player][pHP]);
	
	PlayerData[player][pEventMember] = false;
	
	format(data,sizeof(data),"[PTR-Serw]{0080FF}[EVENT] [%d]%s wyrzucil gracza [%d]%s z eventu.", playerid, PlayerData[playerid][pName], player, PlayerData[player][pName]);
	SendClientMessageToAll(-1, data);
	return 1;
}
CMD:evdodaj(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /evdodaj [ID]");
	if(PlayerData[playerid][pRanga] < RANGA_POMOCNIK) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	if(!IsPlayerConnected(strval(params))) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz ten nie jest polaczony z serwerem.");
	
	new data[128];
	GetPlayerHealth(playerid, PlayerData[playerid][pHP]);
	GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
	GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
	PlayerData[playerid][pVW] = GetPlayerVirtualWorld(playerid);
	PlayerData[playerid][pInt] = GetPlayerInterior(playerid);
	PlayerData[strval(params)][pEventMember] = true;
	SetPlayerPos(strval(params), ev_pos[0], ev_pos[1], ev_pos[2]);
	SetPlayerInteriorEx(strval(params), ev_interior);
	SetPlayerVirtualWorldEx(strval(params), ev_vw);
	
	format(data,sizeof(data),"[PTR-Serw]{0080FF}[EVENT] [%d]%s dodal gracza [%d]%s na event.", playerid, PlayerData[playerid][pName], strval(params), PlayerData[strval(params)][pName]);
	SendClientMessageToAll(-1, data);
	return 1;
}
CMD:ev(playerid, params[])
{
	if(!IsPlayerConnected(strval(params))) return SendClientMessage(playerid, -1, "{a4a4a4}Gracz ten nie jest polaczony z serwerem.");
	if(ev_czas < gettime()) return SendClientMessage(playerid, -1, "{a4a4a4}Czas na zapis do eventu minal.");
	if(PlayerData[playerid][pEventMember] == true) return SendClientMessage(playerid, -1, "{a4a4a4}Zapisales sie juz na ten event.");
	new data[128];
	GetPlayerHealth(playerid, PlayerData[playerid][pHP]);
	GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
	GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
	PlayerData[playerid][pVW] = GetPlayerVirtualWorld(playerid);
	PlayerData[playerid][pInt] = GetPlayerInterior(playerid);
	PlayerData[playerid][pEventMember] = true;
	
	format(data,sizeof(data),"[PTR-Serw]{0080FF}[EVENT] [%d]%s zapisuje sie na event.", playerid, PlayerData[playerid][pName]);
	SendClientMessageToAll(-1, data);
	return 1;
}
	
CMD:pickups(playerid)
{
	//if(PlayerData[playerid][pRanga] < 5) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	new data[800];
	format(data,sizeof(data),"\
					0 - Stacja benzynowa\n\
					1 - Sklep spozywczy\n\
					2 - Motel\n\
					3 - Urzad\n\
					4 - Silownia\n\
					5 - Przebieralnia dla policji\n\
					6 - Przebieralnia dla taxi\n\
					7 - Przebieralnia dla sannews\n\
					8 - Przebieralnia dla strazy miejskiej\n");
	format(data,sizeof(data),"%s\	
					9 - Przebieralnia dla strazy granicznej\n\
					10 - Przebieralnia dla pomocy drogowej\n\
					11 - Przebieralnia dla pogotowia\n\
					12 - Przebieralnia dla strazy pozarnej\n\
					13 - Przebieralnia dla Gangu Olsena\n\
					14 - Przebieralnia dla makaveli\n\
					15 - Przebieralnia dla graczy\n\
					16 - Burger\n\
					17 - Salon samochodowy\n",data);
	format(data,sizeof(data),"%s\	
					18 - Centrala Towarow\n\
					19 - Sklep Elektroniczny\n\
					20 - Lotto\n\
					21 - Zbrojownia (bronie dla frakcji)\n\
					22 - Bank\n\
					23 - Firma\n\
					24 - Salon van/truck\n\
					25 - Przebieralnia dla frakcji (zakonczenie sluzby)\n\
					26 - Prawo jazdy\n\
					",data);
	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Lista typow - pickupy", data, "Zamknij", "");
	return 1;
}


CMD:editpickup(playerid, params[])
{
	new str1[32], str2[126], data[500], uid = PlayerData[playerid][pPickupUID];
	if(sscanf(params, "s[32]S()[126]", str1, str2))
	{
		SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /editpickup [usun / type / przywroc / tp / cena / uid");
		return 1;
	}
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	if(!strcmp(str1,"uid",true))
	{
		new uidd = GetPickupUID(playerid);

		if(uidd != -1)
		{
			PlayerData[playerid][pPickupUID] = uidd;
			format(data,sizeof(data),"{a4a4a4}Poprawnie odnaleziono pickup o uid: %d, mozesz od teraz uzywac pozostalych komend do edycji.", uidd);
			SendClientMessage(playerid, -1, data);
		}
		else
		{
			SendClientMessage(playerid, -1, "{a4a4a4}Nie odnaleziono zadnego pickupu. Sprawdz czy, aby na pewno znajdujesz sie przy pickupie ktory chcesz edytuowac.");
		}
		return 1;
	}
	if(!strcmp(str1,"usun",true))
	{
		if(PlayerData[playerid][pPickupUID] == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Przed edytuowaniem pickupu musisz uzyc najpierw komendy '/editpickup uid'.");
		if(PickupData[uid][pAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Pickup nie istnieje juz.");

		if(IsValidDynamicPickup(PickupData[uid][pPickup])) DestroyDynamicPickup(PickupData[uid][pPickup]);
		if(IsValidDynamicMapIcon(PickupData[uid][pMapIcon])) DestroyDynamicMapIcon(PickupData[uid][pMapIcon]);
		if(IsValidDynamic3DTextLabel(PickupData[uid][pText3D])) DestroyDynamic3DTextLabel(PickupData[uid][pText3D]);
		
		PickupData[uid][pAktywny] = 0;
		format(data,sizeof(data),"{a4a4a4}Pickup (uid: %d) zostaje usuniety na zawsze z serwera.", uid);
		SendClientMessage(playerid, -1, data);
	}
	
	if(!strcmp(str1,"tp",true))
	{
		new i;
		if(sscanf(str2, "d", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editpickup tp [uid]");
		if(PickupData[i][pPickup] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Taki pickup o podanym uid nie istnieje na serwerze");
		if(PickupData[i][pAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Ten pickup zostal usuniety z serwera. Uzyj /editpickup przywroc [uid], aby go przywrocic.");
		
		SetPlayerVirtualWorldEx(playerid, PickupData[i][pVW]);
		SetPlayerInteriorEx(playerid, PickupData[i][pInt]);
		SetPlayerPos(playerid, PickupData[i][pPos][0], PickupData[i][pPos][1], PickupData[i][pPos][2]);
		return 1;
	}
	if(!strcmp(str1,"cena",true))
	{
		new i;
		if(sscanf(str2, "d", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editpickup cena [cena]");
		if(PickupData[uid][pPickup] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Taki pickup o podanym uid nie istnieje na serwerze");
		if(PickupData[uid][pAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Ten pickup zostal usuniety z serwera. Uzyj /editpickup przywroc [uid], aby go przywrocic.");
		
		PickupData[uid][pCena] = i;
	}
	
	if(!strcmp(str1,"type",true))
	{
		new i;
		if(sscanf(str2, "d", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editpickup type [Typ]");
		if(PlayerData[playerid][pPickupUID] == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Przed edytuowaniem pickupu musisz uzyc najpierw komendy '/editpickup uid'.");
		if(PickupData[uid][pAktywny] == 0) 
		{
			cmd_pickups(playerid);
			SendClientMessage(playerid, -1, "{a4a4a4}Ten pickup zostal usuniety z serwera. Uzyj /editpickup przywroc [uid]");
			return 1;
		}
		
		PickupData[uid][pType] = i;
		
		switch(i)
		{
			case 0: { PickupData[uid][pMapIcon_PWN_ID] = 55; 	  	  PickupData[uid][pPickup_PWN_ID] = 19621; } //Stacja benzynowa			
			case 1: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 19587; } //Sklep spozywczy
			case 2: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1277; }  //Motel
			case 3: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1581; }  //Urzad (dokumenty)
			case 4: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 19556; } //Silownia
			case 5: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	 	  PickupData[uid][pPickup_PWN_ID] = 1275; }  //Przebieralnia dla policji
			case 6: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1275; }  //Przebieralnia dla  taxi
			case 7: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1275; }  //Przebieralnia dla  sannews
			case 8: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1275; }  //Przebieralnia dla  strazy miejskiej
			case 9: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1275; }  //Przebieralnia dla  strazy granicznej
			case 10: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1275; } //Przebieralnia dla  pomocy drogowej
			case 11: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1275; } //Przebieralnia dla  pogotowia
			case 12: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	 	  PickupData[uid][pPickup_PWN_ID] = 1275; } //Przebieralnia dla  strazy pozarne
			case 13: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	 	  PickupData[uid][pPickup_PWN_ID] = 1275; } //Przebieralnia dla  Gang Olsena
			case 14: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	 	  PickupData[uid][pPickup_PWN_ID] = 1275; } //Przebieralnia dla  makaveli
			case 15: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	   	  PickupData[uid][pPickup_PWN_ID] = 1275;  }//Przebieralnia dla  graczy 
			case 16: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1239; }//Burger
			case 17: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1239; }//Salon samochodowy
			case 18: {  PickupData[uid][pMapIcon_PWN_ID] = 51; 	  	  PickupData[uid][pPickup_PWN_ID] = 1239; }//towary
			case 19: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1239; }//skelp elektroniczny
			case 20: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1239; }//lotto
			case 21: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 348; }//zbrojownia
			case 22: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1274; }//Bank
			case 23: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1239; }//Firma
			case 24: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1239; }//Salon van/truck
			case 25: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1275; }//Przebieralnia (zejscie ze sluzby frakcji)
			case 26: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1239; }//Prawo jazdy
		}
		
		if(IsValidDynamicMapIcon(PickupData[uid][pMapIcon])) DestroyDynamicMapIcon(PickupData[uid][pMapIcon]);
		if(IsValidDynamicPickup(PickupData[uid][pPickup])) DestroyDynamicPickup(PickupData[uid][pPickup]);
		PickupData[uid][pPickup]  = CreateDynamicPickup(PickupData[uid][pPickup_PWN_ID], 23, PickupData[uid][pPos][0], PickupData[uid][pPos][1], PickupData[uid][pPos][2], PickupData[uid][pVW], PickupData[uid][pInt]);
		Set3DTextPickup(uid);
	}

	if(!strcmp(str1,"przywroc",true))
	{
		new i;
		if(sscanf(str2, "d", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editpickup przywroc [uid]");
		if(PickupData[i][pAktywny] == 1) return SendClientMessage(playerid, -1, "{a4a4a4}Ten pickup nie wymaga przywracania poniewaz istnieje.");
		if(PickupData[i][pUID] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Taki pickup o podanym uid nie istnieje na serwerze");
		
		PickupData[i][pAktywny] = 1;
		if(IsValidDynamicPickup(PickupData[i][pPickup])) DestroyDynamicPickup(PickupData[i][pPickup]);
		PickupData[uid][pPickup]  = CreateDynamicPickup(PickupData[uid][pPickup_PWN_ID], 2, PickupData[uid][pPos][0], PickupData[uid][pPos][1], PickupData[uid][pPos][2], PickupData[uid][pVW], PickupData[uid][pInt]);
	}
	SavePickup(uid);
	return 1;
}

CMD:addpickup(playerid, params[])
{
	new uid = pickup_value, type, cena, data[300];
	if(sscanf(params, "dD(3)", type, cena)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /addpickup [Type] [Cena (opcjonalnie) - tylko jesli jest to stacja benzynowa] (Lista z typami pickupow: /pickups)");
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) 
	{
		cmd_pickups(playerid);
		SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
		return 1;
	}
	
	PickupData[uid][pAktywny] = 1;
	PickupData[uid][pUID] = uid;
	PickupData[uid][pType] = strval(params);
	PickupData[uid][pVW] =  GetPlayerVirtualWorld(playerid);
	PickupData[uid][pInt] = GetPlayerInterior(playerid);
	GetPlayerPos(playerid, PickupData[uid][pPos][0], PickupData[uid][pPos][1], PickupData[uid][pPos][2]);
	
	switch(type)
	{
		case 0: { PickupData[uid][pMapIcon_PWN_ID] = 55; 	  	  PickupData[uid][pPickup_PWN_ID] = 19621; } //Stacja benzynowa
		case 1: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 19587; } //Sklep spozywczy
		case 2: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1277; }  //Motel
		case 3: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1581; }  //Urzad (dokumenty)
		case 4: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 19556; } //Silownia
		case 5: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	 	  PickupData[uid][pPickup_PWN_ID] = 1275; }  //Przebieralnia dla policji
		case 6: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1275; }  //Przebieralnia dla  taxi
		case 7: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1275; }  //Przebieralnia dla  sannews
		case 8: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1275; }  //Przebieralnia dla  strazy miejskiej
		case 9: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1275; }  //Przebieralnia dla  strazy granicznej
		case 10: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1275; } //Przebieralnia dla  pomocy drogowej
		case 11: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1275; } //Przebieralnia dla  pogotowia
		case 12: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	 	  PickupData[uid][pPickup_PWN_ID] = 1275; } //Przebieralnia dla  strazy pozarne
		case 13: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	 	  PickupData[uid][pPickup_PWN_ID] = 1275; } //Przebieralnia dla  wutang clan
		case 14: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	 	  PickupData[uid][pPickup_PWN_ID] = 1275; } //Przebieralnia dla  makaveli
		case 15: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	   	  PickupData[uid][pPickup_PWN_ID] = 1275; }//Przebieralnia dla  graczy
		case 16: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1239; }//Burger
		case 17: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1239; }//Salon samochodowy
    	case 18: {  PickupData[uid][pMapIcon_PWN_ID] = 51; 	  	  PickupData[uid][pPickup_PWN_ID] = 1239; }//towary
		case 19: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1239; }//skelp elektroniczny
		case 20: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1239; }//lotto
		case 21: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 348; }//zbrojownia
		case 22: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1274; }//Bank
		case 23: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1239; }//Firma
		case 24: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1239; }//Salon van/truck
		case 25: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1275; }//Przebieralnia (zejscie ze sluzby frakcji)
		case 26: {  PickupData[uid][pMapIcon_PWN_ID] = -1; 	  	  PickupData[uid][pPickup_PWN_ID] = 1239; }//Prawo jazdy
	}
	
	PickupData[uid][pCena] = cena;
	
	if(PickupData[uid][pMapIcon_PWN_ID] != -1) PickupData[uid][pMapIcon] = CreateDynamicMapIcon(PickupData[uid][pPos][0], PickupData[uid][pPos][1], PickupData[uid][pPos][2], PickupData[uid][pMapIcon_PWN_ID], -1, PickupData[uid][pVW], PickupData[uid][pInt]);
	PickupData[uid][pPickup]  = CreateDynamicPickup(PickupData[uid][pPickup_PWN_ID], 23, PickupData[uid][pPos][0], PickupData[uid][pPos][1], PickupData[uid][pPos][2], PickupData[uid][pVW], PickupData[uid][pInt]);
	Set3DTextPickup(uid);
	

	format(data,sizeof(data),"INSERT INTO `data_pickups` SET `vw`='%d', `int`='%d', `type`='%d'",
    PickupData[uid][pVW],
	PickupData[uid][pInt],
	PickupData[uid][pType]);
	mysql_query(data);
	SavePickup(uid);
	
	
	pickup_value++;
 	return 1;
}




CMD:editfoto(playerid, params[])
{
	new str1[32], str2[126], data[500], uid = GetPlayerFotoradar(playerid, 15.0);
	if(sscanf(params, "s[32]S()[126]", str1, str2)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /editfoto [tp / przesun / kara / max / usun]");
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	if(!strcmp(str1,"uid",true))
	{
		format(data,sizeof(data),"{a4a4a4}Fotoradar (uid: %d) zostal odnaleziony.", uid);
		SendClientMessage(playerid, -1, data);
		return 1;
	}
	if(!strcmp(str1,"usun",true))
	{
		if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnym fotoradarze.");
		if(FotoData[uid][fAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Fotoradar o tym uid nie istnieje lub zostal usuniety.");
		
		if(IsValidDynamicObject(FotoData[uid][fObject])) DestroyDynamicObject(FotoData[uid][fObject]);
		if(IsValidDynamic3DTextLabel(FotoData[uid][fText3D])) DestroyDynamic3DTextLabel(FotoData[uid][fText3D]);
		FotoData[uid][fAktywny] = 0;
		format(data,sizeof(data),"{a4a4a4}Fotoradar (uid: %d) zostaje usuniety na zawsze z serwera.", uid);
		SendClientMessage(playerid, -1, data);
	}
	if(!strcmp(str1,"tp",true))
	{
		new i;
		if(sscanf(str2, "d", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editfoto tp [uid]");
		if(FotoData[i][fAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Fotoradar o tym uid nie istnieje lub zostal usuniety.");

		SetPlayerPos(playerid, FotoData[i][fPos][0], FotoData[i][fPos][1], FotoData[i][fPos][2]);
		return 1;
	}
	if(!strcmp(str1,"przesun",true))
	{
		if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnym fotoradarze.");
		
		PlayerData[playerid][pFotoEdit] = uid;
		EditDynamicObject(playerid, FotoData[uid][fObject]);
		SendClientMessage(playerid, -1, "{a4a4a4}Rozpoczynasz edycje obiektu fotoradar.");
		return 1;
	}
	if(!strcmp(str1,"kara",true))
	{
		if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnym fotoradarze.");
		new i;
		if(sscanf(str2, "d", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editfoto kara [kara $$$]");

		FotoData[uid][fKara] = i;
		SendClientMessage(playerid, -1, "{a4a4a4}Kara za przekroczenie predkosci zostala zmieniona na tym fotoradarze.");
	}
	if(!strcmp(str1,"max",true))
	{
		if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnym fotoradarze.");
		new i;
		if(sscanf(str2, "d", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editfoto max [max predkosc]");

		FotoData[uid][fMaxKM] = i;
		SendClientMessage(playerid, -1, "{a4a4a4}Maksymalna dozwolona predkosc zostala zmieniona na tym fotoradarze.");
	}
	
	SaveFoto(uid);
	return 1;
}


CMD:addpozar(playerid, params[])
{
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	new modelid, uid = pozar_value, data[200];
	if(isnull(params))
	{
		SendClientMessage(playerid, -1, "{A4a4a4}Wpisz: /addpozar <typ>");
		SendClientMessage(playerid, -1, "{A4a4a4}Dostepne typy:");
		SendClientMessage(playerid, -1, "{A4a4a4}0 - zwykly ogien"); //18688	
		SendClientMessage(playerid, -1, "{A4a4a4}1 - ogien spowoduje explozje co 30 sekund"); //18688
		SendClientMessage(playerid, -1, "{A4a4a4}2 - duzy ziejacy ogien"); //18694
		SendClientMessage(playerid, -1, "{A4a4a4}3 - sredni ogien, odzwierciedlenie tego ktory pali pojazdy"); //18690
		return 1;
	}
	if(strval(params) > 3 || strval(params) < 0) return SendClientMessage(playerid, -1, "{a4a4a4}Nie wpisano poprawnej wartosci w polu 'typ'.");
	if(!IsNumeric(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie wpisano poprawnej wartosci w polu 'typ'.");
	
	
	GetPlayerPos(playerid, PozarData[uid][pfPos][0], PozarData[uid][pfPos][1], PozarData[uid][pfPos][2]);
	PozarData[uid][pfUID] = uid;
	PozarData[uid][pfAktywny] = 1;
	PozarData[uid][pfStatus] = 0;
	PozarData[uid][pfType] = strval(params);
	PozarData[uid][pfVW] = GetPlayerVirtualWorld(playerid);
	PozarData[uid][pfInt] = GetPlayerInterior(playerid);
	
	
	switch(PozarData[uid][pfType])
	{
		case 0:  //Zwykly ogien
		{
			modelid = 18688;
		}
		case 1: //Ogien explode
		{
			modelid = 18688;
		}
		case 2: //Duzy ziejacy ogien
		{
			modelid = 18694; 
		}
		case 3: //Sredni ogien 
		{
			modelid = 18690;
		}
	}
	PozarData[uid][pfObject] = CreateDynamicObject(modelid, PozarData[uid][pfPos][0], PozarData[uid][pfPos][1], PozarData[uid][pfPos][2], PozarData[uid][pfPos][3], PozarData[uid][pfPos][4], PozarData[uid][pfPos][5], PozarData[uid][pfVW], PozarData[uid][pfInt]);
	
	EditDynamicObject(playerid, PozarData[uid][pfObject]);
	PlayerData[playerid][pPozarEdit] = uid;
	
	
	format(data,sizeof(data),"{a4a4a4}Stworzyles ogien do pozaru. UID: %d, x: %f, y: %f, z: %f", uid, PozarData[uid][pfPos][0], PozarData[uid][pfPos][1], PozarData[uid][pfPos][2]);
	SendClientMessage(playerid, -1, data);
	
	format(data,sizeof(data),"INSERT INTO `data_pozary` SET `x` = '%f', `y` = '%f', `z` = '%f'",
	PozarData[uid][pfPos][0], PozarData[uid][pfPos][1], PozarData[uid][pfPos][2]);
	mysql_query(data);
	

	SavePozar(uid, 2);
	
	pozar_value++;
	return 1;
}


CMD:addkloda(playerid, params[])
{
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	new uid = kloda_value, data[200];
	if(isnull(params))
	{
		SendClientMessage(playerid, -1, "{A4a4a4}Wpisz: /addkloda <modelid>");
		SendClientMessage(playerid, -1, "{A4a4a4}Dostepne klody:");
		SendClientMessage(playerid, -1, "{A4a4a4}18566 - skupisko trzech klod zlaczonych w trzech rzedach");
		SendClientMessage(playerid, -1, "{A4a4a4}18609 - skupisko dziewieciu zlaczonych razem klod");
		SendClientMessage(playerid, -1, "{A4a4a4}18367 - jedna duza kloda");
		SendClientMessage(playerid, -1, "{A4a4a4}18565 - pozostale inne (1) ...");
		SendClientMessage(playerid, -1, "{A4a4a4}18567 - pozostale inne (2) ...");
		SendClientMessage(playerid, -1, "{A4a4a4}18562 - pozostale inne (3) ...");
		return 1;
	}
	if(!IsNumeric(params)) return SendClientMessage(playerid, -1, "{a4a4a4}Nie wpisano poprawnej wartosci w polu 'modelid'.");
	
	
	GetPlayerPos(playerid, KlodaData[uid][kPos][0], KlodaData[uid][kPos][1], KlodaData[uid][kPos][2]);
	KlodaData[uid][kUID] = uid;
	KlodaData[uid][kAktywny] = 1;
	KlodaData[uid][kStatus] = 0;
	KlodaData[uid][kModelid] = strval(params);
	KlodaData[uid][kVW] = GetPlayerVirtualWorld(playerid);
	KlodaData[uid][kInt] = GetPlayerInterior(playerid);
	
	
	KlodaData[uid][kObject] = CreateDynamicObject(strval(params), KlodaData[uid][kPos][0], KlodaData[uid][kPos][1], KlodaData[uid][kPos][2], KlodaData[uid][kPos][3], KlodaData[uid][kPos][4], KlodaData[uid][kPos][5], KlodaData[uid][kVW], KlodaData[uid][kInt]);
	

	EditDynamicObject(playerid, KlodaData[uid][kObject]);
	PlayerData[playerid][pKlodaEdit] = uid;
	
	format(data,sizeof(data),"{a4a4a4}Stworzyles klode. UID: %d, x: %f, y: %f, z: %f", uid, KlodaData[uid][kPos][0], KlodaData[uid][kPos][1], KlodaData[uid][kPos][2]);
	SendClientMessage(playerid, -1, data);
	
	format(data,sizeof(data),"INSERT INTO `data_klody` SET `x` = '%f', `y` = '%f', `z` = '%f'",
	KlodaData[uid][kPos][0], KlodaData[uid][kPos][1], KlodaData[uid][kPos][2]);
	mysql_query(data);
	

	SaveKloda(uid, 2);
	
	kloda_value++;
	return 1;
}

CMD:addplama(playerid, params[])
{
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	new uid = plama_value, data[200];
	
	GetPlayerPos(playerid, PlamaData[uid][plPos][0], PlamaData[uid][plPos][1], PlamaData[uid][plPos][2]);
	PlamaData[uid][plUID] = uid;
	PlamaData[uid][plAktywny] = 1;
	PlamaData[uid][plStatus] = 0;
	PlamaData[uid][plModelid] = 19898;
	PlamaData[uid][plVW] = GetPlayerVirtualWorld(playerid);
	PlamaData[uid][plInt] = GetPlayerInterior(playerid);
	
	
	PlamaData[uid][plObject] = CreateDynamicObject(19898, PlamaData[uid][plPos][0], PlamaData[uid][plPos][1], PlamaData[uid][plPos][2], PlamaData[uid][plPos][3], PlamaData[uid][plPos][4], PlamaData[uid][plPos][5], PlamaData[uid][plVW], PlamaData[uid][plInt]);
	

	EditDynamicObject(playerid, PlamaData[uid][plObject]);
	PlayerData[playerid][pPlamaEdit] = uid;
	
	format(data,sizeof(data),"{a4a4a4}Stworzyles plame. UID: %d, x: %f, y: %f, z: %f", uid, PlamaData[uid][plPos][0], PlamaData[uid][plPos][1], PlamaData[uid][plPos][2]);
	SendClientMessage(playerid, -1, data);
	
	format(data,sizeof(data),"INSERT INTO `data_plamy` SET `x` = '%f', `y` = '%f', `z` = '%f'",
	PlamaData[uid][plPos][0], PlamaData[uid][plPos][1], PlamaData[uid][plPos][2]);
	mysql_query(data);
	

	SavePlama(uid, 2);
	
	plama_value++;
	return 1;
}



CMD:addfoto(playerid, params[])
{
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	new max_km, kara_prz, uid = foto_value, data[200];
	if(sscanf(params, "dd", max_km, kara_prz)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /addfoto [max km] [kara $ za przekroczenie]");
	
	
	GetPlayerPos(playerid, FotoData[uid][fPos][0], FotoData[uid][fPos][1], FotoData[uid][fPos][2]);
	FotoData[uid][fUID] = uid;
	FotoData[uid][fAktywny] = 1;
	FotoData[uid][fMaxKM] = max_km;
	FotoData[uid][fKara] = kara_prz;
	FotoData[uid][fVW] = GetPlayerVirtualWorld(playerid);
	FotoData[uid][fInt] = GetPlayerInterior(playerid);
	
	
	FotoData[uid][fObject] = CreateDynamicObject(18880, FotoData[uid][fPos][0], FotoData[uid][fPos][1], FotoData[uid][fPos][2], FotoData[uid][fPos][3], FotoData[uid][fPos][4], FotoData[uid][fPos][5], FotoData[uid][fVW], FotoData[uid][fInt]);
	

	EditDynamicObject(playerid, FotoData[uid][fObject]);
	PlayerData[playerid][pFotoEdit] = uid;
	

	format(data,sizeof(data),"{a4a4a4}Stworzyles fotoradar. UID: %d, MAX KM: %d, KARA: $%d", uid, max_km, kara_prz);
	SendClientMessage(playerid, -1, data);
	
	format(data,sizeof(data),"INSERT INTO `data_fotoradary` SET `max`='%d', `kara`='%d'",
    max_km,
	kara_prz);
	mysql_query(data);
	

	SaveFoto(uid);
	
	foto_value++;
	return 1;
}


CMD:editvia(playerid, params[])
{
	new str1[32], str2[126], data[500], uid = GetPlayerViatoll(playerid, 15.0);
	if(sscanf(params, "s[32]S()[126]", str1, str2)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /editvia [tp / przesun / kwota / pkt / usun]");
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	if(!strcmp(str1,"uid",true))
	{
		format(data,sizeof(data),"{a4a4a4}Bramka viatoll (uid: %d) zostala odnaleziona.", uid);
		SendClientMessage(playerid, -1, data);
		return 1;
	}
	if(!strcmp(str1,"usun",true))
	{
		if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnej bramce viatoll.");
		if(ViatollData[uid][vAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Bramka viatoll o tym uid nie istnieje lub zostala usunieta.");
		
		if(IsValidDynamicObject(ViatollData[uid][vObject])) DestroyDynamicObject(ViatollData[uid][vObject]);
		if(IsValidDynamic3DTextLabel(ViatollData[uid][vText3D])) DestroyDynamic3DTextLabel(ViatollData[uid][vText3D]);
		ViatollData[uid][vAktywny] = 0;
		format(data,sizeof(data),"{a4a4a4}Bramka viatoll (uid: %d) zostaje usunieta na zawsze z serwera.", uid);
		SendClientMessage(playerid, -1, data);
	}
	if(!strcmp(str1,"tp",true))
	{
		new i;
		if(sscanf(str2, "d", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editvia tp [uid]");
		if(ViatollData[i][vAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Bramka viatoll o tym uid nie istnieje lub zostala usunieta.");

		SetPlayerPos(playerid, ViatollData[i][vPos][0], ViatollData[i][vPos][1], ViatollData[i][vPos][2]);
		return 1;
	}
	if(!strcmp(str1,"przesun",true))
	{
		if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnej bramce viatoll.");
		
		PlayerData[playerid][pViaEdit] = uid;
		EditDynamicObject(playerid, ViatollData[uid][vObject]);
		SendClientMessage(playerid, -1, "{a4a4a4}Rozpoczynasz edycje bramki viatoll.");
		return 1;
	}
	if(!strcmp(str1,"pkt",true))
	{
		if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnym fotoradarze.");
		new i;
		if(sscanf(str2, "d", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editvia pkt [pkt]");

		ViatollData[uid][vPkt] = i;
		SendClientMessage(playerid, -1, "{a4a4a4}Wartosc pobrania punktow dla tej bramki viatoll zostala zmieniona.");
	}
	if(!strcmp(str1,"kwota",true))
	{
		if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnym fotoradarze.");
		new i;
		if(sscanf(str2, "d", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editvia kwota [kwota $$$]");

		ViatollData[uid][vKwota] = i;
		SendClientMessage(playerid, -1, "{a4a4a4}Kwota dla tej bramki viatoll zostala zmieniona poprawnie.");
	}
	
	SaveViatoll(uid);
	return 1;
}

CMD:addvia(playerid, params[])
{
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	new pkt, kwota, uid = viatoll_value, data[200];
	if(sscanf(params, "dd", kwota, pkt)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /addvia [Kwota za przejazd] [Pobor punktow za przejazd]");
	
	
	GetPlayerPos(playerid, ViatollData[uid][vPos][0], ViatollData[uid][vPos][1], ViatollData[uid][vPos][2]);
	ViatollData[uid][vUID] = uid;
	ViatollData[uid][vAktywny] = 1;
	ViatollData[uid][vPkt] = pkt;
	ViatollData[uid][vKwota] = kwota;
	ViatollData[uid][vVW] = GetPlayerVirtualWorld(playerid);
	ViatollData[uid][vInt] = GetPlayerInterior(playerid);
	
	
	ViatollData[uid][vObject] = CreateDynamicObject(16089, ViatollData[uid][vPos][0], ViatollData[uid][vPos][1], ViatollData[uid][vPos][2], ViatollData[uid][vPos][3], ViatollData[uid][vPos][4], ViatollData[uid][vPos][5],  ViatollData[uid][vVW], ViatollData[uid][vInt]);
	

	EditDynamicObject(playerid, ViatollData[uid][vObject]);
	PlayerData[playerid][pViaEdit] = uid;
	
	format(data,sizeof(data),"{a4a4a4}Stworzyles bramke viatoll. UID: %d, KWOTA: %d, PKT: %d", uid, kwota, pkt);
	SendClientMessage(playerid, -1, data);
	
	format(data,sizeof(data),"INSERT INTO `data_viatoll` SET `kwota`='%d', `pkt`='%d'",
    kwota,
	pkt);
	mysql_query(data);
	

	SaveViatoll(uid);
	
	viatoll_value++;
	return 1;
}


CMD:edito(playerid, params[])
{
	new str1[32], str2[126], data[500], uid = GetPlayerObiekt(playerid, 10.0);
	if(sscanf(params, "s[32]S()[126]", str1, str2)) 
	{	
		SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /edito [move / tp / przesun / przesun2 / usun / usun2 / kopia / kopia2 / x / y / z / ...");
		SendClientMessage(playerid,-1,"{a4a4a4}... rx / ry / rz / uid]");
		return 1;
	}
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL && PlayerData[playerid][pRanga] != RANGA_MAPER) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	if(!strcmp(str1,"uid",true))
	{
		format(data,sizeof(data),"{a4a4a4}Obiekt (uid: %d) zostal odnaleziony.", uid);
		SendClientMessage(playerid, -1, data);
		return 1;
	}
	if(!strcmp(str1,"type",true))
	{
		if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnym obiekcie.");
		new i;
		if(sscanf(str2, "d", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /edito type [0 - zwykly obiekt | 1 - bankomat | 2 - przejazd graniczny]");
		if(ObjectData[uid][bAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Obiekt o tym uid nie istnieje lub zostal usuniety.");

		ObjectData[uid][oType] = i;
		format(data,sizeof(data),"{a4a4a4}Wartosc type zmieniona na %d (uid: %d)", i, uid);
		SendClientMessage(playerid, -1, data);
	}
	if(!strcmp(str1,"x",true))
	{
		if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnym obiekcie.");
		new Float:i;
		if(sscanf(str2, "f", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /edito x [x]");
		if(ObjectData[uid][bAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Obiekt o tym uid nie istnieje lub zostal usuniety.");

		ObjectData[uid][bPos][0] = i;
		format(data,sizeof(data),"{a4a4a4}Pozycja X zostaje zmieniona temu obiektowi na %f (uid: %d)", i, uid);
		SendClientMessage(playerid, -1, data);
	}
	if(!strcmp(str1,"y",true))
	{
		if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnym obiekcie.");
		new Float:i;
		if(sscanf(str2, "f", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /edito y [y]");
		if(ObjectData[uid][bAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Obiekt o tym uid nie istnieje lub zostal usuniety.");

		ObjectData[uid][bPos][1] = i;
		format(data,sizeof(data),"{a4a4a4}Pozycja Y zostaje zmieniona temu obiektowi na %f (uid: %d)", i, uid);
		SendClientMessage(playerid, -1, data);
	}
	if(!strcmp(str1,"z",true))
	{
		if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnym obiekcie.");
		new Float:i;
		if(sscanf(str2, "f", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /edito z [z]");
		if(ObjectData[uid][bAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Obiekt o tym uid nie istnieje lub zostal usuniety.");

		ObjectData[uid][bPos][2] = i;
		format(data,sizeof(data),"{a4a4a4}Pozycja Z zostaje zmieniona temu obiektowi na %f (uid: %d)", i, uid);
		SendClientMessage(playerid, -1, data);
	}
	if(!strcmp(str1,"rx",true))
	{
		if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnym obiekcie.");
		new Float:i;
		if(sscanf(str2, "f", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /edito rx [rx]");
		if(ObjectData[uid][bAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Obiekt o tym uid nie istnieje lub zostal usuniety.");

		ObjectData[uid][bPos][3] = i;
		format(data,sizeof(data),"{a4a4a4}Pozycja RX zostaje zmieniona temu obiektowi na %f (uid: %d)", i, uid);
		SendClientMessage(playerid, -1, data);
	}
	if(!strcmp(str1,"ry",true))
	{
		if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnym obiekcie.");
		new Float:i;
		if(sscanf(str2, "f", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /edito ry [ry]");
		if(ObjectData[uid][bAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Obiekt o tym uid nie istnieje lub zostal usuniety.");

		ObjectData[uid][bPos][4] = i;
		format(data,sizeof(data),"{a4a4a4}Pozycja RY zostaje zmieniona temu obiektowi na %f (uid: %d)", i, uid);
		SendClientMessage(playerid, -1, data);
	}
	if(!strcmp(str1,"rz",true))
	{
		if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnym obiekcie.");
		new Float:i;
		if(sscanf(str2, "f", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /edito rz [rz]");
		if(ObjectData[uid][bAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Obiekt o tym uid nie istnieje lub zostal usuniety.");

		ObjectData[uid][bPos][5] = i;
		format(data,sizeof(data),"{a4a4a4}Pozycja RZ zostaje zmieniona temu obiektowi na %f (uid: %d)", i, uid);
		SendClientMessage(playerid, -1, data);
	}
	if(!strcmp(str1,"usun",true))
	{
		if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnym obiekcie.");
		if(ObjectData[uid][bAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Obiekt o tym uid nie istnieje lub zostal usuniety.");
		
		if(IsValidDynamicObject(ObjectData[uid][oObject])) DestroyDynamicObject(ObjectData[uid][oObject]);

		ObjectData[uid][bAktywny] = 0;
		format(data,sizeof(data),"{a4a4a4}Obiekt (uid: %d) zostaje usuniety na zawsze z serwera.", uid);
		SendClientMessage(playerid, -1, data);
	}
	if(!strcmp(str1,"usun2",true))
	{
		SendClientMessage(playerid, -1, "{a4a4a4}Zaznacz i nacisnij lewym przyciskiem myszki na obiekt ktory chcesz usunac.");
		PlayerData[playerid][pObjectSelectAction] = 1;
		SelectObject(playerid);
		return 1;
	}
	if(!strcmp(str1,"tp",true))
	{
		new i;
		if(sscanf(str2, "d", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /edito tp [uid]");
		if(ObjectData[i][bAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Obiekt o tym uid nie istnieje lub zostal usuniety.");

		SetPlayerPos(playerid, ObjectData[i][bPos][0], ObjectData[i][bPos][1], ObjectData[i][bPos][2]);
		format(data,sizeof(data),"{a4a4a4}Zostajesz teleportowany do wybranego obiektu (uid: %d)", i);
		SendClientMessage(playerid, -1, data);
		return 1;
	}
	if(!strcmp(str1,"move",true))
	{
		new firma, frakcja, dziala, Float:ox, Float:oy, Float:oz, Float:rx, Float:ry, Float:rz;
		if(sscanf(str2, "iiiffffff", dziala, firma, frakcja, ox, oy, oz, rx, ry, rz)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /edito move [dziala(?) 0/1] [firma(?) uid] [frakcja(?) uid] [x] [y] [z] [rx] [ry] [rz]");
		if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnym obiekcie.");
		if(ObjectData[uid][bAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Obiekt o tym uid nie istnieje lub zostal usuniety.");

		ObjectData[uid][oRequisteFirma]   = firma;
		ObjectData[uid][oRequisteFrakcja] = frakcja;
		ObjectData[uid][oCanMoved] = dziala;
		ObjectData[uid][oPosMove][0] = ox;
		ObjectData[uid][oPosMove][1] = oy;
		ObjectData[uid][oPosMove][2] = oz;
		ObjectData[uid][oPosMove][3] = rx;
		ObjectData[uid][oPosMove][4] = ry;
		ObjectData[uid][oPosMove][5] = rz;
		
		format(data,sizeof(data),"{a4a4a4}Poprawnie ustawiono funkcje 'move' tego obiektu (uid: %d) (f:%d) (fr:%d) (d:%d)", uid, firma, frakcja, dziala);
		SendClientMessage(playerid, -1, data);
		format(data,sizeof(data),"{a4a4a4} ( %f %f %f | %f %f %f )", ox, oy, oz, rx, ry, rz);
		SendClientMessage(playerid, -1, data);
	}
	if(!strcmp(str1,"przesun",true))
	{
		if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnym obiekcie.");
		
		PlayerData[playerid][pObjectEdit] = uid;
		EditDynamicObject(playerid, ObjectData[uid][oObject]);
		format(data,sizeof(data),"{a4a4a4}Rozpoczynasz edycje obiektu (uid: %d)", uid);
		SendClientMessage(playerid, -1, data);
		return 1;
	}
	if(!strcmp(str1,"przesun2",true))
	{
		SelectObject(playerid);
		return 1;
	}
	if(!strcmp(str1,"kopia",true))
	{
		new i;
		if(sscanf(str2, "d", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /edito kopia [uid] ( mozesz pobrac uid innego obiektu - wpisz: /edito uid )");
		if(ObjectData[i][bAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Obiekt o tym uid nie istnieje lub zostal usuniety.");

		uid = obiekt_value;
	
	

		ObjectData[uid][bUID] = uid;
		ObjectData[uid][bAktywny] = 1;
		ObjectData[uid][oVW]  = ObjectData[i][oVW];
		ObjectData[uid][oInt] = ObjectData[i][oInt];
		ObjectData[uid][oModel] = ObjectData[i][oModel];
		ObjectData[uid][oType] = ObjectData[i][oType] ;
		ObjectData[uid][bPos][0] = ObjectData[i][bPos][0];
		ObjectData[uid][bPos][1] = ObjectData[i][bPos][1];
		ObjectData[uid][bPos][2] = ObjectData[i][bPos][2];
		ObjectData[uid][bPos][3] = ObjectData[i][bPos][3];
		ObjectData[uid][bPos][4] = ObjectData[i][bPos][4];
		ObjectData[uid][bPos][5] = ObjectData[i][bPos][5];
		
		ObjectData[uid][oObject] = CreateDynamicObject(ObjectData[uid][oModel], ObjectData[uid][bPos][0], ObjectData[uid][bPos][1], ObjectData[uid][bPos][2], ObjectData[uid][bPos][3], ObjectData[uid][bPos][4], ObjectData[uid][bPos][5], ObjectData[uid][oVW], ObjectData[uid][oInt]);
		
		EditDynamicObject(playerid, ObjectData[uid][oObject]);
		PlayerData[playerid][pObjectEdit] = uid;
		PlayerData[playerid][pObjectSelectAction] = 0;
		
		format(data,sizeof(data),"{a4a4a4}Stworzyles Obiekt. UID: %d, x %f y %f z %f", uid, ObjectData[uid][bPos][0], ObjectData[uid][bPos][1], ObjectData[uid][bPos][2]);
		SendClientMessage(playerid, -1, data);
		
		format(data,sizeof(data),"INSERT INTO `data_obiekty` SET `x`='%f', `y`='%f', `z`='%f', `modelid` = '%d'", ObjectData[uid][bPos][0], ObjectData[uid][bPos][1], ObjectData[uid][bPos][2], ObjectData[uid][oModel]);
		mysql_query(data);
		
		
		SaveObject(uid);
		obiekt_value++;
	
		format(data,sizeof(data),"{a4a4a4}Kopia obiektu (uid: %d) zostala utworzona.", i);
		SendClientMessage(playerid, -1, data);
		return 1;
	}
	if(!strcmp(str1,"kopia2",true))
	{
		SendClientMessage(playerid, -1, "{a4a4a4}Zaznacz i nacisnij lewym przyciskiem myszki na obiekt ktory chcesz skopiowac.");
		PlayerData[playerid][pObjectSelectAction] = 2;
		SelectObject(playerid);
		return 1;
	}
	SaveObject(uid);
	return 1;
}

//edito move  1 0 0 0.1 0.1 0.1 0 90 0//


CMD:maper(playerid, param[]) {

	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL || PlayerData[playerid][pRanga] != RANGA_MAPER) return SCM(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.")
	
	ShowPlayerDialog(playerid, DIALOG_MAPER_MAIN, DIALOG_STYLE_LIST, "Panel Mapera", "Obiekt\nBudynek\nBramy/drzwi\nSilownia", "Dalej", "Wyjdz");

	return 1;
}

CMD:addo(playerid, params[])
{
	new modelid, type;
	if(sscanf(params, "dD(0)", modelid, type)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /addo [modelid] [0 - zwykly obiekt | 1 - bankomat | 2 - przejazd graniczny]");
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL && PlayerData[playerid][pRanga] != RANGA_MAPER) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	new uid = obiekt_value, data[200];
	
	
	GetPlayerPos(playerid, ObjectData[uid][bPos][0], ObjectData[uid][bPos][1], ObjectData[uid][bPos][2]);
	ObjectData[uid][bUID] = uid;
	ObjectData[uid][bAktywny] = 1;
	ObjectData[uid][oVW]  = GetPlayerVirtualWorld(playerid);
	ObjectData[uid][oInt] = GetPlayerInterior(playerid);
	ObjectData[uid][oModel] = modelid;
	ObjectData[uid][oType] = type;

	ObjectData[uid][oObject] = CreateDynamicObject(ObjectData[uid][oModel], ObjectData[uid][bPos][0]+1.0, ObjectData[uid][bPos][1]+1.5, ObjectData[uid][bPos][2], ObjectData[uid][bPos][3]+2.5, ObjectData[uid][bPos][4], ObjectData[uid][bPos][5], ObjectData[uid][oVW], ObjectData[uid][oInt]);
	
	EditDynamicObject(playerid, ObjectData[uid][oObject]);
	PlayerData[playerid][pObjectEdit] = uid;
	
	format(data,sizeof(data),"{a4a4a4}Stworzyles Obiekt. UID: %d, x %f y %f z %f", uid, ObjectData[uid][bPos][0], ObjectData[uid][bPos][1], ObjectData[uid][bPos][2]);
	SendClientMessage(playerid, -1, data);
	
	format(data,sizeof(data),"INSERT INTO `data_obiekty` SET `x`='%f', `y`='%f', `z`='%f', `modelid` = '%d'", ObjectData[uid][bPos][0], ObjectData[uid][bPos][1], ObjectData[uid][bPos][2], ObjectData[uid][oModel]);
	mysql_query(data);
	
	
	SaveObject(uid);
	obiekt_value++;
	return 1;
}



CMD:addbudynek(playerid, params[])
{
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	new nazwa[31], typ, cena, interior_house, level_house;
	if(sscanf(params, "s[30]D(0)D(0)D(1)D(0)", nazwa, typ, cena, interior_house, level_house))
	{
		cmd_abudynki(playerid);
		SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /addbudynek [NAZWA BUDYNKU] [TYP (/abudynki)] [CENA] [INTERIOR] [POZIOM] (JEZELI NIE JEST TO DOM - WPISZ JEDYNIE NAZWE BUDYNKU)");
		SendClientMessage(playerid, -1, "{a4a4a4}Wpisz /abudynki - aby zobaczyc liste typow.");
		return 1;
	}
	
	CreateBuild(playerid, nazwa, typ, cena, interior_house, level_house);
	return 1;
}

CMD:addgym(playerid, params[])
{
	if(PlayerData[playerid][pPlayerGymEdit] == -1)
	{
		if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
		new type, uid = gym_value, data[200];
		if(sscanf(params, "d", type)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /addgym [TYP MASZYNY] [1 - LAWECZKA] [2 - BIERZNIA]");
		
		
		GetPlayerPos(playerid, GymData[uid][gPos][0], GymData[uid][gPos][1], GymData[uid][gPos][2]);
		GymData[uid][gUID] = uid;
		GymData[uid][gType] = type;
		GymData[uid][gAktywny] = 1;
		GymData[uid][gVW] = GetPlayerVirtualWorld(playerid);
		GymData[uid][gInt] = GetPlayerInterior(playerid);
		
		if(type == 1) //laweczka
		{
			GymData[uid][gObject] = CreateDynamicObject(2629, GymData[uid][gPos][0], GymData[uid][gPos][1], GymData[uid][gPos][2], GymData[uid][gPos][3], GymData[uid][gPos][4], GymData[uid][gPos][5],  GymData[uid][gVW], GymData[uid][gInt]);
		}
		if(type == 2) //bierznia
		{
			GymData[uid][gObject] = CreateDynamicObject(2627, GymData[uid][gPos][0], GymData[uid][gPos][1], GymData[uid][gPos][2], GymData[uid][gPos][3], GymData[uid][gPos][4], GymData[uid][gPos][5],  GymData[uid][gVW], GymData[uid][gInt]);
		}

		
		

		EditDynamicObject(playerid, GymData[uid][gObject]);
		PlayerData[playerid][pGymEdit] = uid;
		
		format(data,sizeof(data),"{a4a4a4}Stworzyles Maszyne do cwiczen. UID: %d, typ: %d", uid, type);
		SendClientMessage(playerid, -1, data);
		
		format(data,sizeof(data),"INSERT INTO `data_gym` SET `type`='%d'",
	    type);
		mysql_query(data);
		

		SaveGym(uid);
		
		gym_value++;
		return 1;
	}
	else
	{
		new uid = PlayerData[playerid][pPlayerGymEdit];
		GetPlayerPos(playerid, GymData[uid][gPos][6], GymData[uid][gPos][7], GymData[uid][gPos][8]);
        GetPlayerFacingAngle(playerid, GymData[uid][gPos][9]);
		SaveGym(uid);
		SendClientMessage(playerid, -1, "{a4a4a4}Pozycje zostaly zapisane!");
		PlayerData[playerid][pPlayerGymEdit] = -1;
		return 1;
	}	
}

CMD:editgym(playerid, params[])
{
	if(PlayerData[playerid][pGymEditCommand] == 0)
	{
		new str1[32], str2[126], data[500], uid = GetPlayerGym(playerid, 5.0);
		if(sscanf(params, "s[32]S()[126]", str1, str2)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /editgym [tp / przesun / typ / usun]");
		if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
		
		if(!strcmp(str1,"uid",true))
		{
			format(data,sizeof(data),"{a4a4a4}Fotoradar (uid: %d) zostal odnaleziony.", uid);
			SendClientMessage(playerid, -1, data);
			return 1;
		}
		if(!strcmp(str1,"usun",true))
		{
			if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnej maszynie do cwiczen.");
			if(GymData[uid][gAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Maszyna do cwiczen o tym uid nie istnieje lub zostal usuniety.");
			
			if(IsValidDynamicObject(GymData[uid][gObject])) DestroyDynamicObject(GymData[uid][gObject]);
			if(IsValidDynamic3DTextLabel(GymData[uid][gText3D])) DestroyDynamic3DTextLabel(GymData[uid][gText3D]);
			GymData[uid][gAktywny] = 0;
			SendClientMessage(playerid, -1, "{a4a4a4}Status maszyny do cwiczen zostal zmieniony");
			format(data,sizeof(data),"{a4a4a4}Maszyna do cwiczen (uid: %d) zostaje usunieta na zawsze z serwera.", uid);
			SendClientMessage(playerid, -1, data);
		}
		if(!strcmp(str1,"tp",true))
		{
			new i;
			if(sscanf(str2, "d", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editgym tp [uid]");

			SetPlayerPos(playerid, GymData[i][gPos][0], GymData[i][gPos][1], GymData[i][gPos][2]+2);
			return 1;
		}
		if(!strcmp(str1,"przesun",true))
		{
			if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnej maszynie do cwiczen.");
			
			EditDynamicObject(playerid, GymData[uid][gObject]);
			PlayerData[playerid][pGymEdit] = uid;
			SendClientMessage(playerid, -1, "{a4a4a4}Rozpoczynasz edycje obiektu maszyna do cwiczen.");
			return 1;
		}
		if(!strcmp(str1,"typ",true))
		{
			if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnym fotoradarze.");
			new i;
			if(sscanf(str2, "d", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editgym typ [1 || 0]");

			GymData[uid][gType] = i;
			SendClientMessage(playerid, -1, "{a4a4a4}Typ maszyny do cwiczen zostal zmieniony");
		}
		SaveGym(uid);
		return 1;
	}
    else
	{
		new uid = PlayerData[playerid][pPlayerGymEdit];
		GetPlayerPos(playerid, GymData[uid][gPos][6], GymData[uid][gPos][7], GymData[uid][gPos][8]);
		GetPlayerFacingAngle(playerid, GymData[uid][gPos][9]);
		SaveGym(uid);
		SendClientMessage(playerid, -1, "{a4a4a4}Pozycje zostaly zapisane!");
		PlayerData[playerid][pGymEdit] = 0;
		PlayerData[playerid][pPlayerGymEdit] = -1;
        PlayerData[playerid][pGymEditCommand] = 0;
	}	
	return 1;
}

CMD:editgate(playerid, params[])
{
    new str1[32], str2[126], data[500], uid = GetPlayerGateTerminal(playerid, 5.0);
	if(sscanf(params, "s[32]S()[126]", str1, str2)) return SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /editgate [tp / przesun / frakcja / usun]");
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
		
	if(!strcmp(str1,"uid",true))
	{
		format(data,sizeof(data),"{a4a4a4}Brama (uid: %d) zostala odnaleziona.", uid);
		SendClientMessage(playerid, -1, data);
		return 1;
	}
	if(!strcmp(str1,"usun",true))
	{
		if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnej bramie");
		if(GateData[uid][gAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Brama o tym uid nie istnieje lub zostala usunieta.");
			
		if(IsValidDynamicObject(GateData[uid][gObject])) DestroyDynamicObject(GateData[uid][gObject]);
		if(IsValidDynamic3DTextLabel(GateData[uid][gText3D])) DestroyDynamic3DTextLabel(GateData[uid][gText3D]);
		GateData[uid][gAktywny] = 0;
		SendClientMessage(playerid, -1, "{a4a4a4}Status bramy zostal zmieniony");
		format(data,sizeof(data),"{a4a4a4}Brama (uid: %d) zostaje usunieta na zawsze z serwera.", uid);
		SendClientMessage(playerid, -1, data);
	}
	if(!strcmp(str1,"tp",true))
	{
		new i;
		if(sscanf(str2, "d", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editgate tp [uid]");

		SetPlayerPos(playerid, GateData[i][gPos][12], GateData[i][gPos][13], GateData[i][gPos][14]);
		return 1;
	}
	if(!strcmp(str1,"przesun",true))
	{
		if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnej bramie.");
			
        SendClientMessage(playerid, -1, "{a4a4a4}Rozpoczynasz edycje bramy");
		EditDynamicObject(playerid, GateData[uid][gObject]);
        SCM(playerid, -1, "Ustaw brame w pozycje zamknieta.");
        PlayerData[playerid][pAddCloseGate] = uid;
		return 1;
	}
	if(!strcmp(str1,"frakcja",true))
	{
		if(uid == -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie przy zadnej bramie.");
		new i;
		if(sscanf(str2, "d", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editgate frakcja");

		GateData[uid][gFrakcja] = i;
		SendClientMessage(playerid, -1, "{a4a4a4}Frakcja bramy zostala zmieniona");
	}
	SaveGates(uid);
	return 1;
}

CMD:adddodatek(playerid, params[])
{
	new vid = GetPlayerVehicleID(playerid), objectid, query[512], type, Float:x, Float:y, Float:z, Float: rz;
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SCM(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	if(!GetPlayerVehicleID(playerid)) return SCM(playerid, -1, "{a4a4a4}Aby dodac dodatek musisz byc w pojezdzie.");
	if(IsVehicleAAirplane(vid) || IsVehicleAHelicopter(vid) || IsVehicleABoat(vid) || ToMotor(vid) || ToRower(vid)) return SCM(playerid, -1, "{a4a4a4}Nie mozesz zalozyc dodatku na tego typu pojazdu!");
	if(sscanf(params, "ddffff", objectid, type, x, y, z, rz)) return SCM(playerid, -1, "{a4a4a4}Wpisz /adddodatk [OBJECTID] [TYPE] [X] [Y] [Z] [RotZ] (0 - obiekt widoczny po spawnie pojazdu, 1 - obiekt widoczny po uzyciu /v)");
	/*if(objectid != 18646 || objectid != 19308 || objectid != 19309 || objectid != 19310 || objectid != 19311 || objectid != 19419) 
	{
		SCM(playerid, -1, "{a4a4a4}Wpisz obiekt z dostepnych.");
		return cmd_dodatki(playerid);
	}*/
	format(query, sizeof(query), "UPDATE `data_vehicles` SET `objectid` = '%d', `atype` = '%d', `ax` = '%f', `ay` = '%f', `az` = '%f', `arz` = '%f' WHERE `uid` = '%d'", objectid, type, x, y, z, rz, VehicleData[vid][vUID]);  mysql_query(query);
	format(query, sizeof(query), "{a4a4a4}Poprawnie dodano objekt %d, typ %d do pojazdu %d", objectid, type, vid);
	SCM(playerid, -1, query);
	SetVehicleAddition(vid, objectid, type, x, y, z, 0.0, 0.0, rz);
	return 1;
}

CMD:editdodatek(playerid, params[])
{
	new vid = GetPlayerVehicleID(playerid);
	new str1[128], str2[128];
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SCM(playerid, -1, "{a4a4a4}Niie masz uprawnien do uzywania tej komendy.");
	if(vid == -1) return SCM(playerid, -1, "{a4a4a4}Aby edytowac dodatek musisz byc w pojezdzie.");
	if(VehicleData[vid][vAObject] == 0) return SCM(playerid, -1, "{a4a4a4}Ten pojazd nie ma dodatkowego obiektu!");
	if(sscanf(params, "s[128]s[128]", str1, str2)) return SCM(playerid, -1, "{a4a4a4}Uzyj /editdodatek [pos / obiekt / usun / type]");
	if(!strcmp(str1, "pos", true))
	{
		return cmd_editdodatekpos(playerid, params);
	}
	if(!strcmp(str1, "obiekt", true))
	{
		new query[512], data[512], obiekt;
		if(sscanf(str2, "d", obiekt)) return SCM(playerid, -1, "{a4a4a4}Uzyj /editdodatek obiekt [objektid]");
		format(query, sizeof(query), "UPDATE `data_vehicles` SET `objectid`='%d' WHERE `uid`='%d'",obiekt, VehicleData[vid][vUID]); mysql_query(query);
		format(data, sizeof(data), "{a4a4a4}Dodatek do pojazdu o uid %d zostal edytowany na objektid = %d", VehicleData[vid][vUID], obiekt);
		SCM(playerid, -1, data);
		return 1;
	}
	if(!strcmp(str1, "type", true))
	{
		new query[512], data[512], type;
		if(sscanf(str2, "d", type)) return SCM(playerid, -1, "{a4a4a4}Uzyj /editdodatek type [objektid]");
		format(query, sizeof(query), "UPDATE `data_vehicles` SET `atype`='%d' WHERE `uid`='%d'",type, VehicleData[vid][vUID]); mysql_query(query);
		format(data, sizeof(data), "{a4a4a4}Dodatek do pojazdu o uid %d zostal edytowany na type = %d", VehicleData[vid][vUID], type);
		SCM(playerid, -1, data);
		return 1;
	}
	if(!strcmp(str1, "usun", true))
	{
		new query[512], data[512];
		VehicleData[vid][vAObject] = 0;
		VehicleData[vid][vAType] = 0;
		VehicleData[vid][vAPos][0] = 0.0;
		VehicleData[vid][vAPos][1] = 0.0;
		VehicleData[vid][vAPos][2] = 0.0;
		VehicleData[vid][vAPos][3] = 0.0;
		VehicleData[vid][vAPos][4] = 0.0;
		VehicleData[vid][vAPos][5] = 0.0;
		format(query, sizeof(query), "UPDATE `data_vehicles` SET `ax`= `0.0`, `ay`='0.0', `az`='0.0', `arz`='0.0', `objectid` = `0`, `atype` = `0.0` WHERE `uid`='%d'", VehicleData[vid][vUID]); mysql_query(query);
		format(data, sizeof(data), "{a4a4a4}Dodatek do pojazdu o uid %d zostal usuniety", VehicleData[vid][vUID]);
		SCM(playerid, -1, data);
		SetVehicleAddition(vid, VehicleData[vid][vAObject], VehicleData[vid][vAType], VehicleData[vid][vAPos][0], VehicleData[vid][vAPos][1], VehicleData[vid][vAPos][2], VehicleData[vid][vAPos][3], VehicleData[vid][vAPos][4], VehicleData[vid][vAPos][5]);
		return 1;
	}	
	return 1;
}

CMD:editdodatekpos(playerid, params[])
{
	new query[512], data[512], Float: x, Float: y, Float: z, Float: rz, vid = GetPlayerVehicleID(playerid);
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SCM(playerid, -1, "{a4a4a4}Niie masz uprawnien do uzywania tej komendy.");
	if(vid == -1) return SCM(playerid, -1, "{a4a4a4}Aby edytowac dodatek musisz byc w pojezdzie.");
	if(VehicleData[vid][vAObject] == 0) return SCM(playerid, -1, "{a4a4a4}Ten pojazd nie ma dodatkowego obiektu!");
	if(sscanf(params, "ffff", x, y, z, rz)) return 1; SCM(playerid, -1, "{a4a4a4}Uzyj /editdodatek pos [x] [y] [z] [rz]");
	format(query, sizeof(query), "UPDATE `data_vehicles` SET `ax`='%f', `ay`='%f', `az`='%f', `arz`='%f' WHERE `uid`='%d'",x, y, z, rz, VehicleData[vid][vUID]); mysql_query(query);
	format(data, sizeof(data), "{a4a4a4}Dodatek do pojazdu o uid %d zostal edytowany na pozycje X = %f , Y = %f , Z = %f , RZ = %f", VehicleData[vid][vUID], x, y, z, rz);
	SCM(playerid, -1, data);
	return 1;
}

CMD:dodatki(playerid)
{
	new data[1500];
	strcat(data, "OBIECTID - NAZAWA\n");
	strcat(data, "18646 - Kogut pojedynczy\n");
	strcat(data, "19419 - Kogut 'belka'\n");
	strcat(data, "19309 - Tabliczka 'Taxi' czarna/zolty\n");
	strcat(data, "OBIECTID - KOLOR TLA/KOLOR NAPISU\n");
	strcat(data, "19308 - Tabliczka 'Taxi' zolta/czarny\n");
	strcat(data, "19309 - Tabliczka 'Taxi' czarna/bialy\n");
	strcat(data, "19310 - Tabliczka 'Taxi' biala/czarny\n");
	strcat(data, "19311 - Tabliczka 'Taxi' czarna/zolty\n");
	ShowPlayerDialog(playerid, 999999, DIALOG_STYLE_MSGBOX, "OBIECTID dodatkow do pojazdow", data, "OK", #);
	return 1;
}

CMD:addgate(playerid, params[])
{
    new frakcja;
    new data[500];
    new uid = gates_value;
    if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SCM(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
    if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "{a4a4a4}Nie mozesz przebywac w pojezdzie.");
    if(sscanf(params, "d", frakcja)) return SCM(playerid, -1, "{a4a4a4}/addgate frakcja");
    GateData[uid][gUID] = uid;
	GateData[uid][gFrakcja] = frakcja;
	GateData[uid][gAktywny] = 1;
	GateData[uid][gVW] = GetPlayerVirtualWorld(playerid);
	GateData[uid][gInt] = GetPlayerInterior(playerid);
    
    format(data,sizeof(data),"INSERT INTO `data_bramy` SET `frakcja`='%d'",
	frakcja);
	mysql_query(data);
    
    PlayerData[playerid][pGateAdd] = uid;

    ShowModelSelectionMenu(playerid, bramyid, "->Bramy<-");
    return 1;
}


CMD:dajwszystkoall(playerid,params[])
{
    new data[128];
    if(PlayerData[playerid][pRanga] < RANGA_JUNIORADMIN) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
    for(new i; i < MAX_PLAYERS; i++)
    {
        PlayerData[i][pSen] = 100;
        PlayerData[i][pGlod] = 100;
    }

    format(data,sizeof(data),"[PTR-Serw]{00FF00}Administrator [%d]%s Dal wszystkim Jedzenie oraz Energie!", playerid, PlayerData[playerid][pName]);
    SendClientMessageToAll(-1, data);
    return 1;
}

//USUNĄĆ

CMD:testv(playerid)
{
	if(plama_activity != -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz tego zrobic, aktywna jest juz jedna plama i najpierw trzeba ja zneutralzowac.");
	if(GetOnlineFractions(FRAKCJA_STRAZ_POZARNA) == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Brak strazy pozarnej na serwerze online.");
	EventPlamaStart();
	SendClientMessage(playerid, -1, "{a4a4a4}Gotowe.");
	return 1;
}

CMD:test0(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
        SetPlayerPos(playerid, -2655.3518,638.5269,15.4191);
    }
    return 1;
}
CMD:test2(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
        SetPlayerPos(playerid, -2635.0698,616.2888,57.2082);
    }
    return 1;
}

CMD:test3(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
        SetPlayerPos(playerid, -2641.5869,624.5236,57.1678);
    }
    return 1;
}
CMD:test4(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
        SetPlayerPos(playerid, -2633.5251,616.9003,72.5516);
    }
    return 1;
}
CMD:test5(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
        SetPlayerPos(playerid, -2640.2034,630.7090,57.1645);
    }
    return 1;
}
CMD:test6(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
        SetPlayerPos(playerid, -2622.1553,694.4767,51.3541);
    }
    return 1;
}

CMD:test7(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
        SetPlayerPos(playerid, -2621.0225,615.3218,56.8401);
    }
    return 1;
}

CMD:test8(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
        SetPlayerPos(playerid, -2730.9243,689.0055,51.7433);
    }
    return 1;
}

CMD:abudynki(playerid)
{
	new data[500];
	format(data,sizeof(data),"\
					1 - Kasyno\n\
					2 - Wesole Miasteczko\n\
					3 - BurgerShot\n\
					4 - Sklep elektryczny\n\
					5 - Motel\n\
					6 - Urzad\n\
					7 - Bank\n\
					9 - silownia\n");
	format(data,sizeof(data),"%s\	
					10 - (---) Rezerwacja dla Centrali Towrow (---)\n\
					11 - skelp z ubraniami\n\
					12 - sklep spozywczy\n\
					13 - fryzjer\n\
					14 - dom\n\
					",data);
	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Lista typow - budynki", data, "Zamknij", "");
	return 1;
}



CMD:editbudynek(playerid, params[])
{
	new str1[32], str2[126], data[500], uid = GetBuildUID(playerid);
	if(sscanf(params, "s[32]S()[126]", str1, str2))
	{
		SendClientMessage(playerid,-1,"{a4a4a4}Wpisz: /editbudynek [wejscie / wyjscie / cena / interiorh / poziom / usun / zamknij / otworz / opis / type ...");
		SendClientMessage(playerid,-1,"{a4a4a4}... / przywroc / tp / uid / nazwa");
		return 1;
	}
	if(PlayerData[playerid][pRanga] < RANGA_WSPOLWLASCICIEL) return SendClientMessage(playerid, -1, "{ffffff}[{bf0d00}BLAD{ffffff}]{a4a4a4}Nie masz uprawnien do uzywania tej komendy.");
	
	if(!strcmp(str1,"uid",true))
	{
		if(GetBuildUID(playerid) != 0)
		{
			format(data,sizeof(data),"{a4a4a4}Poprawnie odnaleziono budynek o uid: %d, mozesz od teraz uzywac pozostalych komend do edycji.", uid);
			SendClientMessage(playerid, -1, data);
		}
		else
		{
			SendClientMessage(playerid, -1, "{a4a4a4}Nie odnaleziono zadnego budynku. Sprawdz czy, aby na pewno znajdujesz sie przy wejsciu do budynku ktory chcesz edytuowac.");
		}
		return 1;
	}
	if(!strcmp(str1,"usun",true))
	{
		if(BudynekData[uid][bAktywny]== 0) return SendClientMessage(playerid, -1, "{a4a4a4}Budynek nie istnieje juz.");
		
		if(IsValidDynamicPickup(BudynekData[uid][bPickup])) DestroyDynamicPickup(BudynekData[uid][bPickup]);
		if(IsValidDynamicPickup(BudynekData[uid][bPickup2])) DestroyDynamicPickup(BudynekData[uid][bPickup2]);
		if(IsValidDynamic3DTextLabel(BudynekData[uid][bText3D])) DestroyDynamic3DTextLabel(BudynekData[uid][bText3D]);
		if(IsValidDynamicMapIcon(BudynekData[uid][bMapIcon])) DestroyDynamicMapIcon(BudynekData[uid][bMapIcon]);

		BudynekData[uid][bAktywny] = 0;
		format(data,sizeof(data),"{a4a4a4}Budynek (uid: %d) zostaje usuniety na zawsze z serwera.", uid);
		SendClientMessage(playerid, -1, data);
	}
	
	if(!strcmp(str1,"tp",true))
	{
		new i;
		if(sscanf(str2, "d", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editbudynek tp [uid]");
		if(BudynekData[i][bPickup] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Taki budynek o podanym uid nie istnieje na serwerze");
		if(BudynekData[i][bAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Ten budynek zostal usuniety z serwera. Uzyj /editbudynek przywroc [uid], aby go przywrocic.");
		
		SetPlayerPos(playerid, BudynekData[i][bPos_OUT][0], BudynekData[i][bPos_OUT][1], BudynekData[i][bPos_OUT][2]);
		return 1;
	}
	if(!strcmp(str1,"nazwa",true))
	{
		new i[31];
		if(sscanf(str2, "s[30]", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editbudynek nazwa [nazwa]");
		
		if(BudynekData[uid][bPickup] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Taki budynek o podanym uid nie istnieje na serwerze");
		if(BudynekData[uid][bAktywny] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Ten budynek zostal usuniety z serwera. Uzyj /editbudynek przywroc [uid], aby go przywrocic.");
		
		format(BudynekData[uid][bName], 30, "%s", i);
	}
	
	if(!strcmp(str1,"przywroc",true))
	{
		new i;
		if(sscanf(str2, "d", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editbudynek przywroc [uid]");
		if(BudynekData[i][bAktywny] == 1) return SendClientMessage(playerid, -1, "{a4a4a4}Ten budynek nie wymaga przywracania poniewaz istnieje.");
		if(BudynekData[i][bUID] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Taki budynek o podanym uid nie istnieje na serwerze");
		
		if(IsValidDynamicPickup(BudynekData[i][bPickup])) DestroyDynamicPickup(BudynekData[i][bPickup]);
		if(IsValidDynamicPickup(BudynekData[i][bPickup2])) DestroyDynamicPickup(BudynekData[i][bPickup2]);
		if(IsValidDynamic3DTextLabel(BudynekData[i][bText3D])) DestroyDynamic3DTextLabel(BudynekData[i][bText3D]);
		if(IsValidDynamicMapIcon(BudynekData[i][bMapIcon])) DestroyDynamicMapIcon(BudynekData[i][bMapIcon]);
		
		BudynekData[i][bAktywny] = 1;
		BudynekData[i][bPickup]  = CreateDynamicPickup(BudynekData[i][bPickup_PWN_ID], 23, BudynekData[i][bPos_OUT][0], BudynekData[i][bPos_OUT][1], BudynekData[i][bPos_OUT][2]);
		
		if(BudynekData[i][bMapIcon_PWN_ID] != -1)
		{
			BudynekData[i][bMapIcon] = CreateDynamicMapIcon(BudynekData[i][bPos_OUT][0], BudynekData[i][bPos_OUT][1], BudynekData[i][bPos_OUT][2], BudynekData[i][bMapIcon_PWN_ID], -1, 0, 0);
		}
		if(BudynekData[i][bType] == 14)
		{
			HouseChangeInterior(i, BudynekData[i][bHouseInterior]);
			BudynekData[i][bPickup2]  = CreateDynamicPickup(BudynekData[i][bPickup_PWN_ID], 23, BudynekData[i][bPos_IN][0], BudynekData[i][bPos_IN][1], BudynekData[i][bPos_IN][2], i, BudynekData[i][bInt_IN]);
		}
		
		HouseText3D(uid); 
		SaveBuild(uid);
		return 1;
	}

	if(!strcmp(str1,"wejscie",true))
	{
		new i;
		if(sscanf(str2, "d", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editbudynek wejscie [uid]");
		uid = i;
		GetPlayerPos(playerid, BudynekData[uid][bPos_OUT][0], BudynekData[uid][bPos_OUT][1], BudynekData[uid][bPos_OUT][2]);
		if(IsValidDynamicPickup(BudynekData[uid][bPickup])) DestroyDynamicPickup(BudynekData[uid][bPickup]);
		if(IsValidDynamicMapIcon(BudynekData[uid][bMapIcon])) DestroyDynamicMapIcon(BudynekData[uid][bMapIcon]);
		
		if(BudynekData[uid][bMapIcon_PWN_ID] != -1)
		{
			BudynekData[uid][bMapIcon] = CreateDynamicMapIcon(BudynekData[uid][bPos_OUT][0], BudynekData[uid][bPos_OUT][1], BudynekData[uid][bPos_OUT][2], BudynekData[uid][bMapIcon_PWN_ID], -1, 0, 0);
		}
		
		BudynekData[uid][bPickup]  = CreateDynamicPickup(BudynekData[uid][bPickup_PWN_ID], 23, BudynekData[uid][bPos_OUT][0], BudynekData[uid][bPos_OUT][1], BudynekData[uid][bPos_OUT][2]);
		format(data,sizeof(data),"{a4a4a4}Pozycja wejsciowa dla tego budynku (uid: %d) zostala zmieniona na x %f y %f z %f", uid, BudynekData[uid][bPos_OUT][0], BudynekData[uid][bPos_OUT][1], BudynekData[uid][bPos_OUT][2]);
		SendClientMessage(playerid, -1, data);
		HouseText3D(uid);
	}
	
	if(!strcmp(str1,"wyjscie",true))
	{
		new i;
		if(sscanf(str2, "d", i)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editbudynek wyjscie [uid]");
		uid = i;
		GetPlayerPos(playerid, BudynekData[uid][bPos_IN][0], BudynekData[uid][bPos_IN][1], BudynekData[uid][bPos_IN][2]);
		format(data,sizeof(data),"{a4a4a4}Pozycja wyjsciowa dla tego budynku (uid: %d) zostala zmieniona na x %f y %f z %f", uid, BudynekData[uid][bPos_IN][0], BudynekData[uid][bPos_IN][1], BudynekData[uid][bPos_IN][2]);
		SendClientMessage(playerid, -1, data);

		if(IsValidDynamicPickup(BudynekData[uid][bPickup2])) DestroyDynamicPickup(BudynekData[uid][bPickup2]);
		BudynekData[uid][bPickup2]  = CreateDynamicPickup(BudynekData[uid][bPickup_PWN_ID], 23, BudynekData[uid][bPos_IN][0], BudynekData[uid][bPos_IN][1], BudynekData[uid][bPos_IN][2], uid, BudynekData[uid][bInt_IN]);
	}
	
	if(!strcmp(str1,"cena",true))
	{
		new value;
		if(sscanf(str2, "d", value)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editbudynek cena [koszt]");
		BudynekData[uid][bPrice] = value;
		format(data,sizeof(data),"{a4a4a4}Koszt tego budynku (uid: %d) zostal zmieniony na ${dedede}%d", uid, BudynekData[uid][bPrice]);
		SendClientMessage(playerid, -1, data);
		HouseText3D(uid);
	}
	
	if(!strcmp(str1,"interiorh",true))
	{
		if(BudynekData[uid][bType] != 14) return SendClientMessage(playerid, -1, "{a4a4a4}Ten budynek nie jest domem, nie mozesz zmienic mu tego.");
		new value;
		if(sscanf(str2, "d", value)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editbudynek interiorh [interior] (interiory do domu)");
		BudynekData[uid][bHouseInterior] = value;
		format(data,sizeof(data),"{a4a4a4}Interior tego budynku (uid: %d) zostal zmieniony na {dedede}%d", uid, BudynekData[uid][bHouseInterior]);
		SendClientMessage(playerid, -1, data);
		HouseChangeInterior(uid, BudynekData[uid][bHouseInterior]);
		HouseText3D(uid);
	}
	
	if(!strcmp(str1,"poziom",true))
	{
		new value;
		if(sscanf(str2, "d", value)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editbudynek poziom [poziom]");
		BudynekData[uid][bHouseLevel] = value;
		format(data,sizeof(data),"{a4a4a4}Wymagany poziom do kupna tego budynku (uid: %d) zostal zmieniony na {dedede}%d", uid, BudynekData[uid][bHouseLevel]);
		SendClientMessage(playerid, -1, data);
		HouseText3D(uid);
	}
	
	if(!strcmp(str1,"otworz",true))
	{
		BudynekData[uid][bLocked]  = 0;
		format(data,sizeof(data),"{a4a4a4}Budynek (uid: %d) zostal {dedede}otworzony {a4a4a4} (wartosc: %d)", uid, BudynekData[uid][bLocked]);
		SendClientMessage(playerid, -1, data);
		HouseText3D(uid);
	}
	
	if(!strcmp(str1,"zamknij",true))
	{
		BudynekData[uid][bLocked]  = 1;
		format(data,sizeof(data),"{a4a4a4}Budynek (uid: %d) zostal {dedede}zamkniety {a4a4a4} (wartosc: %d)", uid, BudynekData[uid][bLocked]);
		SendClientMessage(playerid, -1, data);
		HouseText3D(uid);
	}
	
	if(!strcmp(str1,"opis",true))
	{
		new value[30];
		if(sscanf(str2, "s[30]", value)) return SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editbudynek opis [tresc opisu]");
		format(BudynekData[uid][bHouseOpis], 49, value);

		format(data,sizeof(data),"{a4a4a4}Opis tego budynku (uid: %d) zostal zmieniony na {dedede}%s", uid, BudynekData[uid][bHouseOpis]);
		SendClientMessage(playerid, -1, data);
		HouseText3D(uid);
	}

	
	if(!strcmp(str1,"type",true))
	{
		new type;
		if(sscanf(str2, "d", type)) 
		{
			cmd_abudynki(playerid);
			SendClientMessage(playerid, -1, "{a4a4a4}Wpisz: /editbudynek type [Typ (/abudynki)]");
			return 1;
		}

		BudynekData[uid][bMapIcon_PWN_ID] = -1;
		SetBuildType(uid, type);
		BudynekData[uid][bPickup_PWN_ID]  = 19197;
		BudynekData[uid][bType]  = type;
		
		
		if(BudynekData[uid][bType] == 14) // Dom
		{
			BudynekData[uid][bMapIcon_PWN_ID] = 31;
			BudynekData[uid][bPickup_PWN_ID] = 1273;
			HouseText3D(uid);
		}

		format(data,sizeof(data),"{a4a4a4}Typ dla tego budynku (uid: %d) zostal zmieniony na {dedede}T: %d, M: %d, P: %d", uid, type, BudynekData[uid][bMapIcon_PWN_ID], BudynekData[uid][bPickup_PWN_ID]);
		SendClientMessage(playerid, -1, data);

		if(IsValidDynamicPickup(BudynekData[uid][bPickup2])) DestroyDynamicPickup(BudynekData[uid][bPickup2]);
		if(IsValidDynamicPickup(BudynekData[uid][bPickup])) DestroyDynamicPickup(BudynekData[uid][bPickup]);
		if(IsValidDynamic3DTextLabel(BudynekData[uid][bText3D])) DestroyDynamic3DTextLabel(BudynekData[uid][bText3D]);
		if(IsValidDynamicMapIcon(BudynekData[uid][bMapIcon])) DestroyDynamicMapIcon(BudynekData[uid][bMapIcon]);
		BudynekData[uid][bPickup]  = CreateDynamicPickup(BudynekData[uid][bPickup_PWN_ID], 23, BudynekData[uid][bPos_OUT][0], BudynekData[uid][bPos_OUT][1], BudynekData[uid][bPos_OUT][2]);
		BudynekData[uid][bPickup2]  = CreateDynamicPickup(BudynekData[uid][bPickup_PWN_ID], 23, BudynekData[uid][bPos_IN][0], BudynekData[uid][bPos_IN][1], BudynekData[uid][bPos_IN][2]);
		
		if(BudynekData[uid][bMapIcon_PWN_ID] != -1)
		{
			BudynekData[uid][bMapIcon] = CreateDynamicMapIcon(BudynekData[uid][bPos_OUT][0], BudynekData[uid][bPos_OUT][1], BudynekData[uid][bPos_OUT][2], BudynekData[uid][bMapIcon_PWN_ID], -1, 0, 0);
		}
	}
	SaveBuild(uid);
	return 1;
}

new CreateTPprogress;

CMD:createtp(playerid,params[])
{
	switch(CreateTPprogress)
	{
		case 0:
		{
			new tpslot = GetFreeTeleportSlot();

			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid,x,y,z);

			Teleporty[tpslot][tp_from][0] = x;
			Teleporty[tpslot][tp_from][1] = y;
			Teleporty[tpslot][tp_from][2] = z;

			SendClientMessage(playerid, -1, "Pozycja zapisana pomyslnie, ustaw docelowa, aby stworzyc teleport!");
			CreateTPprogress = 1;
		}
		case 1:
		{
			new tpslot = GetFreeTeleportSlot();
			


			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid,x,y,z);

			Teleporty[tpslot][tp_to][0] = x;
			Teleporty[tpslot][tp_to][1] = y;
			Teleporty[tpslot][tp_to][2] = z;

			SendClientMessage(playerid, -1, "Teleport ustawiony pomyslnie!");
			CreateDynamicPickup(PICKUPMODEL, 1, Teleporty[tpslot][tp_from][0], Teleporty[tpslot][tp_from][1], Teleporty[tpslot][tp_from][2], -1);
			CreateDynamicPickup(PICKUPMODEL, 1, Teleporty[tpslot][tp_to][0], Teleporty[tpslot][tp_to][1], Teleporty[tpslot][tp_to][2], -1);

			Teleporty[tpslot][tp_info][0] = CreateDynamic3DTextLabel("Wpisz /wejdz, aby sie teleportowac!", 0xFFFFFFFF, Teleporty[tpslot][tp_from][0], Teleporty[tpslot][tp_from][1], Teleporty[tpslot][tp_from][2], 20.0);
			Teleporty[tpslot][tp_info][1] = CreateDynamic3DTextLabel("Wpisz /wyjdz, aby sie teleportowac!", 0xFFFFFFFF, Teleporty[tpslot][tp_to][0], Teleporty[tpslot][tp_to][1], Teleporty[tpslot][tp_to][2], 20.0);

                new data[500];
                format(data, sizeof(data), "INSERT INTO zlec_teleporty (fromx, fromy, fromz, tox, toy, toz) VALUE ('%f', '%f', '%f', '%f', '%f', '%f')", Teleporty[tpslot][tp_from][0], Teleporty[tpslot][tp_from][1], Teleporty[tpslot][tp_from][2],
				Teleporty[tpslot][tp_to][0], Teleporty[tpslot][tp_to][1], Teleporty[tpslot][tp_to][2]);
                mysql_query(data);

			CreateTPprogress = 0;
		}
	}
	return 1;
}

CMD:wejdz(playerid,params[])
{
	new dd = SprawdzMozliwoscTeleportacji(playerid, 1);
	if(!dd)
		return SendClientMessage(playerid, -1, "Nie znajdujesz sie w teleporcie!");
	return 1;
}

CMD:wyjdz(playerid,params[])
{
	new dd = SprawdzMozliwoscTeleportacji(playerid, 0);
	if(!dd)
		return SendClientMessage(playerid, -1, "Nie znajdujesz sie w teleporcie!");
	return 1;
}

//Wszystkie funkcje:


stock LoadTeleports()
{
    new query[500];
    format(query, sizeof(query), "SELECT * FROM `zlec_teleporty`");
	mysql_query(query);

    mysql_store_result();
	new number = 0;
	while(mysql_fetch_row(query))
	{
        if(mysql_fetch_row(query, "|"))
        {
            sscanf(query, "p<|>dffffff", 
            Teleporty[number][tp_id],
            Teleporty[number][tp_from][0],
            Teleporty[number][tp_from][1],
            Teleporty[number][tp_from][2],
            Teleporty[number][tp_to][0],
            Teleporty[number][tp_to][1],
            Teleporty[number][tp_to][2] );
        }
		CreateDynamicPickup(PICKUPMODEL, 1, Teleporty[number][tp_from][0], Teleporty[number][tp_from][1], Teleporty[number][tp_from][2], -1);
		CreateDynamicPickup(PICKUPMODEL, 1, Teleporty[number][tp_to][0], Teleporty[number][tp_to][1], Teleporty[number][tp_to][2], -1);

		Teleporty[number][tp_created] = true;

		Teleporty[number][tp_info][0] = CreateDynamic3DTextLabel("Wpisz /wejdz, aby sie teleportowac!", 0xFFFFFFFF, Teleporty[number][tp_from][0], Teleporty[number][tp_from][1], Teleporty[number][tp_from][2], 20.0);
		Teleporty[number][tp_info][1] = CreateDynamic3DTextLabel("Wpisz /wyjdz, aby sie teleportowac!", 0xFFFFFFFF, Teleporty[number][tp_to][0], Teleporty[number][tp_to][1], Teleporty[number][tp_to][2], 20.0);
		number = number +1;
	}
	return 1;
}

stock GetFreeTeleportSlot()
{
	for(new i; i < MAX_TELEPORTOW; i++)
	{
		if(!Teleporty[i][tp_created])
			return i;
	}
	return -1;
}

stock ClearGlobalChat() //By Nickk888
{
	for(new i; i < 50; i++)
	{
		SendClientMessageToAll(-1, " ");
	}
	return 1;
}

stock SprawdzMozliwoscTeleportacji(playerid, wejwyj)
{
	if(wejwyj == 1) //chce wejsc
	{
		for(new k = 0; k < MAX_TELEPORTOW; k++)
		{
			if(!Teleporty[k][tp_created]) break;
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Teleporty[k][tp_from][0], Teleporty[k][tp_from][1], Teleporty[k][tp_from][2])) continue;
			SetPlayerPos(playerid, Teleporty[k][tp_to][0], Teleporty[k][tp_to][1], Teleporty[k][tp_to][2]);
			return 1;
		}
	}else{ //Chce wyjsc
		for(new k = 0; k < MAX_TELEPORTOW; k++)
		{
			if(!Teleporty[k][tp_created]) break;
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Teleporty[k][tp_to][0], Teleporty[k][tp_to][1], Teleporty[k][tp_to][2])) continue;
			SetPlayerPos(playerid, Teleporty[k][tp_from][0], Teleporty[k][tp_from][1], Teleporty[k][tp_from][2]);
			return 1;
		}
	}
	return 0;
}

forward TimerCreateCP_Edit(Float:x, Float:y, Float:z, playerid);
public TimerCreateCP_Edit(Float:x, Float:y, Float:z, playerid)
{
	if(IsValidDynamicCP(PlayerData[playerid][pPozarEditO])) return 1;
	if(PlayerData[playerid][pPozarEdit] == 0) 
	{
		if(IsValidDynamicCP(PlayerData[playerid][pPozarEditO])) 
		{
			DestroyDynamicCP(PlayerData[playerid][pPozarEditO]);
		}
		return 1;
	}
	PlayerData[playerid][pPozarEditO] = CreateDynamicCP(x,y,z, 1.5, -1, -1, playerid, 10000.0);  
	return 1;
}


stock GetIdGTA(playerid) //100% pewnoĹ“ci Âze jest to priv auto jakieĹ“ + zespawnwowany w ktorym siedzi gracz
	{
		for(new i = 1, j = GetVehiclePoolSize(); i <= j; i++)
		{
		    if(GetPlayerVehicleID(playerid) == i && VehicleInfo[i][vehSpawn] == true)
		    {
		        return i;
			}
		}
		return -1;
	}

stock SetPlayerInteriorEx(playerid, value)
{
	SetPVarInt(playerid, "ac_int_time", gettime() + 5);
	PlayerData[playerid][pAC_Interior] = value;
	SetPlayerInterior(playerid, value);
}

stock SetPlayerVirtualWorldEx(playerid, value)
{
	SetPVarInt(playerid, "ac_vw_time", gettime() + 5);
	PlayerData[playerid][pAC_VirtualWorld] = value;
	SetPlayerVirtualWorld(playerid, value);
}

/*stock AktywneKlodyValue(licz = 0)
{
	for(new uid = 0; MAX_KLODY != uid; uid++)
	{
		if(KlodaData[uid][kStatus] == 1)
		{
			licz++;
		}
	}
	return licz;
}*/

stock AktywnePlamyValue(licz = 0)
{
	for(new uid = 0; MAX_PLAMY != uid; uid++)
	{
		if(PlamaData[uid][plStatus] == 1)
		{
			licz++;
		}
	}
	return licz;
}

stock AktywnePozaryValue(licz = 0)
{
	for(new uid = 0; MAX_POZARY != uid; uid++)
	{
		if(PozarData[uid][pfStatus] == 1)
		{
			licz++;
		}
	}
	return licz;
}

stock IluOskarzonych(licz = 0){
	for(new i = 0; i < MAX_PLAYERS; i++){
		if(PlayerData[i][pOskarzony] == 1){
			licz++;
		}
	}
	return licz;
}

stock GetIDOskarzony(){
	for(new i = 0; i < MAX_PLAYERS; i++){
		if(PlayerData[i][pOskarzony] == 1){
			return i;
		}
	}
	return 1;
}

forward PozarTimerExplode(uid);
public PozarTimerExplode(uid)
{
	if(PozarData[uid][pfStatus] == 1)
	{
		CreateExplosion(PozarData[uid][pfPos][0], PozarData[uid][pfPos][1], PozarData[uid][pfPos][2], 12, 10.0);
	}
	else
	{
		KillTimer(PozarData[uid][pfTimer]);
	}
	return 1;
}

forward TimerPlayerPozar(playerid);
public TimerPlayerPozar(playerid)
{
	if(GetPlayerWeapon(playerid) != 42 || pozar_activity == -1 || GetPlayerAnimationIndex(playerid) == 0)
	{
		KillTimer(PlayerData[playerid][pTimerPozar]);
		return 1;
	}
	
	new data[128];
	
	for(new uid = 0; MAX_POZARY != uid; uid++)
	{
		if(PlayerFaces(playerid, PozarData[uid][pfPos][0], PozarData[uid][pfPos][1], PozarData[uid][pfPos][2], 3.5) && IsPlayerInRangeOfPoint(playerid, 4, PozarData[uid][pfPos][0], PozarData[uid][pfPos][1], PozarData[uid][pfPos][2]) && PozarData[uid][pfHP] != 0 && PozarData[uid][pfStatus] != 0)
		{
			PozarData[uid][pfHP] -= 0.5;
			
			
			format(data,sizeof(data),"\
									{2EFEF7}[Pozar UID: %d | TYPE: %d]\n\
									Stan HP: %d/100\n\
									%s", uid, PozarData[uid][pfType], floatround(PozarData[uid][pfHP]), (( PozarData[uid][pfType] == 1) ? ("{ff0000}Ogien explodujacy") : ("") ));
			UpdateDynamic3DTextLabelText(PozarData[uid][pfText3D], -1, data);
		
			
			if(PozarData[uid][pfHP] <= 1) 
			{
				PozarData[uid][pfHP] = 0;
				PozarData[uid][pfStatus] = 0;
				SavePozar(uid, 0);
				
				
				for(new playeridd = 0, j = GetPlayerPoolSize(); playeridd <= j; playeridd++)
				{
					if(!IsValidDynamicCP(PlayerData[playeridd][pPozarCP][uid]) && GetPlayerFrakcja(playeridd, FRAKCJA_STRAZ_POZARNA) == 0)
					{
						GivePlayerScore(playeridd, 2);
						GivePlayerCash(playeridd, 1500);
						SendClientMessage(playeridd, -1, "{FF8000}Ogien zostal ugaszony, dziekujemy za zaangazowanie. Zostajesz nagrodzony 2 score + $1.500.");
					}
					if(IsValidDynamicCP(PlayerData[playeridd][pPozarCP][uid])) 
					{
						DestroyDynamicCP(PlayerData[playeridd][pPozarCP][uid]);
					}
				}
				
				if(AktywnePozaryValue() == 0)
				{
					pozar_activity = -1;
				}
			}
		}
	}
	return 1;
}


forward GetDistanceBetweenPlayers(playerid,playerid2);
public GetDistanceBetweenPlayers(playerid,playerid2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	new Float:dis;
	if (!IsPlayerConnected(playerid) || !IsPlayerConnected(playerid2)){
	return 0;
	}
	GetPlayerPos(playerid,x1,y1,z1);
	GetPlayerPos(playerid2,x2,y2,z2);
	dis = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
	return floatround(dis);
}

forward TimerPlayerKloda(playerid);
public TimerPlayerKloda(playerid)
{
	if(GetPlayerWeapon(playerid) != 9 || kloda_activity == -1 || GetPlayerAnimationIndex(playerid) == 0)
	{
		KillTimer(PlayerData[playerid][pTimerKloda]);
		return 1;
	}
	
	new data[128];
	
	for(new uid = 0; MAX_KLODY != uid; uid++)
	{
		if(PlayerFaces(playerid, KlodaData[uid][kPos][0], KlodaData[uid][kPos][1], KlodaData[uid][kPos][2], 3.5) && IsPlayerInRangeOfPoint(playerid, 4, KlodaData[uid][kPos][0], KlodaData[uid][kPos][1], KlodaData[uid][kPos][2]) && KlodaData[uid][kHP] != 0 && KlodaData[uid][kStatus] != 0)
		{
			KlodaData[uid][kHP] -= 0.5;
			
			
			format(data,sizeof(data),"{2EFEF7}[Kloda UID: %d]\nStan HP: %d/100", uid, floatround(KlodaData[uid][kHP]));
			UpdateDynamic3DTextLabelText(KlodaData[uid][kText3D], -1, data);
		
			
			if(KlodaData[uid][kHP] <= 1) 
			{
				KlodaData[uid][kHP] = 0;
				KlodaData[uid][kStatus] = 0;
				SaveKloda(uid, 0);
				
				
				for(new playeridd = 0, j = GetPlayerPoolSize(); playeridd <= j; playeridd++)
				{
					if(!IsValidDynamicCP(PlayerData[playeridd][pKlodaCP][kloda_activity]) && GetPlayerFrakcja(playeridd, FRAKCJA_STRAZ_POZARNA))
					{
						GivePlayerScore(playeridd, 1);
						GivePlayerCash(playeridd, 150);
						SendClientMessage(playeridd, -1, "{FF8000}Kloda zostala usunieta z drogi, dziekujemy za zaangazowanie. Zostajesz nagrodzony 1 score + $150.");
						kloda_activity = -1;
						KillTimer(PlayerData[playerid][pTimerKloda]);
					}
					if(IsValidDynamicCP(PlayerData[playeridd][pKlodaCP][uid])) 
					{
						DestroyDynamicCP(PlayerData[playeridd][pKlodaCP][uid]);
					}
				}
			}
		}
	}
	return 1;
}

forward TimerPlayerPlama(playerid);
public TimerPlayerPlama(playerid)
{
	if(GetPVarInt(playerid, "ma_sorbent") != 1 || plama_activity == -1 || GetPlayerAnimationIndex(playerid) == 0)
	{
		KillTimer(PlayerData[playerid][pTimerPlama]);
		return 1;
	}
	
	new data[128];
	
	if(PlayerFaces(playerid, PlamaData[plama_activity][plPos][0], PlamaData[plama_activity][plPos][1], PlamaData[plama_activity][plPos][2], 3.5) && IsPlayerInRangeOfPoint(playerid, 4, PlamaData[plama_activity][plPos][0],PlamaData[plama_activity][plPos][1], PlamaData[plama_activity][plPos][2]) && PlamaData[plama_activity][plHP] != 0 && PlamaData[plama_activity][plStatus] != 0)
	{
		PlamaData[plama_activity][plHP] -= 0.5;
		
		
		format(data,sizeof(data),"{2EFEF7}[Plama plama_activity: %d]\nStan HP: %d/100", plama_activity, floatround(PlamaData[plama_activity][plHP]));
		UpdateDynamic3DTextLabelText(PlamaData[plama_activity][plText3D], -1, data);
	
		
		if(PlamaData[plama_activity][plHP] <= 1) 
		{
			PlamaData[plama_activity][plHP] = 0;
			PlamaData[plama_activity][plStatus] = 0;
			SaveKloda(plama_activity, 0);
			
			
			for(new playeridd = 0, j = GetPlayerPoolSize(); playeridd <= j; playeridd++)
			{
				if(!IsValidDynamicCP(PlayerData[playeridd][pPlamaCP][plama_activity]) && GetPlayerFrakcja(playeridd, FRAKCJA_STRAZ_POZARNA))
				{
					GivePlayerScore(playeridd, 1);
					GivePlayerCash(playeridd, 150);
					SendClientMessage(playeridd, -1, "{FF8000}Plama zostala usunieta z drogi, dziekujemy za zaangazowanie. Zostajesz nagrodzony 1 score + $150.");
					plama_activity = -1;
					KillTimer(PlayerData[playerid][pTimerPlama]);
				}
				if(IsValidDynamicCP(PlayerData[playeridd][pPlamaCP][plama_activity])) 
				{
					DestroyDynamicCP(PlayerData[playeridd][pPlamaCP][plama_activity]);
				}
			}
		}
	}
	return 1;
}

/*
Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ,   Float:ObjX, Float:ObjY, Float:ObjZ,   Float:FrX, Float:FrY, Float:FrZ) {

	new Float:TGTDistance;
	TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));
	new Float:tmpX, Float:tmpY, Float:tmpZ;
	tmpX = FrX * TGTDistance + CamX;
	tmpY = FrY * TGTDistance + CamY;
	tmpZ = FrZ * TGTDistance + CamZ;
	return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}
*/
stock PlayerFaces(playerid, Float:x, Float:y, Float:z, Float:radius)
{
        new Float:cx,Float:cy,Float:cz,Float:fx,Float:fy,Float:fz;
        GetPlayerCameraPos(playerid, cx, cy, cz);
        GetPlayerCameraFrontVector(playerid, fx, fy, fz);
        return (radius >= DistanceCameraTargetToLocation(cx, cy, cz, x, y, z, fx, fy, fz));
}

forward EventPozarStart();
public EventPozarStart()
{
	if(GetOnlineFractions(FRAKCJA_STRAZ_POZARNA) == 0) return 1; 
	if(pozar_activity != -1) return 1;
	
	new stop_spam_message[MAX_PLAYERS], Float:ActorPos[3], ActorCJ, find = -1, r = random(pozar_value)+1;
	for(new i = r; i != pozar_value; i++)
	{
		if(PozarData[i][pfAktywny] == 1)
		{
			find = i;
			break;
		}
	}
	if(find == -1)
	{
		EventPozarStart();
	}
	else
	{
		pozar_activity = find;
		
		ActorCJ = CreateActor(0, PozarData[find][pfPos][0], PozarData[find][pfPos][1], PozarData[find][pfPos][2], 0.0);
		GetActorPos(ActorCJ, ActorPos[0],  ActorPos[1],  ActorPos[2]);
		 
		for(new x = 0; x != MAX_POZARY; x++)
		{
			if(PozarData[x][pfAktywny] == 0) continue;
			if(!IsActorInRangeOfPoint(ActorCJ, 150.0, ActorPos[0],  ActorPos[1],  ActorPos[2])) continue;
			PozarData[x][pfStatus] = 1;
			PozarData[x][pfHP] = 100.0;
			SavePozar(x, 0);
			
			for(new playerid = 0, j = GetPlayerPoolSize(); playerid <= j; playerid++)
			{
				if(IsValidDynamicCP(PlayerData[playerid][pPozarCP][x])) DestroyDynamicCP(PlayerData[playerid][pPozarCP][x]);
				PlayerData[playerid][pPozarCP][x] = CreateDynamicCP(PozarData[x][pfPos][0], PozarData[x][pfPos][1], PozarData[x][pfPos][2], 1.5, -1, -1, playerid, 10000.0);

				if(stop_spam_message[playerid] == 0)
				{
					PlayerPlaySound(playerid, 3017, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, -1, "{74DF00}UWAGA!! Wybuchl pozar, miejsce zdarzenia zostalo zaznaczone na twoim radarze czerwonym punktem.");
				}
				stop_spam_message[playerid] = 999;
			}
		}
		DestroyActor(ActorCJ);
	}
	return 1;
}


forward EventKlodaStart();
public EventKlodaStart()
{
	if(GetOnlineFractions(FRAKCJA_STRAZ_POZARNA) == 0) return 1; 
	if(kloda_activity != -1) return 1;
	
	new stop_spam_message[MAX_PLAYERS], r = random(kloda_value);
	if(r == 0) return EventKlodaStart();
	if(KlodaData[r][kAktywny] != 1) return EventKlodaStart();
	kloda_activity = r;
		 
	KlodaData[r][kStatus] = 1;
	KlodaData[r][kHP] = 100.0;
	SaveKloda(r, 0);
	
	for(new playerid = 0, j = GetPlayerPoolSize(); playerid <= j; playerid++)
	{
		if(IsValidDynamicCP(PlayerData[playerid][pKlodaCP][r])) DestroyDynamicCP(PlayerData[playerid][pKlodaCP][r]);
		PlayerData[playerid][pKlodaCP][r] = CreateDynamicCP(KlodaData[r][kPos][0], KlodaData[r][kPos][1], KlodaData[r][kPos][2], 1.5, -1, -1, playerid, 10000.0);
		if(stop_spam_message[playerid] == 0)
		{
			CreateZawiadomienieSys(-1, FRAKCJA_STRAZ_POZARNA, "Kloda na drodze!", 2, KlodaData[r][kObject], KlodaData[r][kPos][0], KlodaData[r][kPos][1], KlodaData[r][kPos][2]);
			return 1;
		}
	}
	return 1;
}

forward EventPlamaStart();
public EventPlamaStart()
{
	if(GetOnlineFractions(FRAKCJA_STRAZ_POZARNA) == 0) return 1; 
	if(plama_activity != -1) return 1;
	
	new stop_spam_message[MAX_PLAYERS], r = random(plama_value);
	if(r == 0) return EventPlamaStart();
	if(PlamaData[r][plAktywny] != 1) return EventPlamaStart();
	plama_activity = r;
		 
	PlamaData[r][plStatus] = 1;
	PlamaData[r][plHP] = 100.0;
	SavePlama(r, 0);
	
	for(new playerid = 0, j = GetPlayerPoolSize(); playerid <= j; playerid++)
	{
		if(IsValidDynamicCP(PlayerData[playerid][pPlamaCP][r])) DestroyDynamicCP(PlayerData[playerid][pPlamaCP][r]);
		PlayerData[playerid][pPlamaCP][r] = CreateDynamicCP(PlamaData[r][plPos][0], PlamaData[r][plPos][1], PlamaData[r][plPos][2], 1.5, -1, -1, playerid, 10000.0);
		if(stop_spam_message[playerid] == 0)
		{
			PlayerPlaySound(playerid, 3017, 0.0, 0.0, 0.0);
			SendClientMessage(playerid, -1, "{74DF00}UWAGA!! Jakis pojazd pozostawil po sobie slad w postaci plamy oleju! Znautralizuj ja!");
			stop_spam_message[playerid] = 999;
			return 1;
		}
	}
	return 1;
}


forward TimerPlayerTowary(playerid);
public TimerPlayerTowary(playerid)
{
	if(IsPlayerInCheckpoint(playerid))
	{
		if(GetPlayerVehicleID(playerid) != PlayerData[playerid][pTowarVehicle]) return SendClientMessage(playerid, -1, "{a4a4a4}Nie znajdujesz sie  w pojezdzie ktorym brales towar.");
		if(PlayerData[playerid][pTowarTrailer] != -1)
		{
			if(!GetVehicleTrailer(GetPlayerVehicleID(playerid))) return SCM(playerid, -1, "{a4a4a4}Nie masz podczepionej naczepy z ladunkiem.");
			if(PlayerData[playerid][pTowarTrailer] != GetVehicleTrailer(GetPlayerVehicleID(playerid))) return SCM(playerid, -1, "{a4a4a4}Nie masz podczepionej naczepy z ladunkiem.");
		}
		new uid = PlayerData[playerid][pAcceptTowarUID];
		if(PlayerData[playerid][pAcceptTowarUID] != 0) 
		{
			if(PlayerData[playerid][pTowarStatus] == 1) //Zaladunek
			{
				if(PlayerData[playerid][pTowarBarCreate] == 0)
				{
					if(VehicleData[GetPlayerVehicleID(playerid)][vEngine] == 1) return GameTextForPlayer(playerid, "~r~Zgas silnik w pojezdzie.", 1000, 3);
					PlayerData[playerid][pTowarBarCreate] = 1;
					PlayerData[playerid][pTowaryBar] = CreateProgressBar(171.00, 184.00, 293.50, 5.19, 9010, 100.0);
					ShowProgressBarForPlayer(playerid, PlayerData[playerid][pTowaryBar]);
					GameTextForPlayer(playerid, "~g~Rozpoczynam zaladunek towaru", 4000, 3);
					return 1;
				}
				if(GetProgressBarValue(PlayerData[playerid][pTowaryBar]) != 100)
				{
					SetProgressBarValue(PlayerData[playerid][pTowaryBar], GetProgressBarValue(PlayerData[playerid][pTowaryBar]) + 8);
					UpdateProgressBar(PlayerData[playerid][pTowaryBar], playerid);
					return 1;
				}
				if(GetProgressBarValue(PlayerData[playerid][pTowaryBar]) >= 100)
				{
					PlayerData[playerid][pTowarBarCreate] = 0;
					HideProgressBarForPlayer(playerid, PlayerData[playerid][pTowaryBar]);
					DestroyProgressBar(PlayerData[playerid][pTowaryBar]);
					
					//if(IsValidDynamicCP(PlayerData[playerid][pTowarCheckpoint])) DestroyDynamicCP(PlayerData[playerid][pTowarCheckpoint]);
					PlayerData[playerid][pTowarCheckpoint] = CreateDynamicCP(TowarData[uid][tRozladunek][0], TowarData[uid][tRozladunek][1], TowarData[uid][tRozladunek][2], 5.0, playerid);

					PlayerData[playerid][pTowarStatus] = 2;
					ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Zaladunek towaru:.", "Towar zostal zaladowany, jedz teraz do czerwonego punkty na minimapie, aby rozladowac towar.", "Zamknij", "");
				}
			}
			else if(PlayerData[playerid][pTowarStatus] == 2) //Rozladunek
			{
				if(PlayerData[playerid][pTowarBarCreate] == 0)
				{
					if(VehicleData[GetPlayerVehicleID(playerid)][vEngine] == 1) return GameTextForPlayer(playerid, "~r~Zgas silnik w pojezdzie.", 1000, 3);
					PlayerData[playerid][pTowarBarCreate] = 1;
					PlayerData[playerid][pTowaryBar] = CreateProgressBar(171.00, 184.00, 293.50, 5.19, 9010, 100.0);
					ShowProgressBarForPlayer(playerid, PlayerData[playerid][pTowaryBar]);
					GameTextForPlayer(playerid, "~g~Rozpoczynam rozladunek towaru", 4000, 3);
					return 1;
				}
				if(GetProgressBarValue(PlayerData[playerid][pTowaryBar]) != 100)
				{
					SetProgressBarValue(PlayerData[playerid][pTowaryBar], GetProgressBarValue(PlayerData[playerid][pTowaryBar]) + 8);
					UpdateProgressBar(PlayerData[playerid][pTowaryBar], playerid);
					return 1;
				}
				if(GetProgressBarValue(PlayerData[playerid][pTowaryBar]) >= 100)
				{
					HideProgressBarForPlayer(playerid, PlayerData[playerid][pTowaryBar]);
					DestroyProgressBar(PlayerData[playerid][pTowaryBar]);
					
					
					
					new fuid = PlayerData[playerid][pFirma], veh = PlayerData[playerid][pTowarVehicle], add_score, add_kasa;
					
					PlayerData[playerid][pTowarStatus] = 0;
					PlayerData[playerid][pAcceptTowarUID] = -1;
					PlayerData[playerid][pTowarBarCreate] = 0;
					PlayerData[playerid][pTowarVehicle] = -1;
					PlayerData[playerid][pTowarTrailer] = -1;
					
					
					if(IsValidDynamicCP(PlayerData[playerid][pTowarCheckpoint])) DestroyDynamicCP(PlayerData[playerid][pTowarCheckpoint]);
					TogglePlayerDynamicCP(playerid, PlayerData[playerid][pTowarCheckpoint], false);
					KillTimer(PlayerData[playerid][pTimerTowary]);
					
					
					
					PlayerZlecenieInfo(playerid, 3, TowarData[uid][tNazwa], TowarData[uid][tZaladunekW], TowarData[uid][tRozladunekW] );
					
					if(!GetPlayerVipStatus(playerid)) //Nagroda dla gracza
					{
						add_score = TowarData[uid][tScorePlayer];
						add_kasa  = TowarData[uid][tKasaPlayer];
					}
					else if(GetPlayerVipStatus(playerid)) //Nagroda dla vipa
					{
						add_score = TowarData[uid][tScoreVip];
						add_kasa  = TowarData[uid][tKasaVip];
					}
					
					if(fuid == 0) //Nie ma firmy
					{
						GivePlayerScore(playerid, add_score);
						GivePlayerCash(playerid,  add_kasa);
					}
					else if(fuid != 0 && VehicleData[veh][vFirmyCar]  != 0 && VehicleData[veh][vFirmyCar] == fuid) //Ma firme i dowiozl truck/van firmowym
					{
						GiveFirmaExp(fuid, TowarData[uid][tExp]);
						FirmaData[fuid][fTowary]++;
						FirmaData[fuid][fSaldo] += TowarData[uid][tKasaFirma];
						
						GivePlayerScore(playerid, add_score);
						GivePlayerCash(playerid,  add_kasa);
						SaveFirma(fuid);
						
						new data[200];
						format(data,sizeof(data), "UPDATE `data_players` set `firma_exp` = `firma_exp` + '%d' where `uid` = '%d'", 						TowarData[uid][tExp], 		 PlayerData[playerid][pUID]), mysql_query(data);
						format(data,sizeof(data), "UPDATE `data_players` set `firma_kasa` = `firma_kasa` + '%d' where `uid` = '%d'", 					TowarData[uid][tKasaFirma],  PlayerData[playerid][pUID]), mysql_query(data);
						format(data,sizeof(data), "UPDATE `data_players` set `firma_towary` = `firma_towary` + '%d' where `uid` = '%d'", 				1, 		 	 				 PlayerData[playerid][pUID]), mysql_query(data);
						
						
						format(data,sizeof(data),"{a4a4a4}Dowiozles ten towar pojazdem firmowym, wiec zarabiasz $%d oraz %d EXP dla twojej firmy.", TowarData[uid][tKasaFirma], TowarData[uid][tExp]);
						SendClientMessage(playerid, -1, data);
					}
					else if(fuid != 0 && VehicleData[veh][vPrivateCar] == 1) //Ma firme i nie dowiozl truck/van firmowym
					{
						GivePlayerScore(playerid, add_score);
						GivePlayerCash(playerid,  add_kasa);
					}
				}
			}
		}
		return 1;
	}
	return 1;
}



stock CheckNextCheckpointDriver(playerid)
{
	
	if(IsValidDynamicCP(PlayerData[playerid][pPraktykaCP])) DestroyDynamicCP(PlayerData[playerid][pPraktykaCP]);
	
	
	new find = -1, i, data[500], get_uid[150], get_type[150], Float:get_x[150], Float:get_y[150], Float:get_z[150];
	


	mysql_query("SELECT * FROM `data_prawojazdy` ORDER BY `uid` ASC");
	mysql_store_result();

	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>iifff",
		get_uid[i],
		get_type[i],
		get_x[i],
		get_y[i],
		get_z[i]);
		i++;
	}
	mysql_free_result();
	
	
	
	
	for(new x = 0; x != i; x++)
	{
		/*
		if(get_type[x] == PlayerData[playerid][pNowPrawkoPZdaje])
		{
		
		}
		*/
		
		if(get_uid[x] > PlayerData[playerid][pNowPrawkoID])
		{
			find = x;
			PlayerData[playerid][pNowPrawkoID] = get_uid[x];
			break;
		}
		
	}
	if(find != -1)
	{
		
		PlayerData[playerid][pPraktykaCP] = CreateDynamicCP(get_x[find], get_y[find], get_z[find], 5.0, -1, -1, playerid, 10000.0);
		TogglePlayerDynamicCP(playerid, PlayerData[playerid][pPraktykaCP], true);
		
		new data2[128];
		format(data2,sizeof(data2),"[test] Checkpointid: %d, uid: %d, type: %d, x: %f, y: %f, z: %f", PlayerData[playerid][pPraktykaCP], get_uid[find], get_type[find], get_x[find], get_y[find], get_z[find]);
		SendClientMessage(playerid, -1, data2);
	}
	else
	{
		if(IsValidVehicle(PlayerData[playerid][pPraktykaVehicle])) DestroyVehicle(PlayerData[playerid][pPraktykaVehicle]);
		ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Prawo jazdy:", "Udalo Ci sie zdac praktyke.", "Zamknij", "");
		
		new prawko_typ = PlayerData[playerid][pNowPrawkoPZdaje];
		PlayerData[playerid][pPrawoJazdyP][prawko_typ] = 1;
	}
	
	return 1;
}
	
forward ActiveNapadPlayer(playerid);
public ActiveNapadPlayer(playerid)
{
	KillTimer(PlayerData[playerid][pTimerNapadActive]);
	if(NapadData[nLudzieOrg] < 3)
	{
		PlayerNapadPanel(playerid, 7);
		NapadData[nAktywny] = false;
		GameTextForPlayer(playerid, "~r~Nie udalo ci sie zmobilozowac 3 osob do napadu, zostaje on przerwany", 6500, 3);
	}
	return 1;
}

forward NapadTimer();
public NapadTimer()
{
	new Godzin, Minut, Sekund, l_str[200];
	ConvertSec2(NapadData[nCzas] - gettime(), Godzin, Minut, Sekund);
	
	if(gettime() > NapadData[nCzas])
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(PlayerData[i][pLogged] == false) continue;
			if(IsValidDynamicMapIcon(PlayerData[i][pGPSNapad])) DestroyDynamicMapIcon(PlayerData[i][pGPSNapad]);
			if(GetPlayerFrakcja(i, NapadData[nFrakcja])) continue;
			if(PlayerData[i][pNapadCzlonek] == false) continue;
			
			if(NapadData[nBudynekUID] != PlayerData[i][pBuildEnterUID])
			{
				GameTextForPlayer(i, "~r~Nie znajdowales sie w budynku ktory byl napadany wiec nic nie dostajesz", 5000, 3);
				continue;
			}
			GameTextForPlayer(i, "~g~Napad powiodl sie otrzymujesz $20000", 5000, 3);
			GivePlayerCash(i, 20000);
		}
		KillTimer(NapadData[nTimer]);
		NapadData[nAktywny] = false;
		return 1;
	}
	
	
	format(l_str,sizeof(l_str),"\
	Organizacja: %s~n~\
	Napad na: %s (%d)~n~\
	Liczba osob napadajacych: %d~n~\
	Liczba osob LSPD: %d~n~\
	Pozostaly czas: %d minut, %d sekund", NapadData[nFrakcjaSTR], NapadData[nBudynek], NapadData[nBudynekUID], NapadData[nLudzieOrg], NapadData[nLudzieLSPD], Minut, Sekund);
	
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(PlayerData[i][pLogged] == false) continue;
		if(GetPlayerFrakcja(i, FRAKCJA_POLICJI) && GetPlayerFrakcja(i, NapadData[nFrakcja])) continue;
		
		for(new ii = 0; ii != 4; ii++)
		{
			PlayerTextDrawShow(i, Txd_napadp[i][ii]);
		}
		PlayerTextDrawSetString(i, Txd_napadp[i][2], l_str);
	}
	return 1;
}

forward KasynoOwoceCyfryTimer(playerid);
public KasynoOwoceCyfryTimer(playerid)
{
	new cyfry[3], owoce[3], bool:owoc_use[3], cyfra_str1[5], cyfra_str2[5], cyfra_str3[5], owoc_str[3][24], owoc_type[3], cyfra_or_owoc[3];
	
	cyfra_or_owoc[0] = random(2);
	cyfra_or_owoc[1] = random(2);
	cyfra_or_owoc[2] = random(2);

	owoce[0] = random(6);
	owoce[1] = random(6);
	owoce[2] = random(6);
	cyfry[0] = random(6);
	cyfry[1] = random(6);
	cyfry[2] = random(6);
	
	format(cyfra_str1,sizeof(cyfra_str1), "%d", cyfry[0]);
	format(cyfra_str2,sizeof(cyfra_str2), "%d", cyfry[1]);
	format(cyfra_str3,sizeof(cyfra_str3), "%d", cyfry[2]);
	if(cyfra_or_owoc[0] == 0) owoce[0] = 6;
	if(cyfra_or_owoc[1] == 0) owoce[1] = 6;
	if(cyfra_or_owoc[2] == 0) owoce[2] = 6;
	
	switch(owoce[0])
	{
		case 0: owoc_str[0] = "ld_slot:r_69",		owoc_use[0] = true, 	owoc_type[0] = 1;
		case 1: owoc_str[0] = "ld_slot:grapes",		owoc_use[0] = true, 	owoc_type[0] = 2;
		case 2: owoc_str[0] = "ld_slot:cherry",		owoc_use[0] = true, 	owoc_type[0] = 3;
		case 3: owoc_str[0] = "ld_slot:bell",		owoc_use[0] = true, 	owoc_type[0] = 4;
		case 4: owoc_str[0] = "ld_slot:bar2_o",		owoc_use[0] = true, 	owoc_type[0] = 5;
		case 5: owoc_str[0] = "ld_slot:bar1_o",		owoc_use[0] = true, 	owoc_type[0] = 6;
		case 6: owoc_str[0] = "ld_slot:bar1_o",		owoc_use[0] = false, 	owoc_type[0] = 7;
	}
	switch(owoce[1])
	{
		case 0: owoc_str[1] = "ld_slot:r_69",		owoc_use[1] = true, 	owoc_type[1] = 1;
		case 1: owoc_str[1] = "ld_slot:grapes",		owoc_use[1] = true, 	owoc_type[1] = 2;
		case 2: owoc_str[1] = "ld_slot:cherry",		owoc_use[1] = true, 	owoc_type[1] = 3;
		case 3: owoc_str[1] = "ld_slot:bell",		owoc_use[1] = true, 	owoc_type[1] = 4;
		case 4: owoc_str[1] = "ld_slot:bar2_o",		owoc_use[1] = true, 	owoc_type[1] = 5;
		case 5: owoc_str[1] = "ld_slot:bar1_o",		owoc_use[1] = true, 	owoc_type[1] = 6;
		case 6: owoc_str[1] = "ld_slot:bar1_o",		owoc_use[1] = false, 	owoc_type[1] = 7;
	}
	switch(owoce[2])
	{
		case 0: owoc_str[2] = "ld_slot:r_69",		owoc_use[2] = true, 	owoc_type[2] = 1;
		case 1: owoc_str[2] = "ld_slot:grapes",		owoc_use[2] = true, 	owoc_type[2] = 2;
		case 2: owoc_str[2] = "ld_slot:cherry",		owoc_use[2] = true, 	owoc_type[2] = 3;
		case 3: owoc_str[2] = "ld_slot:bell",		owoc_use[2] = true, 	owoc_type[2] = 4;
		case 4: owoc_str[2] = "ld_slot:bar2_o",		owoc_use[2] = true, 	owoc_type[2] = 5;
		case 5: owoc_str[2] = "ld_slot:bar1_o",		owoc_use[2] = true, 	owoc_type[2] = 6;
		case 6: owoc_str[2] = "ld_slot:bar1_o",		owoc_use[2] = false, 	owoc_type[2] = 7;
	}
	
	
	PlayerTextDrawSetString(playerid, Txd_panelkasyno[playerid][9],  cyfra_str1);
	PlayerTextDrawSetString(playerid, Txd_panelkasyno[playerid][10], cyfra_str2);
	PlayerTextDrawSetString(playerid, Txd_panelkasyno[playerid][11], cyfra_str3);
	PlayerTextDrawSetString(playerid, Txd_panelkasyno[playerid][12], owoc_str[0]);
	PlayerTextDrawSetString(playerid, Txd_panelkasyno[playerid][13], owoc_str[1]);
	PlayerTextDrawSetString(playerid, Txd_panelkasyno[playerid][14], owoc_str[2]);
	
	PlayerTextDrawHide(playerid, Txd_panelkasyno[playerid][9]);  //cyfra 1
	PlayerTextDrawHide(playerid, Txd_panelkasyno[playerid][10]); //cyfra 2
	PlayerTextDrawHide(playerid, Txd_panelkasyno[playerid][11]); //cyfra 3
	PlayerTextDrawHide(playerid, Txd_panelkasyno[playerid][12]); //owoc 1
	PlayerTextDrawHide(playerid, Txd_panelkasyno[playerid][13]); //owoc 2
	PlayerTextDrawHide(playerid, Txd_panelkasyno[playerid][14]); //owoc 3
	
	
	if(owoc_use[0] == true)
	{
		PlayerTextDrawShow(playerid, Txd_panelkasyno[playerid][12]); //owoc 1
		PlayerTextDrawHide(playerid, Txd_panelkasyno[playerid][9]); //cyfra 1
	}
	if(owoc_use[1] == true)
	{
		PlayerTextDrawShow(playerid, Txd_panelkasyno[playerid][13]); //owoc 2
		PlayerTextDrawHide(playerid, Txd_panelkasyno[playerid][10]); //cyfra 2
	}
	if(owoc_use[2] == true)
	{
		PlayerTextDrawShow(playerid, Txd_panelkasyno[playerid][14]); //owoc 3
		PlayerTextDrawHide(playerid, Txd_panelkasyno[playerid][11]); //cyfra 3
	}
	if(owoc_use[0] == false)
	{
		PlayerTextDrawHide(playerid, Txd_panelkasyno[playerid][12]); //owoc 1
		PlayerTextDrawShow(playerid, Txd_panelkasyno[playerid][9]); //cyfra 1
	}
	if(owoc_use[1] == false)
	{
		PlayerTextDrawHide(playerid, Txd_panelkasyno[playerid][13]); //owoc 2
		PlayerTextDrawShow(playerid, Txd_panelkasyno[playerid][10]); //cyfra 2
	}
	if(owoc_use[2] == false)
	{
		PlayerTextDrawHide(playerid, Txd_panelkasyno[playerid][14]); //owoc 3
		PlayerTextDrawShow(playerid, Txd_panelkasyno[playerid][11]); //cyfra 3
	}
	
	/*
	new data[128];
	format(data,sizeof(data),"[testKasyno] | o1: %d o2: %d o3: %d | c1: %d c2: %d c3: %d |", owoc_type[0], owoc_type[1], owoc_type[2], cyfry[0], cyfry[1], cyfry[2]);
	SendClientMessage(playerid, -1, data);
	*/
	
	PlayerData[playerid][pKasynoValue]++;
	if(PlayerData[playerid][pKasynoValue] >= 15)
	{
		new bool:winner_is_one;
		PlayerData[playerid][pKasynoValue] = 0;
		PlayerData[playerid][pKasynoPlay] = 0;
		KillTimer(PlayerData[playerid][pKasynoTimer]);
		
		
		if(owoc_type[0] + owoc_type[1] + owoc_type[2] / 3 == owoc_type[0] && owoc_use[0] == true && owoc_use[1] == true && owoc_use[2] == true) //Wypadly trzy takie same owoce
		{
			winner_is_one = true;
		}
		if(cyfry[0] + cyfry[1] + cyfry[2] / 3 == cyfry[0] && owoc_use[0] == false && owoc_use[1] == false && owoc_use[2] == false) //Wypadly trzy te same cyfry 
		{
			winner_is_one = true;
		}
		
		if(winner_is_one == true)
		{
			PlayerData[playerid][pKasynoWygrana] = PlayerData[playerid][pKasynoWygrana] * 2;
			PlayerKasynoPanel(playerid, 4);
			ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Kasyno (owoce i cyfry):", "WYGRANA!\nWydalo Ci sie, a twoja kwota zostala teraz pomnozona !!",  "Zamknij", "");
		}
		else if(winner_is_one == false)
		{
			PlayerData[playerid][pKasynoWygrana] = 0;
			PlayerKasynoPanel(playerid, 4);
			ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Kasyno (owoce i cyfry):", "PORA¯KA!\nNiestety nie udalo Ci sie wygrac :(",  "Zamknij", "");
		}
	}
	return 1;
}

stock CreateZawiadomienie(gracz, frakcjaid, tresc[])
{
	new uid = GetFreeZawiadomienieUID(), gps[100], naglowek[128];
	
	GetPlayer2DZone(gracz, gps, 100);
	ZawiadomieniaData[uid][zAktywny] = true;
	ZawiadomieniaData[uid][zGraczID] = gracz;
	ZawiadomieniaData[uid][zFrakcja] = frakcjaid;
	format(ZawiadomieniaData[uid][zGracz], 24, "%s", PlayerData[gracz][pName]);
	format(ZawiadomieniaData[uid][zGPS], 50, "%s", gps);
	format(ZawiadomieniaData[uid][zTresc], 50, "%s", tresc);
	
	for(new xxxx = 0, xx = GetPlayerPoolSize(); xxxx <= xx; xxxx++)
	{
		if(PlayerData[xxxx][pSluzba] == true && PlayerData[xxxx][pFrakcja] == frakcjaid) 
		{
			format(naglowek,sizeof(naglowek),"~p~~h~Gracz %s wysyla zawiadomienie (id: %d)~n~~p~~h~~h~Tresc zgloszenia: %s~n~~p~~h~~h~GPS: %s", PlayerData[gracz][pName], uid, tresc, gps);
			PlayerDataTXD(xxxx, 5, "Zawiadomienie", naglowek, "_", "_");
		}
	}
	return 1;
}

stock CreateZawiadomienieSys(gracz = -1, frakcjaid, tresc[], type, objectid, Float:x, Float:y, Float:z)
{
	#pragma unused gracz
	new uid = GetFreeZawiadomienieUID(), gps[100], naglowek[128];
	
	GetObject2DZone(objectid, gps, 100);

	ZawiadomieniaData[uid][zAktywny] = true;
	ZawiadomieniaData[uid][zGraczID] = -1;
	ZawiadomieniaData[uid][zFrakcja] = frakcjaid;
	ZawiadomieniaData[uid][zX] = x;
	ZawiadomieniaData[uid][zY] = y;
	ZawiadomieniaData[uid][zZ] = z;
	ZawiadomieniaData[uid][zType] = type; // 1- pozar, 2 - kloda, 3 - plama
	format(ZawiadomieniaData[uid][zGracz], 24, "Dyspozytor");
	format(ZawiadomieniaData[uid][zGPS], 50, "%s", gps);
	format(ZawiadomieniaData[uid][zTresc], 50, "%s", tresc);
	
	for(new xxxx = 0, xx = GetPlayerPoolSize(); xxxx <= xx; xxxx++)
	{
		if(PlayerData[xxxx][pSluzba] == true && PlayerData[xxxx][pFrakcja] == frakcjaid) 
		{
			format(naglowek,sizeof(naglowek),"[PTR-Serw]~p~~h~Dyspozytor otrzymal zgloszenie! (id: %d)~n~~p~~h~~h~Tresc zgloszenia: %s~n~~p~~h~~h~GPS: %s", uid, tresc, gps);
			PlayerDataTXD(xxxx, 5, "Zawiadomienie", naglowek, "_", "_");
		}
	}
	return 1;
}

stock GetFreeZawiadomienieUID(find = -1)
{
	for(new i = 0; i != MAX_ZAWIADOMIEN; i ++)
	{
		if(ZawiadomieniaData[i][zAktywny] == false)
		{
			find = i;
			break;
		}
	}
	return find;
}


stock CheckActionWithPickup(playerid)
{
	for(new puid = 0; puid != pickup_value; puid++)
	{
		if(PickupData[puid][pAktywny] == 1 && PickupData[puid][pVW] == GetPlayerVirtualWorld(playerid) && PickupData[puid][pInt] == GetPlayerInterior(playerid) && IsPlayerInRangeOfPoint(playerid, 1.0, PickupData[puid][pPos][0],PickupData[puid][pPos][1],PickupData[puid][pPos][2] ))
		{
			new data[500];
			PlayerData[playerid][pLastPickupUID] = puid;
			switch(PickupData[puid][pType])
			{
				case 0: //Stacja benzynowa
				{
					if(PlayerData[playerid][pStacjaOpen] == true) return 1;
					PlayerData[playerid][pStacjaOpen] = true;
					PlayerData[playerid][pStacjaBar] = CreateProgressBar(444.00, 379.00, 194.50, 6.19, 74259, 100.0);
					ShowProgressBarForPlayer(playerid, PlayerData[playerid][pStacjaBar]);
					PlayerStacjaBenzynowa(playerid, 1); //pokaz
					PlayerData[playerid][pStacjaTimer] = SetTimerEx("TimerStacjaBenzynowa", 1000, true, "d", playerid);
				}
				case 1: //Sklep spozywczy
				{
					ShowMenu247(playerid);
				}
				case 2: //Motel
				{
					format(data,sizeof(data),"\
					Czy chcesz sie przespac w tym motelu ?\n\
					Koszt za przespanie to $%d", SETTINGS_PRICE_HOTEL);
					ShowPlayerDialog(playerid, DIALOG_MOTEL_ASK, DIALOG_STYLE_MSGBOX, "Motel", data, "Tak", "Nie");
				}
				case 3: //Urzad (dokumenty)
				{
					format(data,sizeof(data),"\
												#\tKoszt\n\
												Dowod osobisty\t$%d\n\
												Dowod rejestracyjny\t$%d\n\
												Ubezpieczenie\t$%d\n\
												Paszport\t$%d\n\
												Karta ADR\t$%d\n\
												", SETTINGS_PRICE_DOWOD_OSOBISTY, SETTINGS_PRICE_DOWOD_REJESTRACYJNY, SETTINGS_PRICE_UBEZPIECZENIE, SETTINGS_PRICE_PASZPORT, SETTINGS_PRICE_ADR);
					ShowPlayerDialog(playerid, DIALOG_URZAD_DOKUMENTY, DIALOG_STYLE_TABLIST_HEADERS, "Urzad", data, "Tak", "Nie");
				}
				case 4: //Silownia
				{
					ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Wystapil problem (silownia):", "System silowni jest w trakcie budowy.", "Zamknij", "");
				}
				case 5: //Przebierz policja
				{
					if(!GetPlayerFrakcja(playerid, 1)) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Wystapil problem (przebieralnia):", "Nie masz uprawnien do tej przebieralni.", "Zamknij", "");
					//if(PlayerData[playerid][pSluzba] == true) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Wystapil problem (przebieralnia):", "Nie mozesz przebrac sie znow, najpierw zejdz ze sluzby.", "Zamknij", "");
					HideSkinSelection(playerid);
					CreateSkinSelectionEx(playerid, SkinyPolicji);
				}
				case 6: //Przebierz taxi
				{
					if(!GetPlayerFrakcja(playerid, 8)) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Wystapil problem (przebieralnia):", "Nie masz uprawnien do tej przebieralni.", "Zamknij", "");
					if(PlayerData[playerid][pSluzba] == true) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Wystapil problem (przebieralnia):", "Nie mozesz przebrac sie znow, najpierw zejdz ze sluzby.", "Zamknij", "");
					HideSkinSelection(playerid);
					CreateSkinSelectionEx(playerid, SkinyTaxi);
				}
				case 7: //Przebierz sannews
				{
					if(!GetPlayerFrakcja(playerid, 7)) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Wystapil problem (przebieralnia):", "Nie masz uprawnien do tej przebieralni.", "Zamknij", "");
					//if(PlayerData[playerid][pSluzba] == true) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Wystapil problem (przebieralnia):", "Nie mozesz przebrac sie znow, najpierw zejdz ze sluzby.", "Zamknij", "");
					HideSkinSelection(playerid);
					CreateSkinSelectionEx(playerid, SkinySanNews);
				}
				case 8: //Przebierz miejska
				{
					if(!GetPlayerFrakcja(playerid, 3)) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Wystapil problem (przebieralnia):", "Nie masz uprawnien do tej przebieralni.", "Zamknij", "");
					//if(PlayerData[playerid][pSluzba] == true) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Wystapil problem (przebieralnia):", "Nie mozesz przebrac sie znow, najpierw zejdz ze sluzby.", "Zamknij", "");
					HideSkinSelection(playerid);
					CreateSkinSelectionEx(playerid, SkinyStrazMiejska);
				}
				case 9: //Przebierz graniczna
				{	
					if(!GetPlayerFrakcja(playerid, 4)) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Wystapil problem (przebieralnia):", "Nie masz uprawnien do tej przebieralni.", "Zamknij", "");
					//if(PlayerData[playerid][pSluzba] == true) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Wystapil problem (przebieralnia):", "Nie mozesz przebrac sie znow, najpierw zejdz ze sluzby.", "Zamknij", "");
					HideSkinSelection(playerid);
					CreateSkinSelectionEx(playerid, SkinyStrazGraniczna);
				}
				case 10: //Przebierz pomocdrogowa
				{
					if(!GetPlayerFrakcja(playerid, 6)) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Wystapil problem (przebieralnia):", "Nie masz uprawnien do tej przebieralni.", "Zamknij", "");
					//if(PlayerData[playerid][pSluzba] == true) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Wystapil problem (przebieralnia):", "Nie mozesz przebrac sie znow, najpierw zejdz ze sluzby.", "Zamknij", "");
					HideSkinSelection(playerid);
					CreateSkinSelectionEx(playerid, SkinyPomocDrogowa);
				}
				case 11: //Przebierz pogotowia
				{
					if(!GetPlayerFrakcja(playerid, 2)) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Wystapil problem (przebieralnia):", "Nie masz uprawnien do tej przebieralni.", "Zamknij", "");
					//if(PlayerData[playerid][pSluzba] == true) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Wystapil problem (przebieralnia):", "Nie mozesz przebrac sie znow, najpierw zejdz ze sluzby.", "Zamknij", "");
					HideSkinSelection(playerid);
					CreateSkinSelectionEx(playerid, SkinyPogotowie);
				}
				case 12: //Przebierz strazy pozarnej
				{
					if(!GetPlayerFrakcja(playerid, 5)) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Wystapil problem (przebieralnia):", "Nie masz uprawnien do tej przebieralni.", "Zamknij", "");
					//if(PlayerData[playerid][pSluzba] == true) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Wystapil problem (przebieralnia):", "Nie mozesz przebrac sie znow, najpierw zejdz ze sluzby.", "Zamknij", "");
					HideSkinSelection(playerid);
					CreateSkinSelectionEx(playerid, SkinyStrazPozarna);
				}
				case 13: //Przebierz wultan
				{
					if(!GetPlayerFrakcja(playerid, 9)) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Wystapil problem (przebieralnia):", "Nie masz uprawnien do tej przebieralni.", "Zamknij", "");
					//if(PlayerData[playerid][pSluzba] == true) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Wystapil problem (przebieralnia):", "Nie mozesz przebrac sie znow, najpierw zejdz ze sluzby.", "Zamknij", "");
					HideSkinSelection(playerid);
					CreateSkinSelectionEx(playerid, SkinyWultanClan);
				}
				case 14: //Przebierz  makaveli
				{
					if(!GetPlayerFrakcja(playerid, 10)) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Wystapil problem (przebieralnia):", "Nie masz uprawnien do tej przebieralni.", "Zamknij", "");
					//if(PlayerData[playerid][pSluzba] == true) return ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Wystapil problem (przebieralnia):", "Nie mozesz przebrac sie znow, najpierw zejdz ze sluzby.", "Zamknij", "");
					HideSkinSelection(playerid);
					CreateSkinSelectionEx(playerid, SkinyMakaveli);
				}
				case 15: //Przebierz gracze
				{
					HideSkinSelection(playerid);
					CreateSkinSelectionEx(playerid, SkinySklepSkins);
				}
				case 16: //Burger
				{
					ShowMenuPosilkow(playerid);
				}
				case 17: //Salon samochodowy
				{
					PlayerData[playerid][pSalonVehicleNumer] = 0;
					PlayerData[playerid][pSalonVehicleType] = 2;
					PlayerSalonSamochodowy(playerid, 5, 0);
					PlayerSalonSamochodowy(playerid, 2, 0);
					PlayerSalonSamochodowy(playerid, 7, 0);
				}
				case 18: //Towary
				{
					SendClientMessage(playerid, -1, "{a4a4a4}W tym miejscu mozesz uzywac komendy /towary");
				}
				case 19: //Sklep elektroniczny
				{
					ShowMenuElekt(playerid);
				}
				case 20: //Lotto
				{
					format(data,sizeof(data),"\
												System lotto:\n\
												1. Wpisujesz w pole ponizej dowolny numerek (od 1 do 60).\n\
												2. Koszt jednego numerka to jedyne $"#SETTINGS_PRICE_LOTTO_NUMER".\n\
												3. O godzinie %d:%d losowana jest dana liczba (od 1 do 60).\n\
												4. Nie musisz byc w grze podczas losowania, jezeli wygrasz zostanie wyslana do Ciebie nagroda.\n\
												5. Pamietaj, ze kupon na losowanie mozesz zakupic tylko raz - na jedno losowanie.\n\n\
												Wpisz swoj szczesliwy numer:\
											", lotto_godzina, lotto_minuta);
					ShowPlayerDialog(playerid, DIALOG_LOTTO, DIALOG_STYLE_INPUT, "Lotto:", data, "Zatwierdz", "Zamknij");
				}
				case 21: //zbrojownia
				{
					ShowMenuZbrojownia(playerid);
				}
				case 22: //Bank
				{
					format(data,sizeof(data),"\
											Stan konta ($%d)\n\
											Wyplac pieniadze\n\
											Wplac pieniadze\n\
											Dokonaj przelewu\n\
					", PlayerData[playerid][pCashBank]);
					ShowPlayerDialog(playerid, DIALOG_BANK, DIALOG_STYLE_LIST, "Bank (opcje):", data, "Wybierz", "Zamknij");
				}
				case 23: //Firma
				{
					format(data,sizeof(data),"\
											Wymagania do stworzenia wlasnej firmy:\n\
											- 5 poziom postaci\n\
											- $300.000\n\
											Jezeli spelniasz powyzsze wymagania, smialo mozesz zalozyc u nas firme.\n\
											Wpisz tylko w ponizsze pole nazwe swojej firmy:\
					");
					ShowPlayerDialog(playerid, DIALOG_FIRMA_TWORZ, DIALOG_STYLE_INPUT, "Firma (tworzenie):", data, "Zatwierdz", "Zamknij");
				}
				case 24: //Salon van/truck
				{
					PlayerData[playerid][pSalonVehicleNumer] = 0;
					PlayerData[playerid][pSalonVehicleType] = 4;
					PlayerSalonSamochodowy(playerid, 5, 1);
					PlayerSalonSamochodowy(playerid, 2, 1);
					PlayerSalonSamochodowy(playerid, 7, 1);
				}
				case 25: //Przebieralnia (zejscie ze sluzby frakcji)
				{
					if(PlayerData[playerid][pSluzba] == true)
					{
						format(data,sizeof(data), "[PTR-Serw]{FF4000} Pracownik {ffffff}[{a4a4a4}%d{ffffff}] {00ffff}%s {FF4000}konczy sluzbe frakcyjna.", playerid, PlayerData[playerid][pName]);
						SendClientMessageToAll(-1, data);
						if(GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_GRANICZNA) && PlayerData[playerid][pSluzba] == true)
						{
							sg--;
							if(sg <= 0)
							{
								for(new i = 0; i < obiekt_value; i++)
								{
									if(ObjectData[i][bAktywny] == 1 && ObjectData[i][oType] == 2)
									{
										UpdateDynamic3DTextLabelText(ObjectData[i][oText3D], -1, "[PTR-Serw]{00b300}Przejazd graniczny\n{00ffff}Oplata za przejazd: {00b300}$100\n{00ffff}Nacisnij {d90000}spacje, {00ffff}aby zaplacic i otworzyc szlaban.");
									}
								}
							}
						}
						PlayerData[playerid][pSluzba] = false;
						SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
						SetPlayerColor(playerid, 0x00C3FFAA);
						GameTextForPlayer(playerid, "[PTR-Serw]~g~Konczysz sluzbe w tej frakcji", 1500, 3);
						
						
		
						format(data,sizeof(data), "UPDATE `data_players` set `czas_godziny_sluzba` = '%d' where `uid` = '%d'",  PlayerData[playerid][pCzasSluzbaGodz],  	 	 PlayerData[playerid][pUID]), mysql_query(data);
						format(data,sizeof(data), "UPDATE `data_players` set `czas_minuty_sluzba` = '%d' where `uid` = '%d'", 	PlayerData[playerid][pCzasSluzbaMin],  	 		 PlayerData[playerid][pUID]), mysql_query(data);
						
						for(new clear = 0; clear != MAX_PLAYERS; clear++)
						{
							if(IsValidDynamicMapIcon(PlayerData[playerid][pGPSWypadek][clear]))
							{
								DestroyDynamicMapIcon(PlayerData[playerid][pGPSWypadek][clear]);
							}
						}
						for(new pf_c_v = 0; pf_c_v != MAX_POZARY; pf_c_v++)
						{
							if(IsValidDynamicCP(PlayerData[playerid][pPozarCP][pf_c_v])) 
							{
								DestroyDynamicCP(PlayerData[playerid][pPozarCP][pf_c_v]);
							}
						}
						if(IsValidDynamicCP(PlayerData[playerid][pKlodaCP][kloda_activity])) 
						{
							DestroyDynamicCP(PlayerData[playerid][pKlodaCP][kloda_activity]);
						}
						if(IsValidDynamicCP(PlayerData[playerid][pPlamaCP][plama_activity])) 
						{
							DestroyDynamicCP(PlayerData[playerid][pPlamaCP][plama_activity]);
						}
					}
					else
					{
						ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Wystapil problem (przebieralnia):", "Nie jestes na sluzbie!", "Zamknij", "");
					}
				}
				case 26: //Prawo jazdy
				{
					
					ShowPlayerDialog(playerid, DIALOG_PRAWO_JAZDY_SELECT, DIALOG_STYLE_LIST, "Wybierz kategorie prawa jazdy:", "\
																															{013ADF}#Teoria{F2F2F2}\n\
																															Teoria kat. B  ($1000)\n\
																															Teoria kat. C  ($2800)\n\
																															Teoria kat. A  ($1400)\n\
																															Teoria kat. D  ($1400)\n\
																															Teoria licencja lotnicza  ($5000)\n\
																															{013ADF}#Praktyka{F2F2F2}\n\
																															Praktyka kat. B  ($2000)\n\
																															Praktyka kat. C  ($3700)\n\
																															Praktyka kat. A  ($2000)\n\
																															Praktyka kat. D  ($2000)\n\
																															Praktyka licencja lotnicza  ($6700)\
																															", "Wybierz", "Zamknij");
                                                                                                                        
				}
			}
			return 1;
		}
	}
	return 1;
}
stock CheckDynamicObjectScript(playerid)
{
	if(GetPlayerWeapon(playerid) != 0) return 1;
	new get_objectid  = GPCTDJ(playerid), o_uid = -1, Float:ox, Float:oy, Float:oz;
	
	GetDynamicObjectPos(get_objectid, ox, oy, oz);
	for(new b = 1; b != obiekt_value; b++)
	{
		if(ObjectData[b][oObject] != get_objectid) continue;
		if(ObjectData[b][bUID] == 0) continue;
		if(ObjectData[b][bAktywny] == 0) continue;
		if(ObjectData[b][oOpen] == 1) continue;
		
		o_uid = b;
	}
	if(o_uid == -1)
	{
		for(new bb = 1; bb != obiekt_value; bb++)
		{
			if(ObjectData[bb][bUID] == 0) continue;
			if(ObjectData[bb][bAktywny] == 0) continue;
			if(ObjectData[bb][oObject] == 0) continue;
			if(!IsPlayerInRangeOfPoint(playerid, 10.0, ObjectData[bb][bPos][0], ObjectData[bb][bPos][1], ObjectData[bb][bPos][2])) continue;
			if(ObjectData[bb][oCanMoved] == 0) continue;
			if(ObjectData[bb][oOpen] == 1) continue;
	
			o_uid = bb;
			get_objectid = ObjectData[bb][oObject];
			GetDynamicObjectPos(get_objectid, ox, oy, oz);
		}
	}
	if(o_uid != -1)
	{
		if(ObjectData[o_uid][oType] == 1) //Bankomat
		{
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, ox, oy, oz))
			{
				GameTextForPlayer(playerid, "~g~PODEJDZ BLIZEJ...", 1500, 3);
				return 1;
			}
			new data[128];
			format(data,sizeof(data),"\
			Stan konta ($%d)\n\
			Wyplac pieniadze\n\
			Wplac pieniadze\n\
			Dokonaj przelewu\n\
			", PlayerData[playerid][pCashBank]);
			ShowPlayerDialog(playerid, DIALOG_BANK, DIALOG_STYLE_LIST, "Bank (opcje):", data, "Wybierz", "Zamknij");
			return 1;
		}
		if(ObjectData[o_uid][oType] == 2) //Szlaban - oplata za przejazd graniczny
		{
			if(sg == 0)
			{
				if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					if(GetPlayerFrakcja(playerid, FRAKCJA_GANG_OLSENA) || GetPlayerFrakcja(playerid, FRAKCJA_MAKAVELI) || GetPlayerFrakcja(playerid, FRAKCJA_POMOC_DROGOWA) || GetPlayerFrakcja(playerid, FRAKCJA_TAXI) || GetPlayerFrakcja(playerid, FRAKCJA_SAN_NEWS))
					{
						GameTextForPlayer(playerid, "~g~Zostalo pobrane $100 za przejazd graniczny", 2000, 3);
						GivePlayerCash(playerid, -100);
						ObjectData[o_uid][oOpen] = 1;
						ObjectData[o_uid][oTimer] = SetTimerEx("CloseSzlaban", 5000, false, "ddd", playerid, o_uid, get_objectid);
						MoveDynamicObjectScript(playerid, o_uid, get_objectid);
					}
					else if(GetPlayerFrakcja(playerid, FRAKCJA_POGOTOWIA) || GetPlayerFrakcja(playerid, FRAKCJA_POLICJI) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_GRANICZNA) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_MIEJSKA) || GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_POZARNA))
					{
						GameTextForPlayer(playerid, "~g~Darmowy przejazd dla sluzb mundurowych!", 2000, 3);
						ObjectData[o_uid][oOpen] = 1;
						ObjectData[o_uid][oTimer] = SetTimerEx("CloseSzlaban", 5000, false, "ddd", playerid, o_uid, get_objectid);
						MoveDynamicObjectScript(playerid, o_uid, get_objectid);
					}
				}
			}
			else if(sg != 0)
			{
				if(GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_GRANICZNA) && IsPlayerOnFoot(playerid))
				{
					ObjectData[o_uid][oOpen] = 1;
					ObjectData[o_uid][oTimer] = SetTimerEx("CloseSzlaban", 5000, false, "ddd", playerid, o_uid, get_objectid);
					MoveDynamicObjectScript(playerid, o_uid, get_objectid);
				}
			}
			return 1;
		}
	}
	return 1;
}

forward CloseSzlaban(playerid, uid, get_objectid);
public CloseSzlaban(playerid, uid, get_objectid)
{
	MoveDynamicObjectScript(playerid, uid, get_objectid);
	ObjectData[uid][oOpen] = 0;
	return 1;
}

stock MoveDynamicObjectScript(playerid, uid, get_objectid)
{
	if(ObjectData[uid][oCanMoved] == 1)
	{
		if(ObjectData[uid][oRequisteFirma] == 0 && ObjectData[uid][oRequisteFrakcja] == 0 || ObjectData[uid][oRequisteFirma] != 0 && ObjectData[uid][oRequisteFirma] == PlayerData[playerid][pFirma] || ObjectData[uid][oRequisteFrakcja] != 0 && ObjectData[uid][oRequisteFrakcja] == PlayerData[playerid][pFrakcja])
		{
			if(ObjectData[uid][oMoved] == 0)
			{
				ObjectData[uid][oMoved] = 1;
				//GameTextForPlayer(playerid, "~g~OBIEKT PRZESUNIETY 0/1", 1500, 3);
				
				MoveDynamicObject(get_objectid, ObjectData[uid][oPosMove][0], ObjectData[uid][oPosMove][1], ObjectData[uid][oPosMove][2], 1, ObjectData[uid][oPosMove][3], ObjectData[uid][oPosMove][4], ObjectData[uid][oPosMove][5]);
			}
			else if(ObjectData[uid][oMoved] == 1)
			{
				ObjectData[uid][oMoved] = 0;
				//GameTextForPlayer(playerid, "~g~OBIEKT PRZESUNIETY 1/1", 1500, 3);
				MoveDynamicObject(get_objectid, ObjectData[uid][bPos][0], ObjectData[uid][bPos][1], ObjectData[uid][bPos][2], 1, ObjectData[uid][bPos][3], ObjectData[uid][bPos][4], ObjectData[uid][bPos][5]);
			}
		}
		else
		{
			GameTextForPlayer(playerid, "~r~Brak uprawnien do poruszania", 1500, 3);
		}
	}
	/*
	else
	{
		GameTextForPlayer(playerid, "~r~OBIEKT NIE JEST SKRYPTOWO PORUSZANY", 1500, 3);
	}
	*/
	return 1;
}

stock GiveFrakcjaCash(frakcja, ilosc)
{
	new data[128];
	format(data,sizeof(data),"UPDATE `data_frakcje` set `pieniadze` = `pieniadze` + '%d' where `uid` = '%d'", ilosc, frakcja);
	mysql_query(data);
	return 1;
}
stock GetFrakcjaCash(frakcja, ilosc = 0)
{
	new data[200];
	format(data,sizeof(data), "SELECT `pieniadze` from `data_frakcje` WHERE `uid`= '%d'", frakcja);
	mysql_query(data);
	mysql_store_result();
	if(mysql_num_rows() == 0) return ilosc;
	mysql_fetch_row(data, "|");
	sscanf(data, "p<|>d",
	ilosc);
	
	mysql_free_result();
	
	return ilosc;
}

stock GetOnlineFractions(frakcja, get_players = 0)
{
	for(new xxx = 0, yy = GetPlayerPoolSize(); xxx <= yy; xxx++)
	{
		if(PlayerData[xxx][pFrakcja] == frakcja && PlayerData[xxx][pSluzba] == true)
		{
			get_players++;
		}
	}
	return get_players;
}

stock loadWypadki(bool:just_clear)
{
	new Float:x, Float:y, Float:z, next, naglowek[128];
	
	for(new xxx = 0, yy = GetPlayerPoolSize(); xxx <= yy; xxx++)
	{
		for(new clear = 0; clear != MAX_PLAYERS; clear++)
		{
			if(IsValidDynamicMapIcon(PlayerData[xxx][pGPSWypadek][clear])) 
			{
				DestroyDynamicMapIcon(PlayerData[xxx][pGPSWypadek][clear]);
			}
		}
	}
	
	if(just_clear == true) return 1;
	
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(PlayerData[i][pWypadek] == 9999)
		{
			GetPlayerPos(i, x,y,z);
			for(new xxxx = 0, xx = GetPlayerPoolSize(); xxxx <= xx; xxxx++)
			{
				if(PlayerData[xxxx][pSluzba] == true && PlayerData[xxxx][pFrakcja] == 2) // Gracz jest  z pogotowia
				{
					PlayerData[xxxx][pGPSWypadek][next] = CreateDynamicMapIcon(x,y,z, 21, -1, 0, 0, xxxx, 100000, MAPICON_GLOBAL_CHECKPOINT);
					next++;
					format(naglowek,sizeof(naglowek),"[PTR-Serw]~p~~h~Gracz %s jest w stanie wypadku~n~~p~~h~~h~Udaj sie do ~r~~h~serduszka ~p~~h~~h~na mapie.", PlayerData[xxxx][pName]);
					PlayerDataTXD(xxxx, 5, "Wypadek", naglowek, "_", "_");
				}
			}
		}
	}
	return 1;
}


stock SetBuildType(uid, type)
{
	switch(type)
	{
		case 0: //Nic
		{
			BudynekData[uid][bPos_IN][0] = 0.0;
			BudynekData[uid][bPos_IN][1] = 0.0;
			BudynekData[uid][bPos_IN][2] = 0.0;
			BudynekData[uid][bInt_IN] = 0;
			BudynekData[uid][bMapIcon_PWN_ID] = -1;
		}
		case 1: //Kasyno
		{
			BudynekData[uid][bMapIcon_PWN_ID] = 44;
			BudynekData[uid][bPos_IN][0] = 1133.1545;
			BudynekData[uid][bPos_IN][1] = -15.1576;
			BudynekData[uid][bPos_IN][2] = 1000.6796;
			BudynekData[uid][bInt_IN] = 12;
		}
		case 2: //Wesole...
		{
			BudynekData[uid][bMapIcon_PWN_ID] = 46;
			BudynekData[uid][bPos_IN][0] = 0.0;
			BudynekData[uid][bPos_IN][1] = 0.0;
			BudynekData[uid][bPos_IN][2] = 0.0;
			BudynekData[uid][bInt_IN] = 0;
		}
		case 3: //BurgerShot
		{
			BudynekData[uid][bMapIcon_PWN_ID] = 29;
			BudynekData[uid][bPos_IN][0] = 372.3438;
			BudynekData[uid][bPos_IN][1] = -133.4541;
			BudynekData[uid][bPos_IN][2] = 1001.4922;
			BudynekData[uid][bInt_IN] = 5;
		}
		case 4: //Sklep elektryczny
		{
			BudynekData[uid][bMapIcon_PWN_ID] = 37;
			BudynekData[uid][bPos_IN][0] = 6.1298;
			BudynekData[uid][bPos_IN][1] = -31.2989;
			BudynekData[uid][bPos_IN][2] = 1003.549;
			BudynekData[uid][bInt_IN] = 1;
		}
		case 5: //motel
		{
			BudynekData[uid][bMapIcon_PWN_ID] = 35;
			BudynekData[uid][bPos_IN][0] = 2214.92;
			BudynekData[uid][bPos_IN][1] = -1150.51;
			BudynekData[uid][bPos_IN][2] = 1025.80;
			BudynekData[uid][bInt_IN] = 15;
		}
		case 6: //urzad
		{
			BudynekData[uid][bMapIcon_PWN_ID] = 40;
			BudynekData[uid][bPos_IN][0] = 384.808624;
			BudynekData[uid][bPos_IN][1] = 173.804992;
			BudynekData[uid][bPos_IN][2] = 1008.382812;
			BudynekData[uid][bInt_IN] = 3;
		}
		case 7: //bank
		{
			BudynekData[uid][bMapIcon_PWN_ID] = 52;
			BudynekData[uid][bPos_IN][0] = 833.75;
			BudynekData[uid][bPos_IN][1] = 7.42;
			BudynekData[uid][bPos_IN][2] = 1004.18;
			BudynekData[uid][bInt_IN] = 3;
		}
		case 8: //salon samochodowy
		{
			BudynekData[uid][bMapIcon_PWN_ID] = 55;
			BudynekData[uid][bPos_IN][0] = 0.0;
			BudynekData[uid][bPos_IN][1] = 0.0;
			BudynekData[uid][bPos_IN][2] = 0.0;
			BudynekData[uid][bInt_IN] = 0;
		}
		case 9: //silownia
		{
			BudynekData[uid][bMapIcon_PWN_ID] = 54;
			BudynekData[uid][bPos_IN][0] = 772.111999;
			BudynekData[uid][bPos_IN][1] = -3.898649;
			BudynekData[uid][bPos_IN][2] = 1000.728820;
			BudynekData[uid][bInt_IN] = 5;
		}
		case 11: //ubrania
		{
			BudynekData[uid][bMapIcon_PWN_ID] = 45;
			BudynekData[uid][bPos_IN][0] = 226.293991;
			BudynekData[uid][bPos_IN][1] = -7.431529;
			BudynekData[uid][bPos_IN][2] = 1002.210937;
			BudynekData[uid][bInt_IN] = 5;
		}
		case 12: //sklep spozywczy
		{
			BudynekData[uid][bMapIcon_PWN_ID] = 38;
			BudynekData[uid][bPos_IN][0] = 6.1298;
			BudynekData[uid][bPos_IN][1] = -31.2989;
			BudynekData[uid][bPos_IN][2] = 1003.549;
			BudynekData[uid][bInt_IN] = 10;
		}
		case 13: //fryzjer
		{
			BudynekData[uid][bMapIcon_PWN_ID] = 7;
			BudynekData[uid][bPos_IN][0] = 412.021972;
			BudynekData[uid][bPos_IN][1] = -52.649898;
			BudynekData[uid][bPos_IN][2] = 1001.898437;
			BudynekData[uid][bInt_IN] = 12;
		}
		case 14: //dom
		{
			BudynekData[uid][bMapIcon_PWN_ID] = 31;
			BudynekData[uid][bHouseInterior] = 1;
			HouseChangeInterior(uid, BudynekData[uid][bHouseInterior]);
		}
	}
	
	if(IsValidDynamicPickup(BudynekData[uid][bPickup2])) DestroyDynamicPickup(BudynekData[uid][bPickup2]);
	if(IsValidDynamicPickup(BudynekData[uid][bPickup])) DestroyDynamicPickup(BudynekData[uid][bPickup]);
	if(IsValidDynamic3DTextLabel(BudynekData[uid][bText3D])) DestroyDynamic3DTextLabel(BudynekData[uid][bText3D]);
	if(IsValidDynamicMapIcon(BudynekData[uid][bMapIcon])) DestroyDynamicMapIcon(BudynekData[uid][bMapIcon]);
	BudynekData[uid][bPickup]  = CreateDynamicPickup(BudynekData[uid][bPickup_PWN_ID], 23, BudynekData[uid][bPos_OUT][0], BudynekData[uid][bPos_OUT][1], BudynekData[uid][bPos_OUT][2]);
	BudynekData[uid][bPickup2]  = CreateDynamicPickup(BudynekData[uid][bPickup_PWN_ID], 23, BudynekData[uid][bPos_IN][0], BudynekData[uid][bPos_IN][1], BudynekData[uid][bPos_IN][2]);
		
	if(BudynekData[uid][bMapIcon_PWN_ID] != -1)
	{
		BudynekData[uid][bMapIcon] = CreateDynamicMapIcon(BudynekData[uid][bPos_OUT][0], BudynekData[uid][bPos_OUT][1], BudynekData[uid][bPos_OUT][2], BudynekData[uid][bMapIcon_PWN_ID], -1, 0, 0);
	}
	return 1;
}


stock SpecOffSystem(playerid)
{
	KillTimer(PlayerData[playerid][pTimerSpec]);
	TogglePlayerSpectating(playerid, 0);
	PlayerData[playerid][pSpecID] = -1;
	
	SetPlayerPos(playerid, START_PLAYER_POS_X,START_PLAYER_POS_Y,START_PLAYER_POS_Z);
	SetPlayerVirtualWorldEx(playerid,PlayerData[playerid][pVW]);
	SetPlayerInteriorEx(playerid,PlayerData[playerid][pInt]);
	SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
	SetPlayerHealth(playerid, PlayerData[playerid][pHP]);
	TogglePlayerControllable(playerid, true);
	PlayerSpecPanel(playerid, 2);
	return 1;
}

forward SpecSystem(playerid,specowany);
public SpecSystem(playerid,specowany)
{
	if(!IsPlayerConnected(specowany))
	{
		new data[128];
		format(data,sizeof(data),"{ff0000}Gracz ktorego specowales (%s) wyszedl z serwera.", PlayerData[specowany][pName]);
		SendClientMessage(playerid,-1,data);
		SpecOffSystem(playerid);
		return 1;
	}
	else
	{
		new Float:c[3];
		GetPlayerCameraPos(playerid, c[0],c[1],c[2]);
		SetPlayerInteriorEx(playerid,GetPlayerInterior(specowany));
		SetPlayerVirtualWorldEx(playerid,GetPlayerVirtualWorld(specowany));
		if(!IsPlayerInAnyVehicle(specowany))
		{
			PlayerSpectatePlayer(playerid,specowany);
		}
		if(IsPlayerInAnyVehicle(specowany))
		{
			PlayerSpectateVehicle(playerid,GetPlayerVehicleID(specowany));
		}
		SetPlayerCameraPos(playerid, c[0],c[1],c[2]);
	}
	return 1;
}


forward HideBlackScreen(playerid);
public HideBlackScreen(playerid)
{
	PlayerTextDrawHide(playerid, Txd_others_txds[playerid][0]);
	TogglePlayerControllable(playerid, true);
	return 1;
}
/*
stock GivePlayerScore(playerid, score)
{
	SetPlayerScore(playerid, GetPlayerScore(playerid) + score);
	RefreshPlayerLevel(playerid);
	return 1;
}

*/

stock SetVehicleAddition(vid, objectid, type, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz) 
{	
	if(type == 0)
	{  	
	    new obj = CreateDynamicObject(objectid, x, y, z, rx, ry, rz);
	    VehicleData[vid][vAAttachObject] = AttachDynamicObjectToVehicle(obj, vid, x, y, z, rx, ry, rz);
	    return 1;
	}
	return 1;
}

stock ToSamochod(vehicleid)
{
	new model = GetVehicleModel(vehicleid);
	if(model == 412 || model == 534 || model == 535 || model == 566 || model == 576 || model == 401 || model == 405 || model == 410 || model == 419 || model == 421 || model == 426 || model == 436 || model == 445 || model == 466 || model == 474 || model == 491 || model == 492 || model == 504 || model == 507 || model == 516) return 1; 
	if(model == 517 || model == 518 || model == 526 || model == 527 || model == 527 || model == 540 || model == 542 || model == 546 || model == 547 || model == 549 || model == 550 || model == 551 || model == 560 || model == 562 || model == 580 || model == 585 || model == 604) return 1;
	if(model == 402 || model == 411 || model == 415 || model == 429 || model == 451 || model == 475 || model == 477 || model == 494 || model == 506 || model == 541 || model == 558 || model == 559 || model == 565 || model == 587 || model == 602 || model == 603 || model == 404 || model == 458 || model == 479 || model == 561) return 1;
	return 0;
}

stock RefreshPlayerLevel(playerid)
{
	if(GetPlayerScore(playerid) >=0)
	{
		PlayerData[playerid][pLevel] = 1;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "1LVL");
	}
	if(GetPlayerScore(playerid) >= 30)
	{
		PlayerData[playerid][pLevel] = 2;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "2LVL");
	}
	if(GetPlayerScore(playerid) >= 60)
	{
		PlayerData[playerid][pLevel] = 3;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "3LVL");
	}
	if(GetPlayerScore(playerid) >= 120)
	{
		PlayerData[playerid][pLevel] = 4;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "4LVL");
	}
	if(GetPlayerScore(playerid) >= 300)
	{
		PlayerData[playerid][pLevel] = 5;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "5LVL");
	}
	if(GetPlayerScore(playerid) >= 420)
	{
		PlayerData[playerid][pLevel] = 6;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "6LVL");
	}
	if(GetPlayerScore(playerid) >= 700)
	{
		PlayerData[playerid][pLevel] = 7;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "7LVL");
	}
	if(GetPlayerScore(playerid) >= 820)
	{
		PlayerData[playerid][pLevel] = 8;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "8LVL");
	}
	if(GetPlayerScore(playerid) >= 1100)
	{
		PlayerData[playerid][pLevel] = 9;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "9LVL");
	}
	if(GetPlayerScore(playerid) >= 1300)
	{
		PlayerData[playerid][pLevel] = 10;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "10LVL");
	}
	if(GetPlayerScore(playerid) >= 1500)
	{
		PlayerData[playerid][pLevel] = 11;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "11LVL");
	}
	if(GetPlayerScore(playerid) >= 1620)
	{
		PlayerData[playerid][pLevel] = 12;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "12LVL");
	}
	if(GetPlayerScore(playerid) >= 2000)
	{
		PlayerData[playerid][pLevel] = 13;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "13LVL");
	}
	if(GetPlayerScore(playerid) >= 2500)
	{
		PlayerData[playerid][pLevel] = 14;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "14LVL");
	}
	if(GetPlayerScore(playerid) >= 3200)
	{
		PlayerData[playerid][pLevel] = 15;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "15LVL");
	}
	if(GetPlayerScore(playerid) >= 3900)
	{
		PlayerData[playerid][pLevel] = 16;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "16LVL");
	}
	if(GetPlayerScore(playerid) >= 5400)
	{
		PlayerData[playerid][pLevel] = 17;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "17LVL");
	}
	if(GetPlayerScore(playerid) >= 6000)
	{
		PlayerData[playerid][pLevel] = 18;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "18LVL");
	}
	if(GetPlayerScore(playerid) >= 7000)
	{
		PlayerData[playerid][pLevel] = 19;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "19LVL");
	}
	if(GetPlayerScore(playerid) >= 8000)
	{
		PlayerData[playerid][pLevel] = 20;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "20LVL");
	}
	if(GetPlayerScore(playerid) >= 8100)
	{
		PlayerData[playerid][pLevel] = 21;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "21LVL");
	}
	if(GetPlayerScore(playerid) >= 8100)
	{
		PlayerData[playerid][pLevel] = 22;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "22LVL");
	}
	if(GetPlayerScore(playerid) >= 8200)
	{
		PlayerData[playerid][pLevel] = 23;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "23LVL");
	}
	if(GetPlayerScore(playerid) >= 8300)
	{
		PlayerData[playerid][pLevel] = 24;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "24LVL");
	}
	if(GetPlayerScore(playerid) >= 8400)
	{
		PlayerData[playerid][pLevel] = 25;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "25LVL");
	}
	if(GetPlayerScore(playerid) >= 8500)
	{
		PlayerData[playerid][pLevel] = 26;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "26LVL");
	}
	if(GetPlayerScore(playerid) >= 8600)
	{
		PlayerData[playerid][pLevel] = 27;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "27LVL");
	}
	if(GetPlayerScore(playerid) >= 8700)
	{
		PlayerData[playerid][pLevel] = 28;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "28LVL");
	}
	if(GetPlayerScore(playerid) >= 8800)
	{
		PlayerData[playerid][pLevel] = 29;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "29LVL");
	}
	if(GetPlayerScore(playerid) >= 8900)
	{
		PlayerData[playerid][pLevel] = 30;
		format(PlayerData[playerid][pLevelRanga], 23, "%s", "30LVL");
	}
	return 1;
}



stock GetPlayerFrakcja(playerid, frakcja)
{
	if(PlayerData[playerid][pFrakcja] == frakcja) return true;
	return false;
}


stock ShowMenuElekt(playerid)
{
	new data[370];
	format(data,sizeof(data),"\
												Nazwa\t#\tKoszt\n\
												Telefon\t.\t$%d\n\
												Luksusowy Telefon\t(Dla Konta Premium)\t$%d\n\
												Zestaw Naprawczy\t Do max35% (Naprawa tylko ponizej 35% samochodu)\t$%d\n\
												Zapasowa Opona\t.\t$%d\n\
												Spadochron\t.\t$%d\n\
												Kask Motocyklowy\t#\t$%d\n\
												Czapka Swiateczna\t#\t$%d\n\
												GBS\t.\t$%d\n\
												Cb-radio\t.\t$%d\n\
												Doladowanie 25zl\t.\t$%d\n\
												Doladowanie 150zl \t(Tylko dla Konta Premium)\t$%d\n\
												Discman \t.\t$%d\n\
												", 
												SETTINGS_PRICE_TELEFON, SETTINGS_PRICE_TELEFON_VIP, SETTINGS_PRICE_NAPRAWCZY, SETTINGS_PRICE_OPONA, SETTINGS_PRICE_SPADOCHRON, SETTINGS_PRICE_KASK, SETTINGS_PRICE_CZAPKA, SETTINGS_PRICE_GBS, SETTINGS_PRICE_CBRADIO, SETTINGS_PRICE_DOLADOWANIE_25, SETTINGS_PRICE_DOLADOWANIE_150, SETTINGS_PRICE_DISCMAN);
	ShowPlayerDialog(playerid, DIALOG_ELEKT_BUY, DIALOG_STYLE_TABLIST_HEADERS, "Menu sklep elekt.", data, "Zakup", "Zamknij");
	return 1;
}
stock ShowMenu247(playerid)
{
	new data[350];
	format(data,sizeof(data),"\
												Nazwa\t#\tKoszt\n\
												Doladowanie \t25zl\t$%d\n\
												Doladowanie \t150zl (Tylko dla Konta Premium)\t$%d\n\
												Energetyk \t+15% snu\t$%d\n\
												Energetyk Albanski Raj \t+35% snu (Tylko dla Konta Premium)\t$%d\n\
												Energetyk Black \t+25% snu\t$%d\n\
												Doner \t+10% Jedzenia\t$%d\n\
												Ciastka \t+5% Jedzenia\t$%d\n\
												chipsy \t+15% Jedzienia\t$%d\n\
												Pizza \t+40% Jedzienia\t$%d\n\
												Bulka \t+23% Jedzienia\t$%d\n\
												", 
												SETTINGS_PRICE_DOLADOWANIE_25, SETTINGS_PRICE_DOLADOWANIE_150, SETTINGS_PRICE_ENE1, SETTINGS_PRICE_ENE2, SETTINGS_PRICE_ENE3, SETTINGS_PRICE_DONER, SETTINGS_PRICE_CIASTKA, SETTINGS_PRICE_CHIPSY, SETTINGS_PRICE_PIZZA, SETTINGS_PRICE_BULKA);
	ShowPlayerDialog(playerid, DIALOG_247_BUY, DIALOG_STYLE_TABLIST_HEADERS, "Menu 24/7", data, "Zakup", "Zamknij");
	return 1;
}
stock ShowMenuPosilkow(playerid)
{
	new data[350];
	format(data,sizeof(data),"\
												Nazwa\tKoszt\n\
												Hamburger\t$%d\n\
												Donut\t$%d\n\
												Hotdog\t$%d\n\
												Kebab\t$%d\n\
												Lasange\t$%d\n\
												Nalesnik\t$%d\n\
												Nuggetsy\t$%d\n\
												Sajgonki\t$%d\n\
												Zapiekanka\t$%d\n\
												Spaghetti\t$%d", SETTINGS_PRICE_HAMBURGER, SETTINGS_PRICE_DONUT, SETTINGS_PRICE_HOTDOG, SETTINGS_PRICE_KEBAB, SETTINGS_PRICE_LASANGE, SETTINGS_PRICE_NALESNIK, SETTINGS_PRICE_NUGGETSY, SETTINGS_PRICE_SAJGONKI, SETTINGS_PRICE_ZAPIENAKA, SETTINGS_PRICE_SPAGHETTI);
	ShowPlayerDialog(playerid, DIALOG_BURGER_BUY, DIALOG_STYLE_TABLIST_HEADERS, "Menu posilkow", data, "Zakup", "Zamknij");
	return 1;
}

stock KickTimer(player, playerid = -1, powod[])
{
	new admin_nick[MAX_PLAYER_NAME], data[128];
	
	if(playerid == -1) admin_nick = "Serwer";
	
	if(playerid != -1)
	{
		format(admin_nick, MAX_PLAYER_NAME, "%s", PlayerData[playerid][pName]);
		if(PlayerData[player][pRanga] > PlayerData[playerid][pRanga])
		{
			format(data,sizeof(data), "{0080FF}UWAGA! {FA5858} %s chcial Cie wyrzucic z serwera. (Powod: %s)", admin_nick, powod);
			SendClientMessage(player, -1, data);
			return 1;
		}
	}
	else
	{
		if(PlayerData[player][pRanga] >= RANGA_WSPOLWLASCICIEL)
		{
			format(data,sizeof(data), "{0080FF}UWAGA! {FA5858} %s chcial Cie wyrzucic z serwera. (Powod: %s)", admin_nick, powod);
			SendClientMessage(player, -1, data);
			return 1;
		}
	}
	
	
	new naglowek[128];
	format(naglowek,sizeof(naglowek),"~p~~r~Gracz: %s~n~Admin: %s~n~Powod: %s", PlayerData[playerid][pName], PlayerData[player][pName], powod);
	PlayerDataTXD(playerid, 4, "Wyrzucenie", "_", "~r~~h~Zegnamy.", naglowek);

	format(data,sizeof(data),"[PTR-Serw]{FE2E2E}Gracz [%d]%s zostal wyrzucony z serwera przez [%d]%s z powodu: %s", player, PlayerData[player][pName], playerid, admin_nick, powod);
	SendClientMessageToAll(-1, data);
	
	SetTimerEx("TimerKick", 200, false, "d", player);
	return 1;
}

stock Muted(player, playerid = -1, powod[], czas)
{
	new admin_nick[MAX_PLAYER_NAME], data[128];
	
	if(playerid == -1) admin_nick = "Serwer";
	
	if(playerid != -1)
	{
		format(admin_nick, MAX_PLAYER_NAME, "%s", PlayerData[playerid][pName]);
		if(PlayerData[player][pRanga] > PlayerData[playerid][pRanga])
		{
			format(data,sizeof(data), "{0080FF}UWAGA! {FA5858} %s chcial Cie wyciszyc. (Powod: %s)", admin_nick, powod);
			SendClientMessage(player, -1, data);
			return 1;
		}
	}
	else
	{
		if(PlayerData[player][pRanga] >= RANGA_WSPOLWLASCICIEL)
		{
			format(data,sizeof(data), "{0080FF}UWAGA! {FA5858} %s chcial Cie wyciszyc. (Powod: %s)", admin_nick, powod);
			SendClientMessage(player, -1, data);
			return 1;
		}
	}
	
	
	new naglowek[128];
	format(naglowek,sizeof(naglowek),"~p~~r~Gracz: %s~n~Admin: %s~n~Powod: %s~n~Czas: %d minut", PlayerData[playerid][pName], PlayerData[player][pName], powod, czas);
	PlayerDataTXD(playerid, 4, "Wyciszenie", "_", "~r~~h~Zachecamy do zapoznania sie z regulaminem.", naglowek);
	
	
	format(data,sizeof(data),"[PTR-Serw]{FE2E2E}Gracz [%d]%s zostal wyciszony przez [%d]%s z powodu: %s, czas: %d", player, PlayerData[player][pName], playerid, admin_nick, powod, czas);
	SendClientMessageToAll(-1, data);
	
	PlayerData[player][pMuted] = czas;
	return 1;
}

stock Baned(player, playerid = -1, powod[], ip[] = "0", gpci[] = "0", time = 0)
{
	new admin_nick[MAX_PLAYER_NAME], data[300];
	
	if(playerid == -1) admin_nick = "Serwer";
	
	if(playerid != -1)
	{
		format(admin_nick, MAX_PLAYER_NAME, "%s", PlayerData[playerid][pName]);
		if(PlayerData[player][pRanga] > PlayerData[playerid][pRanga])
		{
			format(data,sizeof(data), "{0080FF}UWAGA! {FA5858} %s chcial Cie wyciszyc. (Powod: %s)", admin_nick, powod);
			SendClientMessage(player, -1, data);
			return 1;
		}
	}
	else
	{
		if(PlayerData[player][pRanga] >= RANGA_WSPOLWLASCICIEL)
		{
			format(data,sizeof(data), "{0080FF}UWAGA! {FA5858} %s chcial Cie zbanowac. (Powod: %s)", admin_nick, powod);
			SendClientMessage(player, -1, data);
			return 1;
		}
	}
	
	new naglowek[128];
	
	if(time == 0)
	{
		format(naglowek,sizeof(naglowek),"\
											~p~~r~\
											Gracz: %s~n~\
											Admin: %s~n~\
											Powod: %s", PlayerData[playerid][pName], PlayerData[player][pName], powod);
		PlayerDataTXD(playerid, 4, "Zbanowanie", "_", "~r~~h~Zachecamy do zapoznania sie z regulaminem.", naglowek);
		
		
		format(data,sizeof(data),"[PTR-Serw]{FE2E2E}Gracz [%d]%s zostal zbanowany przez [%d]%s z powodu: %s", player, PlayerData[player][pName], playerid, admin_nick, powod);
		SendClientMessageToAll(-1, data);
	}
	else
	{
		new Dni, Godzin, Minut;
		ConvertSec(time - gettime(),  Dni, Godzin, Minut);
		format(naglowek,sizeof(naglowek),"\
											~p~~r~\
											Gracz: %s~n~\
											Admin: %s~n~\
											Powod: %s~n~\
											Dni: %d~n~\
											Godzin: %d~n~\
											Minut: %d", PlayerData[playerid][pName], PlayerData[player][pName], powod, Dni, Godzin, Minut);
		PlayerDataTXD(playerid, 4, "Zbanowanie", "_", "~r~~h~Zachecamy do zapoznania sie z regulaminem.", naglowek);
		
		
		format(data,sizeof(data),"[PTR-Serw]{FE2E2E}Gracz [%d]%s zostal zbanowany przez [%d]%s z powodu: %s", player, PlayerData[player][pName], playerid, admin_nick, powod);
		SendClientMessageToAll(-1, data);
	}

	new ttime[6], BanDate[50];
	getdate(ttime[0], ttime[1], ttime[2]);
	gettime(ttime[3], ttime[4], ttime[5]);
	format(BanDate,sizeof(BanDate),"%d.%d.%d %02d:%02d:%02d", ttime[0], ttime[1], ttime[2], ttime[3], ttime[4], ttime[5]);
		
	format(data,sizeof(data),"INSERT INTO `data_bans` SET `IP`='%s', `Powod`='%s', `Admin`='%s', `Nick`='%s', `Data`='%s', `GPCI` = '%s', `Time` = '%d'",
    ip,
    powod,
    admin_nick,
	PlayerData[player][pName],
    BanDate,
	gpci,
	time);
	mysql_query(data);
	
	
	PlayerData[player][pBlock] = 1;
	SetTimerEx("TimerKick", 200, false, "d", player);
	return 1;
}

forward TimerKick(playerid);
public TimerKick(playerid)
{
	return Kick(playerid);
}

stock GetPickupUID(playerid)
{
	for(new i = 0; i != pickup_value; i++)
	{
		if(PickupData[i][pAktywny] == 1 && IsPlayerInRangeOfPoint(playerid, 1.5, PickupData[i][pPos][0], PickupData[i][pPos][1], PickupData[i][pPos][2]))
		{
			return i;
		}
	}
	return -1;
}

stock GetBuildUID(playerid) // Sprawdza najblizsze uid od zewnatrz budynku
{
	for(new i = 0; i < build_value; i++)
	{
		if(BudynekData[i][bAktywny] == 1 && IsPlayerInRangeOfPoint(playerid, 1.5, BudynekData[i][bPos_OUT][0], BudynekData[i][bPos_OUT][1], BudynekData[i][bPos_OUT][2]))
		{
			return i;
		}
	}
	return 0;
}
stock GetBuildUID2(playerid) // Sprawdza najblizsze uid od wewnatrz budynku
{
	for(new i = 0; i < build_value; i++)
	{
		if(i != GetPlayerVirtualWorld(playerid)) continue;
		if(BudynekData[i][bAktywny] == 1 && IsPlayerInRangeOfPoint(playerid, 1.5, BudynekData[i][bPos_IN][0], BudynekData[i][bPos_IN][1], BudynekData[i][bPos_IN][2]))
		{
			return i;
		}
	}
	return 0;
}









			
stock CreateBuild(playerid, nazwa[], type, cena = 0, interior_house = 0, level_house = 0)
{
	new uid = build_value, data[500];
	
	SetBuildType(uid, type);

	BudynekData[uid][bPickup_PWN_ID]  = 19197;
	BudynekData[uid][bType]  = type;
	
	if(BudynekData[uid][bInt_IN] == 0) GetPlayerPos(playerid, BudynekData[uid][bPos_IN][0], BudynekData[uid][bPos_IN][1], BudynekData[uid][bPos_IN][2]);
	GetPlayerPos(playerid, BudynekData[uid][bPos_OUT][0], BudynekData[uid][bPos_OUT][1], BudynekData[uid][bPos_OUT][2]);
	
	format(BudynekData[uid][bName], 30, "%s", nazwa);
	BudynekData[uid][bOwnerUID] = -1;
	BudynekData[uid][bAktywny] = 1;
	BudynekData[uid][bLocked]  = 0;
	BudynekData[uid][bPrice]   = cena;
	BudynekData[uid][bType]    = type;
	BudynekData[uid][bPickup_PWN_ID] = 19197;
	if(type == 14) //Dom
	{
		BudynekData[uid][bMapIcon_PWN_ID] = 31;
		BudynekData[uid][bPickup_PWN_ID] = 1273;
		BudynekData[uid][bOwnerUID] = -1;
		BudynekData[uid][bHouseOpis] = -1;
		BudynekData[uid][bLocked]  = 1;
		BudynekData[uid][bHouseLevel]  = level_house;
		HouseChangeInterior(uid, interior_house);
		HouseText3D(uid);
	}
	BudynekData[uid][bPickup]  = CreateDynamicPickup(BudynekData[uid][bPickup_PWN_ID], 23, BudynekData[uid][bPos_OUT][0], BudynekData[uid][bPos_OUT][1], BudynekData[uid][bPos_OUT][2]);
	BudynekData[uid][bPickup2]  = CreateDynamicPickup(BudynekData[uid][bPickup_PWN_ID], 23, BudynekData[uid][bPos_IN][0], BudynekData[uid][bPos_IN][1], BudynekData[uid][bPos_IN][2], uid, BudynekData[uid][bInt_IN]);
	if(BudynekData[uid][bMapIcon_PWN_ID] != -1)
	{
		BudynekData[uid][bMapIcon] = CreateDynamicMapIcon(BudynekData[uid][bPos_OUT][0], BudynekData[uid][bPos_OUT][1], BudynekData[uid][bPos_OUT][2], BudynekData[uid][bMapIcon_PWN_ID], -1, 0, 0);
	}
	
	
	
	format(data,sizeof(data),"{a4a4a4}Stworzyles budynek. UID: %d, Name: %s, Pickup: %d, MapIcon: %d, Type: %d, Price: %d, Level: %d", uid, nazwa, BudynekData[uid][bPickup_PWN_ID], BudynekData[uid][bMapIcon_PWN_ID], type, cena, level_house);
	SendClientMessage(playerid, -1, data);
	
	format(data,sizeof(data),"INSERT INTO `data_budynki` SET `name`='%s', `owneruid`='%d', `pickup`='%d', `mapicon`='%d', `type`='%d', `vw`='%d', `int` = '%d', `x_pos_in` = '%f', `y_pos_in` = '%f', `z_pos_in` = '%f', `x_pos_out` = '%f', `y_pos_out` = '%f', `z_pos_out` = '%f'",
	BudynekData[uid][bName],
	BudynekData[uid][bOwnerUID],
	BudynekData[uid][bPickup_PWN_ID],
	BudynekData[uid][bMapIcon_PWN_ID],
	BudynekData[uid][bType],
	BudynekData[uid][bVW],
	BudynekData[uid][bInt_IN],
	BudynekData[uid][bPos_IN][0],
	BudynekData[uid][bPos_IN][1],
	BudynekData[uid][bPos_IN][2],
	BudynekData[uid][bPos_OUT][0],
	BudynekData[uid][bPos_OUT][1],
	BudynekData[uid][bPos_OUT][2]);
	mysql_query(data);
	
	
	SaveBuild(uid);
	
	build_value++;
	return 1;
}



stock SaveNarko(uid, do_save = 1)
{
	if(uid == 0) return 1;
	if(uid == -1) return 1;
	
	new data[500];
	
	if(do_save == 1)
	{
		format(data,sizeof(data), "UPDATE `data_narkotyki` set `aktywny` = '%d' where `uid` = '%d'", 			NarkotykiData[uid][nAktywny],        	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_narkotyki` set `type` = '%d' where `uid` = '%d'", 				NarkotykiData[uid][nType],        		  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_narkotyki` set `time` = '%d' where `uid` = '%d'", 				NarkotykiData[uid][nCzas],        		  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_narkotyki` set `frakcja` = '%d' where `uid` = '%d'", 			NarkotykiData[uid][nFrakcja],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_narkotyki` set `vw` = '%d' where `uid` = '%d'", 				NarkotykiData[uid][nVW],       			  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_narkotyki` set `int` = '%d' where `uid` = '%d'", 				NarkotykiData[uid][nInt],         		  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_narkotyki` set `tworca` = '%s' where `uid` = '%d'", 			NarkotykiData[uid][nTworca],        	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_narkotyki` set `x` = '%f' where `uid` = '%d'", 					NarkotykiData[uid][nPos][0],        	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_narkotyki` set `y` = '%f' where `uid` = '%d'", 					NarkotykiData[uid][nPos][1],        	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_narkotyki` set `z` = '%f' where `uid` = '%d'", 					NarkotykiData[uid][nPos][2],        	  uid), mysql_query(data);
	}

	
	if(IsValidDynamic3DTextLabel(NarkotykiData[uid][nText3D])) DestroyDynamic3DTextLabel(NarkotykiData[uid][nText3D]);
	if(NarkotykiData[uid][nAktywny] == 1)
	{
		new str_narko[24], str_org[34], Dni, Godzin, Minut;
		
		switch(NarkotykiData[uid][nFrakcja])
		{
			case 1: str_org = ""#GRUPA_LEVEL_1"";
			case 2: str_org = ""#GRUPA_LEVEL_2"";
			case 3: str_org = ""#GRUPA_LEVEL_3"";
			case 4: str_org = ""#GRUPA_LEVEL_4"";
			case 5: str_org = ""#GRUPA_LEVEL_5"";
			case 6: str_org = ""#GRUPA_LEVEL_6"";
			case 7: str_org = ""#GRUPA_LEVEL_7"";
			case 8: str_org = ""#GRUPA_LEVEL_8"";
			case 9: str_org = ""#GRUPA_LEVEL_9"";
			case 10: str_org = ""#GRUPA_LEVEL_10"";
		}
		switch(NarkotykiData[uid][nType])
		{
			case 1: str_narko = "Marihuana";
			case 2: str_narko = "Haszysz";
			case 3: str_narko = "Kokaina";
		}
		if(NarkotykiData[uid][nCzas] >= gettime())
		{
			ConvertSec(NarkotykiData[uid][nCzas] - gettime(), Dni, Godzin, Minut);
			format(data,sizeof(data),"\
			[UID: %d]\n\
			Narkotyk: %s\n\
			Tworca: %s\n\
			Organizacja: %s\n\
			Pozostaly czas: %d godzin, %d minut\n\
			", uid, str_narko, NarkotykiData[uid][nTworca], str_org, Godzin, Minut);
		}
		else if(NarkotykiData[uid][nCzas] <= gettime() || Godzin == 0 && Minut == 0)
		{
			format(data,sizeof(data),"\
			[UID: %d]\n\
			Narkotyk: %s\n\
			Tworca: %s\n\
			Organizacja: %s\n\
			Pozostaly czas: Brak (gotowe do zebrania)\n\
			", uid, str_narko, NarkotykiData[uid][nTworca], str_org);
		}
		
		
		NarkotykiData[uid][nText3D] = CreateDynamic3DTextLabel(data, 0xFA5858EE, NarkotykiData[uid][nPos][0], NarkotykiData[uid][nPos][1], NarkotykiData[uid][nPos][2], 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, NarkotykiData[uid][nVW],NarkotykiData[uid][nInt]);
	}
	return 1;
}

stock LoadNarko()
{
	new i = 1, data[500];
	mysql_query("SELECT * FROM `data_narkotyki` ORDER BY `uid` ASC");
	mysql_store_result();

	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>iis[24]iiiiifff",
		NarkotykiData[i][nUID],
		NarkotykiData[i][nAktywny],
		NarkotykiData[i][nTworca],
		NarkotykiData[i][nFrakcja],
		NarkotykiData[i][nType],
		NarkotykiData[i][nVW],
		NarkotykiData[i][nInt],
		NarkotykiData[i][nCzas],
		NarkotykiData[i][nPos][0],
		NarkotykiData[i][nPos][1],
		NarkotykiData[i][nPos][2]);
		
		printf("[NARKOTYKI] uid %d index %d aktywny %d type %d vw %d int %d x %f y %f z %f",  NarkotykiData[i][nUID], i, NarkotykiData[i][nAktywny], NarkotykiData[i][nType], NarkotykiData[i][nVW], NarkotykiData[i][nInt], NarkotykiData[i][nPos][0], NarkotykiData[i][nPos][1], NarkotykiData[i][nPos][2]);
		
		i++;
	}
	narko_value = i;
	mysql_free_result();
	return 1;
}

stock SavePickup(uid)
{
	if(uid == 0) return 1;
	if(uid == -1) return 1;
	
	new data[500];
	format(data,sizeof(data), "UPDATE `data_pickups` set `aktywny` = '%d' where `uid` = '%d'", 			PickupData[uid][pAktywny],        	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_pickups` set `pickup` = '%d' where `uid` = '%d'", 			PickupData[uid][pPickup_PWN_ID],        	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_pickups` set `mapicon` = '%d' where `uid` = '%d'", 			PickupData[uid][pMapIcon_PWN_ID],        	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_pickups` set `type` = '%d' where `uid` = '%d'", 			PickupData[uid][pType],         uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_pickups` set `vw` = '%d' where `uid` = '%d'", 				PickupData[uid][pVW],        uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_pickups` set `int` = '%d' where `uid` = '%d'", 				PickupData[uid][pInt],         		  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_pickups` set `cena` = '%d' where `uid` = '%d'", 			PickupData[uid][pCena],        	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_pickups` set `x` = '%f' where `uid` = '%d'", 				PickupData[uid][pPos][0],        			  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_pickups` set `y` = '%f' where `uid` = '%d'", 				PickupData[uid][pPos][1],        			  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_pickups` set `z` = '%f' where `uid` = '%d'", 				PickupData[uid][pPos][2],        	  uid), mysql_query(data);
	

	Set3DTextPickup(uid);
	return 1;
}



stock LoadPickups()
{
	new i = 1, data[500];
	mysql_query("SELECT * FROM `data_pickups` ORDER BY `uid` ASC");
	mysql_store_result();

	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>iiiiiiiifff",
		PickupData[i][pUID],
		PickupData[i][pAktywny],
		PickupData[i][pPickup_PWN_ID],
		PickupData[i][pMapIcon_PWN_ID],
		PickupData[i][pType],
		PickupData[i][pVW],
		PickupData[i][pInt],
		PickupData[i][pCena],
		PickupData[i][pPos][0],
		PickupData[i][pPos][1],
		PickupData[i][pPos][2]);
		
		printf("[PICKUP] uid %d index %d aktywny %d type %d vw %d int %d x %f y %f z %f", PickupData[i][pUID], i, PickupData[i][pAktywny], PickupData[i][pType], PickupData[i][pVW], PickupData[i][pInt], PickupData[i][pPos][0], PickupData[i][pPos][1], PickupData[i][pPos][2]);
		

		if(PickupData[i][pAktywny] == 1)
		{
			if(PickupData[i][pMapIcon_PWN_ID] != -1) PickupData[i][pMapIcon] = CreateDynamicMapIcon(PickupData[i][pPos][0], PickupData[i][pPos][1], PickupData[i][pPos][2], PickupData[i][pMapIcon_PWN_ID], -1, PickupData[i][pVW], PickupData[i][pInt]);
			PickupData[i][pPickup]  = CreateDynamicPickup(PickupData[i][pPickup_PWN_ID], 23, PickupData[i][pPos][0], PickupData[i][pPos][1], PickupData[i][pPos][2], PickupData[i][pVW], PickupData[i][pInt]);
			Set3DTextPickup(i);
		}
		
		i++;
	}
	pickup_value = i;
	mysql_free_result();
	return 1;
}


stock Set3DTextPickup(i)
{
	if(PickupData[i][pAktywny] == 0) return 1;
	new str[128];
	switch(PickupData[i][pType])
	{
		case 0:  //Stacja benzynowa
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Stacja benzynowa\n\
			Koszt za litr paliwa: $%d\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup], PickupData[i][pCena]);
		}
		case 1: //Sklep spozywczy
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Sklep spozywczy\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 2: //Motel
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Motel\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 3:  //Urzad (dokumenty)
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Urzad (dokumenty)\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 4:  //Silownia
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Silownia\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 5:  //Przebieralnia dla policji
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Przebieralnia dla Policji\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 6: //Przebieralnia dla  taxi
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Przebieralnia dla Taxi\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 7:  //Przebieralnia dla  sannews
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Przebieralnia dla San News\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 8:   //Przebieralnia dla  strazy miejskiej
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Przebieralnia dla Strazy Miejskiej\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 9:  //Przebieralnia dla  strazy granicznej
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Przebieralnia dla Strazy Granicznej\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 10: //Przebieralnia dla  pomocy drogowej
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Przebieralnia dla Pomocy Drogowej\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 11: //Przebieralnia dla  pogotowia
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Przebieralnia dla Pogotowia\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 12:  //Przebieralnia dla  strazy pozarne
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Przebieralnia dla Strazy Pozarnej\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 13: //Przebieralnia dla  wutang cali
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Przebieralnia dla Wutang Clan\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 14:  //Przebieralnia dla  makaveli
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Przebieralnia dla Makaveli\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 15: //Przebieralnia dla  graczy
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Przebieralnia dla graczy\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 16: //Burger
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Burgershot\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 17: //Salon samochodowy
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Salon samochodowy\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 18: //towary
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Centrala towarow\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 19: //skelp elektroniczny
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Sklep elektroniczny\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 20: //lotto
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Centrala lotto\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 21: //zbrojownia
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Pobor broni frakcyjnych\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 22: //Bank
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Bank\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 23: //Firma
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Zakladanie wlasnej firmy\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 24: //Salon van/truck
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Salon van/truck\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 25: //Przebieralnia (zejscie ze sluzby frakcji)
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Przebieralnia w ubrania prywatne\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
		case 26: //Prawo jazdy
		{
			format(str,sizeof(str),"\
			[UID: %d | ID: %d]\n\
			Prawo jazdy (teoria i praktyka)\n\
			{2EFEF7}Nacisnij klawisz PPM", i, PickupData[i][pPickup]);
		}
	}
	if(IsValidDynamic3DTextLabel(PickupData[i][pText3D])) DestroyDynamic3DTextLabel(PickupData[i][pText3D]);
	PickupData[i][pText3D] = CreateDynamic3DTextLabel(str, 0x00FFFFEE, PickupData[i][pPos][0], PickupData[i][pPos][1], PickupData[i][pPos][2], 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, PickupData[i][pVW], PickupData[i][pInt]);
	return 1;
}


stock LoadFotoradary()
{
	new i = 1, data[500], l_str[150];
	
	
	mysql_query("SELECT * FROM `data_fotoradary` ORDER BY `uid` ASC");
	mysql_store_result();

	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>iiiiffffffii",
		FotoData[i][fUID],
		FotoData[i][fAktywny],
		FotoData[i][fMaxKM],
		FotoData[i][fKara],
		FotoData[i][fPos][0], 
		FotoData[i][fPos][1], 
		FotoData[i][fPos][2], 
		FotoData[i][fPos][3], 
		FotoData[i][fPos][4], 
		FotoData[i][fPos][5], 
		FotoData[i][fVW], 
		FotoData[i][fInt]);
		
		printf("[FOTORADARY] uid %d index: %d aktywny %d max %d kara %d vw %d int %d x %f y %f z %f rx %f ry %f rz %f", 
		FotoData[i][fUID],
		i,
		FotoData[i][fAktywny],
		FotoData[i][fMaxKM],
		FotoData[i][fKara],
		FotoData[i][fVW], 
		FotoData[i][fInt],
		FotoData[i][fPos][0], 
		FotoData[i][fPos][1], 
		FotoData[i][fPos][2], 
		FotoData[i][fPos][3], 
		FotoData[i][fPos][4], 
		FotoData[i][fPos][5]);
		
		if(FotoData[i][fAktywny] == 1) 
		{
			FotoData[i][fObject] = CreateDynamicObject(18880, FotoData[i][fPos][0], FotoData[i][fPos][1], FotoData[i][fPos][2], FotoData[i][fPos][3], FotoData[i][fPos][4], FotoData[i][fPos][5], FotoData[i][fVW], FotoData[i][fInt]);
			format(l_str,sizeof(l_str),"Fotoradar uid %d\nMaksymalna predkosc: %d km/h\nKara za przekroczenie predkosci: $%d\nStatus: %s", i, FotoData[i][fMaxKM], FotoData[i][fKara], ((FotoData[i][fAktywny] == 1) ? ("Aktywny") : ("Nie aktywny")));
			FotoData[i][fText3D] = CreateDynamic3DTextLabel(l_str, 0x013ADFEE, FotoData[i][fPos][0], FotoData[i][fPos][1], FotoData[i][fPos][2]+3.2, 4.0);
		}
		
		i++;
	}
	foto_value = i;
	mysql_free_result();
	return 1;
}


stock LoadGym()
{
	new i = 1, data[500], l_str[150];
	
	
	mysql_query("SELECT * FROM `data_gym` ORDER BY `uid` ASC");
	mysql_store_result();

	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>iiiffffffffffii",
		GymData[i][gUID],
		GymData[i][gType],
		GymData[i][gAktywny],
		GymData[i][gPos][0], 
		GymData[i][gPos][1], 
		GymData[i][gPos][2], 
		GymData[i][gPos][3],
		GymData[i][gPos][4], 
		GymData[i][gPos][5], 
		GymData[i][gPos][6], 
		GymData[i][gPos][7], 
		GymData[i][gPos][8], 
		GymData[i][gPos][9],    
		GymData[i][gVW],
		GymData[i][gInt]);

		printf("[SILOWNIA] uid %d index: %d aktywny %d vw %d int %d x %f y %f z %f rx %f ry %f rz %f",
		GymData[i][gUID],
		i,
		GymData[i][gAktywny],
		GymData[i][gVW],
		GymData[i][gInt],
		GymData[i][gPos][0],
		GymData[i][gPos][1],
		GymData[i][gPos][2],
		GymData[i][gPos][3],
		GymData[i][gPos][4],
		GymData[i][gPos][5]);
		
		if(GymData[i][gAktywny] == 1)
		{
	        if(GymData[i][gType] == 1)//LAWECZKA
	        {
	           	GymData[i][gObject] = CreateDynamicObject(2629, GymData[i][gPos][0], GymData[i][gPos][1], GymData[i][gPos][2], GymData[i][gPos][3], GymData[i][gPos][4], GymData[i][gPos][5], GymData[i][gVW]);
				format(l_str,sizeof(l_str),"{0000ff}Laweczka do cwiczen\n {2d00b3}uid {0000ff}%d\n{0000ff}Status: {00b300}%s", i, ((GymData[i][gAktywny] == 1) ? ("Aktywny") : ("Nie aktywny")));
				GymData[i][gText3D] = CreateDynamic3DTextLabel(l_str, 0x013ADFEE, GymData[i][gPos][0], GymData[i][gPos][1], GymData[i][gPos][2], 4.0);
	        }
	        if(GymData[i][gType] == 2) //BIERZNIA
	        {
	            GymData[i][gObject] = CreateDynamicObject(2627, GymData[i][gPos][0], GymData[i][gPos][1], GymData[i][gPos][2], GymData[i][gPos][3], GymData[i][gPos][4], GymData[i][gPos][5], GymData[i][gVW]);
				format(l_str,sizeof(l_str),"{0000ff}Bierznia do cwiczen\n {2d00b3}uid {0000ff}%d\n{0000ff}Status: {00b300}%s", i, ((GymData[i][gAktywny] == 1) ? ("Aktywny") : ("Nie aktywny")));
				GymData[i][gText3D] = CreateDynamic3DTextLabel(l_str, 0x013ADFEE, GymData[i][gPos][0], GymData[i][gPos][1], GymData[i][gPos][2], 4.0);
	        }
			GymData[i][gUse] = false;
			
		}
        i++;
	}
	gym_value = i;
	mysql_free_result();
	return 1;
}

stock LoadGates()
{
    new i = 1, data[500];

	mysql_query("SELECT * FROM `data_bramy` ORDER BY `uid` ASC");
	mysql_store_result();

	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>iiiifffffffffffffffii",
		GateData[i][gUID],
		GateData[i][gFrakcja],
		GateData[i][gBramaID],
		GateData[i][gAktywny],
		GateData[i][gPos][0], 
		GateData[i][gPos][1], 
		GateData[i][gPos][2], 
		GateData[i][gPos][3],
		GateData[i][gPos][4], 
		GateData[i][gPos][5], 
		GateData[i][gPos][6], 
		GateData[i][gPos][7], 
		GateData[i][gPos][8], 
		GateData[i][gPos][9],    
		GateData[i][gPos][10],    
		GateData[i][gPos][11],    
		GateData[i][gPos][12],    
		GateData[i][gPos][13],    
		GateData[i][gPos][14],    
		GateData[i][gVW],
		GateData[i][gInt]);

		printf("[BRAMY] uid %d frakcja %d id %d index %d aktywny %d vw %d int %d x %f y %f z %f rx %f ry %f rz %f",
		GateData[i][gUID],
        GateData[i][gFrakcja],
        GateData[i][gBramaID],
		i,
		GateData[i][gAktywny],
		GateData[i][gVW],
		GateData[i][gInt],
		GateData[i][gPos][0],
		GateData[i][gPos][1],
		GateData[i][gPos][2],
		GateData[i][gPos][3],
		GateData[i][gPos][4],
		GateData[i][gPos][5]);
		
		if(GateData[i][gAktywny] == 1)
		{
            new text[500];
            format(text, 500, "{222222}[UID: {555555}%d | {222222}ID: {555555}%d]\nBrama automatyczna\n{222222}Nacisnij klawisz {555555}H", GateData[i][gUID], GateData[i][gBramaID]);
            GateData[i][gText3D] = Create3DTextLabel(text, COLOR_GREY, GateData[i][gPos][12], GateData[i][gPos][13], GateData[i][gPos][14], 10, 0);
            GateData[i][gPickup] = CreateDynamicPickup(1239, 1,  GateData[i][gPos][12], GateData[i][gPos][13], GateData[i][gPos][14], 0);
	        GateData[i][gObject] = CreateDynamicObject(GateData[i][gBramaID], GateData[i][gPos][0], GateData[i][gPos][1], GateData[i][gPos][2], GateData[i][gPos][3], GateData[i][gPos][4], GateData[i][gPos][5], GateData[i][gVW]);
            GateData[i][gGateState] = GATE_STATE_CLOSE;
	    }
        i++;
	}
	gates_value = i;
	mysql_free_result();
    return 1;
}

stock LoadViatoll()
{
	new i = 1, data[500], l_str[150];
	
	
	mysql_query("SELECT * FROM `data_viatoll` ORDER BY `uid` ASC");
	mysql_store_result();
	
	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>iiiiffffffii",
		ViatollData[i][vUID],
		ViatollData[i][vAktywny],
		ViatollData[i][vPkt],
		ViatollData[i][vKwota],
		ViatollData[i][vPos][0],
		ViatollData[i][vPos][1],
		ViatollData[i][vPos][2],
		ViatollData[i][vPos][3],
		ViatollData[i][vPos][4],
		ViatollData[i][vPos][5],
		ViatollData[i][vVW],
		ViatollData[i][vInt]);
		
		
		printf("[Viatoll] uid %d index: %d aktywny %d pkt %d kwota %d vw %d int %d x %f y %f z %f rx %f ry %f rz %f",
		ViatollData[i][vUID],
		i,
		ViatollData[i][vAktywny],
		ViatollData[i][vPkt],
		ViatollData[i][vKwota],
		ViatollData[i][vVW],
		ViatollData[i][vInt],
		ViatollData[i][vPos][0],
		ViatollData[i][vPos][1],
		ViatollData[i][vPos][2],
		ViatollData[i][vPos][3],
		ViatollData[i][vPos][4],
		ViatollData[i][vPos][5]);
		
		if(ViatollData[i][vAktywny] == 1)
		{
			format(l_str,sizeof(l_str),"Viatoll uid: %d\nKoszt przejazdu: $%d\nPobior punktow viatoll: %d\n", i, ViatollData[i][vKwota], ViatollData[i][vPkt]);
			ViatollData[i][vText3D] = CreateDynamic3DTextLabel(l_str, 0x01DFA5EE, ViatollData[i][vPos][0], ViatollData[i][vPos][1], ViatollData[i][vPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, ViatollData[i][vVW], ViatollData[i][vInt]);
			ViatollData[i][vObject] = CreateDynamicObject(16089, ViatollData[i][vPos][0], ViatollData[i][vPos][1], ViatollData[i][vPos][2], ViatollData[i][vPos][3], ViatollData[i][vPos][4], ViatollData[i][vPos][5], ViatollData[i][vVW], ViatollData[i][vInt]);
		}
		
		i++;
	}
	viatoll_value = i;
	mysql_free_result();
	return 1;
}

stock SaveViatoll(uid)
{
	if(uid == 0) return 1;
	if(uid == -1) return 1;
	
	new data[200];
	format(data,sizeof(data), "UPDATE `data_viatoll` set `pkt` = '%d' where `uid` = '%d'", 				ViatollData[uid][vPkt],         		  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_viatoll` set `kwota` = '%d' where `uid` = '%d'", 			ViatollData[uid][vKwota],         		  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_viatoll` set `aktywny` = '%d' where `uid` = '%d'", 			ViatollData[uid][vAktywny],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_viatoll` set `x` = '%f' where `uid` = '%d'", 				ViatollData[uid][vPos][0],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_viatoll` set `y` = '%f' where `uid` = '%d'", 				ViatollData[uid][vPos][1],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_viatoll` set `z` = '%f' where `uid` = '%d'", 				ViatollData[uid][vPos][2],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_viatoll` set `rx` = '%f' where `uid` = '%d'", 				ViatollData[uid][vPos][3],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_viatoll` set `ry` = '%f' where `uid` = '%d'", 				ViatollData[uid][vPos][4],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_viatoll` set `rz` = '%f' where `uid` = '%d'", 				ViatollData[uid][vPos][5],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_viatoll` set `vw` = '%d' where `uid` = '%d'", 				ViatollData[uid][vVW],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_viatoll` set `int` = '%d' where `uid` = '%d'", 				ViatollData[uid][vInt],         	  uid), mysql_query(data);
	
	
	
	if(IsValidDynamic3DTextLabel(ViatollData[uid][vText3D])) DestroyDynamic3DTextLabel(ViatollData[uid][vText3D]);
	if(IsValidDynamicObject(ViatollData[uid][vObject])) DestroyDynamicObject(ViatollData[uid][vObject]);
	if(ViatollData[uid][vAktywny] == 1)
	{
		format(data,sizeof(data),"Viatoll uid: %d\nKoszt przejazdu: $%d\nPobior punktow viatoll: %d\n", uid, ViatollData[uid][vKwota], ViatollData[uid][vPkt]);
		ViatollData[uid][vText3D] = CreateDynamic3DTextLabel(data, 0x01DFA5EE, ViatollData[uid][vPos][0], ViatollData[uid][vPos][1], ViatollData[uid][vPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, ViatollData[uid][vVW], ViatollData[uid][vInt]);
		ViatollData[uid][vObject] = CreateDynamicObject(16089, ViatollData[uid][vPos][0], ViatollData[uid][vPos][1], ViatollData[uid][vPos][2], ViatollData[uid][vPos][3], ViatollData[uid][vPos][4], ViatollData[uid][vPos][5], ViatollData[uid][vVW], ViatollData[uid][vInt]);
	}
	return 1;
}




stock LoadPozary()
{
	new i = 1, data[500];
	
	
	mysql_query("SELECT * FROM `data_pozary` ORDER BY `uid` ASC");
	mysql_store_result();

	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>iiiffffffii",
		PozarData[i][pfUID],
		PozarData[i][pfAktywny],
		PozarData[i][pfType],
		PozarData[i][pfPos][0], 
		PozarData[i][pfPos][1], 
		PozarData[i][pfPos][2], 
		PozarData[i][pfPos][3], 
		PozarData[i][pfPos][4], 
		PozarData[i][pfPos][5], 
		PozarData[i][pfVW], 
		PozarData[i][pfInt]);
		
		printf("[POZARY] uid %d index %d aktywny %d vw %d int %d x %f y %f z %f rx %f ry %f rz %f", 
		PozarData[i][pfUID],
		i,
		PozarData[i][pfAktywny],
		PozarData[i][pfVW], 
		PozarData[i][pfInt],
		PozarData[i][pfPos][0], 
		PozarData[i][pfPos][1], 
		PozarData[i][pfPos][2], 
		PozarData[i][pfPos][3], 
		PozarData[i][pfPos][4], 
		PozarData[i][pfPos][5]);
		
		i++;
	}
	pozar_value = i;
	mysql_free_result();
	return 1;
}

stock SavePozar(uid, do_save = 1)
{
	if(uid == 0) return 1;
	if(uid == -1) return 1;
	
	new data[200], modelid;
	
	if(do_save == 1)
	{
		format(data,sizeof(data), "UPDATE `data_pozary` set `type` = '%d' where `uid` = '%d'", 				PozarData[uid][pfType],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_pozary` set `aktywny` = '%d' where `uid` = '%d'", 			PozarData[uid][pfAktywny],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_pozary` set `x` = '%f' where `uid` = '%d'", 				PozarData[uid][pfPos][0],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_pozary` set `y` = '%f' where `uid` = '%d'", 				PozarData[uid][pfPos][1],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_pozary` set `z` = '%f' where `uid` = '%d'", 				PozarData[uid][pfPos][2],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_pozary` set `rx` = '%f' where `uid` = '%d'", 				PozarData[uid][pfPos][3],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_pozary` set `ry` = '%f' where `uid` = '%d'", 				PozarData[uid][pfPos][4],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_pozary` set `rz` = '%f' where `uid` = '%d'", 				PozarData[uid][pfPos][5],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_pozary` set `vw` = '%d' where `uid` = '%d'", 				PozarData[uid][pfVW],         		  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_pozary` set `int` = '%d' where `uid` = '%d'", 				PozarData[uid][pfInt],         	  	  uid), mysql_query(data);
	}
	
	if(do_save == 2) return 1;
	
	if(IsValidDynamic3DTextLabel(PozarData[uid][pfText3D])) DestroyDynamic3DTextLabel(PozarData[uid][pfText3D]);
	if(IsValidDynamicObject(PozarData[uid][pfObject])) DestroyDynamicObject(PozarData[uid][pfObject]);
	if(PozarData[uid][pfStatus] == 1)
	{
		format(data,sizeof(data),"{2EFEF7}[Pozar UID: %d | TYPE: %d]\nStan HP: %d/100\n%s", uid, PozarData[uid][pfType], floatround(PozarData[uid][pfHP]) ,(( PozarData[uid][pfType] == 1) ? ("{ff0000}Ogien explodujacy") : ("") )); 
		PozarData[uid][pfText3D] = CreateDynamic3DTextLabel(data, 0x013ADFEE, PozarData[uid][pfPos][0], PozarData[uid][pfPos][1], PozarData[uid][pfPos][2]+0.2, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, PozarData[uid][pfVW], PozarData[uid][pfInt]);
		
		switch(PozarData[uid][pfType])
		{
			case 0:  //Zwykly ogien
			{
				modelid = 18688;
			}
			case 1: //Ogien explode
			{
				PozarData[uid][pfTimer] = SetTimerEx("PozarTimerExplode", 1000*30, true, "d", uid);
				modelid = 18688;
			}
			case 2: //Duzy ziejacy ogien
			{
				modelid = 18694; 
			}
			case 3: //Sredni ogien 
			{
				modelid = 18690;
			}
		}
		PozarData[uid][pfObject] = CreateDynamicObject(modelid, PozarData[uid][pfPos][0], PozarData[uid][pfPos][1], PozarData[uid][pfPos][2], PozarData[uid][pfPos][3], PozarData[uid][pfPos][4], PozarData[uid][pfPos][5], PozarData[uid][pfVW], PozarData[uid][pfInt]);
	}
	return 1;
}

stock LoadPlamy()
{
	new i = 1, data[500];
	
	
	mysql_query("SELECT * FROM `data_plamy` ORDER BY `uid` ASC");
	mysql_store_result();

	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>iiiffffffii",
		PlamaData[i][plUID],
		PlamaData[i][plAktywny],
		PlamaData[i][plModelid],
		PlamaData[i][plPos][0], 
		PlamaData[i][plPos][1], 
		PlamaData[i][plPos][2], 
		PlamaData[i][plPos][3], 
		PlamaData[i][plPos][4], 
		PlamaData[i][plPos][5], 
		PlamaData[i][plVW], 
		PlamaData[i][plInt]);
		
		printf("[PLAMA] uid %d index %d aktywny %d vw %d int %d x %f y %f z %f rx %f ry %f rz %f", 
		PlamaData[i][plUID],
		i,
		PlamaData[i][plAktywny],
		PlamaData[i][plVW], 
		PlamaData[i][plInt],
		PlamaData[i][plPos][0], 
		PlamaData[i][plPos][1], 
		PlamaData[i][plPos][2], 
		PlamaData[i][plPos][3], 
		PlamaData[i][plPos][4], 
		PlamaData[i][plPos][5]);
		
		i++;
	}
	plama_value = i;
	mysql_free_result();
	return 1;
}

stock SavePlama(uid, do_save = 1)
{
	if(uid == 0) return 1;
	if(uid == -1) return 1;
	
	new data[200];
	
	if(do_save == 1)
	{
		format(data,sizeof(data), "UPDATE `data_plamy` set `modelid` = '%d' where `uid` = '%d'", 			PlamaData[uid][plModelid],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_plamy` set `aktywny` = '%d' where `uid` = '%d'", 			PlamaData[uid][plAktywny],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_plamy` set `x` = '%f' where `uid` = '%d'", 					PlamaData[uid][plPos][0],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_plamy` set `y` = '%f' where `uid` = '%d'", 					PlamaData[uid][plPos][1],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_plamy` set `z` = '%f' where `uid` = '%d'", 					PlamaData[uid][plPos][2],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_plamy` set `rx` = '%f' where `uid` = '%d'", 				PlamaData[uid][plPos][3],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_plamy` set `ry` = '%f' where `uid` = '%d'", 				PlamaData[uid][plPos][4],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_plamy` set `rz` = '%f' where `uid` = '%d'", 				PlamaData[uid][plPos][5],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_plamy` set `vw` = '%d' where `uid` = '%d'", 				PlamaData[uid][plVW],         		  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_plamy` set `int` = '%d' where `uid` = '%d'", 				PlamaData[uid][plInt],         	  	  uid), mysql_query(data);
	}
	
	if(do_save == 2) return 1;
	
	if(IsValidDynamic3DTextLabel(PlamaData[uid][plText3D])) DestroyDynamic3DTextLabel(PlamaData[uid][plText3D]);
	if(IsValidDynamicObject(PlamaData[uid][plObject])) DestroyDynamicObject(PlamaData[uid][plObject]);
	if(PlamaData[uid][plStatus] == 1)
	{
		format(data,sizeof(data),"[Plama UID: %d]\nStan HP: %d/100", uid, floatround(PlamaData[uid][plHP]));
		PlamaData[uid][plText3D] = CreateDynamic3DTextLabel(data, 0x013ADFEE, PlamaData[uid][plPos][0], PlamaData[uid][plPos][1], PlamaData[uid][plPos][2]+0.2, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, PlamaData[uid][plVW], PlamaData[uid][plInt]);
		PlamaData[uid][plObject] = CreateDynamicObject(PlamaData[uid][plModelid], PlamaData[uid][plPos][0], PlamaData[uid][plPos][1], PlamaData[uid][plPos][2], PlamaData[uid][plPos][3], PlamaData[uid][plPos][4], PlamaData[uid][plPos][5], PlamaData[uid][plVW], PlamaData[uid][plInt]);
	}
	return 1;
}

stock LoadKlody()
{
	new i = 1, data[500];
	
	
	mysql_query("SELECT * FROM `data_klody` ORDER BY `uid` ASC");
	mysql_store_result();

	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>iiiffffffii",
		KlodaData[i][kUID],
		KlodaData[i][kAktywny],
		KlodaData[i][kModelid],
		KlodaData[i][kPos][0], 
		KlodaData[i][kPos][1], 
		KlodaData[i][kPos][2], 
		KlodaData[i][kPos][3], 
		KlodaData[i][kPos][4], 
		KlodaData[i][kPos][5], 
		KlodaData[i][kVW], 
		KlodaData[i][kInt]);
		
		printf("[KLODY] uid %d index %d aktywny %d vw %d int %d x %f y %f z %f rx %f ry %f rz %f", 
		KlodaData[i][kUID],
		i,
		KlodaData[i][kAktywny],
		KlodaData[i][kVW], 
		KlodaData[i][kInt],
		KlodaData[i][kPos][0], 
		KlodaData[i][kPos][1], 
		KlodaData[i][kPos][2], 
		KlodaData[i][kPos][3], 
		KlodaData[i][kPos][4], 
		KlodaData[i][kPos][5]);
		
		i++;
	}
	kloda_value = i;
	mysql_free_result();
	return 1;
}

stock SaveKloda(uid, do_save = 1)
{
	if(uid == 0) return 1;
	if(uid == -1) return 1;
	
	new data[200];
	
	if(do_save == 1)
	{
		format(data,sizeof(data), "UPDATE `data_klody` set `modelid` = '%d' where `uid` = '%d'", 			KlodaData[uid][kModelid],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_klody` set `aktywny` = '%d' where `uid` = '%d'", 			KlodaData[uid][kAktywny],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_klody` set `x` = '%f' where `uid` = '%d'", 					KlodaData[uid][kPos][0],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_klody` set `y` = '%f' where `uid` = '%d'", 					KlodaData[uid][kPos][1],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_klody` set `z` = '%f' where `uid` = '%d'", 					KlodaData[uid][kPos][2],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_klody` set `rx` = '%f' where `uid` = '%d'", 				KlodaData[uid][kPos][3],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_klody` set `ry` = '%f' where `uid` = '%d'", 				KlodaData[uid][kPos][4],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_klody` set `rz` = '%f' where `uid` = '%d'", 				KlodaData[uid][kPos][5],         	  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_klody` set `vw` = '%d' where `uid` = '%d'", 				KlodaData[uid][kVW],         		  uid), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_klody` set `int` = '%d' where `uid` = '%d'", 				KlodaData[uid][kInt],         	  	  uid), mysql_query(data);
	}
	
	if(do_save == 2) return 1;
	
	if(IsValidDynamic3DTextLabel(KlodaData[uid][kText3D])) DestroyDynamic3DTextLabel(KlodaData[uid][kText3D]);
	if(IsValidDynamicObject(KlodaData[uid][kObject])) DestroyDynamicObject(KlodaData[uid][kObject]);
	if(KlodaData[uid][kStatus] == 1)
	{
		format(data,sizeof(data),"[Kloda UID: %d]\nStan HP: %d/100", uid, floatround(KlodaData[uid][kHP]));
		KlodaData[uid][kText3D] = CreateDynamic3DTextLabel(data, 0x013ADFEE, KlodaData[uid][kPos][0], KlodaData[uid][kPos][1], KlodaData[uid][kPos][2]+0.2, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, KlodaData[uid][kVW], KlodaData[uid][kInt]);
		KlodaData[uid][kObject] = CreateDynamicObject(KlodaData[uid][kModelid], KlodaData[uid][kPos][0], KlodaData[uid][kPos][1], KlodaData[uid][kPos][2], KlodaData[uid][kPos][3], KlodaData[uid][kPos][4], KlodaData[uid][kPos][5], KlodaData[uid][kVW], KlodaData[uid][kInt]);
	}
	return 1;
}



stock SaveFoto(uid)
{
	if(uid == 0) return 1;
	if(uid == -1) return 1;
	
	new data[200];
	format(data,sizeof(data), "UPDATE `data_fotoradary` set `max` = '%d' where `uid` = '%d'", 				FotoData[uid][fMaxKM],         		  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_fotoradary` set `kara` = '%d' where `uid` = '%d'", 				FotoData[uid][fKara],         		  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_fotoradary` set `aktywny` = '%d' where `uid` = '%d'", 			FotoData[uid][fAktywny],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_fotoradary` set `x` = '%f' where `uid` = '%d'", 				FotoData[uid][fPos][0],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_fotoradary` set `y` = '%f' where `uid` = '%d'", 				FotoData[uid][fPos][1],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_fotoradary` set `z` = '%f' where `uid` = '%d'", 				FotoData[uid][fPos][2],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_fotoradary` set `rx` = '%f' where `uid` = '%d'", 				FotoData[uid][fPos][3],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_fotoradary` set `ry` = '%f' where `uid` = '%d'", 				FotoData[uid][fPos][4],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_fotoradary` set `rz` = '%f' where `uid` = '%d'", 				FotoData[uid][fPos][5],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_fotoradary` set `vw` = '%d' where `uid` = '%d'", 				FotoData[uid][fVW],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_fotoradary` set `int` = '%d' where `uid` = '%d'", 				FotoData[uid][fInt],         	  uid), mysql_query(data);
	
	
	if(IsValidDynamic3DTextLabel(FotoData[uid][fText3D])) DestroyDynamic3DTextLabel(FotoData[uid][fText3D]);
	if(IsValidDynamicObject(FotoData[uid][fObject])) DestroyDynamicObject(FotoData[uid][fObject]);
	if(FotoData[uid][fAktywny] == 1)
	{
		//CreateDynamic3DTextLabel(const text[], color, Float:x, Float:y, Float:z, Float:drawdistance, attachedplayer = INVALID_PLAYER_ID, attachedvehicle = INVALID_VEHICLE_ID, testlos = 0, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = STREAMER_3D_TEXT_LABEL_SD);
		format(data,sizeof(data),"Fotoradar uid %d\nMaksymalna predkosc: %d km/h\nKara za przekroczenie predkosci: $%d\nStatus: %s", uid, FotoData[uid][fMaxKM], FotoData[uid][fKara], ((FotoData[uid][fAktywny] == 1) ? ("Aktywny") : ("Nie aktywny")));
		FotoData[uid][fText3D] = CreateDynamic3DTextLabel(data, 0x013ADFEE, FotoData[uid][fPos][0], FotoData[uid][fPos][1], FotoData[uid][fPos][2]+3.2, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, FotoData[uid][fVW], FotoData[uid][fInt]);
		FotoData[uid][fObject] = CreateDynamicObject(18880, FotoData[uid][fPos][0], FotoData[uid][fPos][1], FotoData[uid][fPos][2], FotoData[uid][fPos][3], FotoData[uid][fPos][4], FotoData[uid][fPos][5], FotoData[uid][fVW], FotoData[uid][fInt]);
	}
	return 1;
}
//CreateDynamic3DTextLabel(const text[], color, Float:x, Float:y, Float:z, Float:drawdistance, attachedplayer = INVALID_PLAYER_ID, attachedvehicle = INVALID_VEHICLE_ID, testlos = 0, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = STREAMER_3D_TEXT_LABEL_SD);


stock SaveGym(uid)
{
	if(uid == 0) return 1;
	if(uid == -1) return 1;
	
	new data[200];
	format(data,sizeof(data), "UPDATE `data_gym` set `type` = '%d' where `uid` = '%d'", 				GymData[uid][gType],         		  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_gym` set `aktywny` = '%d' where `uid` = '%d'", 			GymData[uid][gAktywny],         		  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_gym` set `x` = '%f' where `uid` = '%d'", 				GymData[uid][gPos][0],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_gym` set `y` = '%f' where `uid` = '%d'", 				GymData[uid][gPos][1],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_gym` set `z` = '%f' where `uid` = '%d'", 				GymData[uid][gPos][2],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_gym` set `rx` = '%f' where `uid` = '%d'", 				GymData[uid][gPos][3],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_gym` set `ry` = '%f' where `uid` = '%d'", 				GymData[uid][gPos][4],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_gym` set `rz` = '%f' where `uid` = '%d'", 				GymData[uid][gPos][5],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_gym` set `px` = '%f' where `uid` = '%d'", 				GymData[uid][gPos][6],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_gym` set `py` = '%f' where `uid` = '%d'", 				GymData[uid][gPos][7],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_gym` set `pz` = '%f' where `uid` = '%d'", 				GymData[uid][gPos][8],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_gym` set `pang` = '%f' where `uid` = '%d'", 				GymData[uid][gPos][9],         	  uid), mysql_query(data);

	format(data,sizeof(data), "UPDATE `data_gym` set `vw` = '%d' where `uid` = '%d'", 				GymData[uid][gVW],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_gym` set `int` = '%d' where `uid` = '%d'", 				GymData[uid][gInt],         	  uid), mysql_query(data);
	
	
	
	if(IsValidDynamic3DTextLabel(GymData[uid][gText3D])) DestroyDynamic3DTextLabel(GymData[uid][gText3D]);
	if(IsValidDynamicObject(GymData[uid][gObject])) DestroyDynamicObject(GymData[uid][gObject]);
	if(GymData[uid][gAktywny] == 1)
	{
		if(GymData[uid][gType] == 1) //laweczka
		{
			format(data,sizeof(data),"{0000ff}Bierznia do cwiczen\n {2d00b3}uid {0000ff}%d\n{0000ff}Status: {00b300}%s", uid, ((GymData[uid][gAktywny] == 1) ? ("Aktywny") : ("Nie aktywny")));
			GymData[uid][gText3D] = CreateDynamic3DTextLabel(data, 0x01DFA5EE, GymData[uid][gPos][0], GymData[uid][gPos][1], GymData[uid][gPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GymData[uid][gVW], GymData[uid][gInt]);
			GymData[uid][gObject] = CreateDynamicObject(2629, GymData[uid][gPos][0], GymData[uid][gPos][1], GymData[uid][gPos][2], GymData[uid][gPos][3], GymData[uid][gPos][4], GymData[uid][gPos][5],  GymData[uid][gVW], GymData[uid][gInt]);
		}
		if(GymData[uid][gType] == 2) //bierznia
		{
			format(data,sizeof(data),"{0000ff}Bierznia do cwiczen\n {2d00b3}uid {0000ff}%d\n{0000ff}Status: {00b300}%s", uid, ((GymData[uid][gAktywny] == 1) ? ("Aktywny") : ("Nie aktywny")));
			GymData[uid][gText3D] = CreateDynamic3DTextLabel(data, 0x01DFA5EE, GymData[uid][gPos][0], GymData[uid][gPos][1], GymData[uid][gPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GymData[uid][gVW], GymData[uid][gInt]);
			GymData[uid][gObject] = CreateDynamicObject(2627, GymData[uid][gPos][0], GymData[uid][gPos][1], GymData[uid][gPos][2], GymData[uid][gPos][3], GymData[uid][gPos][4], GymData[uid][gPos][5],  GymData[uid][gVW], GymData[uid][gInt]);
		}
	}
	return 1;
}

stock SaveGates(uid)
{
	if(uid == 0) return 1;
	if(uid == -1) return 1;
	
	new data[200];
	format(data,sizeof(data), "UPDATE `data_bramy` set `bramaid` = '%d' where `uid` = '%d'", 				GateData[uid][gBramaID],         		  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_bramy` set `aktywny` = '%d' where `uid` = '%d'", 			GateData[uid][gAktywny],         		  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_bramy` set `frakcja` = '%d' where `uid` = '%d'", 			GateData[uid][gFrakcja],         		  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_bramy` set `xclose` = '%f' where `uid` = '%d'", 				GateData[uid][gPos][0],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_bramy` set `yclose` = '%f' where `uid` = '%d'", 				GateData[uid][gPos][1],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_bramy` set `zclose` = '%f' where `uid` = '%d'", 				GateData[uid][gPos][2],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_bramy` set `rxclose` = '%f' where `uid` = '%d'", 				GateData[uid][gPos][3],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_bramy` set `ryclose` = '%f' where `uid` = '%d'", 				GateData[uid][gPos][4],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_bramy` set `rzclose` = '%f' where `uid` = '%d'", 				GateData[uid][gPos][5],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_bramy` set `xopen` = '%f' where `uid` = '%d'", 				GateData[uid][gPos][6],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_bramy` set `yopen` = '%f' where `uid` = '%d'", 				GateData[uid][gPos][7],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_bramy` set `zopen` = '%f' where `uid` = '%d'", 				GateData[uid][gPos][8],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_bramy` set `xropen` = '%f' where `uid` = '%d'", 				GateData[uid][gPos][9],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_bramy` set `yropen` = '%f' where `uid` = '%d'", 				GateData[uid][gPos][10],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_bramy` set `zropen` = '%f' where `uid` = '%d'", 				GateData[uid][gPos][11],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_bramy` set `terx` = '%f' where `uid` = '%d'", 				GateData[uid][gPos][12],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_bramy` set `tery` = '%f' where `uid` = '%d'", 				GateData[uid][gPos][13],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_bramy` set `terz` = '%f' where `uid` = '%d'", 				GateData[uid][gPos][14],         	  uid), mysql_query(data);

	format(data,sizeof(data), "UPDATE `data_bramy` set `vw` = '%d' where `uid` = '%d'", 				GateData[uid][gVW],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_bramy` set `int` = '%d' where `uid` = '%d'", 				GateData[uid][gInt],         	  uid), mysql_query(data);
	
	
    ReloadGates();
    
	return 1;
}

stock ReloadGates()
{
	for(new uid = 0; uid < gates_value; uid++)
	{
		DestroyDynamicObject(GateData[uid][gObject]);
        Delete3DTextLabel(GateData[uid][gText3D]);
        DestroyDynamicPickup(GateData[uid][gPickup]);
	}
	LoadGates();
	return 1;
}


stock LoadObiekty()
{
	new i = 1, data[500];
	obiekt_value = 1;
	
	mysql_query("SELECT * FROM `data_obiekty` ORDER BY `uid` ASC");
	mysql_store_result();

	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>iiiiiiffffffiiiffffff",
		ObjectData[i][bUID],
		ObjectData[i][bAktywny],
		ObjectData[i][oVW], 
		ObjectData[i][oInt],
		ObjectData[i][oModel],
		ObjectData[i][oType],
		ObjectData[i][bPos][0], 
		ObjectData[i][bPos][1], 
		ObjectData[i][bPos][2], 
		ObjectData[i][bPos][3], 
		ObjectData[i][bPos][4], 
		ObjectData[i][bPos][5],
		ObjectData[i][oRequisteFirma],
		ObjectData[i][oRequisteFrakcja],
		ObjectData[i][oCanMoved],
		ObjectData[i][oPosMove][0], 
		ObjectData[i][oPosMove][1], 
		ObjectData[i][oPosMove][2], 
		ObjectData[i][oPosMove][3], 
		ObjectData[i][oPosMove][4], 
		ObjectData[i][oPosMove][5]
		);
		
		printf("[ObiektY] uid %d index %d aktywny %d vw %d int %d modelid %d     x %f y %f z %f rx %f ry %f rz %f", 
		ObjectData[i][bUID],
		i,
		ObjectData[i][bAktywny],
		ObjectData[i][oVW], 
		ObjectData[i][oInt],
		ObjectData[i][oModel],
		ObjectData[i][bPos][0], 
		ObjectData[i][bPos][1], 
		ObjectData[i][bPos][2], 
		ObjectData[i][bPos][3], 
		ObjectData[i][bPos][4], 
		ObjectData[i][bPos][5]);
		
		if(ObjectData[i][bAktywny] == 1) 
		{
			ObjectData[i][oObject] = CreateDynamicObject(ObjectData[i][oModel], ObjectData[i][bPos][0], ObjectData[i][bPos][1], ObjectData[i][bPos][2], ObjectData[i][bPos][3], ObjectData[i][bPos][4], ObjectData[i][bPos][5], ObjectData[i][oVW], ObjectData[i][oInt]);
			
			if(ObjectData[i][oType] == 2)
			{
				ObjectData[i][oText3D]=CreateDynamic3DTextLabel("{00b300}Przejazd graniczny\n{00ffff}Oplata za przejazd: {00b300}$100\n{00ffff}Nacisnij {d90000}spacje, {00ffff}aby zaplacic i otworzyc szlaban.", 0xD7DF01EE, ObjectData[i][bPos][0], ObjectData[i][bPos][1], ObjectData[i][bPos][2], 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, ObjectData[i][oVW], ObjectData[i][oInt]);
				//native STREAMER_TAG_3D_TEXT_LABEL CreateDynamic3DTextLabel(const text[], color, Float:x, Float:y, Float:z, Float:drawdistance, attachedplayer = INVALID_PLAYER_ID, attachedvehicle = INVALID_VEHICLE_ID, testlos = 0, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = STREAMER_3D_TEXT_LABEL_SD);
			}
		}
		
		i++;
	}
	obiekt_value = i;
	mysql_free_result();
	return 1;
}


stock SaveObject(uid)
{
	if(uid == -1) return 1;
	if(uid == 0)  return 1;
	
	new data[200];
	format(data,sizeof(data), "UPDATE `data_obiekty` set `x` = '%f' where `uid` = '%d'", 					ObjectData[uid][bPos][0],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_obiekty` set `y` = '%f' where `uid` = '%d'", 					ObjectData[uid][bPos][1],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_obiekty` set `z` = '%f' where `uid` = '%d'", 					ObjectData[uid][bPos][2],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_obiekty` set `rx` = '%f' where `uid` = '%d'", 					ObjectData[uid][bPos][3],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_obiekty` set `ry` = '%f' where `uid` = '%d'", 					ObjectData[uid][bPos][4],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_obiekty` set `rz` = '%f' where `uid` = '%d'", 					ObjectData[uid][bPos][5],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_obiekty` set `vw` = '%d' where `uid` = '%d'", 					ObjectData[uid][oVW],         	 	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_obiekty` set `int` = '%d' where `uid` = '%d'", 					ObjectData[uid][oInt],         	  	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_obiekty` set `aktywny` = '%d' where `uid` = '%d'", 				ObjectData[uid][bAktywny],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_obiekty` set `modelid` = '%d' where `uid` = '%d'", 				ObjectData[uid][oModel],         	  uid), mysql_query(data);
	
	format(data,sizeof(data), "UPDATE `data_obiekty` set `type` = '%d' where `uid` = '%d'", 				ObjectData[uid][oType],         	 	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_obiekty` set `rfirma` = '%d' where `uid` = '%d'", 				ObjectData[uid][oRequisteFirma],          uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_obiekty` set `rfrakcja` = '%d' where `uid` = '%d'", 			ObjectData[uid][oRequisteFrakcja],     	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_obiekty` set `move` = '%d' where `uid` = '%d'", 				ObjectData[uid][oCanMoved],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_obiekty` set `mx` = '%f' where `uid` = '%d'", 					ObjectData[uid][oPosMove][0],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_obiekty` set `my` = '%f' where `uid` = '%d'", 					ObjectData[uid][oPosMove][1],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_obiekty` set `mz` = '%f' where `uid` = '%d'", 					ObjectData[uid][oPosMove][2],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_obiekty` set `mrx` = '%f' where `uid` = '%d'", 					ObjectData[uid][oPosMove][3],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_obiekty` set `mry` = '%f' where `uid` = '%d'", 					ObjectData[uid][oPosMove][4],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_obiekty` set `mrz` = '%f' where `uid` = '%d'", 					ObjectData[uid][oPosMove][5],         	  uid), mysql_query(data);
	
	
	if(IsValidDynamicObject(ObjectData[uid][oObject])) DestroyDynamicObject(ObjectData[uid][oObject]);
	if(IsValidDynamic3DTextLabel(ObjectData[uid][oText3D])) DestroyDynamic3DTextLabel(ObjectData[uid][oText3D]);

	if(ObjectData[uid][bAktywny] == 1)
	{
		ObjectData[uid][oObject] = CreateDynamicObject(ObjectData[uid][oModel], ObjectData[uid][bPos][0], ObjectData[uid][bPos][1], ObjectData[uid][bPos][2], ObjectData[uid][bPos][3], ObjectData[uid][bPos][4], ObjectData[uid][bPos][5], ObjectData[uid][oVW], ObjectData[uid][oInt]);
		
		if(ObjectData[uid][oType] == 2)
		{
			ObjectData[uid][oText3D]=CreateDynamic3DTextLabel("Przejazd graniczny\nOplata za przejazd: $100\nNacisnij spacje, aby zaplacic i otworzyc szlaban.", 0xD7DF01EE, ObjectData[uid][bPos][0], ObjectData[uid][bPos][1], ObjectData[uid][bPos][2], 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, ObjectData[uid][oVW], ObjectData[uid][oInt]);
		}
	}
	return 1;
}



stock SaveBuild(uid)
{
	if(uid == 0) return 1;
	if(uid == -1) return 1;
	
	new data[200];
	format(data,sizeof(data), "UPDATE `data_budynki` set `name` = '%s' where `uid` = '%d'", 				BudynekData[uid][bName],         		  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_budynki` set `owneruid` = '%d' where `uid` = '%d'", 			BudynekData[uid][bOwnerUID],        	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_budynki` set `owner` = '%s' where `uid` = '%d'", 				BudynekData[uid][bOwnerNick],        	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_budynki` set `pickup` = '%d' where `uid` = '%d'", 				BudynekData[uid][bPickup_PWN_ID],         uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_budynki` set `mapicon` = '%d' where `uid` = '%d'", 				BudynekData[uid][bMapIcon_PWN_ID],        uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_budynki` set `type` = '%d' where `uid` = '%d'", 				BudynekData[uid][bType],         		  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_budynki` set `vw` = '%d' where `uid` = '%d'", 					BudynekData[uid][bVW],        			  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_budynki` set `int` = '%d' where `uid` = '%d'", 					BudynekData[uid][bInt_IN],        			  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_budynki` set `x_pos_in` = '%f' where `uid` = '%d'", 			BudynekData[uid][bPos_IN][0],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_budynki` set `y_pos_in` = '%f' where `uid` = '%d'", 			BudynekData[uid][bPos_IN][1],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_budynki` set `z_pos_in` = '%f' where `uid` = '%d'", 			BudynekData[uid][bPos_IN][2],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_budynki` set `x_pos_out` = '%f' where `uid` = '%d'", 			BudynekData[uid][bPos_OUT][0],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_budynki` set `y_pos_out` = '%f' where `uid` = '%d'", 			BudynekData[uid][bPos_OUT][1],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_budynki` set `z_pos_out` = '%f' where `uid` = '%d'", 			BudynekData[uid][bPos_OUT][2],         	  uid), mysql_query(data);
	
	format(data,sizeof(data), "UPDATE `data_budynki` set `price` = '%d' where `uid` = '%d'", 				BudynekData[uid][bPrice],         	 	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_budynki` set `locked` = '%d' where `uid` = '%d'", 				BudynekData[uid][bLocked],         	 	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_budynki` set `level` = '%d' where `uid` = '%d'", 				BudynekData[uid][bHouseLevel],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_budynki` set `opis` = '%s' where `uid` = '%d'", 				BudynekData[uid][bHouseOpis],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_budynki` set `interior_house` = '%d' where `uid` = '%d'", 		BudynekData[uid][bHouseLevel],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_budynki` set `aktywny` = '%d' where `uid` = '%d'", 				BudynekData[uid][bAktywny],         	  uid), mysql_query(data);
	
	return 1;
}


stock LoadBuilds()
{
	new i = 1, data[500];
	mysql_query("SELECT * FROM `data_budynki` ORDER BY `uid` ASC");
	mysql_store_result();

	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>iis[24]iiiiiffffffiiis[30]iis[30]",
		BudynekData[i][bUID],
		BudynekData[i][bOwnerUID],
		BudynekData[i][bOwnerNick],
		BudynekData[i][bPickup_PWN_ID],
		BudynekData[i][bMapIcon_PWN_ID],
		BudynekData[i][bType],
		BudynekData[i][bVW],
		BudynekData[i][bInt_IN],
		BudynekData[i][bPos_IN][0],
		BudynekData[i][bPos_IN][1],
		BudynekData[i][bPos_IN][2],
		BudynekData[i][bPos_OUT][0],
		BudynekData[i][bPos_OUT][1],
		BudynekData[i][bPos_OUT][2],
		BudynekData[i][bPrice],
		BudynekData[i][bLocked],
		BudynekData[i][bHouseLevel],
		BudynekData[i][bHouseOpis],
		BudynekData[i][bHouseInterior],
		BudynekData[i][bAktywny],
		BudynekData[i][bName]);
		
		printf("[BUDYNKI] uid %d index %d ownerid %d owner %s aktywny %d type %d", BudynekData[i][bUID], i,BudynekData[i][bOwnerUID],BudynekData[i][bOwnerNick],BudynekData[i][bAktywny],BudynekData[i][bType]);
		
		if(BudynekData[i][bAktywny] == 1) 
		{
			BudynekData[i][bPickup]  = CreateDynamicPickup(BudynekData[i][bPickup_PWN_ID], 23, BudynekData[i][bPos_OUT][0], BudynekData[i][bPos_OUT][1], BudynekData[i][bPos_OUT][2], 0, 0);
			BudynekData[i][bPickup2]  = CreateDynamicPickup(BudynekData[i][bPickup_PWN_ID], 23, BudynekData[i][bPos_IN][0], BudynekData[i][bPos_IN][1], BudynekData[i][bPos_IN][2], i, BudynekData[i][bInt_IN]);
			
			if(BudynekData[i][bMapIcon_PWN_ID] != -1)
			{
				BudynekData[i][bMapIcon] = CreateDynamicMapIcon(BudynekData[i][bPos_OUT][0], BudynekData[i][bPos_OUT][1], BudynekData[i][bPos_OUT][2], BudynekData[i][bMapIcon_PWN_ID], -1, 0, 0);
			}
			if(BudynekData[i][bType] == 14)
			{
				HouseChangeInterior(i, BudynekData[i][bHouseInterior]);
				HouseText3D(i);
			}
		}
		i++;
	}
	build_value = i;
	mysql_free_result();
	return 1;
}

stock HouseText3D(uid)
{
	if(IsValidDynamic3DTextLabel(BudynekData[uid][bText3D])) DestroyDynamic3DTextLabel(BudynekData[uid][bText3D]);
	if(BudynekData[uid][bType] != 14) return 1; //Nie jest to typ budynku - dom.
	
	
	new data[500];
	new czyzamkniety[64];
	if(BudynekData[uid][bLocked] == 0) czyzamkniety = "{04B431}Otwarty";
	if(BudynekData[uid][bLocked] == 1) czyzamkniety = "{FE2E2E}Zamkniety";
	if(BudynekData[uid][bOwnerUID]== -1) 	format(BudynekData[uid][bOwnerNick],5,"Brak");
	if(BudynekData[uid][bHouseOpis] == -1) format(BudynekData[uid][bHouseOpis],5,"Brak");
	
	format(data,sizeof(data),"{01DF01}MIESZKANIE\n{04B404}UID: {0080FF}%d\n{04B404}Wlasciciel: {0080FF}%s\n{04B404}Zamek: %s\n{04B404}Cena: {0080FF}%d\n{04B404}Interior: {0080FF}%d\n{04B404}Poziom: {0080FF}%d\n{04B404}Opis: {0080FF}%s",uid,BudynekData[uid][bOwnerNick],czyzamkniety,BudynekData[uid][bPrice],BudynekData[uid][bHouseInterior],BudynekData[uid][bHouseLevel], BudynekData[uid][bHouseOpis]);
	BudynekData[uid][bText3D]=CreateDynamic3DTextLabel(data, 0x088A08EE, BudynekData[uid][bPos_OUT][0], BudynekData[uid][bPos_OUT][1], BudynekData[uid][bPos_OUT][2], 4);
	return 1;
}

stock HouseChangeInterior(uid, interior)
{
	if(interior == 1)
	{
		BudynekData[uid][bPos_IN][0] = 235.4160;
		BudynekData[uid][bPos_IN][1] = 1186.6793;
		BudynekData[uid][bPos_IN][2] = 1080.2578;
		BudynekData[uid][bInt_IN] = 3;
		BudynekData[uid][bHouseInterior] = 1;
	}
	if(interior == 2)
	{
		BudynekData[uid][bPos_IN][0] =  226.7872;
		BudynekData[uid][bPos_IN][1] = 1240.0709;
		BudynekData[uid][bPos_IN][2] = 1082.1406;
		BudynekData[uid][bInt_IN] = 2;
		BudynekData[uid][bHouseInterior] = 2;
	}
	if(interior == 3)
	{
		BudynekData[uid][bPos_IN][0] = 223.1551;
		BudynekData[uid][bPos_IN][1] = 1287.0758;
		BudynekData[uid][bPos_IN][2] = 1082.1406;
		BudynekData[uid][bInt_IN] = 1;
		BudynekData[uid][bHouseInterior] = 3;
	}
	if(interior == 4)
	{
		BudynekData[uid][bPos_IN][0] = 225.8609;
		BudynekData[uid][bPos_IN][1] = 1021.4437;
		BudynekData[uid][bPos_IN][2] = 1084.0177;
		BudynekData[uid][bInt_IN] = 7;
		BudynekData[uid][bHouseInterior] = 4;
	}
	if(interior == 5)
	{
		BudynekData[uid][bPos_IN][0] = 295.1990;
		BudynekData[uid][bPos_IN][1] = 1472.2556;
		BudynekData[uid][bPos_IN][2] = 1080.2578;
		BudynekData[uid][bInt_IN] = 15;
		BudynekData[uid][bHouseInterior] = 5;
	}
	if(interior == 6)
	{
		BudynekData[uid][bPos_IN][0] = 327.9004;
		BudynekData[uid][bPos_IN][1] = 1477.7244;
		BudynekData[uid][bPos_IN][2] = 1084.4375;
		BudynekData[uid][bInt_IN] = 15;
		BudynekData[uid][bHouseInterior] = 6;
	}
	if(interior == 7)
	{
		BudynekData[uid][bPos_IN][0] = 387.2211;
		BudynekData[uid][bPos_IN][1] = 1471.6624;
		BudynekData[uid][bPos_IN][2] = 1080.1949;
		BudynekData[uid][bInt_IN] = 15;
		BudynekData[uid][bHouseInterior] = 7;
	}
	if(interior == 8)
	{
		BudynekData[uid][bPos_IN][0] = 1298.9826;
		BudynekData[uid][bPos_IN][1] = -797.0101;
		BudynekData[uid][bPos_IN][2] = 1084.0078;
		BudynekData[uid][bInt_IN] = 5;
		BudynekData[uid][bHouseInterior] = 8;
	}
	if(interior == 9)
	{
		BudynekData[uid][bPos_IN][0] = 835.9062;
		BudynekData[uid][bPos_IN][1] = -2017.3603;
		BudynekData[uid][bPos_IN][2] = 13.1020;
		BudynekData[uid][bInt_IN] = 9;
		BudynekData[uid][bHouseInterior] = 9;
	}
	if(interior == 10)
	{
		BudynekData[uid][bPos_IN][0] = 1856.52;
		BudynekData[uid][bPos_IN][1] = 641.39;
		BudynekData[uid][bPos_IN][2] = 10.90;
		BudynekData[uid][bInt_IN] = 10;
		BudynekData[uid][bHouseInterior] = 10;
	}
	
	if(IsValidDynamicPickup(BudynekData[uid][bPickup2])) DestroyDynamicPickup(BudynekData[uid][bPickup2]);
	BudynekData[uid][bPickup2]  = CreateDynamicPickup(BudynekData[uid][bPickup_PWN_ID], 23, BudynekData[uid][bPos_IN][0], BudynekData[uid][bPos_IN][1], BudynekData[uid][bPos_IN][2]);
	return 1;
}



forward spawned(playerid);
public spawned(playerid)
{
	SetPlayerVirtualWorld(playerid, 0);
	EnablePlayerCameraTarget(playerid, 0);
	
	//FadePlayerConnect(playerid);
	//InterpolateCameraPos(playerid, 2871.680175, 886.360168, 30.301448, 2772.565673, 1026.152099, 31.044286, 15000);
	//InterpolateCameraLookAt(playerid, 2869.102783, 890.480041, 29.125080, 2776.396484, 1023.047180, 30.217283, 16000);

	TogglePlayerControllable(playerid, false);
	return 1;
}


stock PlayerStatsLoad(playerid, type = 0)
{
	new serial[40]; gpci(playerid, serial, sizeof(serial));
	format(PlayerData[playerid][pGPCI], 40, "%s", serial);
	GetPlayerIp(playerid, PlayerData[playerid][pIP], 24);
	GetPlayerName(playerid, PlayerData[playerid][pName], MAX_PLAYER_NAME);
	
	new data[1000];
	
	if(type == 0) //Odnalezienie konta gracza
	{
		if(CheckBanned(playerid) == 1) return 1;
		format(data,sizeof(data), "SELECT `nick` from `data_players` WHERE `nick`= '%s'", PlayerData[playerid][pName]);
		mysql_query(data);
		mysql_store_result();
		if(mysql_num_rows() == 1)
		{
			format(data,sizeof(data), "SELECT `UID` FROM `data_players` WHERE `nick` = '%s'", PlayerData[playerid][pName]);
			mysql_query(data);
			mysql_store_result();
			mysql_fetch_row(data, "|");
			mysql_free_result();
			sscanf(data, "p<|>i",
			PlayerData[playerid][pUID]);
			
			
			format(data,sizeof(data), "SELECT `password`, `salt` FROM `data_players` WHERE `uid`= '%d'", PlayerData[playerid][pUID]);
			mysql_query(data);
			mysql_store_result();
			mysql_fetch_row(data, "|");
			sscanf(data, "p<|>s[128]s[11]",
			PlayerData[playerid][pPassword],
			PlayerData[playerid][pSalt]);
			
			format(data,sizeof(data),"\
			{a4a4a4}Witaj ponownie %s,\n\
			Wpisz ponizej swoje haslo, aby sie zalogowac:", PlayerData[playerid][pName]);
			ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Zaloguj sie", data, "Zaloguj", "Zamknij");
			
		}
		else
		{
			format(data,sizeof(data),"\
			{a4a4a4}Witaj %s,\n\
			Wpisz ponizej swoje haslo przez ktore bedziesz mogl grac na serwerze:", PlayerData[playerid][pName]);
			ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, "Rejestracja konta", data, "Rejestruj", "Zamknij");
		}
		mysql_free_result();
		return 1;
	}
	
	if(type == 1) //Wczytywanie statystyk konta
	{
		new last_ip[24], last_gpci[40], last_playerid, firma_exp, firma_towary, firma_kasa;
		
		
		
		format(data,sizeof(data),"SELECT * FROM `data_players` WHERE `uid` = '%d'", PlayerData[playerid][pUID]);
		mysql_query(data);
		mysql_store_result();

		if(mysql_num_rows() == 1)
		{
			while(mysql_fetch_row(data))
			{
				sscanf(data, "p<|>iis[24]s[128]s[11]s[17]s[40]fiiiffffiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii",
				PlayerData[playerid][pUID],
				last_playerid,
				PlayerData[playerid][pName],
				PlayerData[playerid][pPassword],
				PlayerData[playerid][pSalt],
				last_ip,
				last_gpci,
				PlayerData[playerid][pHP],
				PlayerData[playerid][pCash],
				PlayerData[playerid][pCashBank],
				PlayerData[playerid][pScore],
				PlayerData[playerid][pPos][0],
				PlayerData[playerid][pPos][1],
				PlayerData[playerid][pPos][2],
				PlayerData[playerid][pPos][3],
				PlayerData[playerid][pVW],
				PlayerData[playerid][pInt],
				PlayerData[playerid][pLider],
				PlayerData[playerid][pFirma],
				PlayerData[playerid][pFrakcja],
				PlayerData[playerid][pRanga],
				PlayerData[playerid][pSkin],
				PlayerData[playerid][pMuted],
				PlayerData[playerid][pJail],
				PlayerData[playerid][pCzasGodzin],
				PlayerData[playerid][pCzasMinut],
				PlayerData[playerid][pVipTime],
				PlayerData[playerid][pSkuty],
				PlayerData[playerid][pLevel],
				PlayerData[playerid][pSila],
				PlayerData[playerid][pDowodOsobisty],
				PlayerData[playerid][pDowodRejestracyjny],
				PlayerData[playerid][pUbezpieczenie],
				PlayerData[playerid][pPaszport],
				PlayerData[playerid][pWarns],
				PlayerData[playerid][pWantedLevel],
				PlayerData[playerid][pLotto],
				PlayerData[playerid][pKluczeCar],
				PlayerData[playerid][pSen],
				PlayerData[playerid][pGlod],
				PlayerData[playerid][pKartaADR],
				PlayerData[playerid][pFirmaRanga],
				firma_exp,
				firma_towary,
				firma_kasa,
				PlayerData[playerid][pCzasSluzbaGodz],
				PlayerData[playerid][pCzasSluzbaMin],
				PlayerData[playerid][pPrivCars],
				PlayerData[playerid][pPrivHouse],
				PlayerData[playerid][pPkt],
				PlayerData[playerid][pDriveTimeH],
				PlayerData[playerid][pDriveTimeM],
				PlayerData[playerid][pPktViatoll],
				PlayerData[playerid][pPrawoJazdyT][PRAWKO_TYPE_A],
				PlayerData[playerid][pPrawoJazdyT][PRAWKO_TYPE_B],
				PlayerData[playerid][pPrawoJazdyT][PRAWKO_TYPE_C],
				PlayerData[playerid][pPrawoJazdyT][PRAWKO_TYPE_D],
				PlayerData[playerid][pPrawoJazdyT][PRAWKO_TYPE_L],
				PlayerData[playerid][pPrawoJazdyP][PRAWKO_TYPE_A],
				PlayerData[playerid][pPrawoJazdyP][PRAWKO_TYPE_B],
				PlayerData[playerid][pPrawoJazdyP][PRAWKO_TYPE_C],
				PlayerData[playerid][pPrawoJazdyP][PRAWKO_TYPE_D],
				PlayerData[playerid][pPrawoJazdyP][PRAWKO_TYPE_L]
				);
			}
		}
		
		

		
		format(data,sizeof(data), "UPDATE `data_players` set `playerid` = '%d' where `uid` = '%d'", 				playerid,  	 	 PlayerData[playerid][pUID]), mysql_query(data);
		//format(data,sizeof(data), "UPDATE `data_przedmioty` set `use` = '%d' where `owneruid` = '%d'", 					0,  	 	 PlayerData[playerid][pUID]), mysql_query(data);
		
		StopAudioStreamForPlayer(playerid);
		
		SetPlayerWantedLevel(playerid, PlayerData[playerid][pWantedLevel]);
		SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
		SetPlayerVirtualWorldEx(playerid, PlayerData[playerid][pVW]);
		SetPlayerInteriorEx(playerid, PlayerData[playerid][pInt]);
		SetPlayerPos(playerid, 2438.0369,2376.1670,10.8203);
		SetPlayerFacingAngle(playerid, 93.3973);
		TogglePlayerSpectating(playerid, false);
		SetPlayerHealth(playerid, PlayerData[playerid][pHP]);
		SetPlayerScore(playerid, PlayerData[playerid][pScore]);
		GivePlayerMoney(playerid, PlayerData[playerid][pCash]);
		PlayerData[playerid][pLogged] = true;

		//if(GetPlayerVipStatus(playerid) == 0) return ShowPlayerDialog(playerid, DIALOG_START_TELEPORT, DIALOG_STYLE_LIST, "Wybor lokalizacji spawnu", "Warszawa\nSan Fierro\nLos Santos", "Wybierz", "Zamknij");

		
		SetTimerEx("spawn", 200, false, "d", playerid);
		
		
		
		if(PlayerData[playerid][pSkuty] == 1)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
			SetPlayerAttachedObject(playerid, 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
		}
		if(PlayerData[playerid][pJail] != 0)
		{
			SetPlayerPos(playerid, 346.870025,309.259033,999.155700);
			SetPlayerInteriorEx(playerid, 6);
			SetPlayerVirtualWorldEx(playerid, playerid+100);
		}
		
		format(data,sizeof(data),"{FE9A2E}Witaj, %s (UID: %d, SAMPID: %d, IP: %s). Pomyslnie zostales zalogowany na naszym serwerze, zyczymy milej gry!", PlayerData[playerid][pName], PlayerData[playerid][pUID], playerid, PlayerData[playerid][pIP]);
		SendClientMessage(playerid, -1, data);
		
		
		if(gettime() <= PlayerData[playerid][pVipTime])
		{
			new CzasVipa, Days, Hours, Minutes;
			CzasVipa = PlayerData[playerid][pVipTime] - gettime();
			if(CzasVipa >= 86400)
			{
				Days = CzasVipa / 86400;
				CzasVipa = CzasVipa - (Days * 86400);
			}
			if(CzasVipa >= 3600)
			{
				Hours = CzasVipa / 3600;
				CzasVipa = CzasVipa - (Hours * 3600);
			}
			if(CzasVipa >= 60)
			{
				Minutes = CzasVipa / 60;
				CzasVipa = CzasVipa - (Minutes * 60);
			}
			
			SetPlayerColor(playerid, 0xF7FE2EEE);
			format(data,sizeof(data),"{F3F781}Twoje konto vip jest nadal aktywne. Pozostalo: %d dni, %d godzin, %d minut", Days,Hours,Minutes);
			SendClientMessage(playerid,-1,data);
			
			//ShowPlayerDialog(playerid, DIALOG_START_TELEPORT, DIALOG_STYLE_LIST, "Lokalizacja (vip):", "Las Ventruas\nSan Fierro\nLos Santos\nPrywatny dom", "Wybierz", "Zamknij");
		}
		
		if(PlayerData[playerid][pBlock] == 1)
		{
			KickTimer(playerid, -1, "Aktywna blokada postaci.");
			return 1;
		}
		
		//PlayerVehicles(playerid, 1);
		//CheckUsedItems(playerid);
		//RefreshPlayerLevel(playerid);
		//OnPlayerSpawn(playerid);
		
	}
	else
	{
		SendClientMessage(playerid, -1, "Wystapil problem, kod: #MYSQL_ERROR_CONNECTION. Zglos to do administracji, lub przeczekaj ten blad.");
		SetPlayerPos(playerid, 0.0, 0.0, 0.0);
		TogglePlayerControllable(playerid, false);
		Kick(playerid);
	}
	mysql_free_result();
	return 1;
}

stock PlayerStatsSave(playerid, type = 0)
{
	new data[500];
	if(type == 0) //Czyszczenie statystyk
	{
		PlayerData[playerid][pLogged] = false;
		PlayerData[playerid][pUID] = 0;
		//format(PlayerData[playerid][pName], MAX_PLAYER_NAME, "GRACZ_WYLOGOWAL_SIE");
		//format(PlayerData[playerid][pPassword], 30, "GRACZ_WYLOGOWAL_SIE");
		PlayerData[playerid][pHP] =    START_PLAYER_HP;
		PlayerData[playerid][pCash] =  START_PLAYER_CASH;
		PlayerData[playerid][pScore] = START_PLAYER_SCORE;
		PlayerData[playerid][pPos][0] =  START_PLAYER_POS_X;
		PlayerData[playerid][pPos][1] =  START_PLAYER_POS_Y;
		PlayerData[playerid][pPos][2] =  START_PLAYER_POS_Z;
		PlayerData[playerid][pPos][3] =  START_PLAYER_POS_A;
		PlayerData[playerid][pSila] =  START_PLAYER_SILA;
		PlayerData[playerid][pCashBank] = 0;
		PlayerData[playerid][pPktViatoll] = 0;
		PlayerData[playerid][pVW] =    99999;
		PlayerData[playerid][pInt] =   0;
		PlayerData[playerid][pFrakcja] =   0;
		PlayerData[playerid][pFirma] =     0;
		PlayerData[playerid][pRanga] =     0;
		PlayerData[playerid][pFailPassword] =   0;
		PlayerData[playerid][pSkin] =   START_PLAYER_SKIN;
		PlayerData[playerid][pSpecID] =   -1;
		PlayerData[playerid][pMuted] =   0;
		PlayerData[playerid][pJail] =   0;
		PlayerData[playerid][pBlock] =   0;
		PlayerData[playerid][pPkt] = 0;
		PlayerData[playerid][pGlowaWorek] = 0;
		PlayerData[playerid][pCzasGodzin] = 0;
		PlayerData[playerid][pCzasMinut] = 0;
        PlayerData[playerid][pCzasGryGodz] = 0;
        PlayerData[playerid][pCzasGryMin] = 0;
		PlayerData[playerid][pDriveTimeH] = 0;
		PlayerData[playerid][pDriveTimeM] = 0;
		PlayerData[playerid][pPkt] = 0;
		PlayerData[playerid][pVipTime] = gettime();
		PlayerData[playerid][pSkuty] = 0;
		PlayerData[playerid][pEventMember] = false;
		PlayerData[playerid][pPierwszySpawn] = 0;
		PlayerData[playerid][pLevel] = 0;
		PlayerData[playerid][pGlod] = 100;
		PlayerData[playerid][pSen] = 100;
		PlayerData[playerid][pStanNarko] = 0;
		PlayerData[playerid][pKartaADR] = 0;
		PlayerData[playerid][pDowodOsobisty] = 0;
		PlayerData[playerid][pDowodRejestracyjny] = 0;
		PlayerData[playerid][pUbezpieczenie] = 0;
		PlayerData[playerid][pPaszport] = 0;
		PlayerData[playerid][pTowarStatus] = 0;
		PlayerData[playerid][pAcceptTowarUID] = -1;
		PlayerData[playerid][pTowarBarCreate] = 0;
		PlayerData[playerid][pMandatGive] = 0;
		PlayerData[playerid][pMandat] = 0;
		PlayerData[playerid][pTowarVehicle] = -1;
		PlayerData[playerid][pTowarTrailer] = -1;
		PlayerData[playerid][pWarns] = 0;
		PlayerData[playerid][pPrawoJazdyT][PRAWKO_TYPE_A] = 0;
		PlayerData[playerid][pPrawoJazdyT][PRAWKO_TYPE_B] = 0;
		PlayerData[playerid][pPrawoJazdyT][PRAWKO_TYPE_C] = 0;
		PlayerData[playerid][pPrawoJazdyT][PRAWKO_TYPE_D] = 0;
		PlayerData[playerid][pPrawoJazdyT][PRAWKO_TYPE_L] = 0;
		PlayerData[playerid][pPrawoJazdyP][PRAWKO_TYPE_A] = 0;
		PlayerData[playerid][pPrawoJazdyP][PRAWKO_TYPE_B] = 0;
		PlayerData[playerid][pPrawoJazdyP][PRAWKO_TYPE_C] = 0;
		PlayerData[playerid][pPrawoJazdyP][PRAWKO_TYPE_D] = 0;
		PlayerData[playerid][pPrawoJazdyP][PRAWKO_TYPE_L] = 0;
		PlayerData[playerid][pWypadek] = 0;
		PlayerData[playerid][pWantedLevel] = 0;
		PlayerData[playerid][pPasy] = false;
		PlayerData[playerid][pPickupUID] = -1;
		PlayerData[playerid][pLotto] = 0;
		PlayerData[playerid][pKluczeCar] = 0;
		PlayerData[playerid][pShowPanelFrakcji] = false;
		PlayerData[playerid][pShowPanelTowary] = false;
		PlayerData[playerid][pShowPanelFirmy] = false;
		PlayerData[playerid][pShowPanelTelefon] = false;
		PlayerData[playerid][pShowPanelKasyna] = false;
		PlayerData[playerid][pDeath] = false;
		PlayerData[playerid][pLider] = 0;
		PlayerData[playerid][pGymEdit] = 0;
		PlayerData[playerid][pGymEditCommand] = 0;
		PlayerData[playerid][pPlayerGymEdit] = -1;
		PlayerData[playerid][pGateAdd] = 0;
		PlayerData[playerid][pAddCloseGate] = 0;
		PlayerData[playerid][pAddOpenGate] = 0;
		PlayerData[playerid][pAddGateTerminal] = 0;
		PlayerData[playerid][pPlayerGymEdit] = -1;
		PlayerData[playerid][pFotoEdit] = 0;
		PlayerData[playerid][pKlodaEdit] = 0;
		PlayerData[playerid][pPozarEdit] = 0;
		PlayerData[playerid][pObjectEdit] = 0;
		PlayerData[playerid][pBlock] = 0;
		PlayerData[playerid][pFirmaRanga] = 0;
		PlayerData[playerid][pCanBeInThisVehicle] = -1;
		PlayerData[playerid][pCzasSluzbaGodz] = 0;
		PlayerData[playerid][pCzasSluzbaMin] = 0;
		PlayerData[playerid][pPrivCars] = 0;
		PlayerData[playerid][pPrivHouse] = 0;
		PlayerData[playerid][pTowarStatus] = 0;
		PlayerData[playerid][pAcceptTowarUID] = -1;
		PlayerData[playerid][pTowarBarCreate] = 0;
		PlayerData[playerid][pTowarVehicle] = -1;
		PlayerData[playerid][pTowarTrailer] = -1;
		PlayerData[playerid][pKasynoWygrana] = 0;
		PlayerData[playerid][pKasynoValue] = 0;
		PlayerData[playerid][pKasynoPlay] = 0;
		PlayerData[playerid][pObjectSelectAction] = 0;
		PlayerData[playerid][pRadioOn] = false;
		PlayerData[playerid][pSedzia] = 0;
		PlayerData[playerid][pSwiadek] = 0;
		PlayerData[playerid][pZeznaje] = 0;
		PlayerData[playerid][pOskarzony] = 0;

		SetPVarInt(playerid, "stop_spam_foto", gettime()); 
		
		if(PlayerData[playerid][pNapadCzlonek] == true)
		{
			NapadData[nLudzieOrg]--;
			PlayerData[playerid][pNapadCzlonek] = false;
		}
		if(PlayerData[playerid][CheckNowSobeitV] != 0) 
		{
			DestroyVehicle(PlayerData[playerid][CheckNowSobeitV]);
			PlayerData[playerid][CheckNowSobeit] = 0;
			PlayerData[playerid][CheckNowSobeitL] = 0;
			PlayerData[playerid][CheckNowSobeitV] = 0;
			PlayerData[playerid][CheckNowSobeitB] = 0;
		}
		
		new serial[40]; gpci(playerid, serial, sizeof(serial));  
		format(PlayerData[playerid][pGPCI], 40, "%s", serial);
		GetPlayerIp(playerid, PlayerData[playerid][pIP], 24);
		GetPlayerName(playerid, PlayerData[playerid][pName], MAX_PLAYER_NAME);

		SetPlayerPos(playerid, 2793.8828,1010.1602,10.7500);
					
		KillTimer(PlayerData[playerid][pTimerNapadActive]);
		KillTimer(PlayerData[playerid][pTimerBuildInfo]);
		KillTimer(PlayerData[playerid][pTimerSpec]);
		KillTimer(PlayerData[playerid][pTimerTowary]);
		KillTimer(PlayerData[playerid][pKasynoTimer]);
		KillTimer(PlayerData[playerid][pPozarEditT]);
		
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		RemovePlayerAttachedObject(playerid, 0);
		ClearAnimations(playerid);
		//StopAudioStreamForPlayer(playerid);
		ResetPlayerMoney(playerid);
		SetPlayerVirtualWorldEx(playerid, PlayerData[playerid][pVW]);
		SetPlayerInteriorEx(playerid, PlayerData[playerid][pInt]);
		SetPlayerHealth(playerid, PlayerData[playerid][pHP]);
		SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
		SetPlayerColor(playerid, 0x00C3FFAA);
		SetPlayerTime(playerid, ServerData[sGodzina], 0);
		SetPlayerWeather(playerid, ServerData[sPogoda]);
		
		StopPlayerFade(playerid);
		ReloadAnimations(playerid);
		
		if(IsValidDynamicCP(PlayerData[playerid][pPozarCP][pozar_activity])) DestroyDynamicCP(PlayerData[playerid][pPozarCP][pozar_activity]);
		if(IsValidDynamicCP(PlayerData[playerid][pKlodaCP][kloda_activity])) DestroyDynamicCP(PlayerData[playerid][pKlodaCP][kloda_activity]);
		if(IsValidDynamicCP(PlayerData[playerid][pPlamaCP][plama_activity])) DestroyDynamicCP(PlayerData[playerid][pPlamaCP][plama_activity]);
		if(IsValidDynamicCP(PlayerData[playerid][pPozarEditO])) DestroyDynamicCP(PlayerData[playerid][pPozarEditO]);
		if(IsValidDynamicCP(PlayerData[playerid][pPraktykaCP])) DestroyDynamicCP(PlayerData[playerid][pPraktykaCP]);
		if(IsValidDynamicCP(PlayerData[playerid][pTowarCheckpoint])) DestroyDynamicCP(PlayerData[playerid][pTowarCheckpoint]);
		if(IsValidDynamicCP(PlayerData[playerid][pGPSZlom])) DestroyDynamicCP(PlayerData[playerid][pGPSZlom]);
		if(IsValidVehicle(PlayerData[playerid][pSalonVehicle])) DestroyVehicle(PlayerData[playerid][pSalonVehicle]);
		if(IsValidDynamicCP(PlayerData[playerid][pGPSVehicle])) IsValidDynamicCP(PlayerData[playerid][pGPSVehicle]);
		if(IsValidDynamicMapIcon(PlayerData[playerid][pGPSZawiadom])) DestroyDynamicMapIcon(PlayerData[playerid][pGPSZawiadom]);
		if(IsValidDynamicMapIcon(PlayerData[playerid][pGPSNapad])) DestroyDynamicMapIcon(PlayerData[playerid][pGPSNapad]);
		if(IsValidVehicle(PlayerData[playerid][pPraktykaVehicle])) DestroyVehicle(PlayerData[playerid][pPraktykaVehicle]);
		
		if(PlayerData[playerid][pSluzba] == true)
		{
			format(data,sizeof(data), "{FF4000} Pracownik {ffffff}[{a4a4a4}%d{ffffff}] {00ffff}%s {FF4000}konczy sluzbe frakcyjna.", playerid, PlayerData[playerid][pName]);
			SendClientMessageToAll(-1, data);
			SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
			if(GetPlayerFrakcja(playerid, FRAKCJA_STRAZ_GRANICZNA))
			{
				sg--;
				if(sg <= 0)
				{
					for(new i = 0; i < obiekt_value; i++)
					{
						if(ObjectData[i][bAktywny] == 1 && ObjectData[i][oType] == 2)
						{
							UpdateDynamic3DTextLabelText(ObjectData[i][oText3D], -1, "{00b300}Przejazd graniczny\n{00ffff}Oplata za przejazd: {00b300}$100\n{00ffff}Nacisnij {d90000}spacje, {00ffff}aby zaplacic i otworzyc szlaban.");
						}
					}
				}
			}
			PlayerData[playerid][pSluzba] = false;
			GameTextForPlayer(playerid, "~g~Konczysz sluzbe w tej frakcji", 1500, 3);
			
			format(data,sizeof(data), "UPDATE `data_players` set `czas_godziny_sluzba` = '%d' where `uid` = '%d'",  PlayerData[playerid][pCzasSluzbaGodz],  	 	 PlayerData[playerid][pUID]), mysql_query(data);
			format(data,sizeof(data), "UPDATE `data_players` set `czas_minuty_sluzba` = '%d' where `uid` = '%d'", 	PlayerData[playerid][pCzasSluzbaMin],  	 		 PlayerData[playerid][pUID]), mysql_query(data);
			
			for(new clear = 0; clear != MAX_PLAYERS; clear++)
			{
				if(IsValidDynamicMapIcon(PlayerData[playerid][pGPSWypadek][clear]))
				{
					DestroyDynamicMapIcon(PlayerData[playerid][pGPSWypadek][clear]);
				}
			}
		}
	
		for(new clear = 0; clear != MAX_PLAYERS; clear++)
		{
			if(IsValidDynamicMapIcon(PlayerData[playerid][pGPSWypadek][clear]))
			{
				DestroyDynamicMapIcon(PlayerData[playerid][pGPSWypadek][clear]);
			}
		}
	}
	if(type == 1) //Zapis statystyk
	{
		if(PlayerData[playerid][pLogged] == false) return SendClientMessage(playerid, -1, "Zapis statystyk konta zostal przerwany, kod: #PLAYER_LOGGED_FALSE");

		GetPlayerHealth(playerid, PlayerData[playerid][pHP]);
		GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
		GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
		PlayerData[playerid][pVW] = GetPlayerVirtualWorld(playerid);
		PlayerData[playerid][pInt] = GetPlayerInterior(playerid);
		PlayerData[playerid][pScore] = GetPlayerScore(playerid);
		if(PlayerData[playerid][pDeath] == true) PlayerData[playerid][pHP] = SETTINGS_PLAYER_HP_AFTER_BW;
		GivePlayerCash(playerid, PlayerData[playerid][pKasynoWygrana]);
		PlayerData[playerid][pKasynoWygrana] = 0;

		format(data,sizeof(data), "UPDATE `data_players` set `nick` = '%s' where `uid` = '%d'", 				PlayerData[playerid][pName],         				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `password` = '%s' where `uid` = '%d'",  			PlayerData[playerid][pPassword],     				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `salt` = '%s' where `uid` = '%d'",  				PlayerData[playerid][pSalt],     					PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `ip` = '%s' where `uid` = '%d'",  					PlayerData[playerid][pIP],    		 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `gpci` = '%s' where `uid` = '%d'",  				PlayerData[playerid][pGPCI],   		 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `hp` = '%f' where `uid` = '%d'", 					PlayerData[playerid][pHP], 	  		 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `cash` = '%d' where `uid` = '%d'", 				PlayerData[playerid][pCash], 		 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `cashbank` = '%d' where `uid` = '%d'", 			PlayerData[playerid][pCashBank], 	 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `score` = '%d' where `uid` = '%d'",				PlayerData[playerid][pScore],		 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `x` = '%f' where `uid` = '%d'", 					PlayerData[playerid][pPos][0], 		 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `y` = '%f' where `uid` = '%d'", 					PlayerData[playerid][pPos][1],  	 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `z` = '%f' where `uid` = '%d'", 					PlayerData[playerid][pPos][2], 		 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `a` = '%f' where `uid` = '%d'", 					PlayerData[playerid][pPos][3], 		 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `vw` = '%d' where `uid` = '%d'", 					PlayerData[playerid][pVW],  		 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `int` = '%d' where `uid` = '%d'", 					PlayerData[playerid][pInt],  		 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `frakcja` = '%d' where `uid` = '%d'", 				PlayerData[playerid][pFrakcja],  	 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `firma` = '%d' where `uid` = '%d'", 				PlayerData[playerid][pFirma], 		 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `ranga` = '%d' where `uid` = '%d'", 				PlayerData[playerid][pRanga], 		 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `skin` = '%d' where `uid` = '%d'", 				PlayerData[playerid][pSkin], 		 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `muted` = '%d' where `uid` = '%d'",				PlayerData[playerid][pMuted], 		 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `jail` = '%d' where `uid` = '%d'", 				PlayerData[playerid][pJail], 		 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `block` = '%d' where `uid` = '%d'", 				PlayerData[playerid][pBlock], 		 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `czas_godziny` = '%d' where `uid` = '%d'", 		PlayerData[playerid][pCzasGodzin],   				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `czas_minuty` = '%d' where `uid` = '%d'", 			PlayerData[playerid][pCzasMinut],    				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `vip` = '%d' where `uid` = '%d'", 					PlayerData[playerid][pVipTime],  	 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `skuty` = '%d' where `uid` = '%d'", 				PlayerData[playerid][pSkuty],  	 	 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `level` = '%d' where `uid` = '%d'", 				PlayerData[playerid][pLevel],  	 	 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `sila` = '%d' where `uid` = '%d'", 				PlayerData[playerid][pSila],  	 	 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `dowod_osobisty` = '%d' where `uid` = '%d'", 		PlayerData[playerid][pDowodOsobisty],  	 	 		PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `dowod_rejestracyjny` = '%d' where `uid` = '%d'", 	PlayerData[playerid][pDowodRejestracyjny],  		PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `dowod_ubezpieczenie` = '%d' where `uid` = '%d'", 	PlayerData[playerid][pUbezpieczenie],  	 	 		PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `dowod_paszport` = '%d' where `uid` = '%d'", 		PlayerData[playerid][pPaszport],  	 	 			PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `warns` = '%d' where `uid` = '%d'", 				PlayerData[playerid][pWarns],  	 	 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `wantedlevel` = '%d' where `uid` = '%d'", 			PlayerData[playerid][pWantedLevel],  	 	 		PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `lotto` = '%d' where `uid` = '%d'", 				PlayerData[playerid][pLotto],  	 	 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `klucze` = '%d' where `uid` = '%d'", 				PlayerData[playerid][pKluczeCar],  	 	 			PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `glod` = '%d' where `uid` = '%d'", 				PlayerData[playerid][pGlod],  	 	 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `sen` = '%d' where `uid` = '%d'", 					PlayerData[playerid][pSen],  	 	 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `lider` = '%d' where `uid` = '%d'", 				PlayerData[playerid][pLider],  	 	 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `block` = '%d' where `uid` = '%d'", 				PlayerData[playerid][pBlock],  	 	 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `adr` = '%d' where `uid` = '%d'", 					PlayerData[playerid][pKartaADR],  	 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `firma_ranga` = '%d' where `uid` = '%d'", 			PlayerData[playerid][pFirmaRanga],  	 	 		PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `czas_godziny_sluzba` = '%d' where `uid` = '%d'",  PlayerData[playerid][pCzasSluzbaGodz],  	 		PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `czas_minuty_sluzba` = '%d' where `uid` = '%d'", 	PlayerData[playerid][pCzasSluzbaMin],  	 	 		PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `privcars` = '%d' where `uid` = '%d'", 			PlayerData[playerid][pPrivCars],  	 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `privhouses` = '%d' where `uid` = '%d'", 			PlayerData[playerid][pPrivHouse],  	 	 			PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `pkt_karne` = '%d' where `uid` = '%d'", 			PlayerData[playerid][pPkt],  	 	 				PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `drive_h` = '%d' where `uid` = '%d'", 				PlayerData[playerid][pDriveTimeH],  	 	 		PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `drive_m` = '%d' where `uid` = '%d'", 				PlayerData[playerid][pDriveTimeM],  	 	 		PlayerData[playerid][pUID]), mysql_query(data);
		
		format(data,sizeof(data), "UPDATE `data_players` set `prawojazdy_t_a` = '%d' where `uid` = '%d'", 		PlayerData[playerid][pPrawoJazdyT][PRAWKO_TYPE_A],   PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `prawojazdy_t_b` = '%d' where `uid` = '%d'", 		PlayerData[playerid][pPrawoJazdyT][PRAWKO_TYPE_B],   PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `prawojazdy_t_c` = '%d' where `uid` = '%d'", 		PlayerData[playerid][pPrawoJazdyT][PRAWKO_TYPE_C],   PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `prawojazdy_t_d` = '%d' where `uid` = '%d'", 		PlayerData[playerid][pPrawoJazdyT][PRAWKO_TYPE_D],   PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `prawojazdy_t_l` = '%d' where `uid` = '%d'", 		PlayerData[playerid][pPrawoJazdyT][PRAWKO_TYPE_L],   PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `prawojazdy_p_a` = '%d' where `uid` = '%d'", 		PlayerData[playerid][pPrawoJazdyP][PRAWKO_TYPE_A],   PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `prawojazdy_p_b` = '%d' where `uid` = '%d'", 		PlayerData[playerid][pPrawoJazdyP][PRAWKO_TYPE_B],   PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `prawojazdy_p_c` = '%d' where `uid` = '%d'", 		PlayerData[playerid][pPrawoJazdyP][PRAWKO_TYPE_C],   PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `prawojazdy_p_d` = '%d' where `uid` = '%d'", 		PlayerData[playerid][pPrawoJazdyP][PRAWKO_TYPE_D],   PlayerData[playerid][pUID]), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_players` set `prawojazdy_p_l` = '%d' where `uid` = '%d'", 		PlayerData[playerid][pPrawoJazdyP][PRAWKO_TYPE_L],   PlayerData[playerid][pUID]), mysql_query(data);
		
		

	}
	if(type == 2) //Rejestracja
	{
		format(data,sizeof(data),"INSERT INTO `data_players` (`nick`) VALUES ('%s');", PlayerData[playerid][pName]);
		mysql_query(data);

		format(data, sizeof data, "SELECT `UID` FROM `data_players` WHERE `nick` = '%s'", PlayerData[playerid][pName]);
		mysql_query(data);
		mysql_store_result();
		mysql_fetch_row(data, "|");
		mysql_free_result();
		sscanf(data, "p<|>d",
		PlayerData[playerid][pUID]);
		
		format(data,sizeof(data), "UPDATE `data_players` set `playerid` = '%d' where `uid` = '%d'", 				playerid,  	 	 PlayerData[playerid][pUID]), mysql_query(data);
		

		PlayerData[playerid][pLogged] = true;
		PlayerData[playerid][pVW] = START_PLAYER_VW;
		PlayerData[playerid][pInt] = START_PLAYER_INT;
		
		SetPlayerVirtualWorldEx(playerid, PlayerData[playerid][pVW]);
		SetPlayerInteriorEx(playerid, PlayerData[playerid][pInt]);
		GivePlayerMoney(playerid, PlayerData[playerid][pCash]);
		SetSpawnInfo(playerid, 0, 0, 2438.0369, 2376.1670, 10.8203, 93.3973, 0, 0, 0, 0, 0, 0);
		SetPlayerPos(playerid, 2438.0369, 2376.1670, 10.8203);
		SetPlayerVirtualWorldEx(playerid, PlayerData[playerid][pVW]);
		SetPlayerInteriorEx(playerid, PlayerData[playerid][pInt]);
		SetPlayerHealth(playerid, PlayerData[playerid][pHP]);
		SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);

		format(data,sizeof(data),"{FE9A2E}Witaj, %s (UID: %d, SAMPID: %d, IP: %s). Pomyslnie sie zarejestrowales na naszym serwerze, zyczymy milej gry!", PlayerData[playerid][pName], PlayerData[playerid][pUID], playerid, PlayerData[playerid][pIP]);
		SendClientMessage(playerid, -1, data);
		
	
		//ShowPlayerDialog(playerid, DIALOG_START_TELEPORT, DIALOG_STYLE_LIST, "Wybor poczatkowej lokacji.", "Las Ventruas\nSan Fierro\nLos Santos", "Wybierz", "Zamknij");
	}
	return 1;
}

stock GivePlayerCash(playerid, value)
{
	PlayerData[playerid][pCash] += value;
	GivePlayerMoney(playerid, value);
	return 1;
}
stock GetPlayerCash(playerid)
{
	return PlayerData[playerid][pCash];
}
stock SCMIC(playerid, Float:range, color, string[])
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		new Float:Pos[3];
		new vw = GetPlayerVirtualWorld(playerid);
		new in = GetPlayerInterior(playerid);
		GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
		if(PlayerData[i][pLogged] == true && GetPlayerInterior(i) == in && GetPlayerVirtualWorld(i) == vw && IsPlayerInRangeOfPoint(i, range, Pos[0],Pos[1],Pos[2]))
		{
			SendClientMessage(i, color, string);
		}
	}
	return 1;
}

stock OdlegloscGracze(Float:odleglosc, playerid, gracz)
{
	if(IsPlayerConnected(playerid)&&IsPlayerConnected(gracz))
	{
		new Float:Pos[3];
		GetPlayerPos(gracz,Pos[0],Pos[1],Pos[2]);
		if(IsPlayerInRangeOfPoint(playerid, odleglosc, Pos[0],Pos[1],Pos[2]))
		{
			return 1;
		}
	}
	return 0;
}




stock GetVehicleModelIdByName(modelname[])
{
	for(new i = 400; i <= 611; i++)
	{
if(strfind(CarList[i-400],modelname, true) != -1)
{
	return i;
}
	}
	return 0;
}


/*IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	{
	if (string[i] > '9' || string[i] < '0') return 0;
	}
	return 1;
}*/

stock GetVehicleRotation(vehicleid, &Float:x, &Float:y, &Float:z)
{
    static Float:quat_w, Float:quat_x, Float:quat_y, Float:quat_z;
    GetVehicleRotationQuat(vehicleid, quat_w, quat_x, quat_y, quat_z);
    x = atan2(2*((quat_x*quat_y)+(quat_w+quat_z)), (quat_w*quat_w)+(quat_x*quat_x)-(quat_y*quat_y)-(quat_z*quat_z));
    y = atan2(2*((quat_y*quat_z)+(quat_w*quat_x)), (quat_w*quat_w)-(quat_x*quat_x)-(quat_y*quat_y)+(quat_z*quat_z));
    z = asin(-2*((quat_x*quat_z)+(quat_w*quat_y)));
    return 1;
}


	forward TimerPogoda();
	public TimerPogoda()
	{
		new data[128];
		ServerData[sPogoda] = random(18);
	    SetWeather(ServerData[sPogoda]);
		format(data,sizeof(data),"~g~~h~Pogoda serwera zostala zmieniona.", ServerData[sPogoda]);
		GameTextForAll(data, 3000, 1);
		return 1;
	}

	forward TimerGlod();
	public TimerGlod()
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(PlayerData[i][pLogged] == true)
			{
				PlayerData[i][pGlod]--;
				if(PlayerData[i][pGlod] < 12) 
				{
					SendClientMessage(i, -1, "{a4a4a4}Uwaga, udaj sie do restrauracji/burgershota, aby cos zjesc twoj poziom glodu jest zbyt maly.");
				}
				if(PlayerData[i][pGlod] <= 0)
				{
					new Float:ppHP;
					GetPlayerHealth(i, ppHP);
					SetPlayerHealth(i, ppHP - 5);
					SetPlayerDrunkLevel(i, 10000);
					PlayerData[i][pGlod] = 0;
				}
			}
		}
		return 1;
	}

	forward spawn(playerid);
	public spawn(playerid)
	{
		TogglePlayerControllable(playerid, true);
		return 1;
	}
	
	forward TimerSen();
	public TimerSen()
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(PlayerData[i][pLogged] == true)
			{
				PlayerData[i][pSen]--;
				if(PlayerData[i][pSen] < 12) 
				{
					SendClientMessage(i, -1, "{a4a4a4}Uwaga, udaj sie do motelu/hotelu, aby sie przespac poniewaz twoj poziom snu jest zbyt maly.");
				}
				if(PlayerData[i][pSen] <= 0)
				{
					new Float:ppHP;
					GetPlayerHealth(i, ppHP);
					SetPlayerHealth(i, ppHP - 5);
					SetPlayerDrunkLevel(i, 10000);
					PlayerData[i][pSen] = 0;
				}
			}
		}
		return 1;
	}
	
forward OneTimerSeconds();
public OneTimerSeconds()
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		if(PlayerData[i][pLogged] == true)
		{
			new vehicleid = GetPlayerVehicleID(i);
			PlayerStatyBox(i, 3);
			CheckWeaponHack(i, GetPlayerWeapon(i));
			
			
			
			new Float:pozycja[3], ankategorija[32], anime[32], Float:helti2, cheat_fly = 0;
			GetAnimationName(GetPlayerAnimationIndex(i),ankategorija,32,anime,32);
			GetPlayerPos(i, pozycja[0], pozycja[1], pozycja[2]);
			GetPlayerHealth(i, helti2);
			
			if(strcmp(anime,"SWIM_CRAWL", false ) == 0 && strcmp(ankategorija,"SWIM", false ) == 0)
			{
				if(!IsPlayerInAnyVehicle(i) && pozycja[2] > 100 && helti2 > 2)
				{
					cheat_fly = 1;
				}
			}
			if(strcmp(anime,"SWIM_BREAST", false ) == 0 && strcmp(ankategorija,"SWIM", false ) == 0)
			{
				if(!IsPlayerInAnyVehicle(i) && pozycja[2] > 100 && helti2 > 2)
				{
					cheat_fly = 1;
				}
			}
			if(strcmp(anime,"SWIM_TREAD", false ) == 0 && strcmp(ankategorija,"SWIM", false ) == 0)
			{
				if(!IsPlayerInAnyVehicle(i) && pozycja[2] > 100 && helti2 > 2)
				{
					cheat_fly = 1;
				}
			}
			
			
			if(cheat_fly == 1)
			{
				KickTimer(i, -1, "Fly Cheat");
			}
			if(GetPlayerPing(i) >= SETTINGS_PLAYER_MAX_PING)
			{
				if(!GetPlayerVipStatus(i) || PlayerData[i][pRanga] < RANGA_TECHNIK_TS3)
				{
					new data[256];
					format(data, sizeof(data), "Max ping limit (%d)", SETTINGS_PLAYER_MAX_PING);
					KickTimer(i, -1, data);
				}
			}
			if(PlayerData[i][pAC_Interior] != GetPlayerInterior(i) && GetPVarInt(i, "ac_int_time") < gettime())
			{
				KickTimer(i, -1, "Teleport to other interior");
			}
			
			if(PlayerData[i][pAC_VirtualWorld] != GetPlayerVirtualWorld(i) && GetPVarInt(i, "ac_vw_time") < gettime())
			{
				KickTimer(i, -1, "Teleport to other virtualworld");
			}
			if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK)
			{
				ClearAnimations(i);
				KickTimer(i, -1, "Spawned jetpack");
			}
			if(GetPlayerVehicleID(i) != 0 && PlayerData[i][pLastEnterVehicleID] != GetPlayerVehicleID(i))
			{
				KickTimer(i, -1, "Desync: teleporting to other vehicle");
			}
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER && GetVehicleSpeed(GetPlayerVehicleID(i)) >= 260 && !IsVehicleAAirplane(GetPlayerVehicleID(i)) && !IsVehicleAHelicopter(GetPlayerVehicleID(i)))
			{
				KickTimer(i, -1, "Speedhack (260+ km/h)");
			}
			
			
			
			
			if(PlayerData[i][pSpecID] != -1)
			{
				PlayerSpecPanel(i, 4);
			}
			
			if(vehicleid == 0 && PlayerData[i][pWypadek] != 0)
			{
				TogglePlayerControllable(i, true);
				FadeColorForPlayer(i, 204, 58, 41, 125, 0, 0, 0, 0, 25, 0);
				GameTextForPlayer(i, "~g~Dochodzisz do siebie", 5000, 3);
			}
			if(vehicleid != 0)
			{
				
				//System viatoll
				if(GetPlayerState(i) == PLAYER_STATE_DRIVER) 
				{
					if(GetVehicleModel(GetPlayerVehicleID(i)) == 413 ||//vany
					GetVehicleModel(GetPlayerVehicleID(i)) == 414 ||
					GetVehicleModel(GetPlayerVehicleID(i)) == 418 ||
					GetVehicleModel(GetPlayerVehicleID(i)) == 422 ||
					GetVehicleModel(GetPlayerVehicleID(i)) == 440 ||
					GetVehicleModel(GetPlayerVehicleID(i)) == 455 ||
					GetVehicleModel(GetPlayerVehicleID(i)) == 456 ||
					GetVehicleModel(GetPlayerVehicleID(i)) == 459 ||
					GetVehicleModel(GetPlayerVehicleID(i)) == 478 ||
					GetVehicleModel(GetPlayerVehicleID(i)) == 482 ||
					GetVehicleModel(GetPlayerVehicleID(i)) == 483 ||
					GetVehicleModel(GetPlayerVehicleID(i)) == 498 ||
					GetVehicleModel(GetPlayerVehicleID(i)) == 499 ||
					GetVehicleModel(GetPlayerVehicleID(i)) == 524 ||
					GetVehicleModel(GetPlayerVehicleID(i)) == 554 ||
					GetVehicleModel(GetPlayerVehicleID(i)) == 573 ||
					GetVehicleModel(GetPlayerVehicleID(i)) == 578 ||
					GetVehicleModel(GetPlayerVehicleID(i)) == 609 ||
					GetVehicleModel(GetPlayerVehicleID(i)) == 543||
					GetVehicleModel(GetPlayerVehicleID(i)) == 403 ||//tiry
					GetVehicleModel(GetPlayerVehicleID(i)) == 514 ||
					GetVehicleModel(GetPlayerVehicleID(i)) == 515) 
					{
						new vuid = GetPlayerViatoll(i, 10.0), data[128];
						
						if(vuid != -1 && gettime() - GetPVarInt(i, "stop_spam_viatoll") > 10)
						{
							SetPVarInt(i, "stop_spam_viatoll", gettime()); 
							
							if(PlayerData[i][pPktViatoll] != 0)
							{
								PlayerData[i][pPktViatoll]-=ViatollData[vuid][vPkt];
								GivePlayerCash(i, -ViatollData[vuid][vKwota]);
								format(data,sizeof(data),"{a4a4a4}Przejechales przez bramke viatoll, zostaje odebrane ci %d pkt, oraz $%d.", ViatollData[vuid][vPkt], ViatollData[vuid][vKwota]);
								SendClientMessage(i, -1, data);
							}
							else
							{
								GivePlayerCash(i, -ViatollData[vuid][vKwota]*3);
								format(data,sizeof(data),"{a4a4a4}Przejechales przez bramke viatoll nie majac zadnych pkt, zostaje odebrane ci $%d.", ViatollData[vuid][vKwota]*3);
								SendClientMessage(i, -1, data);
							}
						}
					}
				}
				//System fotoradaru
				if(GetPlayerState(i) == PLAYER_STATE_DRIVER) 
				{
					if(PlayerData[i][pRanga] < RANGA_WSPOLWLASCICIEL)
					{
						new fuid = GetPlayerFotoradar(i, 20.0), speed = GetVehicleSpeed(vehicleid), data[128];
						
						if(fuid != -1 && speed > FotoData[fuid][fMaxKM] && gettime() - GetPVarInt(i, "stop_spam_foto") > 10)
						{
							SetPVarInt(i, "stop_spam_foto", gettime()); 
							
							format(data,sizeof(data),"{a4a4a4}Przekroczyles dozwolona predkosc, %dkm/h. Otrzymujesz w ten sposob kare w wysokosci $%d.", FotoData[fuid][fMaxKM], FotoData[fuid][fKara]);
							SendClientMessage(i, -1, data);
							
							GivePlayerCash(i, - FotoData[fuid][fKara]);
							GiveFrakcjaCash(FRAKCJA_POLICJI, FotoData[fuid][fKara]);
							FadeColorForPlayer(i, 255, 255, 255, 125, 0, 0, 0, 0, 25, 0);
						}
					}
				}
				
				//System wypadku
				if(PlayerData[i][pWypadek] != 9999) 
				{
					if(PlayerData[i][pWypadek] >= 1)
					{
						PlayerData[i][pWypadek]++;
					}
					if(PlayerData[i][pWypadek] >= 7)
					{
						PlayerData[i][pWypadek] = 0;
						TogglePlayerControllable(i, true);
						FadeColorForPlayer(i, 204, 58, 41, 125, 0, 0, 0, 0, 25, 0);
						GameTextForPlayer(i, "~g~Dochodzisz do siebie", 5000, 3);
					}
					if(PlayerData[i][pWypadek] == 0)
					{
						new Float:old_vehicle_hp;
						old_vehicle_hp = VehicleData[vehicleid][vHP];
						GetVehicleHealth(vehicleid, VehicleData[vehicleid][vHP]);
						
						if(PlayerData[i][pPasy] == true)
						{
							if(floatround(old_vehicle_hp) - floatround(VehicleData[vehicleid][vHP]) > 250)
							{
								TogglePlayerControllable(i, false);
								
								if(GetOnlineFractions(2) == 0)
								{
									PlayerData[i][pWypadek] = 1;
									TogglePlayerControllable(i, false);
									SetPlayerDrunkLevel(i, 100);
									SendClientMessage(i, -1, "{a4a4a4}Wypadek nie byl zbyt silny, zaraz powinienes do siebie dojsc.");
									FadeColorForPlayer(i, 181, 51, 36, 125, 204, 58, 41, 125, 20, 0);
								}
								else
								{
									PlayerData[i][pWypadek] = 9999;
									TogglePlayerControllable(i, false);
									SetPlayerDrunkLevel(i, 1000);
									SendClientMessage(i, -1, "{a4a4a4}Wypadek byl na tyle silny, ze nie mozesz dojsc do siebie bez pomocy sluzb medycznych.");
									FadeColorForPlayer(i, 181, 51, 36, 125, 204, 58, 41, 125, 20, 100);
									loadWypadki(false);
									CheckVehicleStatus(i);
								}
							}
						}
						else
						{
							if(floatround(old_vehicle_hp) - floatround(VehicleData[vehicleid][vHP]) > 100)
							{
								TogglePlayerControllable(i, false);
								
								if(GetOnlineFractions(2) == 0)
								{
									PlayerData[i][pWypadek] = 1;
									TogglePlayerControllable(i, false);
									SetPlayerDrunkLevel(i, 100);
									FadeColorForPlayer(i, 181, 51, 36, 125, 204, 58, 41, 125, 20, 0);
									SendClientMessage(i, -1, "{a4a4a4}Wypadek nie byl zbyt silny, zaraz powinienes do siebie dojsc.");
								}
								else
								{
									PlayerData[i][pWypadek] = 9999;
									TogglePlayerControllable(i, false);
									SetPlayerDrunkLevel(i, 1000);
									SendClientMessage(i, -1, "{a4a4a4}Wypadek byl na tyle silny, ze nie mozesz dojsc do siebie bez pomocy sluzb medycznych.");
									FadeColorForPlayer(i, 181, 51, 36, 125, 204, 58, 41, 125, 20, 0);
									loadWypadki(false);
									CheckVehicleStatus(i);
								}
							}
						}
					}
				}
			}
		}
	}
	
	for(new v = 1, jjjj = GetVehiclePoolSize(); v <= jjjj; v++)
	{
		new param[7], Float:vehiclehp;
		
        GetVehicleHealth(v, vehiclehp);
		
		if(GetVehicleSpeed(v)>5) //Naliczenie przebiegu
		{
			new Float:ST[4];
			GetVehicleVelocity(v,ST[0],ST[1],ST[2]);
			ST[3] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 179.28625;

			VehicleData[v][vPrzebieg] += ST[3]/2000;
			VehicleData[v][vPrzebiegTaxi] += ST[3]/2000;
		}
				
		if(VehicleData[v][vPaliwo] <= 0) //Koniec paliwa = off silnik
		{
			GetVehicleParamsEx(v, param[0], param[1], param[2], param[3], param[4], param[5], param[6]);
			SetVehicleParamsEx(v, 0, param[1], param[2], param[3], param[4], param[5], param[6]);
			VehicleData[v][vEngine] = 0;
			VehicleData[v][vPaliwo] = 0.0;
		}
	}
	return 1;
}

stock CheckVehicleStatus(playerid)
{
	new param[7], Float:zAng, Float:qx, Float:qy, Float:qz, Float:vehiclehp, v = GetPlayerVehicleID(playerid);
	GetVehicleHealth(v, vehiclehp);
	
	if(vehiclehp < 270) 
	{
		SetVehicleHealth(v, 270.0);
		GetVehicleParamsEx(v, param[0], param[1], param[2], param[3], param[4], param[5], param[6]);
		SetVehicleParamsEx(v, 0, param[1], param[2], param[3], param[4], param[5], param[6]);
		VehicleData[v][vEngine] = 0;
						
						
		GetVehicleRotation(v, qx, qy, qz);
		if(qy < 120 || qy > 120)
		{
			GetVehicleVelocity(v, qx, qy, qz);
			if(floatround(floatsqroot(floatpower(qx, 2) + floatpower(qy, 2) + floatpower(qz, 2)) * 200) < 20)
			{
				GetVehicleZAngle(v, zAng );
				SetVehicleZAngle(v, zAng );
			}
		}
	}
	return 1;
}
	forward OneTimerMinutes();
	public OneTimerMinutes()
	{
		new sekunda, minuta, godzina, data[300];
		gettime(godzina, minuta, sekunda);

		if(minuta != ServerData[sGodzina])
		{
			ServerData[sGodzina]++;
			if(ServerData[sGodzina] >= 24) 
			{
				ServerData[sGodzina] = 0;
			}
			//SetWorldTime(ServerData[sGodzina]);
			//format(data,sizeof(data),"~g~~h~Godzina serwera zostala zmieniona na %s%d:00", ((ServerData[sGodzina] >= 10) ? ("") : "0"), ServerData[sGodzina]);
			//GameTextForAll(data, 3000, 1);
		}
		if(godzina == lotto_godzina && minuta == lotto_minuta) //System lotto
		{
			new we_have_winner = 0, get_uid, get_nick[24], get_playerid, get_lotto, wylosowano = random(60) + 1, string[128];
			format(data,sizeof(data),"SELECT uid, nick, playerid, lotto FROM `data_players` where `lotto` != '0'");
			mysql_query(data);
			mysql_store_result();

			while(mysql_fetch_row(data))
			{
				sscanf(data, "p<|>is[24]ii", get_uid, get_nick, get_playerid, get_lotto);
				
				format(string,sizeof(string),"[Lotto ($%d) (Liczba: %d)] Gracz %s (%d:%d) zakupil los z numerkiem: %d %s", 
				pula_wygranej+pula_zakup_players,
				wylosowano,
				get_nick, 
				get_playerid, 
				get_uid, 
				get_lotto, 
				((get_lotto == wylosowano) ? ("i wygral!") : ("i nie wygral."))
				);
				SendClientMessageToAll(-1, string);
				
				if(get_lotto == wylosowano)
				{
					we_have_winner++;
					if(get_playerid == -1)
					{
						format(string,sizeof(string), "UPDATE `data_players` set `cashbank` = `cashbank` + '%d' where `uid` = '%d'", 			pula_wygranej+pula_zakup_players, 		 get_uid), mysql_query(string);
					}
					else
					{
						PlayerData[get_playerid][pCashBank] += pula_wygranej+pula_zakup_players;
						format(string,sizeof(string), "[Lotto][Wygrana] Wygrales $%d, gratulujemy !!", pula_wygranej+pula_zakup_players);
						SendClientMessage(get_playerid, -1, string);
						PlayerData[get_playerid][pLotto] = 0;
					}
					pula_zakup_players = 0;
				}
			}
			if(we_have_winner == 0)
			{
				format(string,sizeof(string), "[Lotto] Nikt nie wygral tej puli ($%d) wylosowano numerek: %d", pula_wygranej+pula_zakup_players, wylosowano);
				SendClientMessageToAll(-1, string);
			}
			else if(we_have_winner >= 2)
			{
				format(string,sizeof(string), "[Lotto] Wylosowany numer %d zaznaczylo az %d osob i wygrali ($%d)!", wylosowano, we_have_winner, pula_wygranej+pula_zakup_players);
				SendClientMessageToAll(-1, string);
			}
			for(new x = 0, jj = GetPlayerPoolSize(); x <= jj; x++)
			{
				PlayerData[x][pLotto] = 0;
			}
			format(string,sizeof(string), "UPDATE `data_players` set `lotto` = '0' where `uid` = '%d'",  get_uid), mysql_query(string);
		}
		
		

		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(PlayerData[i][pLogged] == true)
			{
			
				PlayerRealTime(i, 4);
				
				
				if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
				{
					PlayerData[i][pDriveTimeM]++;
				}
				PlayerData[i][pCzasMinut]++;
				PlayerData[i][pCzasGryMin]++;
				
				if(PlayerData[i][pCzasMinut] >= 60)
				{
					PlayerData[i][pCzasGodzin]++;
					PlayerData[i][pCzasMinut] = 0;
				}
				if(PlayerData[i][pCzasGryMin] >= 60)
				{
					PlayerData[i][pCzasGryGodz]++;
					PlayerData[i][pCzasGryMin] = 0;
				}
				if(PlayerData[i][pDriveTimeM] >= 60)
				{
					PlayerData[i][pDriveTimeH]++;
					PlayerData[i][pDriveTimeM] = 0;
				}
				
				if(PlayerData[i][pSluzba] == true)
				{
					PlayerData[i][pCzasSluzbaMin]++;
					if(PlayerData[i][pCzasSluzbaMin] >= 60)
					{
						PlayerData[i][pCzasSluzbaGodz]++;
						PlayerData[i][pCzasSluzbaMin] = 0;
					}
				}
				//Mute
				if(PlayerData[i][pMuted] != 0)
				{
					PlayerData[i][pMuted]--;
					if(PlayerData[i][pMuted] == 0)
					{
						PlayerData[i][pMuted] = 0;
						GameTextForPlayer(i, "Twoja kara wyciszenia minela", 7000, 1);
						return 1;
					}
					format(data,sizeof(data),"~y~Kara wyciszenia trwa.. pozostalo ci: %d minut",PlayerData[i][pMuted]);
					GameTextForPlayer(i, data, 7000, 1);
				}
				
				//Jail
				if(PlayerData[i][pJail] != 0)
				{
					PlayerData[i][pJail]--;
					if(PlayerData[i][pJail] == 0)
					{
						PlayerData[i][pJail] = 0;
						SetPlayerPos(i, START_PLAYER_POS_X,START_PLAYER_POS_Y,START_PLAYER_POS_Z);
						SetPlayerInteriorEx(i, 0);
						SetPlayerVirtualWorldEx(i, 0);
						GameTextForPlayer(i, "Twoja kara wiezienna minela", 7000, 1);
						return 1;
					}
					format(data,sizeof(data),"~y~Kara wiezienna trwa.. pozostalo ci: %d minut",PlayerData[i][pJail]);
					GameTextForPlayer(i, data, 7000, 1);
					return 1;
				}
			}
		}
		
		for(new n_uid = 1; n_uid != narko_value; n_uid++)
		{
			if(NarkotykiData[n_uid][nAktywny] == 1)
			{
				SaveNarko(n_uid, 0);
			}
		}
		return 1;
	}
	
	
	
	
	stock GetPlayerVipStatus(playerid)
	{
		if(PlayerData[playerid][pVipTime] > gettime())
		{
			return 1;
		}
		else
		{
		    if(PlayerData[playerid][pVipTime] < gettime())
		    {
		   		PlayerData[playerid][pVipTime] = gettime();
			}
		}
		return 0;
	}
	
	
	stock SetPlayerVipStatus(playerid, admin, mounth, days, hours, minutes)
	{
		new nadmin[30], data[128];
		if(admin != -1) format(nadmin,sizeof(nadmin),"%s",PlayerData[admin][pName]);
		if(admin == -1) nadmin = "AntyCheat";
	    if(mounth == 0 && days == 0 && hours == 0 && minutes == 0)
	    {
	    	PlayerData[playerid][pVipTime] = gettime();
	    	return 1;
	    }
		if(GetPlayerVipStatus(playerid) && admin != -1) return SendClientMessage(admin, -1, "{a4a4a4}Gracz ten posiada juz konto premium. Aby zabrac mu je wpisz: /dajvipa [id] 0 0 0");

	   	new SV_Minutes = minutes*60;
		new SV_Hours = (hours*60)*60;
		new SV_Days = ((days*24)*60)*60;
		new SV_Mounth = (((mounth*30)*24)*60)*60;
		new TimeVip = SV_Minutes+SV_Hours+SV_Days+SV_Mounth;
	
        PlayerData[playerid][pVipTime] = gettime()+TimeVip;
	   
		SetPlayerColor(playerid, 0xF7FE2EEE);
		
		format(data,sizeof(data),"{a4a4a4}Otrzymujesz konto vip na czas %d dni, %d godzin, %d minut od [%d]%s", days, hours, minutes, admin, nadmin);
		SendClientMessage(playerid, -1, data);
		
		if(admin != -1)
		{
			format(data,sizeof(data),"{a4a4a4}Nadano konto vip na czas %d dni, %d godzin, %d minut dla [%d]%s", days, hours, minutes, playerid, PlayerData[playerid][pName]);
			SendClientMessage(admin, -1, data);
		}
		return 1;
	}

	forward ZgasSilnik(playerid);
	public ZgasSilnik(playerid)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
		if(vehicleid == 0) return 1;
	    new engine = 0, lights = 0, alarm = 0, doors = 0, bonnet = 0, boot = 0, objective = 0;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		GameTextForPlayer(playerid, "~b~~h~Silnik zgaszony", 1999, 3);
		
		VehicleData[vehicleid][vEngine] = 0;
		SetVehicleParamsEx(vehicleid, 0, lights, alarm, doors, bonnet, boot, objective);
		return 1;
	}
	
	forward OdpalSilnik(playerid);
	public OdpalSilnik(playerid)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    new engine = 0, lights = 0, alarm = 0, doors = 0, bonnet = 0, boot = 0, objective = 0;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		if(VehicleData[vehicleid][vWheelsBlock] == 1) return SendClientMessage(playerid, -1, "{a4a4a4}Na ten pojazd jest nalozona blokada kol, zglos sie do policji z wnioskiem o usuniecie tej blokady.");
		if(vehicleid == 0) return 1;
		
		new Float:vehiclehp;
		GetVehicleHealth(vehicleid, vehiclehp);
		if(vehiclehp < 271)
		{
			SendClientMessage(playerid, -1, "{a4a4a4}Odpalenie silnika jest nie mozliwe z powodu zbyt duzych jego uszkodzen, zadzwon po mechanika.");
			return 1;
		}
		if(VehicleData[vehicleid][vPaliwo] <= 0) 
		{
			SendClientMessage(playerid, -1, "{a4a4a4}Brak paliwa w pojezdzie.");
			return 1;
		}
        GameTextForPlayer(playerid, "~b~~h~Silnik odpalony", 1999, 3);

		VehicleData[vehicleid][vEngine] = 1;
		SetVehicleParamsEx(vehicleid, 1, lights, alarm, doors, bonnet, boot, objective);
	    return 1;
	}
	
	
	
//0 - tworz, 1- pokaz, 2 - ukryj, 3 -  usun, ukryj, 4 - refresh
stock PlayerDataTXD(playerid, type = 0, naglowek[] = "_", info1[] = "_", info2[] = "_", info3[] = "_")
{
	if(PlayerData[playerid][pLogged] == false) return 1;
	if(type == 0)
	{
		
	//TEXTDRAWY
	Txdraw_InfoTXD[playerid][0] = CreatePlayerTextDraw(playerid, 95.000000, 145.000000, "_");
	PlayerTextDrawFont(playerid, Txdraw_InfoTXD[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, Txdraw_InfoTXD[playerid][0], 0.600000, 9.000004);
	PlayerTextDrawTextSize(playerid, Txdraw_InfoTXD[playerid][0], 298.500000, 129.000000);
	PlayerTextDrawSetOutline(playerid, Txdraw_InfoTXD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, Txdraw_InfoTXD[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, Txdraw_InfoTXD[playerid][0], 2);
	PlayerTextDrawColor(playerid, Txdraw_InfoTXD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, Txdraw_InfoTXD[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, Txdraw_InfoTXD[playerid][0], 135);
	PlayerTextDrawUseBox(playerid, Txdraw_InfoTXD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, Txdraw_InfoTXD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, Txdraw_InfoTXD[playerid][0], 0);

	Txdraw_InfoTXD[playerid][1] = CreatePlayerTextDraw(playerid, 95.000000, 147.000000, "Rozlaczenie");
	PlayerTextDrawFont(playerid, Txdraw_InfoTXD[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, Txdraw_InfoTXD[playerid][1], 0.275000, 0.950001);
	PlayerTextDrawTextSize(playerid, Txdraw_InfoTXD[playerid][1], 188.500000, 124.000000);
	PlayerTextDrawSetOutline(playerid, Txdraw_InfoTXD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, Txdraw_InfoTXD[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, Txdraw_InfoTXD[playerid][1], 2);
	PlayerTextDrawColor(playerid, Txdraw_InfoTXD[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, Txdraw_InfoTXD[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, Txdraw_InfoTXD[playerid][1], 255);
	PlayerTextDrawUseBox(playerid, Txdraw_InfoTXD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, Txdraw_InfoTXD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, Txdraw_InfoTXD[playerid][1], 0);

	Txdraw_InfoTXD[playerid][2] = CreatePlayerTextDraw(playerid, 95.000000, 170.000000, "~r~[PTR-Serw] ~g~Gracz~w~ XXXXXXXXXXXXXXXXXXXXXXXX ~g~dolaczyl do serwera.");
	PlayerTextDrawFont(playerid, Txdraw_InfoTXD[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, Txdraw_InfoTXD[playerid][2], 0.108332, 0.800001);
	PlayerTextDrawTextSize(playerid, Txdraw_InfoTXD[playerid][2], 187.000000, 124.000000);
	PlayerTextDrawSetOutline(playerid, Txdraw_InfoTXD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, Txdraw_InfoTXD[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, Txdraw_InfoTXD[playerid][2], 2);
	PlayerTextDrawColor(playerid, Txdraw_InfoTXD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, Txdraw_InfoTXD[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, Txdraw_InfoTXD[playerid][2], 9109529);
	PlayerTextDrawUseBox(playerid, Txdraw_InfoTXD[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, Txdraw_InfoTXD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, Txdraw_InfoTXD[playerid][2], 0);

	Txdraw_InfoTXD[playerid][3] = CreatePlayerTextDraw(playerid, 96.000000, 203.000000, "~b~Zyczymy milej rozrywki");
	PlayerTextDrawFont(playerid, Txdraw_InfoTXD[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, Txdraw_InfoTXD[playerid][3], 0.116667, 0.750001);
	PlayerTextDrawTextSize(playerid, Txdraw_InfoTXD[playerid][3], 187.000000, 124.000000);
	PlayerTextDrawSetOutline(playerid, Txdraw_InfoTXD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, Txdraw_InfoTXD[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, Txdraw_InfoTXD[playerid][3], 2);
	PlayerTextDrawColor(playerid, Txdraw_InfoTXD[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, Txdraw_InfoTXD[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, Txdraw_InfoTXD[playerid][3], 50);
	PlayerTextDrawUseBox(playerid, Txdraw_InfoTXD[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, Txdraw_InfoTXD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, Txdraw_InfoTXD[playerid][3], 0);

	Txdraw_InfoTXD[playerid][4] = CreatePlayerTextDraw(playerid, 98.000000, 155.000000, "-");
	PlayerTextDrawFont(playerid, Txdraw_InfoTXD[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid, Txdraw_InfoTXD[playerid][4], 9.733325, 0.499992);
	PlayerTextDrawTextSize(playerid, Txdraw_InfoTXD[playerid][4], 298.500000, 75.000000);
	PlayerTextDrawSetOutline(playerid, Txdraw_InfoTXD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, Txdraw_InfoTXD[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, Txdraw_InfoTXD[playerid][4], 2);
	PlayerTextDrawColor(playerid, Txdraw_InfoTXD[playerid][4], 65535);
	PlayerTextDrawBackgroundColor(playerid, Txdraw_InfoTXD[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, Txdraw_InfoTXD[playerid][4], 135);
	PlayerTextDrawUseBox(playerid, Txdraw_InfoTXD[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, Txdraw_InfoTXD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, Txdraw_InfoTXD[playerid][4], 0);

	Txdraw_InfoTXD[playerid][5] = CreatePlayerTextDraw(playerid, 95.000000, 165.000000, "~b~[PTR-Serw]~n~~g~Gracz: ~w~XXXXXXX~n~~g~Admin: ~w~XXXXXX~n~~g~Powod: ~w~XXXXX~n~~g~Czas: ~w~XXXXX");
	PlayerTextDrawFont(playerid, Txdraw_InfoTXD[playerid][5], 2);
	PlayerTextDrawLetterSize(playerid, Txdraw_InfoTXD[playerid][5], 0.108332, 0.800001);
	PlayerTextDrawTextSize(playerid, Txdraw_InfoTXD[playerid][5], 187.000000, 124.000000);
	PlayerTextDrawSetOutline(playerid, Txdraw_InfoTXD[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, Txdraw_InfoTXD[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, Txdraw_InfoTXD[playerid][5], 2);
	PlayerTextDrawColor(playerid, Txdraw_InfoTXD[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, Txdraw_InfoTXD[playerid][5], 255);
	PlayerTextDrawBoxColor(playerid, Txdraw_InfoTXD[playerid][5], 9109529);
	PlayerTextDrawUseBox(playerid, Txdraw_InfoTXD[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, Txdraw_InfoTXD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, Txdraw_InfoTXD[playerid][5], 0);

	Txdraw_InfoTXD[playerid][6] = CreatePlayerTextDraw(playerid, 96.000000, 215.000000, "~r~Zachecamy do zapoznania sie z regulaminem.~h~~n~[] PTR-SERW.XAA.PL[] /regulamin []");
	PlayerTextDrawFont(playerid, Txdraw_InfoTXD[playerid][6], 2);
	PlayerTextDrawLetterSize(playerid, Txdraw_InfoTXD[playerid][6], 0.108332, 0.550000);
	PlayerTextDrawTextSize(playerid, Txdraw_InfoTXD[playerid][6], 187.000000, 124.000000);
	PlayerTextDrawSetOutline(playerid, Txdraw_InfoTXD[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, Txdraw_InfoTXD[playerid][6], 0);
	PlayerTextDrawAlignment(playerid, Txdraw_InfoTXD[playerid][6], 2);
	PlayerTextDrawColor(playerid, Txdraw_InfoTXD[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, Txdraw_InfoTXD[playerid][6], 255);
	PlayerTextDrawBoxColor(playerid, Txdraw_InfoTXD[playerid][6], 50);
	PlayerTextDrawUseBox(playerid, Txdraw_InfoTXD[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, Txdraw_InfoTXD[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, Txdraw_InfoTXD[playerid][6], 0);

	Txdraw_InfoTXD[playerid][7] = CreatePlayerTextDraw(playerid, 98.000000, 209.000000, "-");
	PlayerTextDrawFont(playerid, Txdraw_InfoTXD[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid, Txdraw_InfoTXD[playerid][7], 9.733325, 0.499992);
	PlayerTextDrawTextSize(playerid, Txdraw_InfoTXD[playerid][7], 298.500000, 75.000000);
	PlayerTextDrawSetOutline(playerid, Txdraw_InfoTXD[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, Txdraw_InfoTXD[playerid][7], 0);
	PlayerTextDrawAlignment(playerid, Txdraw_InfoTXD[playerid][7], 2);
	PlayerTextDrawColor(playerid, Txdraw_InfoTXD[playerid][7], 65535);
	PlayerTextDrawBackgroundColor(playerid, Txdraw_InfoTXD[playerid][7], 255);
	PlayerTextDrawBoxColor(playerid, Txdraw_InfoTXD[playerid][7], 135);
	PlayerTextDrawUseBox(playerid, Txdraw_InfoTXD[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, Txdraw_InfoTXD[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, Txdraw_InfoTXD[playerid][7], 0);

		
	
	}
	if(type == 1) //pokaz
	{
		for(new i = 0; i != 8; i++)
		{
			PlayerTextDrawShow(playerid, Txdraw_InfoTXD[playerid][i]);
		}
	}
	if(type == 2) //ukryj
	{
		for(new i = 0; i != 8; i++)
		{
			PlayerTextDrawHide(playerid, Txdraw_InfoTXD[playerid][i]);
		}
	}
	if(type == 3) //ukryj i usun
	{
		for(new i = 0; i != 8; i++)
		{
			PlayerTextDrawHide(playerid, Txdraw_InfoTXD[playerid][i]);
			PlayerTextDrawDestroy(playerid, Txdraw_InfoTXD[playerid][i]);
		}
	}
	if(type == 4) //refresh
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(PlayerData[i][pLogged] == false) continue;
			for(new ii = 0; ii != 8; ii++)
			{	
				PlayerTextDrawShow(i, Txdraw_InfoTXD[i][ii]);
			}
			PlayerTextDrawSetString(i, Txdraw_InfoTXD[i][5], info3);
			PlayerTextDrawSetString(i, Txdraw_InfoTXD[i][3], info2);
			PlayerTextDrawSetString(i, Txdraw_InfoTXD[i][2], info1);
			PlayerTextDrawSetString(i, Txdraw_InfoTXD[i][1], naglowek);
			KillTimer(PlayerData[i][pTimerInfoTXD]);
			PlayerData[i][pTimerInfoTXD] = SetTimerEx("HideInfoTXD", 10000, false, "d", i);
			
		}
	}
	if(type == 5) //refresh just for player
	{
		for(new ii = 0; ii != 8; ii++)
		{	
			PlayerTextDrawShow(playerid, Txdraw_InfoTXD[playerid][ii]);
		}
		PlayerTextDrawSetString(playerid, Txdraw_InfoTXD[playerid][5], info3);
		PlayerTextDrawSetString(playerid, Txdraw_InfoTXD[playerid][3], info2);
		PlayerTextDrawSetString(playerid, Txdraw_InfoTXD[playerid][2], info1);
		PlayerTextDrawSetString(playerid, Txdraw_InfoTXD[playerid][1], naglowek);
		KillTimer(PlayerData[playerid][pTimerInfoTXD]);
		PlayerData[playerid][pTimerInfoTXD] = SetTimerEx("HideInfoTXD", 10000, false, "d", playerid);

	}
	return 1;
}

forward HideInfoTXD(playerid);
public HideInfoTXD(playerid)
{
	PlayerDataTXD(playerid, 2);
	return 1;
}

forward HideVehInfo(playerid);
public HideVehInfo(playerid)
{
	PlayerVehicleInfo(playerid, 2);
	return 1;
}


stock PlayerKasynoPanel(playerid, type = 0)
{
	if(PlayerData[playerid][pLogged] == false) return 1;
	if(type == 0)
	{
		Txd_panelkasyno[playerid][0] = CreatePlayerTextDraw(playerid, 112.666664, 112.414817, "ld_poke:cdback");
		PlayerTextDrawLetterSize(playerid, Txd_panelkasyno[playerid][0], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_panelkasyno[playerid][0], 415.999969, 269.629608);
		PlayerTextDrawAlignment(playerid, Txd_panelkasyno[playerid][0], 1);
		PlayerTextDrawColor(playerid, Txd_panelkasyno[playerid][0], 69905);
		PlayerTextDrawSetShadow(playerid, Txd_panelkasyno[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelkasyno[playerid][0], 0);
		PlayerTextDrawFont(playerid, Txd_panelkasyno[playerid][0], 4);

		Txd_panelkasyno[playerid][1] = CreatePlayerTextDraw(playerid, 261.000061, 124.859252, "KASYNO");
		PlayerTextDrawLetterSize(playerid, Txd_panelkasyno[playerid][1], 0.734996, 2.242963);
		PlayerTextDrawAlignment(playerid, Txd_panelkasyno[playerid][1], 1);
		PlayerTextDrawColor(playerid, Txd_panelkasyno[playerid][1], -1);
		PlayerTextDrawSetShadow(playerid, Txd_panelkasyno[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelkasyno[playerid][1], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelkasyno[playerid][1], 51);
		PlayerTextDrawFont(playerid, Txd_panelkasyno[playerid][1], 2);
		PlayerTextDrawSetProportional(playerid, Txd_panelkasyno[playerid][1], 1);

		Txd_panelkasyno[playerid][2] = CreatePlayerTextDraw(playerid, 140.000000, 169.244445, "ld_poke:cdback");
		PlayerTextDrawLetterSize(playerid, Txd_panelkasyno[playerid][2], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_panelkasyno[playerid][2], 105.000000, 158.459259);
		PlayerTextDrawAlignment(playerid, Txd_panelkasyno[playerid][2], 1);
		PlayerTextDrawColor(playerid, Txd_panelkasyno[playerid][2], 69905);
		PlayerTextDrawSetShadow(playerid, Txd_panelkasyno[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelkasyno[playerid][2], 0);
		PlayerTextDrawFont(playerid, Txd_panelkasyno[playerid][2], 4);

		Txd_panelkasyno[playerid][3] = CreatePlayerTextDraw(playerid, 270.000000, 169.244445, "ld_poke:cdback");
		PlayerTextDrawLetterSize(playerid, Txd_panelkasyno[playerid][3], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_panelkasyno[playerid][3], 105.000000, 158.459259);
		PlayerTextDrawAlignment(playerid, Txd_panelkasyno[playerid][3], 1);
		PlayerTextDrawColor(playerid, Txd_panelkasyno[playerid][3], 69905);
		PlayerTextDrawSetShadow(playerid, Txd_panelkasyno[playerid][3], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelkasyno[playerid][3], 0);
		PlayerTextDrawFont(playerid, Txd_panelkasyno[playerid][3], 4);

		Txd_panelkasyno[playerid][4] = CreatePlayerTextDraw(playerid, 398.333312, 169.244445, "ld_poke:cdback");
		PlayerTextDrawLetterSize(playerid, Txd_panelkasyno[playerid][4], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_panelkasyno[playerid][4], 105.000000, 158.459259);
		PlayerTextDrawAlignment(playerid, Txd_panelkasyno[playerid][4], 1);
		PlayerTextDrawColor(playerid, Txd_panelkasyno[playerid][4], 69905);
		PlayerTextDrawSetShadow(playerid, Txd_panelkasyno[playerid][4], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelkasyno[playerid][4], 0);
		PlayerTextDrawFont(playerid, Txd_panelkasyno[playerid][4], 4);

		Txd_panelkasyno[playerid][5] = CreatePlayerTextDraw(playerid, 138.666671, 344.711120, "ld_poke:cdback");
		PlayerTextDrawLetterSize(playerid, Txd_panelkasyno[playerid][5], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_panelkasyno[playerid][5], 365.000030, 31.111122);
		PlayerTextDrawAlignment(playerid, Txd_panelkasyno[playerid][5], 1);
		PlayerTextDrawColor(playerid, Txd_panelkasyno[playerid][5], 69905);
		PlayerTextDrawSetShadow(playerid, Txd_panelkasyno[playerid][5], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelkasyno[playerid][5], 0);
		PlayerTextDrawFont(playerid, Txd_panelkasyno[playerid][5], 4);

		Txd_panelkasyno[playerid][6] = CreatePlayerTextDraw(playerid, 148.666687, 354.251892, "KWOTA: $0");
		PlayerTextDrawLetterSize(playerid, Txd_panelkasyno[playerid][6], 0.428333, 1.517037);
		PlayerTextDrawTextSize(playerid, Txd_panelkasyno[playerid][6], 233.666717, 2.903703);
		PlayerTextDrawAlignment(playerid, Txd_panelkasyno[playerid][6], 1);
		PlayerTextDrawColor(playerid, Txd_panelkasyno[playerid][6], -1);
		//PlayerTextDrawUseBox(playerid, Txd_panelkasyno[playerid][6], true);
		PlayerTextDrawBoxColor(playerid, Txd_panelkasyno[playerid][6], 255);
		PlayerTextDrawSetShadow(playerid, Txd_panelkasyno[playerid][6], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelkasyno[playerid][6], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelkasyno[playerid][6], 51);
		PlayerTextDrawFont(playerid, Txd_panelkasyno[playerid][6], 3);
		PlayerTextDrawSetProportional(playerid, Txd_panelkasyno[playerid][6], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelkasyno[playerid][6], true);
		
		Txd_panelkasyno[playerid][7] = CreatePlayerTextDraw(playerid, 305.333343, 354.251892, "GRAJ!");
		PlayerTextDrawLetterSize(playerid, Txd_panelkasyno[playerid][7], 0.428333, 1.517037);
		PlayerTextDrawTextSize(playerid, Txd_panelkasyno[playerid][7], 346.000000, 19.496294);
		PlayerTextDrawAlignment(playerid, Txd_panelkasyno[playerid][7], 1);
		PlayerTextDrawColor(playerid, Txd_panelkasyno[playerid][7], -1);
		//PlayerTextDrawUseBox(playerid, Txd_panelkasyno[playerid][7], true);
		PlayerTextDrawBoxColor(playerid, Txd_panelkasyno[playerid][7], 255);
		PlayerTextDrawSetShadow(playerid, Txd_panelkasyno[playerid][7], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelkasyno[playerid][7], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelkasyno[playerid][7], 51);
		PlayerTextDrawFont(playerid, Txd_panelkasyno[playerid][7], 3);
		PlayerTextDrawSetProportional(playerid, Txd_panelkasyno[playerid][7], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelkasyno[playerid][7], true);

		Txd_panelkasyno[playerid][8] = CreatePlayerTextDraw(playerid, 427.000000, 354.251892, "WYJDZ");
		PlayerTextDrawLetterSize(playerid, Txd_panelkasyno[playerid][8], 0.428333, 1.517037);
		PlayerTextDrawTextSize(playerid, Txd_panelkasyno[playerid][8], 479.333404, 51.022209);
		PlayerTextDrawAlignment(playerid, Txd_panelkasyno[playerid][8], 1);
		PlayerTextDrawColor(playerid, Txd_panelkasyno[playerid][8], -1);
		//PlayerTextDrawUseBox(playerid, Txd_panelkasyno[playerid][8], true);
		PlayerTextDrawBoxColor(playerid, Txd_panelkasyno[playerid][8], 255);
		PlayerTextDrawSetShadow(playerid, Txd_panelkasyno[playerid][8], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelkasyno[playerid][8], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelkasyno[playerid][8], 51);
		PlayerTextDrawFont(playerid, Txd_panelkasyno[playerid][8], 3);
		PlayerTextDrawSetProportional(playerid, Txd_panelkasyno[playerid][8], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelkasyno[playerid][8], true);


		Txd_panelkasyno[playerid][9] = CreatePlayerTextDraw(playerid, 175.666732, 162.607421, "5");
		PlayerTextDrawLetterSize(playerid, Txd_panelkasyno[playerid][9], 1.463332, 17.964447);
		PlayerTextDrawAlignment(playerid, Txd_panelkasyno[playerid][9], 1);
		PlayerTextDrawColor(playerid, Txd_panelkasyno[playerid][9], -1);
		PlayerTextDrawUseBox(playerid, Txd_panelkasyno[playerid][9], true);
		PlayerTextDrawBoxColor(playerid, Txd_panelkasyno[playerid][9], 0);
		PlayerTextDrawSetShadow(playerid, Txd_panelkasyno[playerid][9], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelkasyno[playerid][9], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelkasyno[playerid][9], 51);
		PlayerTextDrawFont(playerid, Txd_panelkasyno[playerid][9], 2);
		PlayerTextDrawSetProportional(playerid, Txd_panelkasyno[playerid][9], 1);

		Txd_panelkasyno[playerid][10] = CreatePlayerTextDraw(playerid, 302.333312, 162.607421, "5");
		PlayerTextDrawLetterSize(playerid, Txd_panelkasyno[playerid][10], 1.463332, 17.964447);
		PlayerTextDrawAlignment(playerid, Txd_panelkasyno[playerid][10], 1);
		PlayerTextDrawColor(playerid, Txd_panelkasyno[playerid][10], -1);
		PlayerTextDrawUseBox(playerid, Txd_panelkasyno[playerid][10], true);
		PlayerTextDrawBoxColor(playerid, Txd_panelkasyno[playerid][10], 0);
		PlayerTextDrawSetShadow(playerid, Txd_panelkasyno[playerid][10], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelkasyno[playerid][10], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelkasyno[playerid][10], 51);
		PlayerTextDrawFont(playerid, Txd_panelkasyno[playerid][10], 2);
		PlayerTextDrawSetProportional(playerid, Txd_panelkasyno[playerid][10], 1);

		Txd_panelkasyno[playerid][11] = CreatePlayerTextDraw(playerid, 434.000061, 162.607421, "5");
		PlayerTextDrawLetterSize(playerid, Txd_panelkasyno[playerid][11], 1.463332, 17.964447);
		PlayerTextDrawAlignment(playerid, Txd_panelkasyno[playerid][11], 1);
		PlayerTextDrawColor(playerid, Txd_panelkasyno[playerid][11], -1);
		PlayerTextDrawUseBox(playerid, Txd_panelkasyno[playerid][11], true);
		PlayerTextDrawBoxColor(playerid, Txd_panelkasyno[playerid][11], 0);
		PlayerTextDrawSetShadow(playerid, Txd_panelkasyno[playerid][11], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelkasyno[playerid][11], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelkasyno[playerid][11], 51);
		PlayerTextDrawFont(playerid, Txd_panelkasyno[playerid][11], 2);
		PlayerTextDrawSetProportional(playerid, Txd_panelkasyno[playerid][11], 1);

		Txd_panelkasyno[playerid][12] = CreatePlayerTextDraw(playerid, 145.333328, 180.029647, "ld_slot:cherry");
		PlayerTextDrawLetterSize(playerid, Txd_panelkasyno[playerid][12], 0.006666, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_panelkasyno[playerid][12], 94.666641, 185.422332);
		PlayerTextDrawAlignment(playerid, Txd_panelkasyno[playerid][12], 1);
		PlayerTextDrawColor(playerid, Txd_panelkasyno[playerid][12], -1);
		PlayerTextDrawSetShadow(playerid, Txd_panelkasyno[playerid][12], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelkasyno[playerid][12], 0);
		PlayerTextDrawFont(playerid, Txd_panelkasyno[playerid][12], 4);

		Txd_panelkasyno[playerid][13] = CreatePlayerTextDraw(playerid, 275.000091, 180.029647, "ld_slot:cherry");
		PlayerTextDrawLetterSize(playerid, Txd_panelkasyno[playerid][13], 0.006666, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_panelkasyno[playerid][13], 94.666641, 185.422332);
		PlayerTextDrawAlignment(playerid, Txd_panelkasyno[playerid][13], 1);
		PlayerTextDrawColor(playerid, Txd_panelkasyno[playerid][13], -1);
		PlayerTextDrawSetShadow(playerid, Txd_panelkasyno[playerid][13], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelkasyno[playerid][13], 0);
		PlayerTextDrawFont(playerid, Txd_panelkasyno[playerid][13], 4);

		Txd_panelkasyno[playerid][14] = CreatePlayerTextDraw(playerid, 403.333282, 180.029647, "ld_slot:cherry");
		PlayerTextDrawLetterSize(playerid, Txd_panelkasyno[playerid][14], 0.006666, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_panelkasyno[playerid][14], 94.666641, 185.422332);
		PlayerTextDrawAlignment(playerid, Txd_panelkasyno[playerid][14], 1);
		PlayerTextDrawColor(playerid, Txd_panelkasyno[playerid][14], -1);
		PlayerTextDrawSetShadow(playerid, Txd_panelkasyno[playerid][14], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelkasyno[playerid][14], 0);
		PlayerTextDrawFont(playerid, Txd_panelkasyno[playerid][14], 4);

		
	}
	if(type == 1)
	{
		for(new i = 0; i != 15; i++)
		{
			PlayerTextDrawShow(playerid, Txd_panelkasyno[playerid][i]);
		}
		SelectTextDraw(playerid, 0x00FF00FF);
		TogglePlayerControllable(playerid, false);
		PlayerData[playerid][pShowPanelKasyna] = true;
	}
	if(type == 2)
	{
		GivePlayerCash(playerid, PlayerData[playerid][pKasynoWygrana]);
		PlayerData[playerid][pKasynoWygrana] = 0;
		PlayerData[playerid][pShowPanelKasyna] = false; 
		TogglePlayerControllable(playerid, true);
		CancelSelectTextDraw(playerid);
		for(new i = 0; i != 15; i++)
		{
			PlayerTextDrawHide(playerid, Txd_panelkasyno[playerid][i]);
		}
	}
	if(type == 3)
	{
		for(new i = 0; i != 15; i++)
		{
			PlayerTextDrawHide(playerid, Txd_panelkasyno[playerid][i]);
			PlayerTextDrawDestroy(playerid, Txd_panelkasyno[playerid][i]);
		}
	}
	if(type == 4)
	{
		new tdstring[100];
		format(tdstring, sizeof(tdstring), "KWOTA: $%d", PlayerData[playerid][pKasynoWygrana]);
		PlayerTextDrawSetString(playerid, Txd_panelkasyno[playerid][6], tdstring);
	}
	return 1;
}


stock PlayerSpecPanel(playerid, type = 0)
{
	if(PlayerData[playerid][pLogged] == false) return 1;
	if(type == 0)
	{
		Txd_spec_info[playerid][0] = CreatePlayerTextDraw(playerid, 478.333343, 119.466674, "ld_poke:cdback");
		PlayerTextDrawLetterSize(playerid, Txd_spec_info[playerid][0], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_spec_info[playerid][0], 146.666717, 233.125961);
		PlayerTextDrawAlignment(playerid, Txd_spec_info[playerid][0], 1);
		PlayerTextDrawColor(playerid, Txd_spec_info[playerid][0], 69905);
		PlayerTextDrawSetShadow(playerid, Txd_spec_info[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, Txd_spec_info[playerid][0], 0);
		PlayerTextDrawBackgroundColor(playerid, Txd_spec_info[playerid][0], 69905);
		PlayerTextDrawFont(playerid, Txd_spec_info[playerid][0], 4);
		
		Txd_spec_info[playerid][1] = CreatePlayerTextDraw(playerid, 526.666809, 131.496261, "Spec");
		PlayerTextDrawLetterSize(playerid, Txd_spec_info[playerid][1], 0.449999, 1.600000);
		PlayerTextDrawAlignment(playerid, Txd_spec_info[playerid][1], 1);
		PlayerTextDrawColor(playerid, Txd_spec_info[playerid][1], -1);
		PlayerTextDrawSetShadow(playerid, Txd_spec_info[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, Txd_spec_info[playerid][1], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_spec_info[playerid][1], 51);
		PlayerTextDrawFont(playerid, Txd_spec_info[playerid][1], 2);
		PlayerTextDrawSetProportional(playerid, Txd_spec_info[playerid][1], 1);
		
		Txd_spec_info[playerid][2] = CreatePlayerTextDraw(playerid, 484.000000, 176.296340, "~y~~h~Gracz: ~g~~h~KaraluchyPodPoduchy~n~HP: 100%~n~Armor: 100%~n~Frakcja: Policja~n~Ranga: Gracz~n~Pojazd: Infernus");
		PlayerTextDrawLetterSize(playerid, Txd_spec_info[playerid][2], 0.268332, 0.915552);
		PlayerTextDrawAlignment(playerid, Txd_spec_info[playerid][2], 1);
		PlayerTextDrawColor(playerid, Txd_spec_info[playerid][2], -1);
		PlayerTextDrawSetShadow(playerid, Txd_spec_info[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, Txd_spec_info[playerid][2], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_spec_info[playerid][2], 51);
		PlayerTextDrawFont(playerid, Txd_spec_info[playerid][2], 1);
		PlayerTextDrawSetProportional(playerid, Txd_spec_info[playerid][2], 1);
		
		Txd_spec_info[playerid][3] = CreatePlayerTextDraw(playerid, 484.333282, 226.488845, "Pojazd HP: 100%~n~Pojazd predkosc: 100km/h~n~Bron: Minigun~n~Amunicja: 9999~n~");
		PlayerTextDrawLetterSize(playerid, Txd_spec_info[playerid][3], 0.268332, 0.915552);
		PlayerTextDrawAlignment(playerid, Txd_spec_info[playerid][3], 1);
		PlayerTextDrawColor(playerid, Txd_spec_info[playerid][3], -1);
		PlayerTextDrawSetShadow(playerid, Txd_spec_info[playerid][3], 0);
		PlayerTextDrawSetOutline(playerid, Txd_spec_info[playerid][3], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_spec_info[playerid][3], 51);
		PlayerTextDrawFont(playerid, Txd_spec_info[playerid][3], 1);
		PlayerTextDrawSetProportional(playerid, Txd_spec_info[playerid][3], 1);
		
		
		Txd_spec_info[playerid][4] = CreatePlayerTextDraw(playerid, 526.333312, 280.414825, "KICK");
		PlayerTextDrawLetterSize(playerid, Txd_spec_info[playerid][4], 0.449999, 1.600000);
		PlayerTextDrawTextSize(playerid, Txd_spec_info[playerid][4], 573.333801, 26.962966);
		PlayerTextDrawAlignment(playerid, Txd_spec_info[playerid][4], 1);
		PlayerTextDrawColor(playerid, Txd_spec_info[playerid][4], -1);
		//PlayerTextDrawUseBox(playerid, Txd_spec_info[playerid][4], true);
		PlayerTextDrawBoxColor(playerid, Txd_spec_info[playerid][4], 255);
		PlayerTextDrawSetShadow(playerid, Txd_spec_info[playerid][4], 0);
		PlayerTextDrawSetOutline(playerid, Txd_spec_info[playerid][4], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_spec_info[playerid][4], 51);
		PlayerTextDrawFont(playerid, Txd_spec_info[playerid][4], 2);
		PlayerTextDrawSetProportional(playerid, Txd_spec_info[playerid][4], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_spec_info[playerid][4], true);
		
		Txd_spec_info[playerid][5] = CreatePlayerTextDraw(playerid, 526.666625, 301.985687, "WARN");
		PlayerTextDrawLetterSize(playerid, Txd_spec_info[playerid][5], 0.449999, 1.600000);
		PlayerTextDrawTextSize(playerid, Txd_spec_info[playerid][5], 579.666870, 26.962966);
		PlayerTextDrawAlignment(playerid, Txd_spec_info[playerid][5], 1);
		PlayerTextDrawColor(playerid, Txd_spec_info[playerid][5], -1);
		//PlayerTextDrawUseBox(playerid, Txd_spec_info[playerid][5], true);
		PlayerTextDrawBoxColor(playerid, Txd_spec_info[playerid][5], 255);
		PlayerTextDrawSetShadow(playerid, Txd_spec_info[playerid][5], 0);
		PlayerTextDrawSetOutline(playerid, Txd_spec_info[playerid][5], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_spec_info[playerid][5], 51);
		PlayerTextDrawFont(playerid, Txd_spec_info[playerid][5], 2);
		PlayerTextDrawSetProportional(playerid, Txd_spec_info[playerid][5], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_spec_info[playerid][5], true);
		
		Txd_spec_info[playerid][6] = CreatePlayerTextDraw(playerid, 526.666625, 323.555694, "BAN");
		PlayerTextDrawLetterSize(playerid, Txd_spec_info[playerid][6], 0.449999, 1.600000);
		PlayerTextDrawTextSize(playerid, Txd_spec_info[playerid][6], 566.333862, 26.962966);
		PlayerTextDrawAlignment(playerid, Txd_spec_info[playerid][6], 1);
		PlayerTextDrawColor(playerid, Txd_spec_info[playerid][6], -1);
		//PlayerTextDrawUseBox(playerid, Txd_spec_info[playerid][6], true);
		PlayerTextDrawBoxColor(playerid, Txd_spec_info[playerid][6], 255);
		PlayerTextDrawSetShadow(playerid, Txd_spec_info[playerid][6], 0);
		PlayerTextDrawSetOutline(playerid, Txd_spec_info[playerid][6], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_spec_info[playerid][6], 51);
		PlayerTextDrawFont(playerid, Txd_spec_info[playerid][6], 2);
		PlayerTextDrawSetProportional(playerid, Txd_spec_info[playerid][6], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_spec_info[playerid][6], true);
		
		
		
	}
	if(type == 1)
	{
		for(new i = 0; i != 7; i++)
		{
			PlayerTextDrawShow(playerid, Txd_spec_info[playerid][i]);
		}
		SelectTextDraw(playerid, 0x00FF00FF);
	}
	if(type == 2)
	{
		CancelSelectTextDraw(playerid);
		for(new i = 0; i != 7; i++)
		{
			PlayerTextDrawHide(playerid, Txd_spec_info[playerid][i]);
		}
		TogglePlayerControllable(playerid, true);
	}
	if(type == 3)
	{
		for(new i = 0; i != 7; i++)
		{
			PlayerTextDrawHide(playerid, Txd_spec_info[playerid][i]);
			PlayerTextDrawDestroy(playerid, Txd_spec_info[playerid][i]);
		}
	}
	if(type == 4)
	{
		if(PlayerData[playerid][pSpecID] == -1) return 1;
		new player = PlayerData[playerid][pSpecID], tdstring[300], get_name_weapon[40], str_frakcja[34], str_ranga[34], Float:hp, Float:armor, Float:vHPP;
		
		
		
		switch(PlayerData[player][pFrakcja])
		{
			case 1: str_frakcja = ""#GRUPA_LEVEL_1"";
			case 2: str_frakcja = ""#GRUPA_LEVEL_2"";
			case 3: str_frakcja = ""#GRUPA_LEVEL_3"";
			case 4: str_frakcja = ""#GRUPA_LEVEL_4"";
			case 5: str_frakcja = ""#GRUPA_LEVEL_5"";
			case 6: str_frakcja = ""#GRUPA_LEVEL_6"";
			case 7: str_frakcja = ""#GRUPA_LEVEL_7"";
			case 8: str_frakcja = ""#GRUPA_LEVEL_8"";
			case 9: str_frakcja = ""#GRUPA_LEVEL_9"";
			case 10: str_frakcja = ""#GRUPA_LEVEL_10"";
		}
		switch(PlayerData[player][pRanga])
		{
			case RANGA_ZASLUZONY: 			str_ranga = ""#RANGA_LEVEL_991"";
			case RANGA_TECHNIK_TS3: 		str_ranga = ""#RANGA_LEVEL_992"";
			case RANGA_PROGRAMISTA: 		str_ranga = ""#RANGA_LEVEL_993"";
			case RANGA_MAPER: 				str_ranga = ""#RANGA_LEVEL_994"";
			case RANGA_POMOCNIK: 			str_ranga = ""#RANGA_LEVEL_995"";
			case RANGA_MODERATOR: 			str_ranga = ""#RANGA_LEVEL_996"";
			case RANGA_JUNIORADMIN: 		str_ranga = ""#RANGA_LEVEL_997"";
			case RANGA_ADMINISTRATOR: 		str_ranga = ""#RANGA_LEVEL_998"";
			case RANGA_WSPOLWLASCICIEL: 	str_ranga = ""#RANGA_LEVEL_999"";
			case RANGA_WLASCICIEL: 			str_ranga = ""#RANGA_LEVEL_1000"";
		}
		
		GetPlayerHealth(player, hp);
		GetPlayerArmour(player, armor);
		GetWeaponName(GetPlayerWeapon(player), get_name_weapon, sizeof(get_name_weapon));
		
		
		format(tdstring, sizeof(tdstring), "\
		~y~~h~\
		Gracz: ~g~~h~%s~n~\
		HP: %d/100~n~\
		Armor: %d/100~n~\
		Frakcja: %s~n~\
		Ranga: %s~n~\
		", PlayerData[player][pName], floatround(hp), floatround(armor), str_frakcja, str_ranga);
		
		PlayerTextDrawSetString(playerid, Txd_spec_info[playerid][2], tdstring);
		
		if(GetPlayerVehicleID(player) != 0)
		{
			GetVehicleHealth(GetPlayerVehicleID(player), vHPP);
			vHPP = (vHPP - 249.9) / 7.5;
			format(tdstring, sizeof(tdstring), "\
			Pojazd: %s~n~\
			Pojazd HP: %.0f%/100~n~\
			Pojazd predkosc: %dkm/h~n~\
			Bron: %s~n~\
			Amunicja: %d\
			", CarList[GetVehicleModel(GetPlayerVehicleID(player)) - 400], vHPP, GetVehicleSpeed(GetPlayerVehicleID(player)), get_name_weapon, GetPlayerAmmo(player));
		}
		else
		{
			format(tdstring, sizeof(tdstring), "\
			Pojazd: ---~n~\
			Pojazd HP: ---/100~n~\
			Pojazd predkosc: ---km/h~n~\
			Bron: %s~n~\
			Amunicja: %d\
			", get_name_weapon, GetPlayerAmmo(player));
		}
		PlayerTextDrawSetString(playerid, Txd_spec_info[playerid][3], tdstring);
	}
	return 1;
}

stock PlayerFirmaPanel(playerid, type = 0)
{
	if(PlayerData[playerid][pLogged] == false) return 1;
	if(type == 0)
	{
	
		/*Txd_panelfirmy[playerid][0] = CreatePlayerTextDraw(playerid, 445.666870, 121.381423, "usebox");
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][0], 0.000000, 25.336814);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][0], 204.666656, 0.000000);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][0], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][0], 0);
		PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][0], true);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][0], 102);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][0], 0);
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][0], 0);

		Txd_panelfirmy[playerid][1] = CreatePlayerTextDraw(playerid, 208.333404, 120.711021, "Panel firmy (Jakas nazwa firmy):");
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][1], 0.161666, 0.853333);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][1], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][1], -1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][1], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][1], 51);
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][1], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][1], 1);

		Txd_panelfirmy[playerid][2] = CreatePlayerTextDraw(playerid, 249.000030, 142.696166, "Dodaj pracownika");
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][2], 0.326665, 1.367704);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][2],  450.000000, 15.000000);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][2], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][2], -1);
		//PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][2], true);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][2], 255);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][2], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][2], 51);
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][2], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][2], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][2], true);

		Txd_panelfirmy[playerid][3] = CreatePlayerTextDraw(playerid, 249.000030, 142.696166 + 20 * 1, "Wyrzuc pracownika");
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][3], 0.326665, 1.367704);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][3],  450.000000, 15.000000);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][3], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][3], -1);
		//PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][3], true);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][3], 255);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][3], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][3], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][3], 51);
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][3], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][3], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][3], true);

		Txd_panelfirmy[playerid][4] = CreatePlayerTextDraw(playerid, 249.000030, 142.696166 + 20 * 2, "Lista pracownikow");
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][4], 0.326665, 1.367704);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][4],  450.000000, 15.000000);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][4], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][4], -1);
		//PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][4], true);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][4], 255);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][4], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][4], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][4], 51);
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][4], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][4], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][4], true);

		Txd_panelfirmy[playerid][5] = CreatePlayerTextDraw(playerid, 249.000030, 142.696166 + 20 * 3, "Wplac pieniadze");
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][5],  0.326665, 1.367704);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][5],  450.000000, 15.000000);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][5], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][5], -1);
		//PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][5], true);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][5], 255);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][5], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][5], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][5], 51);
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][5], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][5], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][5], true);

		Txd_panelfirmy[playerid][6] = CreatePlayerTextDraw(playerid, 249.000030, 142.696166 + 20 * 4, "Wyplac pieniadze");
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][6], 0.326665, 1.367704);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][6],  450.000000, 15.000000);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][6], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][6], -1);
		//PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][6], true);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][6], 255);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][6], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][6], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][6], 51);
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][6], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][6], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][6], true);

		Txd_panelfirmy[playerid][7] = CreatePlayerTextDraw(playerid, 249.000030, 142.696166 + 20 * 5, "Statystyki firmy");
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][7], 0.326665, 1.367704);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][7],  450.000000, 15.000000);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][7], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][7], -1);
		///PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][7], true);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][7], 255);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][7], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][7], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][7], 51);
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][7], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][7], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][7], true);
		
		
		Txd_panelfirmy[playerid][11] = CreatePlayerTextDraw(playerid, 249.000030, 142.696166 + 20 * 6, "Statystyki pracownika");
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][11], 0.326665, 1.367704);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][11],  450.000000, 15.000000);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][11], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][11], -1);
		///PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][11], true);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][11], 255);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][11], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][11], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][11], 51);
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][11], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][11], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][11], true);
		
		
		Txd_panelfirmy[playerid][8] = CreatePlayerTextDraw(playerid, 249.000030, 142.696166 + 20 * 7,  "Ustaw range pracownikowi");
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][8], 0.326665, 1.367704);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][8],  450.000000, 15.000000);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][8], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][8], -1);
		//PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][8], true);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][8], 255);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][8], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][8], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][8], 51);
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][8], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][8], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][8], true);

		Txd_panelfirmy[playerid][9] = CreatePlayerTextDraw(playerid, 249.000030, 142.696166 + 20 * 8, "Pojazdy firmowe");
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][9], 0.326665, 1.367704);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][9],  450.000000, 15.000000);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][9], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][9], -1);
		//PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][9], true);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][9], 255);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][9], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][9], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][9], 51);
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][9], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][9], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][9], true);
		
		Txd_panelfirmy[playerid][10] = CreatePlayerTextDraw(playerid, 249.000030, 142.696166 + 20 * 9, "Zamknij");
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][10], 0.326665, 1.367704);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][10], 450.000000, 15.000000);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][10], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][10], -1);
		//PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][8], true);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][10], 255);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][10], 0);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][10], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][10], 51);
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][10], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][10], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][10], true);*/
		
		/////////////////////////////////////
		
		Txd_panelfirmy[playerid][12] = CreatePlayerTextDraw(playerid, 316.000000, 189.000000, "_");
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][12], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][12], 0.704164, 18.450004);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][12], 298.500000, 276.500000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][12], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][12], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][12], 2);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][12], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][12], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][12], 135);
		PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][12], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][12], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][12], 0);

		Txd_panelfirmy[playerid][13] = CreatePlayerTextDraw(playerid, 316.000000, 189.000000, "_");
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][13], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][13], 0.600000, 1.449990);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][13], 292.500000, 276.500000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][13], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][13], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][13], 2);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][13], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][13], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][13], 9109639);
		PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][13], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][13], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][13], 0);

		Txd_panelfirmy[playerid][14] = CreatePlayerTextDraw(playerid, 316.000000, 357.000000, "_");
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][14], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][14], 0.600000, -0.250001);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][14], 193.500000, 276.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][14], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][14], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][14], 2);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][14], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][14], -1378294017);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][14], 9109639);
		PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][14], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][14], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][14], 0);

		Txd_panelfirmy[playerid][15] = CreatePlayerTextDraw(playerid, 315.000000, 191.000000, "_");
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][15], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][15], 0.537500, 1.049980);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][15], 298.500000, 149.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][15], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][15], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][15], 2);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][15], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][15], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][15], 135);
		PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][15], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][15], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][15], 0);

		Txd_panelfirmy[playerid][2] = CreatePlayerTextDraw(playerid, 228.000000, 215.000000, "Dodaj pracownika");
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][2], 0.200000, 1.049999);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][2], 291.500000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][2], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][2], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][2], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][2], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][2], -1061109760);
		PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][2], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][2], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][2], 1);

		Txd_panelfirmy[playerid][1] = CreatePlayerTextDraw(playerid, 259.000000, 189.000000, "Panel firmy (Jakas nazwa firmy):");
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][1], 0.195831, 1.249999);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][1], 372.500000, 13.500000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][1], 1);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][1], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][1], -65281);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][1], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][1], 50);
		PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][1], 0);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][1], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][1], 0);

		Txd_panelfirmy[playerid][16] = CreatePlayerTextDraw(playerid, 393.000000, 174.000000, "Preview_Model");
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][16], 5);
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][16], 0.600000, 2.000000);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][16], 33.000000, 42.500000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][16], 0);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][16], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][16], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][16], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][16], 0);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][16], 255);
		PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][16], 0);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][16], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][16], 0);
		PlayerTextDrawSetPreviewModel(playerid, Txd_panelfirmy[playerid][16], 515);
		PlayerTextDrawSetPreviewRot(playerid, Txd_panelfirmy[playerid][16], -10.000000, 0.000000, -90.000000, 1.000000);
		PlayerTextDrawSetPreviewVehCol(playerid, Txd_panelfirmy[playerid][16], 49, 6);

		Txd_panelfirmy[playerid][17] = CreatePlayerTextDraw(playerid, 203.000000, 174.000000, "Preview_Model");
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][17], 5);
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][17], 0.600000, 2.000000);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][17], 33.000000, 42.500000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][17], 0);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][17], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][17], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][17], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][17], 0);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][17], 255);
		PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][17], 0);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][17], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][17], 0);
		PlayerTextDrawSetPreviewModel(playerid, Txd_panelfirmy[playerid][17], 515);
		PlayerTextDrawSetPreviewRot(playerid, Txd_panelfirmy[playerid][17], -10.000000, 0.000000, -272.000000, 1.000000);
		PlayerTextDrawSetPreviewVehCol(playerid, Txd_panelfirmy[playerid][17], 49, 6);

		Txd_panelfirmy[playerid][18] = CreatePlayerTextDraw(playerid, 169.000000, 168.000000, "Preview_Model");
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][18], 5);
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][18], 0.600000, 2.000000);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][18], 50.000000, 57.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][18], 0);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][18], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][18], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][18], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][18], 0);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][18], 255);
		PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][18], 0);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][18], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][18], 0);
		PlayerTextDrawSetPreviewModel(playerid, Txd_panelfirmy[playerid][18], 435);
		PlayerTextDrawSetPreviewRot(playerid, Txd_panelfirmy[playerid][18], -10.000000, 0.000000, -261.000000, 1.000000);
		PlayerTextDrawSetPreviewVehCol(playerid, Txd_panelfirmy[playerid][18], 1, 1);

		Txd_panelfirmy[playerid][19] = CreatePlayerTextDraw(playerid, 411.000000, 168.000000, "Preview_Model");
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][19], 5);
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][19], 0.600000, 2.000000);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][19], 50.500000, 57.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][19], 0);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][19], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][19], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][19], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][19], 0);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][19], 255);
		PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][19], 0);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][19], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][19], 0);
		PlayerTextDrawSetPreviewModel(playerid, Txd_panelfirmy[playerid][19], 435);
		PlayerTextDrawSetPreviewRot(playerid, Txd_panelfirmy[playerid][19], -10.000000, 0.000000, -90.000000, 1.000000);
		PlayerTextDrawSetPreviewVehCol(playerid, Txd_panelfirmy[playerid][19], 1, 1);

		Txd_panelfirmy[playerid][3] = CreatePlayerTextDraw(playerid, 334.000000, 215.000000, "Zwolnij pracownika");
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][3], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][3], 0.200000, 1.049999);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][3], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][3], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][3], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][3], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][3], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][3], -1061109760);
		PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][3], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][3], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][3], 1);

		Txd_panelfirmy[playerid][5] = CreatePlayerTextDraw(playerid, 228.000000, 242.000000, "Wplac pieniadze");
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][5], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][5], 0.200000, 1.049999);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][5], 291.500000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][5], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][5], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][5], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][5], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][5], -1061109760);
		PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][5], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][5], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][5], 1);

		Txd_panelfirmy[playerid][6] = CreatePlayerTextDraw(playerid, 338.000000, 242.000000, "Wyplac pieniadze");
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][6], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][6], 0.200000, 1.049999);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][6], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][6], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][6], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][6], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][6], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][6], 50);
		PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][6], 0);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][6], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][6], 1);

		Txd_panelfirmy[playerid][7] = CreatePlayerTextDraw(playerid, 340.000000, 269.000000, "Statystyki firmy");
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][7], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][7], 0.200000, 1.049999);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][7], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][7], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][7], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][7], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][7], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][7], 50);
		PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][7], 0);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][7], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][7], 1);

		Txd_panelfirmy[playerid][11] = CreatePlayerTextDraw(playerid, 221.000000, 269.000000, "Statystyki pracownika");
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][11], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][11], 0.200000, 1.049999);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][11], 299.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][11], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][11], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][11], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][11], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][11], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][11], 0);
		PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][11], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][11], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][11], 1);

		Txd_panelfirmy[playerid][8] = CreatePlayerTextDraw(playerid, 213.000000, 297.000000, "Ustaw range pracownikowi");
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][8], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][8], 0.200000, 1.049999);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][8], 315.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][8], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][8], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][8], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][8], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][8], 0);
		PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][8], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][8], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][8], 1);

		Txd_panelfirmy[playerid][9] = CreatePlayerTextDraw(playerid, 340.000000, 297.000000, "Pojazdy firmowe");
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][9], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][9], 0.200000, 1.049999);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][9], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][9], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][9], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][9], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][9], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][9], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][9], 50);
		PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][9], 0);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][9], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][9], 1);

		Txd_panelfirmy[playerid][4] = CreatePlayerTextDraw(playerid, 226.000000, 323.000000, "Lista pracownikow");
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][4], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][4], 0.200000, 1.049999);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][4], 292.500000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][4], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][4], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][4], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][4], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][4], 0);
		PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][4], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][4], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][4], 1);

		Txd_panelfirmy[playerid][10] = CreatePlayerTextDraw(playerid, 356.000000, 323.000000, "Zamknij");
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][10], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][10], 0.200000, 1.049999);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][10], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][10], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][10], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][10], 1);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][10], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][10], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][10], 50);
		PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][10], 0);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][10], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][10], 1);

		Txd_panelfirmy[playerid][20] = CreatePlayerTextDraw(playerid, 315.000000, 205.000000, "_");
		PlayerTextDrawFont(playerid, Txd_panelfirmy[playerid][20], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfirmy[playerid][20], 0.537500, 16.650014);
		PlayerTextDrawTextSize(playerid, Txd_panelfirmy[playerid][20], 298.500000, -5.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfirmy[playerid][20], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfirmy[playerid][20], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfirmy[playerid][20], 2);
		PlayerTextDrawColor(playerid, Txd_panelfirmy[playerid][20], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfirmy[playerid][20], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfirmy[playerid][20], 9109639);
		PlayerTextDrawUseBox(playerid, Txd_panelfirmy[playerid][20], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfirmy[playerid][20], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfirmy[playerid][20], 0);
		
	}
	if(type == 1)
	{
		new tdstring[150], fuid = PlayerData[playerid][pFirma];
		
		format(tdstring, sizeof(tdstring), "Panel frakcyjny (%s):", FirmaData[fuid][fName]);
		PlayerTextDrawSetString(playerid, Txd_panelfirmy[playerid][1], tdstring);
		
		for(new i = 0; i != 21; i++)
		{
			PlayerTextDrawShow(playerid, Txd_panelfirmy[playerid][i]);
		}
		SelectTextDraw(playerid, 0x00FF00FF);
		TogglePlayerControllable(playerid, false);
	}
	if(type == 2)
	{
		TogglePlayerControllable(playerid, true);
		CancelSelectTextDraw(playerid);
		for(new i = 0; i != 21; i++)
		{
			PlayerTextDrawHide(playerid, Txd_panelfirmy[playerid][i]);
		}
	}
	if(type == 3)
	{
		for(new i = 0; i != 21; i++)
		{
			PlayerTextDrawHide(playerid, Txd_panelfirmy[playerid][i]);
			PlayerTextDrawDestroy(playerid, Txd_panelfirmy[playerid][i]);
		}
	}
	return 1;
}


stock PlayerFrakcjaPanel(playerid, type = 0)
{
	if(PlayerData[playerid][pLogged] == false) return 1;
	if(type == 0)
	{

		//TEXTDRAWY +20
		Txd_panelfrakcji[playerid][5] = CreatePlayerTextDraw(playerid, 302.000000, 93.000000, "_");
		PlayerTextDrawFont(playerid, Txd_panelfrakcji[playerid][5], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfrakcji[playerid][5], 0.704164, 18.450004);
		PlayerTextDrawTextSize(playerid, Txd_panelfrakcji[playerid][5], 298.500000, 287.500000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfrakcji[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfrakcji[playerid][5], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfrakcji[playerid][5], 2);
		PlayerTextDrawColor(playerid, Txd_panelfrakcji[playerid][5], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfrakcji[playerid][5], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfrakcji[playerid][5], 135);
		PlayerTextDrawUseBox(playerid, Txd_panelfrakcji[playerid][5], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfrakcji[playerid][5], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfrakcji[playerid][5], 0);

		Txd_panelfrakcji[playerid][0] = CreatePlayerTextDraw(playerid, 302.000000, 93.000000, "_");
		PlayerTextDrawFont(playerid, Txd_panelfrakcji[playerid][0], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfrakcji[playerid][0], 0.600000, 1.449990);
		PlayerTextDrawTextSize(playerid, Txd_panelfrakcji[playerid][0], 292.500000, 287.500000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfrakcji[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfrakcji[playerid][0], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfrakcji[playerid][0], 2);
		PlayerTextDrawColor(playerid, Txd_panelfrakcji[playerid][0], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfrakcji[playerid][0], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfrakcji[playerid][0], -1962934137);
		PlayerTextDrawUseBox(playerid, Txd_panelfrakcji[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfrakcji[playerid][0], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfrakcji[playerid][0], 0);

		Txd_panelfrakcji[playerid][12] = CreatePlayerTextDraw(playerid, 302.000000, 262.000000, "_");
		PlayerTextDrawFont(playerid, Txd_panelfrakcji[playerid][12], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfrakcji[playerid][12], 0.600000, -0.250001);
		PlayerTextDrawTextSize(playerid, Txd_panelfrakcji[playerid][12],193.500000, 287.500000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfrakcji[playerid][12], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfrakcji[playerid][12], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfrakcji[playerid][12], 2);
		PlayerTextDrawColor(playerid, Txd_panelfrakcji[playerid][12], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfrakcji[playerid][12], -1378294017);
		PlayerTextDrawBoxColor(playerid, Txd_panelfrakcji[playerid][12], -1962934137);
		PlayerTextDrawUseBox(playerid, Txd_panelfrakcji[playerid][12], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfrakcji[playerid][12], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfrakcji[playerid][12], 0);

		Txd_panelfrakcji[playerid][13] = CreatePlayerTextDraw(playerid, 295.000000, 95.000000, "_");
		PlayerTextDrawFont(playerid, Txd_panelfrakcji[playerid][13], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfrakcji[playerid][13], 0.537500, 1.049980);
		PlayerTextDrawTextSize(playerid, Txd_panelfrakcji[playerid][13], 298.500000, 149.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfrakcji[playerid][13], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfrakcji[playerid][13], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfrakcji[playerid][13], 2);
		PlayerTextDrawColor(playerid, Txd_panelfrakcji[playerid][13], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfrakcji[playerid][13], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfrakcji[playerid][13], 135);
		PlayerTextDrawUseBox(playerid, Txd_panelfrakcji[playerid][13], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfrakcji[playerid][13], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfrakcji[playerid][13], 0);

		Txd_panelfrakcji[playerid][4] = CreatePlayerTextDraw(playerid, 161.000000, 117.000000, "Lista Pracownikow...");
		PlayerTextDrawFont(playerid, Txd_panelfrakcji[playerid][4], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfrakcji[playerid][4], 0.191667, 1.149999);
		PlayerTextDrawTextSize(playerid, Txd_panelfrakcji[playerid][4], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfrakcji[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfrakcji[playerid][4], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfrakcji[playerid][4], 1);
		PlayerTextDrawColor(playerid, Txd_panelfrakcji[playerid][4], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfrakcji[playerid][4], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfrakcji[playerid][4], 0);
		PlayerTextDrawUseBox(playerid, Txd_panelfrakcji[playerid][4], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfrakcji[playerid][4], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfrakcji[playerid][4], 1);

		Txd_panelfrakcji[playerid][2] = CreatePlayerTextDraw(playerid, 161.000000, 137.000000, "Zatrudnij Pracownika...");
		PlayerTextDrawFont(playerid, Txd_panelfrakcji[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfrakcji[playerid][2], 0.191667, 1.149999);
		PlayerTextDrawTextSize(playerid, Txd_panelfrakcji[playerid][2], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfrakcji[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfrakcji[playerid][2], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfrakcji[playerid][2], 1);
		PlayerTextDrawColor(playerid, Txd_panelfrakcji[playerid][2], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfrakcji[playerid][2], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfrakcji[playerid][2], 0);
		PlayerTextDrawUseBox(playerid, Txd_panelfrakcji[playerid][2], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfrakcji[playerid][2], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfrakcji[playerid][2], 1);

		Txd_panelfrakcji[playerid][1] = CreatePlayerTextDraw(playerid, 253.000000, 93.000000, "Panel frakcyjny (Policja):");
		PlayerTextDrawFont(playerid, Txd_panelfrakcji[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfrakcji[playerid][1], 0.195831, 1.249999);
		PlayerTextDrawTextSize(playerid, Txd_panelfrakcji[playerid][1], 372.500000, 13.500000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfrakcji[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfrakcji[playerid][1], 1);
		PlayerTextDrawAlignment(playerid, Txd_panelfrakcji[playerid][1], 1);
		PlayerTextDrawColor(playerid, Txd_panelfrakcji[playerid][1], -65281);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfrakcji[playerid][1], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfrakcji[playerid][1], 50);
		PlayerTextDrawUseBox(playerid, Txd_panelfrakcji[playerid][1], 0);
		PlayerTextDrawSetProportional(playerid, Txd_panelfrakcji[playerid][1], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfrakcji[playerid][1], 0);

		Txd_panelfrakcji[playerid][3] = CreatePlayerTextDraw(playerid, 161.000000, 158.000000, "Zwolnij Pracownika...");
		PlayerTextDrawFont(playerid, Txd_panelfrakcji[playerid][3], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfrakcji[playerid][3], 0.191667, 1.149999);
		PlayerTextDrawTextSize(playerid, Txd_panelfrakcji[playerid][3], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfrakcji[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfrakcji[playerid][3], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfrakcji[playerid][3], 1);
		PlayerTextDrawColor(playerid, Txd_panelfrakcji[playerid][3], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfrakcji[playerid][3], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfrakcji[playerid][3], 0);
		PlayerTextDrawUseBox(playerid, Txd_panelfrakcji[playerid][3], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfrakcji[playerid][3], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfrakcji[playerid][3], 1);

		Txd_panelfrakcji[playerid][10] = CreatePlayerTextDraw(playerid, 161.000000, 179.000000, "Lista Pojazdow...");
		PlayerTextDrawFont(playerid, Txd_panelfrakcji[playerid][10], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfrakcji[playerid][10], 0.191667, 1.149999);
		PlayerTextDrawTextSize(playerid, Txd_panelfrakcji[playerid][10], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfrakcji[playerid][10], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfrakcji[playerid][10], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfrakcji[playerid][10], 1);
		PlayerTextDrawColor(playerid, Txd_panelfrakcji[playerid][10], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfrakcji[playerid][10], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfrakcji[playerid][10], 0);
		PlayerTextDrawUseBox(playerid, Txd_panelfrakcji[playerid][10], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfrakcji[playerid][10], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfrakcji[playerid][10], 1);

		Txd_panelfrakcji[playerid][11] = CreatePlayerTextDraw(playerid, 161.000000, 199.000000, "Statystyki Frakcji...");
		PlayerTextDrawFont(playerid, Txd_panelfrakcji[playerid][11], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfrakcji[playerid][11], 0.191667, 1.149999);
		PlayerTextDrawTextSize(playerid, Txd_panelfrakcji[playerid][11], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfrakcji[playerid][11], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfrakcji[playerid][11], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfrakcji[playerid][11], 1);
		PlayerTextDrawColor(playerid, Txd_panelfrakcji[playerid][11], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfrakcji[playerid][11], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfrakcji[playerid][11], 0);
		PlayerTextDrawUseBox(playerid, Txd_panelfrakcji[playerid][11], 0);
		PlayerTextDrawSetProportional(playerid, Txd_panelfrakcji[playerid][11], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfrakcji[playerid][11], 1);

		Txd_panelfrakcji[playerid][6] = CreatePlayerTextDraw(playerid, 161.000000, 221.000000, "Dodaj Nowe Informacje...");
		PlayerTextDrawFont(playerid, Txd_panelfrakcji[playerid][6], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfrakcji[playerid][6], 0.191667, 1.149999);
		PlayerTextDrawTextSize(playerid, Txd_panelfrakcji[playerid][6], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfrakcji[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfrakcji[playerid][6], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfrakcji[playerid][6], 1);
		PlayerTextDrawColor(playerid, Txd_panelfrakcji[playerid][6], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfrakcji[playerid][6], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfrakcji[playerid][6], 0);
		PlayerTextDrawUseBox(playerid, Txd_panelfrakcji[playerid][6], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfrakcji[playerid][6], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfrakcji[playerid][6], 1);

		Txd_panelfrakcji[playerid][9] = CreatePlayerTextDraw(playerid, 161.000000, 240.000000, "Zamknij...");
		PlayerTextDrawFont(playerid, Txd_panelfrakcji[playerid][9], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfrakcji[playerid][9], 0.191667, 1.149999);
		PlayerTextDrawTextSize(playerid, Txd_panelfrakcji[playerid][9], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfrakcji[playerid][9], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfrakcji[playerid][9], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfrakcji[playerid][9], 1);
		PlayerTextDrawColor(playerid, Txd_panelfrakcji[playerid][9], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfrakcji[playerid][9], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfrakcji[playerid][9], 0);
		PlayerTextDrawUseBox(playerid, Txd_panelfrakcji[playerid][9], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfrakcji[playerid][9], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfrakcji[playerid][9], 1);

		Txd_panelfrakcji[playerid][14] = CreatePlayerTextDraw(playerid, 293.000000, 114.000000, "_");
		PlayerTextDrawFont(playerid, Txd_panelfrakcji[playerid][14], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfrakcji[playerid][14], 0.579164, 16.150022);
		PlayerTextDrawTextSize(playerid, Txd_panelfrakcji[playerid][14], 290.500000, -3.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfrakcji[playerid][14], 0);
		PlayerTextDrawSetShadow(playerid, Txd_panelfrakcji[playerid][14], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfrakcji[playerid][14], 2);
		PlayerTextDrawColor(playerid, Txd_panelfrakcji[playerid][14], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfrakcji[playerid][14], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfrakcji[playerid][14], -1962934137);
		PlayerTextDrawUseBox(playerid, Txd_panelfrakcji[playerid][14], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfrakcji[playerid][14], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfrakcji[playerid][14], 0);

		Txd_panelfrakcji[playerid][15] = CreatePlayerTextDraw(playerid, 374.000000, 140.000000, "_");
		PlayerTextDrawFont(playerid, Txd_panelfrakcji[playerid][15], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfrakcji[playerid][15], 0.600000, -0.550018);
		PlayerTextDrawTextSize(playerid, Txd_panelfrakcji[playerid][15], 298.500000, 60.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfrakcji[playerid][15], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfrakcji[playerid][15], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfrakcji[playerid][15], 2);
		PlayerTextDrawColor(playerid, Txd_panelfrakcji[playerid][15], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfrakcji[playerid][15], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfrakcji[playerid][15], -1962934137);
		PlayerTextDrawUseBox(playerid, Txd_panelfrakcji[playerid][15], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfrakcji[playerid][15], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfrakcji[playerid][15], 0);

		Txd_panelfrakcji[playerid][8] = CreatePlayerTextDraw(playerid, 308.000000, 150.000000, "-informacja~n~-informacja~n~-informacja~n~-informacja~n~-informacja~n~-informacja~n~-informacja~n~-informacja~n~-informacja~n~-");
		PlayerTextDrawFont(playerid, Txd_panelfrakcji[playerid][8], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfrakcji[playerid][8], 0.195831, 0.949998);
		PlayerTextDrawTextSize(playerid, Txd_panelfrakcji[playerid][8], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfrakcji[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfrakcji[playerid][8], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfrakcji[playerid][8], 1);
		PlayerTextDrawColor(playerid, Txd_panelfrakcji[playerid][8], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfrakcji[playerid][8], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfrakcji[playerid][8], 50);
		PlayerTextDrawUseBox(playerid, Txd_panelfrakcji[playerid][8], 0);
		PlayerTextDrawSetProportional(playerid, Txd_panelfrakcji[playerid][8], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfrakcji[playerid][8], 0);

		Txd_panelfrakcji[playerid][16] = CreatePlayerTextDraw(playerid, 195.000000, 137.000000, "_");
		PlayerTextDrawFont(playerid, Txd_panelfrakcji[playerid][16], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfrakcji[playerid][16], 0.600000, -0.550018);
		PlayerTextDrawTextSize(playerid, Txd_panelfrakcji[playerid][16], 298.500000, 60.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfrakcji[playerid][16], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfrakcji[playerid][16], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfrakcji[playerid][16], 2);
		PlayerTextDrawColor(playerid, Txd_panelfrakcji[playerid][16], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfrakcji[playerid][16], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfrakcji[playerid][16], -1962934137);
		PlayerTextDrawUseBox(playerid, Txd_panelfrakcji[playerid][16], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfrakcji[playerid][16], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfrakcji[playerid][16], 0);

		Txd_panelfrakcji[playerid][7] = CreatePlayerTextDraw(playerid, 344.000000, 118.000000, "Ogloszenia");
		PlayerTextDrawFont(playerid, Txd_panelfrakcji[playerid][7], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfrakcji[playerid][7], 0.312500, 1.149999);
		PlayerTextDrawTextSize(playerid, Txd_panelfrakcji[playerid][7], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfrakcji[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfrakcji[playerid][7], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfrakcji[playerid][7], 1);
		PlayerTextDrawColor(playerid, Txd_panelfrakcji[playerid][7], -8388353);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfrakcji[playerid][7], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfrakcji[playerid][7], 50);
		PlayerTextDrawUseBox(playerid, Txd_panelfrakcji[playerid][7], 0);
		PlayerTextDrawSetProportional(playerid, Txd_panelfrakcji[playerid][7], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfrakcji[playerid][7], 0);

		Txd_panelfrakcji[playerid][17] = CreatePlayerTextDraw(playerid, 194.000000, 155.000000, "_");
		PlayerTextDrawFont(playerid, Txd_panelfrakcji[playerid][17], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfrakcji[playerid][17], 0.600000, -0.550018);
		PlayerTextDrawTextSize(playerid, Txd_panelfrakcji[playerid][17], 298.500000, 60.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfrakcji[playerid][17], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfrakcji[playerid][17], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfrakcji[playerid][17], 2);
		PlayerTextDrawColor(playerid, Txd_panelfrakcji[playerid][17], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfrakcji[playerid][17], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfrakcji[playerid][17], -1962934137);
		PlayerTextDrawUseBox(playerid, Txd_panelfrakcji[playerid][17], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfrakcji[playerid][17], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfrakcji[playerid][17], 0);

		Txd_panelfrakcji[playerid][18] = CreatePlayerTextDraw(playerid, 195.000000, 179.000000, "_");
		PlayerTextDrawFont(playerid, Txd_panelfrakcji[playerid][18], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfrakcji[playerid][18], 0.600000, -0.550018);
		PlayerTextDrawTextSize(playerid, Txd_panelfrakcji[playerid][18], 298.500000, 60.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfrakcji[playerid][18], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfrakcji[playerid][18], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfrakcji[playerid][18], 2);
		PlayerTextDrawColor(playerid, Txd_panelfrakcji[playerid][18], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfrakcji[playerid][18], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfrakcji[playerid][18], -1962934137);
		PlayerTextDrawUseBox(playerid, Txd_panelfrakcji[playerid][18], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfrakcji[playerid][18], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfrakcji[playerid][18], 0);

		Txd_panelfrakcji[playerid][19] = CreatePlayerTextDraw(playerid, 194.000000, 197.000000, "_");
		PlayerTextDrawFont(playerid, Txd_panelfrakcji[playerid][19], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfrakcji[playerid][19], 0.600000, -0.550018);
		PlayerTextDrawTextSize(playerid, Txd_panelfrakcji[playerid][19], 298.500000, 60.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfrakcji[playerid][19], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfrakcji[playerid][19], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfrakcji[playerid][19], 2);
		PlayerTextDrawColor(playerid, Txd_panelfrakcji[playerid][19], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfrakcji[playerid][19], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfrakcji[playerid][19], -1962934137);
		PlayerTextDrawUseBox(playerid, Txd_panelfrakcji[playerid][19], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfrakcji[playerid][19], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfrakcji[playerid][19], 0);

		Txd_panelfrakcji[playerid][20] = CreatePlayerTextDraw(playerid, 194.000000, 218.000000, "_");
		PlayerTextDrawFont(playerid, Txd_panelfrakcji[playerid][20], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfrakcji[playerid][20], 0.600000, -0.550018);
		PlayerTextDrawTextSize(playerid, Txd_panelfrakcji[playerid][20], 298.500000, 60.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfrakcji[playerid][20], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfrakcji[playerid][20], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfrakcji[playerid][20], 2);
		PlayerTextDrawColor(playerid, Txd_panelfrakcji[playerid][20], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfrakcji[playerid][20], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfrakcji[playerid][20], -1962934137);
		PlayerTextDrawUseBox(playerid, Txd_panelfrakcji[playerid][20], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfrakcji[playerid][20], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfrakcji[playerid][20], 0);

		Txd_panelfrakcji[playerid][21] = CreatePlayerTextDraw(playerid, 194.000000, 239.000000, "_");
		PlayerTextDrawFont(playerid, Txd_panelfrakcji[playerid][21], 1);
		PlayerTextDrawLetterSize(playerid, Txd_panelfrakcji[playerid][21], 0.600000, -0.550018);
		PlayerTextDrawTextSize(playerid, Txd_panelfrakcji[playerid][21], 298.500000, 60.000000);
		PlayerTextDrawSetOutline(playerid, Txd_panelfrakcji[playerid][21], 1);
		PlayerTextDrawSetShadow(playerid, Txd_panelfrakcji[playerid][21], 0);
		PlayerTextDrawAlignment(playerid, Txd_panelfrakcji[playerid][21], 2);
		PlayerTextDrawColor(playerid, Txd_panelfrakcji[playerid][21], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_panelfrakcji[playerid][21], 255);
		PlayerTextDrawBoxColor(playerid, Txd_panelfrakcji[playerid][21], -1962934137);
		PlayerTextDrawUseBox(playerid, Txd_panelfrakcji[playerid][21], 1);
		PlayerTextDrawSetProportional(playerid, Txd_panelfrakcji[playerid][21], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_panelfrakcji[playerid][21], 0);
	
	}
	if(type == 1)
	{
		new tdstring[150], str_frakcja[34];
		switch(PlayerData[playerid][pFrakcja])
		{
			case 1: str_frakcja = ""#GRUPA_LEVEL_1"";
			case 2: str_frakcja = ""#GRUPA_LEVEL_2"";
			case 3: str_frakcja = ""#GRUPA_LEVEL_3"";
			case 4: str_frakcja = ""#GRUPA_LEVEL_4"";
			case 5: str_frakcja = ""#GRUPA_LEVEL_5"";
			case 6: str_frakcja = ""#GRUPA_LEVEL_6"";
			case 7: str_frakcja = ""#GRUPA_LEVEL_7"";
			case 8: str_frakcja = ""#GRUPA_LEVEL_8"";
			case 9: str_frakcja = ""#GRUPA_LEVEL_9"";
			case 10: str_frakcja = ""#GRUPA_LEVEL_10"";
		}
		format(tdstring, sizeof(tdstring), "%s", frakcja_szef_info[PlayerData[playerid][pFrakcja]]);
		PlayerTextDrawSetString(playerid, Txd_panelfrakcji[playerid][8], tdstring);
		format(tdstring, sizeof(tdstring), "Panel frakcyjny (%s):", str_frakcja);
		PlayerTextDrawSetString(playerid, Txd_panelfrakcji[playerid][1], tdstring);
		
		for(new i = 0; i != 22; i++)
		{
			PlayerTextDrawShow(playerid, Txd_panelfrakcji[playerid][i]);
		}
		SelectTextDraw(playerid, 0x00FF00FF);
		TogglePlayerControllable(playerid, false);
	}
	if(type == 2)
	{
		TogglePlayerControllable(playerid, true);
		CancelSelectTextDraw(playerid);
		for(new i = 0; i != 22; i++)
		{
			PlayerTextDrawHide(playerid, Txd_panelfrakcji[playerid][i]);
		}
	}
	if(type == 3)
	{
		for(new i = 0; i != 22; i++)
		{
			PlayerTextDrawHide(playerid, Txd_panelfrakcji[playerid][i]);
			PlayerTextDrawDestroy(playerid, Txd_panelfrakcji[playerid][i]);
		}
	}
	return 1;
}


stock PlayerVehicleInfo(playerid, type = 0, vehicleid = 0)
{
	if(PlayerData[playerid][pLogged] == false) return 1;
	if(type == 0)
	{
		Txd_vinfo[playerid][0] = CreatePlayerTextDraw(playerid, 309.999938, 325.214904, "~g~UID: ~w~10000  ~g~SAMPID: ~w~1000 ~g~OWNERUID: ~w~1000  ~g~OWNER: ~w~Victor_Aim");
		PlayerTextDrawLetterSize(playerid, Txd_vinfo[playerid][0], 0.263333, 1.288888);
		PlayerTextDrawAlignment(playerid, Txd_vinfo[playerid][0], 2);
		PlayerTextDrawColor(playerid, Txd_vinfo[playerid][0], -1);
		PlayerTextDrawSetShadow(playerid, Txd_vinfo[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, Txd_vinfo[playerid][0], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_vinfo[playerid][0], 51);
		PlayerTextDrawFont(playerid, Txd_vinfo[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, Txd_vinfo[playerid][0], 1);

		Txd_vinfo[playerid][1] = CreatePlayerTextDraw(playerid, 308.666687, 344.711059, "~g~MODEL: ~w~611  ~g~PRZEBIEG: ~w~10000  ~g~HP: ~w~1000HP  ~g~PALIWO: ~w~100  ~g~KOLOR: ~w~211:211");
		PlayerTextDrawLetterSize(playerid, Txd_vinfo[playerid][1], 0.246666, 1.309629);
		PlayerTextDrawAlignment(playerid, Txd_vinfo[playerid][1], 2);
		PlayerTextDrawColor(playerid, Txd_vinfo[playerid][1], -1);
		PlayerTextDrawSetShadow(playerid, Txd_vinfo[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, Txd_vinfo[playerid][1], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_vinfo[playerid][1], 51);
		PlayerTextDrawFont(playerid, Txd_vinfo[playerid][1], 1);
		PlayerTextDrawSetProportional(playerid, Txd_vinfo[playerid][1], 1);
	}
	if(type == 1)
	{
		new tdstring[150];
		format(tdstring, sizeof(tdstring), "~g~UID: ~w~%d  ~g~SAMPID: ~w~%d ~g~OWNERUID: ~w~%d  ~g~OWNER: ~w~%s", VehicleData[vehicleid][vUID], vehicleid, VehicleData[vehicleid][vOwnerUID], VehicleData[vehicleid][vOwner]);
		PlayerTextDrawSetString(playerid, Txd_vinfo[playerid][0], tdstring);
		format(tdstring, sizeof(tdstring), "~g~MODEL: ~w~%d  ~g~PRZEBIEG: ~w~%.1f  ~g~HP: ~w~%.1f  ~g~PALIWO: ~w~%.1f  ~g~KOLOR: ~w~%d:%d~n~~g~NAPRAWY: ~w~%.1f ~g~CB: ~w~%s", VehicleData[vehicleid][vModel], VehicleData[vehicleid][vPrzebieg], VehicleData[vehicleid][vHP], VehicleData[vehicleid][vPaliwo], VehicleData[vehicleid][vColor1], VehicleData[vehicleid][vColor2], VehicleData[vehicleid][vNaprawy], ((VehicleData[vehicleid][vCBRadio] != 0) ? ("TAK") : ("NIE")));
		PlayerTextDrawSetString(playerid, Txd_vinfo[playerid][1], tdstring);
		
		for(new i = 0; i != 2; i++)
		{
			PlayerTextDrawShow(playerid, Txd_vinfo[playerid][i]);
		}
		KillTimer(PlayerData[playerid][pTimerVehicleInfo]);
		PlayerData[playerid][pTimerVehicleInfo] = SetTimerEx("HideVehInfo", 15000, false, "d", playerid);
	}
	if(type == 2)
	{
		for(new i = 0; i != 2; i++)
		{
			PlayerTextDrawHide(playerid, Txd_vinfo[playerid][i]);
		}
	}
	if(type == 3)
	{
		for(new i = 0; i != 2; i++)
		{
			PlayerTextDrawHide(playerid, Txd_vinfo[playerid][i]);
			PlayerTextDrawDestroy(playerid, Txd_vinfo[playerid][i]);
		}
	}
	return 1;
}







stock PlayerObiektPanel(playerid, type = 0)
{
	if(PlayerData[playerid][pLogged] == false) return 1;
	if(type == 0)
	{
		Txd_obiekttxd[playerid][0] = CreatePlayerTextDraw(playerid, 149.000000, 340.562896, "ld_poke:cdback");
		PlayerTextDrawLetterSize(playerid, Txd_obiekttxd[playerid][0], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_obiekttxd[playerid][0], 322.666870, 76.740776);
		PlayerTextDrawAlignment(playerid, Txd_obiekttxd[playerid][0], 1);
		PlayerTextDrawColor(playerid, Txd_obiekttxd[playerid][0], 69905);
		PlayerTextDrawSetShadow(playerid, Txd_obiekttxd[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, Txd_obiekttxd[playerid][0], 0);
		PlayerTextDrawFont(playerid, Txd_obiekttxd[playerid][0], 4);

		Txd_obiekttxd[playerid][1] = CreatePlayerTextDraw(playerid, 306.666687, 345.540466, "Obiekt: 400400   UID: 1000   MODELID: 10000");
		PlayerTextDrawLetterSize(playerid, Txd_obiekttxd[playerid][1], 0.357333, 1.405037);
		PlayerTextDrawAlignment(playerid, Txd_obiekttxd[playerid][1], 2);
		PlayerTextDrawColor(playerid, Txd_obiekttxd[playerid][1], -1);
		PlayerTextDrawSetShadow(playerid, Txd_obiekttxd[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, Txd_obiekttxd[playerid][1], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_obiekttxd[playerid][1], 51);
		PlayerTextDrawFont(playerid, Txd_obiekttxd[playerid][1], 1);
		PlayerTextDrawSetProportional(playerid, Txd_obiekttxd[playerid][1], 1);

		Txd_obiekttxd[playerid][2] = CreatePlayerTextDraw(playerid, 304.666717, 379.140747, "X: 1000.1000  Y: 1000.1000 Z: 1000.1000");
		PlayerTextDrawLetterSize(playerid, Txd_obiekttxd[playerid][2], 0.351666, 1.309628);
		PlayerTextDrawAlignment(playerid, Txd_obiekttxd[playerid][2], 2);
		PlayerTextDrawColor(playerid, Txd_obiekttxd[playerid][2], -1);
		PlayerTextDrawSetShadow(playerid, Txd_obiekttxd[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, Txd_obiekttxd[playerid][2], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_obiekttxd[playerid][2], 51);
		PlayerTextDrawFont(playerid, Txd_obiekttxd[playerid][2], 1);
		PlayerTextDrawSetProportional(playerid, Txd_obiekttxd[playerid][2], 1);

		Txd_obiekttxd[playerid][3] = CreatePlayerTextDraw(playerid, 309.000152, 396.563446, "RX: 1000.1000  RY: 1000.1000 RZ: 1000.1000");
		PlayerTextDrawLetterSize(playerid, Txd_obiekttxd[playerid][3], 0.351666, 1.309628);
		PlayerTextDrawAlignment(playerid, Txd_obiekttxd[playerid][3], 2);
		PlayerTextDrawColor(playerid, Txd_obiekttxd[playerid][3], -1);
		PlayerTextDrawSetShadow(playerid, Txd_obiekttxd[playerid][3], 0);
		PlayerTextDrawSetOutline(playerid, Txd_obiekttxd[playerid][3], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_obiekttxd[playerid][3], 51);
		PlayerTextDrawFont(playerid, Txd_obiekttxd[playerid][3], 1);
		PlayerTextDrawSetProportional(playerid, Txd_obiekttxd[playerid][3], 1);

		Txd_obiekttxd[playerid][4] = CreatePlayerTextDraw(playerid, 307.666778, 361.718841, "VW: 100  INT: 100 RF: 1 R: 1 T: 4");
		PlayerTextDrawLetterSize(playerid, Txd_obiekttxd[playerid][4], 0.351666, 1.309628);
		PlayerTextDrawAlignment(playerid, Txd_obiekttxd[playerid][4], 2);
		PlayerTextDrawColor(playerid, Txd_obiekttxd[playerid][4], -1);
		PlayerTextDrawSetShadow(playerid, Txd_obiekttxd[playerid][4], 0);
		PlayerTextDrawSetOutline(playerid, Txd_obiekttxd[playerid][4], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_obiekttxd[playerid][4], 51);
		PlayerTextDrawFont(playerid, Txd_obiekttxd[playerid][4], 1);
		PlayerTextDrawSetProportional(playerid, Txd_obiekttxd[playerid][4], 1);

	}
	if(type == 1) //show
	{
		for(new i = 0; i != 5; i++)
		{
			PlayerTextDrawShow(playerid, Txd_obiekttxd[playerid][i]);
		}
	}
	if(type == 2) //hide
	{
		for(new i = 0; i != 5; i++)
		{
			PlayerTextDrawHide(playerid, Txd_obiekttxd[playerid][i]);
		}
	}
	if(type == 3) //hide + delete
	{
		for(new i = 0; i != 5; i++)
		{
			PlayerTextDrawHide(playerid, Txd_obiekttxd[playerid][i]);
			PlayerTextDrawDestroy(playerid, Txd_obiekttxd[playerid][i]);
		}
	}
	if(type == 4)
	{
		new tdstring[150], uid  = PlayerData[playerid][pObjectEdit];
		format(tdstring, sizeof(tdstring), "Obiekt: %d   UID: %d   MODELID: %d", ObjectData[uid][oObject], uid, ObjectData[uid][oModel]);
		PlayerTextDrawSetString(playerid, Txd_obiekttxd[playerid][1] , tdstring);
		format(tdstring, sizeof(tdstring), "X: %f  Y: %f Z: %f", ObjectData[uid][bPos][0], ObjectData[uid][bPos][1], ObjectData[uid][bPos][2]);
		PlayerTextDrawSetString(playerid, Txd_obiekttxd[playerid][2] , tdstring);
		format(tdstring, sizeof(tdstring), "RX: %f  RY: %f RZ: %f", ObjectData[uid][bPos][3], ObjectData[uid][bPos][4], ObjectData[uid][bPos][5]);
		PlayerTextDrawSetString(playerid, Txd_obiekttxd[playerid][3] , tdstring);
		format(tdstring, sizeof(tdstring), "VW: %d  INT: %d RF: %d R: %d T: %d", ObjectData[uid][oVW], ObjectData[uid][oInt], ObjectData[uid][oRequisteFirma], ObjectData[uid][oRequisteFrakcja], ObjectData[uid][oType]);
		PlayerTextDrawSetString(playerid, Txd_obiekttxd[playerid][4] , tdstring);
		return 1;
	}
	return 1;
}

stock PlayerOthersTXD(playerid, type = 0)
{
	if(PlayerData[playerid][pLogged] == false) return 1;
	if(type == 0)
	{
		Txd_others_txds[playerid][0] = CreatePlayerTextDraw(playerid, 0.000000, 0.000000, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Txd_others_txds[playerid][0], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_others_txds[playerid][0], 640.000000, 448.000000);
		PlayerTextDrawAlignment(playerid, Txd_others_txds[playerid][0], 1);
		PlayerTextDrawColor(playerid, Txd_others_txds[playerid][0], 255);
		PlayerTextDrawSetShadow(playerid, Txd_others_txds[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, Txd_others_txds[playerid][0], 0);
		PlayerTextDrawFont(playerid, Txd_others_txds[playerid][0], 4);

	}
	if(type == 1) //show
	{
		for(new i = 0; i != 1; i++)
		{
			PlayerTextDrawShow(playerid, Txd_others_txds[playerid][i]);
		}
	}
	if(type == 2) //hide
	{
		for(new i = 0; i != 1; i++)
		{
			PlayerTextDrawHide(playerid, Txd_others_txds[playerid][i]);
		}
	}
	if(type == 3) //hide + delete
	{
		for(new i = 0; i != 1; i++)
		{
			PlayerTextDrawHide(playerid, Txd_others_txds[playerid][i]);
			PlayerTextDrawDestroy(playerid, Txd_others_txds[playerid][i]);
		}
	}
	return 1;
}


stock PlayerRealTime(playerid, type = 0)
{
	if(PlayerData[playerid][pLogged] == false) return 1;
	if(type == 0)
	{
	
		Txd_realtime[playerid][0] = CreatePlayerTextDraw(playerid, 604.047851, 11.240029, "10:28");
		PlayerTextDrawLetterSize(playerid, Txd_realtime[playerid][0], 0.246950, 0.883198);
		PlayerTextDrawAlignment(playerid, Txd_realtime[playerid][0], 1);
		PlayerTextDrawColor(playerid, Txd_realtime[playerid][0], -1);
		PlayerTextDrawSetShadow(playerid, Txd_realtime[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, Txd_realtime[playerid][0], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_realtime[playerid][0], 51);
		PlayerTextDrawFont(playerid, Txd_realtime[playerid][0], 3);
		PlayerTextDrawSetProportional(playerid, Txd_realtime[playerid][0], 1);
		
	}
	if(type == 1) //show
	{
		for(new i = 0; i != 1; i++)
		{
			PlayerTextDrawShow(playerid, Txd_realtime[playerid][i]);
		}
	}
	if(type == 2) //hide
	{
		for(new i = 0; i != 1; i++)
		{
			PlayerTextDrawHide(playerid, Txd_realtime[playerid][i]);
		}
	}
	if(type == 3) //hide + delete
	{
		for(new i = 0; i != 1; i++)
		{
			PlayerTextDrawHide(playerid, Txd_realtime[playerid][i]);
			PlayerTextDrawDestroy(playerid, Txd_realtime[playerid][i]);
		}
	}
	if(type == 4) //refresh
	{
		new tdstring[50], times[3];
		gettime(times[0], times[1], times[2]);
		format(tdstring, sizeof tdstring, "%s%d:%s%d", (times[0] < 10) ? ("0") : (""), times[0], (times[1] < 10) ? ("0") : (""), times[1]);
		PlayerTextDrawSetString(playerid, Txd_realtime[playerid][0], tdstring);
	}
	return 1;
}


stock PlayerNewsReporta(playerid, type = 0, tresc[] = "_")
{
	if(PlayerData[playerid][pLogged] == false) return 1;
	if(type == 0)
	{

		Txd_newsreporta[playerid][0] = CreatePlayerTextDraw(playerid, 102.333366, 374.992767, "duzy_news_duzy_news_duzy_news_duzy_news_duzy_news_duzy_news_duzy_news_duzy_news_duzy_news_duzy_news_duzy_news_duzy_news_duzy_ne");
		PlayerTextDrawLetterSize(playerid, Txd_newsreporta[playerid][0], 0.161666, 1.205924);
		PlayerTextDrawAlignment(playerid, Txd_newsreporta[playerid][0], 1);
		PlayerTextDrawColor(playerid, Txd_newsreporta[playerid][0], -1);
		PlayerTextDrawSetShadow(playerid, Txd_newsreporta[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, Txd_newsreporta[playerid][0], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_newsreporta[playerid][0], 51);
		PlayerTextDrawFont(playerid, Txd_newsreporta[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, Txd_newsreporta[playerid][0], 1);

		Txd_newsreporta[playerid][1] = CreatePlayerTextDraw(playerid, 99.666664, 372.088897, "ld_poke:cdback");
		//PlayerTextDrawLetterSize(playerid, Txd_newsreporta[playerid][1], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_newsreporta[playerid][1], 390.666656, 19.081481);
		//PlayerTextDrawAlignment(playerid, Txd_newsreporta[playerid][1], 1);
		PlayerTextDrawColor(playerid, Txd_newsreporta[playerid][1], 799);
		//PlayerTextDrawSetShadow(playerid, Txd_newsreporta[playerid][1], 0);
		//PlayerTextDrawSetOutline(playerid, Txd_newsreporta[playerid][1], 0);
		PlayerTextDrawFont(playerid, Txd_newsreporta[playerid][1], 4);

	}
	if(type == 1) //show
	{
		for(new i = 0; i != 2; i++)
		{
			PlayerTextDrawShow(playerid, Txd_newsreporta[playerid][i]);
		}
	}
	if(type == 2) //hide
	{
		for(new i = 0; i != 2; i++)
		{
			PlayerTextDrawHide(playerid, Txd_newsreporta[playerid][i]);
		}
	}
	if(type == 3) //hide + delete
	{
		for(new i = 0; i != 2; i++)
		{
			PlayerTextDrawHide(playerid, Txd_newsreporta[playerid][i]);
			PlayerTextDrawDestroy(playerid, Txd_newsreporta[playerid][i]);
		}
	}
	if(type == 4) //refresh
	{
	
	
		new tdstring[150];
		format(tdstring, sizeof(tdstring), "~g~~h~News od reportera ~r~~h~[%d]%s: ~w~%s", playerid, PlayerData[playerid][pName], tresc);
		
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(PlayerData[i][pLogged] == false) continue;
			for(new ii = 0; ii != 2; ii++)
			{	
				PlayerTextDrawShow(i, Txd_newsreporta[i][ii]);
			}
			PlayerTextDrawSetString(i, Txd_newsreporta[i][0], tdstring);
			KillTimer(PlayerData[i][pTimerNewsReportera]);
			PlayerData[i][pTimerNewsReportera] = SetTimerEx("HideNewsReportera", 60000, false, "d", i);
		}
	}
	return 1;
}

forward HideNewsReportera(playerid);
public HideNewsReportera(playerid)
{
	PlayerNewsReporta(playerid, 2);
	return 1;
}



stock PlayerTowaryWybierz(playerid, type = 0)
{
	if(PlayerData[playerid][pLogged] == false) return 1;
	if(type == 0)
	{
		Txd_towarwybierz[playerid][0] = CreatePlayerTextDraw(playerid, 315.000000, 19.000000, "_");
		PlayerTextDrawFont(playerid, Txd_towarwybierz[playerid][0], 1);
		PlayerTextDrawLetterSize(playerid, Txd_towarwybierz[playerid][0], 0.600000, 8.200016);
		PlayerTextDrawTextSize(playerid, Txd_towarwybierz[playerid][0], 298.500000, 199.500000);
		PlayerTextDrawSetOutline(playerid, Txd_towarwybierz[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, Txd_towarwybierz[playerid][0], 0);
		PlayerTextDrawAlignment(playerid, Txd_towarwybierz[playerid][0], 2);
		PlayerTextDrawColor(playerid, Txd_towarwybierz[playerid][0], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_towarwybierz[playerid][0], 255);
		PlayerTextDrawBoxColor(playerid, Txd_towarwybierz[playerid][0], 135);
		PlayerTextDrawUseBox(playerid, Txd_towarwybierz[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, Txd_towarwybierz[playerid][0], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_towarwybierz[playerid][0], 0);

		Txd_towarwybierz[playerid][2] = CreatePlayerTextDraw(playerid, 310.000000, 40.000000, "LEGALNE");
		PlayerTextDrawFont(playerid, Txd_towarwybierz[playerid][2], 2);
		PlayerTextDrawLetterSize(playerid, Txd_towarwybierz[playerid][2], 0.204165, 1.200000);
		PlayerTextDrawTextSize(playerid, Txd_towarwybierz[playerid][2], 16.500000, 90.500000);
		PlayerTextDrawSetOutline(playerid, Txd_towarwybierz[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid, Txd_towarwybierz[playerid][2], 0);
		PlayerTextDrawAlignment(playerid, Txd_towarwybierz[playerid][2], 2);
		PlayerTextDrawColor(playerid, Txd_towarwybierz[playerid][2], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_towarwybierz[playerid][2], 255);
		PlayerTextDrawBoxColor(playerid, Txd_towarwybierz[playerid][2], 200);
		PlayerTextDrawUseBox(playerid, Txd_towarwybierz[playerid][2], 1);
		PlayerTextDrawSetProportional(playerid, Txd_towarwybierz[playerid][2], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_towarwybierz[playerid][2], 1);

		Txd_towarwybierz[playerid][1] = CreatePlayerTextDraw(playerid, 216.000000, 19.000000, "Wybierz rodzaj towarow do wyswietlenia:");
		PlayerTextDrawFont(playerid, Txd_towarwybierz[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid, Txd_towarwybierz[playerid][1], 0.216664, 1.149996);
		PlayerTextDrawTextSize(playerid, Txd_towarwybierz[playerid][1], 414.500000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txd_towarwybierz[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid, Txd_towarwybierz[playerid][1], 0);
		PlayerTextDrawAlignment(playerid, Txd_towarwybierz[playerid][1], 1);
		PlayerTextDrawColor(playerid, Txd_towarwybierz[playerid][1], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_towarwybierz[playerid][1], 255);
		PlayerTextDrawBoxColor(playerid, Txd_towarwybierz[playerid][1], 220);
		PlayerTextDrawUseBox(playerid, Txd_towarwybierz[playerid][1], 1);
		PlayerTextDrawSetProportional(playerid, Txd_towarwybierz[playerid][1], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_towarwybierz[playerid][1], 0);

		Txd_towarwybierz[playerid][3] = CreatePlayerTextDraw(playerid, 310.000000, 59.000000, "NIELEGALNE");
		PlayerTextDrawFont(playerid, Txd_towarwybierz[playerid][3], 2);
		PlayerTextDrawLetterSize(playerid, Txd_towarwybierz[playerid][3], 0.204165, 1.200000);
		PlayerTextDrawTextSize(playerid, Txd_towarwybierz[playerid][3], 16.500000, 90.500000);
		PlayerTextDrawSetOutline(playerid, Txd_towarwybierz[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid, Txd_towarwybierz[playerid][3], 0);
		PlayerTextDrawAlignment(playerid, Txd_towarwybierz[playerid][3], 2);
		PlayerTextDrawColor(playerid, Txd_towarwybierz[playerid][3], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_towarwybierz[playerid][3], 255);
		PlayerTextDrawBoxColor(playerid, Txd_towarwybierz[playerid][3], 200);
		PlayerTextDrawUseBox(playerid, Txd_towarwybierz[playerid][3], 1);
		PlayerTextDrawSetProportional(playerid, Txd_towarwybierz[playerid][3], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_towarwybierz[playerid][3], 1);

		Txd_towarwybierz[playerid][4] = CreatePlayerTextDraw(playerid, 310.000000, 78.000000, "PREMIUM");
		PlayerTextDrawFont(playerid, Txd_towarwybierz[playerid][4], 2);
		PlayerTextDrawLetterSize(playerid, Txd_towarwybierz[playerid][4], 0.204165, 1.200000);
		PlayerTextDrawTextSize(playerid, Txd_towarwybierz[playerid][4], 16.500000, 90.500000);
		PlayerTextDrawSetOutline(playerid, Txd_towarwybierz[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid, Txd_towarwybierz[playerid][4], 0);
		PlayerTextDrawAlignment(playerid, Txd_towarwybierz[playerid][4], 2);
		PlayerTextDrawColor(playerid, Txd_towarwybierz[playerid][4], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_towarwybierz[playerid][4], 255);
		PlayerTextDrawBoxColor(playerid, Txd_towarwybierz[playerid][4], 200);
		PlayerTextDrawUseBox(playerid, Txd_towarwybierz[playerid][4], 1);
		PlayerTextDrawSetProportional(playerid, Txd_towarwybierz[playerid][4], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_towarwybierz[playerid][4], 1);
	}
	if(type == 1) //show
	{
		for(new i = 0; i != 5; i++)
		{
			PlayerTextDrawShow(playerid, Txd_towarwybierz[playerid][i]);
		}
		SelectTextDraw(playerid, 0x00FF00FF);
		TogglePlayerControllable(playerid, false);
	}
	if(type == 2) //hide
	{
		for(new i = 0; i != 5; i++)
		{
			PlayerTextDrawHide(playerid, Txd_towarwybierz[playerid][i]);
		}
		TogglePlayerControllable(playerid, true);
		CancelSelectTextDraw(playerid);
	}
	if(type == 3) //hide + delete
	{
		for(new i = 0; i != 5; i++)
		{
			PlayerTextDrawHide(playerid, Txd_towarwybierz[playerid][i]);
			PlayerTextDrawDestroy(playerid, Txd_towarwybierz[playerid][i]);
		}
	}
	return 1;
}


stock PlayerLicznikTaxi(playerid, type = 0, taxi_player = 0, koszt1km = 0, Float:przejechal = 0.0, calkowitykoszt = 0)
{
	if(PlayerData[playerid][pLogged] == false) return 1;
	if(type == 0)
	{
	
		Txd_lczniktaxi[playerid][1] = CreatePlayerTextDraw(playerid, 207.000000, 320.000000, "Licznik Taxi");
		PlayerTextDrawFont(playerid, Txd_lczniktaxi[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid, Txd_lczniktaxi[playerid][1], 0.212500, 0.750000);
		PlayerTextDrawTextSize(playerid, Txd_lczniktaxi[playerid][1], 400.000000, 109.000000);
		PlayerTextDrawSetOutline(playerid, Txd_lczniktaxi[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid, Txd_lczniktaxi[playerid][1], 0);
		PlayerTextDrawAlignment(playerid, Txd_lczniktaxi[playerid][1], 2);
		PlayerTextDrawColor(playerid, Txd_lczniktaxi[playerid][1], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_lczniktaxi[playerid][1], 255);
		PlayerTextDrawBoxColor(playerid, Txd_lczniktaxi[playerid][1], 255);
		PlayerTextDrawUseBox(playerid, Txd_lczniktaxi[playerid][1], 1);
		PlayerTextDrawSetProportional(playerid, Txd_lczniktaxi[playerid][1], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_lczniktaxi[playerid][1], 0);

		Txd_lczniktaxi[playerid][0] = CreatePlayerTextDraw(playerid, 207.000000, 345.000000, "~w~Takowkarz: Nitro_Pejter~n~Klient: Pejter_NitrO~n~Koszt za 1km: $100~n~Przejechano juz: 1000.0km~n~Calkowity koszt do zaplaty:");
		PlayerTextDrawFont(playerid, Txd_lczniktaxi[playerid][0], 1);
		PlayerTextDrawLetterSize(playerid, Txd_lczniktaxi[playerid][0], 0.133331, 0.750000);
		PlayerTextDrawTextSize(playerid, Txd_lczniktaxi[playerid][0], 400.000000, 109.000000);
		PlayerTextDrawSetOutline(playerid, Txd_lczniktaxi[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, Txd_lczniktaxi[playerid][0], 0);
		PlayerTextDrawAlignment(playerid, Txd_lczniktaxi[playerid][0], 2);
		PlayerTextDrawColor(playerid, Txd_lczniktaxi[playerid][0], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_lczniktaxi[playerid][0], 255);
		PlayerTextDrawBoxColor(playerid, Txd_lczniktaxi[playerid][0], 255);
		PlayerTextDrawUseBox(playerid, Txd_lczniktaxi[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, Txd_lczniktaxi[playerid][0], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_lczniktaxi[playerid][0], 0);

		Txd_lczniktaxi[playerid][2] = CreatePlayerTextDraw(playerid, 207.000000, 333.000000, "~r~[PTR-Serw]");
		PlayerTextDrawFont(playerid, Txd_lczniktaxi[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid, Txd_lczniktaxi[playerid][2], 0.133331, 0.750000);
		PlayerTextDrawTextSize(playerid, Txd_lczniktaxi[playerid][2], 400.000000, 109.000000);
		PlayerTextDrawSetOutline(playerid, Txd_lczniktaxi[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid, Txd_lczniktaxi[playerid][2], 0);
		PlayerTextDrawAlignment(playerid, Txd_lczniktaxi[playerid][2], 2);
		PlayerTextDrawColor(playerid, Txd_lczniktaxi[playerid][2], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_lczniktaxi[playerid][2], 255);
		PlayerTextDrawBoxColor(playerid, Txd_lczniktaxi[playerid][2], 255);
		PlayerTextDrawUseBox(playerid, Txd_lczniktaxi[playerid][2], 1);
		PlayerTextDrawSetProportional(playerid, Txd_lczniktaxi[playerid][2], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_lczniktaxi[playerid][2], 0);

		Txd_lczniktaxi[playerid][3] = CreatePlayerTextDraw(playerid, 207.000000, 387.000000, "Corporacja Taksowkarska Las Venturas");
		PlayerTextDrawFont(playerid, Txd_lczniktaxi[playerid][3], 1);
		PlayerTextDrawLetterSize(playerid, Txd_lczniktaxi[playerid][3], 0.133331, 0.750000);
		PlayerTextDrawTextSize(playerid, Txd_lczniktaxi[playerid][3], 400.000000, 109.000000);
		PlayerTextDrawSetOutline(playerid, Txd_lczniktaxi[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid, Txd_lczniktaxi[playerid][3], 0);
		PlayerTextDrawAlignment(playerid, Txd_lczniktaxi[playerid][3], 2);
		PlayerTextDrawColor(playerid, Txd_lczniktaxi[playerid][3], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_lczniktaxi[playerid][3], 255);
		PlayerTextDrawBoxColor(playerid, Txd_lczniktaxi[playerid][3], 200);
		PlayerTextDrawUseBox(playerid, Txd_lczniktaxi[playerid][3], 1);
		PlayerTextDrawSetProportional(playerid, Txd_lczniktaxi[playerid][3], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_lczniktaxi[playerid][3], 0);

		Txd_lczniktaxi[playerid][4] = CreatePlayerTextDraw(playerid, 210.000000, 329.000000, "-");
		PlayerTextDrawFont(playerid, Txd_lczniktaxi[playerid][4], 1);
		PlayerTextDrawLetterSize(playerid, Txd_lczniktaxi[playerid][4], 6.070827, 0.300002);
		PlayerTextDrawTextSize(playerid, Txd_lczniktaxi[playerid][4], 298.500000, 75.000000);
		PlayerTextDrawSetOutline(playerid, Txd_lczniktaxi[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid, Txd_lczniktaxi[playerid][4], 0);
		PlayerTextDrawAlignment(playerid, Txd_lczniktaxi[playerid][4], 2);
		PlayerTextDrawColor(playerid, Txd_lczniktaxi[playerid][4], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_lczniktaxi[playerid][4], 255);
		PlayerTextDrawBoxColor(playerid, Txd_lczniktaxi[playerid][4], 135);
		PlayerTextDrawUseBox(playerid, Txd_lczniktaxi[playerid][4], 0);
		PlayerTextDrawSetProportional(playerid, Txd_lczniktaxi[playerid][4], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_lczniktaxi[playerid][4], 0);

		Txd_lczniktaxi[playerid][5] = CreatePlayerTextDraw(playerid, 210.000000, 340.000000, "-");
		PlayerTextDrawFont(playerid, Txd_lczniktaxi[playerid][5], 1);
		PlayerTextDrawLetterSize(playerid, Txd_lczniktaxi[playerid][5], 6.070827, 0.300002);
		PlayerTextDrawTextSize(playerid, Txd_lczniktaxi[playerid][5], 298.500000, 75.000000);
		PlayerTextDrawSetOutline(playerid, Txd_lczniktaxi[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid, Txd_lczniktaxi[playerid][5], 0);
		PlayerTextDrawAlignment(playerid, Txd_lczniktaxi[playerid][5], 2);
		PlayerTextDrawColor(playerid, Txd_lczniktaxi[playerid][5], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_lczniktaxi[playerid][5], 255);
		PlayerTextDrawBoxColor(playerid, Txd_lczniktaxi[playerid][5], 135);
		PlayerTextDrawUseBox(playerid, Txd_lczniktaxi[playerid][5], 0);
		PlayerTextDrawSetProportional(playerid, Txd_lczniktaxi[playerid][5], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_lczniktaxi[playerid][5], 0);

		Txd_lczniktaxi[playerid][6] = CreatePlayerTextDraw(playerid, 210.000000, 382.000000, "-");
		PlayerTextDrawFont(playerid, Txd_lczniktaxi[playerid][6], 1);
		PlayerTextDrawLetterSize(playerid, Txd_lczniktaxi[playerid][6], 6.070827, 0.300002);
		PlayerTextDrawTextSize(playerid, Txd_lczniktaxi[playerid][6], 298.500000, 75.000000);
		PlayerTextDrawSetOutline(playerid, Txd_lczniktaxi[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid, Txd_lczniktaxi[playerid][6], 0);
		PlayerTextDrawAlignment(playerid, Txd_lczniktaxi[playerid][6], 2);
		PlayerTextDrawColor(playerid, Txd_lczniktaxi[playerid][6], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_lczniktaxi[playerid][6], 255);
		PlayerTextDrawBoxColor(playerid, Txd_lczniktaxi[playerid][6], 135);
		PlayerTextDrawUseBox(playerid, Txd_lczniktaxi[playerid][6], 0);
		PlayerTextDrawSetProportional(playerid, Txd_lczniktaxi[playerid][6], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_lczniktaxi[playerid][6], 0);


	}
	if(type == 1) //show
	{
		for(new i = 0; i != 7; i++)
		{
			PlayerTextDrawShow(playerid, Txd_lczniktaxi[playerid][i]);
		}
	}
	if(type == 2) //hide
	{
		for(new i = 0; i != 7; i++)
		{
			PlayerTextDrawHide(playerid, Txd_lczniktaxi[playerid][i]);
		}
	}
	if(type == 3) //hide + delete
	{
		for(new i = 0; i != 7; i++)
		{
			PlayerTextDrawHide(playerid, Txd_lczniktaxi[playerid][i]);
			PlayerTextDrawDestroy(playerid, Txd_lczniktaxi[playerid][i]);
		}
	}
	if(type == 4) //refresh
	{
		new tdstring[200];

		format(tdstring, sizeof(tdstring), "\
											Takowkarz: %s~n~\
											Klient: %s~n~\
											Koszt za 1km: $%d~n~\
											Przejechano juz: %.1fkm~n~\
											Calkowity koszt do zaplaty: $%d", PlayerData[taxi_player][pName], PlayerData[playerid][pName], koszt1km, przejechal, calkowitykoszt);
		PlayerTextDrawSetString(playerid, Txd_lczniktaxi[playerid][0], tdstring);
	}
	return 1;
}


stock PlayerTextDrawLicznik(playerid, type = 0)
{
	if(PlayerData[playerid][pLogged] == false) return 1;
	if(type == 0) {
	
		//TEXTDRAWY
		Txdraw_licznikv[playerid][0] = CreatePlayerTextDraw(playerid, 578.000000, 297.000000, "_");
		PlayerTextDrawFont(playerid, Txdraw_licznikv[playerid][0], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_licznikv[playerid][0], 0.600000, 12.249980);
		PlayerTextDrawTextSize(playerid, Txdraw_licznikv[playerid][0], 298.500000, 154.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_licznikv[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_licznikv[playerid][0], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_licznikv[playerid][0], 2);
		PlayerTextDrawColor(playerid, Txdraw_licznikv[playerid][0], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_licznikv[playerid][0], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_licznikv[playerid][0], 80);
		PlayerTextDrawUseBox(playerid, Txdraw_licznikv[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_licznikv[playerid][0], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_licznikv[playerid][0], 0);

		Txdraw_licznikv[playerid][1] = CreatePlayerTextDraw(playerid, 570.000000, 276.000000, "_");
		PlayerTextDrawFont(playerid, Txdraw_licznikv[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_licznikv[playerid][1], 0.600000, 1.749981);
		PlayerTextDrawTextSize(playerid, Txdraw_licznikv[playerid][1], 298.500000, 139.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_licznikv[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_licznikv[playerid][1], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_licznikv[playerid][1], 2);
		PlayerTextDrawColor(playerid, Txdraw_licznikv[playerid][1], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_licznikv[playerid][1], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_licznikv[playerid][1], 80);
		PlayerTextDrawUseBox(playerid, Txdraw_licznikv[playerid][1], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_licznikv[playerid][1], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_licznikv[playerid][1], 0);

		Txdraw_licznikv[playerid][2] = CreatePlayerTextDraw(playerid, 505.000000, 323.000000, "~y~Predkosc: ~w~KM/H");
		PlayerTextDrawFont(playerid, Txdraw_licznikv[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_licznikv[playerid][2], 0.212498, 1.149999);
		PlayerTextDrawTextSize(playerid, Txdraw_licznikv[playerid][2], 798.500000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_licznikv[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_licznikv[playerid][2], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_licznikv[playerid][2], 1);
		PlayerTextDrawColor(playerid, Txdraw_licznikv[playerid][2], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_licznikv[playerid][2], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_licznikv[playerid][2], 0);
		PlayerTextDrawUseBox(playerid, Txdraw_licznikv[playerid][2], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_licznikv[playerid][2], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_licznikv[playerid][2], 0);

		Txdraw_licznikv[playerid][3] = CreatePlayerTextDraw(playerid, 459.000000, 338.000000, "_");
		PlayerTextDrawFont(playerid, Txdraw_licznikv[playerid][3], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_licznikv[playerid][3], 0.600000, 7.749989);
		PlayerTextDrawTextSize(playerid, Txdraw_licznikv[playerid][3], 298.500000, 75.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_licznikv[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_licznikv[playerid][3], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_licznikv[playerid][3], 2);
		PlayerTextDrawColor(playerid, Txdraw_licznikv[playerid][3], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_licznikv[playerid][3], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_licznikv[playerid][3], 80);
		PlayerTextDrawUseBox(playerid, Txdraw_licznikv[playerid][3], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_licznikv[playerid][3], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_licznikv[playerid][3], 0);

		Txdraw_licznikv[playerid][4] = CreatePlayerTextDraw(playerid, 542.000000, 285.000000, "_");
		PlayerTextDrawFont(playerid, Txdraw_licznikv[playerid][4], 0);
		PlayerTextDrawLetterSize(playerid, Txdraw_licznikv[playerid][4], 0.600000, 0.099987);
		PlayerTextDrawTextSize(playerid, Txdraw_licznikv[playerid][4], 298.500000, 11.500000);
		PlayerTextDrawSetOutline(playerid, Txdraw_licznikv[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_licznikv[playerid][4], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_licznikv[playerid][4], 2);
		PlayerTextDrawColor(playerid, Txdraw_licznikv[playerid][4], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_licznikv[playerid][4], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_licznikv[playerid][4], 255);
		PlayerTextDrawUseBox(playerid, Txdraw_licznikv[playerid][4], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_licznikv[playerid][4], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_licznikv[playerid][4], 0);

		Txdraw_licznikv[playerid][5] = CreatePlayerTextDraw(playerid, 539.000000, 278.000000, "~y~Licznik ~w~Pojazdu");
		PlayerTextDrawFont(playerid, Txdraw_licznikv[playerid][5], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_licznikv[playerid][5], 0.245829, 1.250000);
		PlayerTextDrawTextSize(playerid, Txdraw_licznikv[playerid][5], 691.500000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_licznikv[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_licznikv[playerid][5], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_licznikv[playerid][5], 1);
		PlayerTextDrawColor(playerid, Txdraw_licznikv[playerid][5], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_licznikv[playerid][5], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_licznikv[playerid][5], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_licznikv[playerid][5], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_licznikv[playerid][5], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_licznikv[playerid][5], 0);

		Txdraw_licznikv[playerid][6] = CreatePlayerTextDraw(playerid, 620.000000, 284.000000, "_");
		PlayerTextDrawFont(playerid, Txdraw_licznikv[playerid][6], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_licznikv[playerid][6], 0.600000, 0.099987);
		PlayerTextDrawTextSize(playerid, Txdraw_licznikv[playerid][6], 298.500000, 11.500000);
		PlayerTextDrawSetOutline(playerid, Txdraw_licznikv[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_licznikv[playerid][6], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_licznikv[playerid][6], 2);
		PlayerTextDrawColor(playerid, Txdraw_licznikv[playerid][6], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_licznikv[playerid][6], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_licznikv[playerid][6], 255);
		PlayerTextDrawUseBox(playerid, Txdraw_licznikv[playerid][6], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_licznikv[playerid][6], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_licznikv[playerid][6], 0);

		Txdraw_licznikv[playerid][7] = CreatePlayerTextDraw(playerid, 506.000000, 339.000000, "~y~Przebieg: ~w~239239KM");
		PlayerTextDrawFont(playerid, Txdraw_licznikv[playerid][7], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_licznikv[playerid][7], 0.191664, 1.350000);
		PlayerTextDrawTextSize(playerid, Txdraw_licznikv[playerid][7], 625.500000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_licznikv[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_licznikv[playerid][7], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_licznikv[playerid][7], 1);
		PlayerTextDrawColor(playerid, Txdraw_licznikv[playerid][7], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_licznikv[playerid][7], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_licznikv[playerid][7], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_licznikv[playerid][7], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_licznikv[playerid][7], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_licznikv[playerid][7], 0);

		Txdraw_licznikv[playerid][8] = CreatePlayerTextDraw(playerid, 507.000000, 359.000000, "~y~Paliwo ~g~[]: ~w~40.0/50L");
		PlayerTextDrawFont(playerid, Txdraw_licznikv[playerid][8], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_licznikv[playerid][8], 0.195831, 1.200000);
		PlayerTextDrawTextSize(playerid, Txdraw_licznikv[playerid][8], 612.500000, 12.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_licznikv[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_licznikv[playerid][8], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_licznikv[playerid][8], 1);
		PlayerTextDrawColor(playerid, Txdraw_licznikv[playerid][8], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_licznikv[playerid][8], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_licznikv[playerid][8], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_licznikv[playerid][8], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_licznikv[playerid][8], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_licznikv[playerid][8], 0);

		Txdraw_licznikv[playerid][9] = CreatePlayerTextDraw(playerid, 506.000000, 375.000000, "~y~Stan: ~w~100%");
		PlayerTextDrawFont(playerid, Txdraw_licznikv[playerid][9], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_licznikv[playerid][9], 0.208331, 1.250000);
		PlayerTextDrawTextSize(playerid, Txdraw_licznikv[playerid][9], 609.500000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_licznikv[playerid][9], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_licznikv[playerid][9], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_licznikv[playerid][9], 1);
		PlayerTextDrawColor(playerid, Txdraw_licznikv[playerid][9], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_licznikv[playerid][9], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_licznikv[playerid][9], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_licznikv[playerid][9], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_licznikv[playerid][9], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_licznikv[playerid][9], 0);
		
		Txdraw_licznikv[playerid][10] = CreatePlayerTextDraw(playerid, 460.000000, 382.000000, "~w~L. Przod: ~y~IIIIIIIIIIII");
		PlayerTextDrawFont(playerid, Txdraw_licznikv[playerid][10], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_licznikv[playerid][10], 0.170827, 0.849999);
		PlayerTextDrawTextSize(playerid, Txdraw_licznikv[playerid][10], 480.000000, 66.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_licznikv[playerid][10], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_licznikv[playerid][10], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_licznikv[playerid][10], 2);
		PlayerTextDrawColor(playerid, Txdraw_licznikv[playerid][10], 9109759);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_licznikv[playerid][10], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_licznikv[playerid][10], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_licznikv[playerid][10], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_licznikv[playerid][10], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_licznikv[playerid][10], 0);

		Txdraw_licznikv[playerid][11] = CreatePlayerTextDraw(playerid, 460.000000, 341.000000, "Stan Opon");
		PlayerTextDrawFont(playerid, Txdraw_licznikv[playerid][11], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_licznikv[playerid][11], 0.212494, 1.100000);
		PlayerTextDrawTextSize(playerid, Txdraw_licznikv[playerid][11], 400.000000, 66.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_licznikv[playerid][11], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_licznikv[playerid][11], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_licznikv[playerid][11], 2);
		PlayerTextDrawColor(playerid, Txdraw_licznikv[playerid][11], 9109759);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_licznikv[playerid][11], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_licznikv[playerid][11], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_licznikv[playerid][11], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_licznikv[playerid][11], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_licznikv[playerid][11], 0);

		Txdraw_licznikv[playerid][12] = CreatePlayerTextDraw(playerid, 460.000000, 358.000000, "~w~P. Przod: ~y~IIIIIIIIIIII");
		PlayerTextDrawFont(playerid, Txdraw_licznikv[playerid][12], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_licznikv[playerid][12], 0.170827, 0.749997);
		PlayerTextDrawTextSize(playerid, Txdraw_licznikv[playerid][12], 401.000000, 66.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_licznikv[playerid][12], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_licznikv[playerid][12], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_licznikv[playerid][12], 2);
		PlayerTextDrawColor(playerid, Txdraw_licznikv[playerid][12], 9109759);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_licznikv[playerid][12], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_licznikv[playerid][12], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_licznikv[playerid][12], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_licznikv[playerid][12], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_licznikv[playerid][12], 0);

		Txdraw_licznikv[playerid][13] = CreatePlayerTextDraw(playerid, 460.000000, 395.000000, "~w~L. Tyl: ~y~IIIIIIIIIIII");
		PlayerTextDrawFont(playerid, Txdraw_licznikv[playerid][13], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_licznikv[playerid][13], 0.158331, 0.699998);
		PlayerTextDrawTextSize(playerid, Txdraw_licznikv[playerid][13], 400.000000, 66.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_licznikv[playerid][13], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_licznikv[playerid][13], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_licznikv[playerid][13], 2);
		PlayerTextDrawColor(playerid, Txdraw_licznikv[playerid][13], 9109759);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_licznikv[playerid][13], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_licznikv[playerid][13], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_licznikv[playerid][13], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_licznikv[playerid][13], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_licznikv[playerid][13], 0);

		Txdraw_licznikv[playerid][14] = CreatePlayerTextDraw(playerid, 460.000000, 370.000000, "~w~P. Tyl: ~y~IIIIIIIIIIII");
		PlayerTextDrawFont(playerid, Txdraw_licznikv[playerid][14], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_licznikv[playerid][14], 0.154164, 0.699998);
		PlayerTextDrawTextSize(playerid, Txdraw_licznikv[playerid][14], 400.000000, 66.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_licznikv[playerid][14], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_licznikv[playerid][14], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_licznikv[playerid][14], 2);
		PlayerTextDrawColor(playerid, Txdraw_licznikv[playerid][14], 9109759);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_licznikv[playerid][14], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_licznikv[playerid][14], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_licznikv[playerid][14], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_licznikv[playerid][14], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_licznikv[playerid][14], 0);

		Txdraw_licznikv[playerid][15] = CreatePlayerTextDraw(playerid, 569.000000, 299.000000, "Infernus");
		PlayerTextDrawFont(playerid, Txdraw_licznikv[playerid][15], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_licznikv[playerid][15], 0.245829, 1.250000);
		PlayerTextDrawTextSize(playerid, Txdraw_licznikv[playerid][15], 691.500000, 131.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_licznikv[playerid][15], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_licznikv[playerid][15], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_licznikv[playerid][15], 2);
		PlayerTextDrawColor(playerid, Txdraw_licznikv[playerid][15], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_licznikv[playerid][15], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_licznikv[playerid][15], 71);
		PlayerTextDrawUseBox(playerid, Txdraw_licznikv[playerid][15], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_licznikv[playerid][15], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_licznikv[playerid][15], 0);
		
		Txdraw_licznikv[playerid][16] = CreatePlayerTextDraw(playerid, 500.000000, 413.000000, "GPS:");
		PlayerTextDrawFont(playerid, Txdraw_licznikv[playerid][16], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_licznikv[playerid][16], 0.158326, 0.899999);
		PlayerTextDrawTextSize(playerid, Txdraw_licznikv[playerid][16], 691.500000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_licznikv[playerid][16], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_licznikv[playerid][16], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_licznikv[playerid][16], 1);
		PlayerTextDrawColor(playerid, Txdraw_licznikv[playerid][16], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_licznikv[playerid][16], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_licznikv[playerid][16], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_licznikv[playerid][16], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_licznikv[playerid][16], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_licznikv[playerid][16], 0);


/*
		Txdraw_licznikv[playerid][16] = CreatePlayerTextDraw(playerid, 572.000000, 279.000000, "Swiatla");
		PlayerTextDrawFont(playerid, Txdraw_licznikv[playerid][16], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_licznikv[playerid][16], 0.224996, 1.049998);
		PlayerTextDrawTextSize(playerid, Txdraw_licznikv[playerid][16], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_licznikv[playerid][16], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_licznikv[playerid][16], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_licznikv[playerid][16], 1);
		PlayerTextDrawColor(playerid, Txdraw_licznikv[playerid][16], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_licznikv[playerid][16], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_licznikv[playerid][16], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_licznikv[playerid][16], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_licznikv[playerid][16], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_licznikv[playerid][16], 0);

		Txdraw_licznikv[playerid][17] = CreatePlayerTextDraw(playerid, 508.000000, 280.000000, "Silnik");
		PlayerTextDrawFont(playerid, Txdraw_licznikv[playerid][17], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_licznikv[playerid][17], 0.224996, 1.049998);
		PlayerTextDrawTextSize(playerid, Txdraw_licznikv[playerid][17], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_licznikv[playerid][17], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_licznikv[playerid][17], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_licznikv[playerid][17], 1);
		PlayerTextDrawColor(playerid, Txdraw_licznikv[playerid][17], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_licznikv[playerid][17], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_licznikv[playerid][17], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_licznikv[playerid][17], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_licznikv[playerid][17], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_licznikv[playerid][17], 0);
		
		Txdraw_licznikv[playerid][18] = CreatePlayerTextDraw(playerid, 506.000000, 393.000000, "IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII");
		PlayerTextDrawFont(playerid, Txdraw_licznikv[playerid][18], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_licznikv[playerid][18], 0.266663, 1.299998);
		PlayerTextDrawTextSize(playerid, Txdraw_licznikv[playerid][18], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_licznikv[playerid][18], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_licznikv[playerid][18], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_licznikv[playerid][18], 1);
		PlayerTextDrawColor(playerid, Txdraw_licznikv[playerid][18], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_licznikv[playerid][18], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_licznikv[playerid][18], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_licznikv[playerid][18], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_licznikv[playerid][18], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_licznikv[playerid][18], 0);
	*/
	}
	if(type == 1) //show
	{
		for(new i = 0; i != 17; i++)
		{
			PlayerTextDrawShow(playerid, Txdraw_licznikv[playerid][i]);
		}
	}
	if(type == 2) //hide
	{
		for(new i = 0; i != 17; i++)
		{
			PlayerTextDrawHide(playerid, Txdraw_licznikv[playerid][i]);
		}
	}
	if(type == 3) //hide + delete
	{
		for(new i = 0; i != 17; i++)
		{
			PlayerTextDrawHide(playerid, Txdraw_licznikv[playerid][i]);
			PlayerTextDrawDestroy(playerid, Txdraw_licznikv[playerid][i]);
		}
	}
	if(type == 4) //refresh
	{
	
		//Licznik
		new tdstring[150], vehicleid = GetPlayerVehicleID(playerid), Float:VehHealth, zonee[100], paliwo_typ[64];
		
		GetVehicleHealth(GetPlayerVehicleID(playerid), VehHealth);
		VehHealth = (VehHealth - 249.9) / 7.5;
		GetPlayer2DZone(playerid, zonee, 100);
						

		
		switch(VehicleData[vehicleid][vPaliwoTyp])
		{
			case 0: paliwo_typ = "Benzyna";	
			case 1: paliwo_typ = "Gaz (LPG)";
			case 2: paliwo_typ = "ON (Olej napedowy)";
			case 3: paliwo_typ = "Gazy ziemne (NVG)";
			case 4: paliwo_typ = "Uniwersalna 95";
			case 5: paliwo_typ = "Bezolowiowa 95";
			case 6: paliwo_typ = "Bezolowiowa 98";
		}
	
		format(tdstring, sizeof(tdstring), "%s", CarList[GetVehicleModel(vehicleid)-400]);
		PlayerTextDrawSetString(playerid, Txdraw_licznikv[playerid][15], tdstring);
		format(tdstring, sizeof(tdstring), "~y~Predkosc: %dkm/h", GetVehicleSpeed(vehicleid));
		PlayerTextDrawSetString(playerid, Txdraw_licznikv[playerid][2], tdstring);
		format(tdstring, sizeof(tdstring), "~y~Paliwo ~g~[%s]: ~w~%.0fL/%dL", paliwo_typ, VehicleData[vehicleid][vPaliwo], VehicleData[vehicleid][vPaliwoMax]);
		PlayerTextDrawSetString(playerid, Txdraw_licznikv[playerid][8], tdstring);
		format(tdstring, sizeof(tdstring), "~y~Stan: ~w~%.0f%", VehHealth);
		PlayerTextDrawSetString(playerid, Txdraw_licznikv[playerid][9], tdstring);
		format(tdstring, sizeof(tdstring), "~y~GPS: ~w~%s", zonee);
		PlayerTextDrawSetString(playerid, Txdraw_licznikv[playerid][16], tdstring);
		format(tdstring, sizeof(tdstring), "~y~Przebieg: ~w~%.1fkm", VehicleData[vehicleid][vPrzebieg]);
		PlayerTextDrawSetString(playerid, Txdraw_licznikv[playerid][7], tdstring);

		if(ToLodz(vehicleid) || ToSamolot(vehicleid) || ToHelikopter(vehicleid) || ToRC(vehicleid) || ToPrzyczepa(vehicleid))
		{
			PlayerTextDrawHide(playerid, Txdraw_licznikv[playerid][10]);
			PlayerTextDrawHide(playerid, Txdraw_licznikv[playerid][11]);
			PlayerTextDrawHide(playerid, Txdraw_licznikv[playerid][12]);
			PlayerTextDrawHide(playerid, Txdraw_licznikv[playerid][13]);
			PlayerTextDrawHide(playerid, Txdraw_licznikv[playerid][14]);
		}
		
		if(ToRower(vehicleid) || ToMotor(vehicleid))
		{
			PlayerTextDrawHide(playerid, Txdraw_licznikv[playerid][10]);
			PlayerTextDrawHide(playerid, Txdraw_licznikv[playerid][13]);
		}

		
		
		
		//Stan opon
		new str_dmg_opona[4][40];

		if(getTire(vehicleid, 0) == 1 || floatround(VehicleData[vehicleid][vOponaPT_DMG]) == 0) //Prawy tyl
		{
			VehicleData[vehicleid][vOponaPT_DMG] = 0;
			setTire(vehicleid, 0, 1);
		}
		if(getTire(vehicleid, 1) == 1 || floatround(VehicleData[vehicleid][vOponaPP_DMG]) == 0) //Przod prawy
		{
			VehicleData[vehicleid][vOponaPP_DMG] = 0;
			setTire(vehicleid, 1, 1);
		}
		if(getTire(vehicleid, 2) == 1 || floatround(VehicleData[vehicleid][vOponaLT_DMG]) == 0) //Lewy tyl
		{
			VehicleData[vehicleid][vOponaLT_DMG] = 0;
			setTire(vehicleid, 2, 1);
		}
		if(getTire(vehicleid, 3) == 1 || floatround(VehicleData[vehicleid][vOponaLP_DMG]) == 0) //Przod lewy
		{
			VehicleData[vehicleid][vOponaLP_DMG] = 0;
			setTire(vehicleid, 3, 1);
		}


		switch(floatround(VehicleData[vehicleid][vOponaLT_DMG]))  //Lewy tyl
		{
			case 0: str_dmg_opona[0] = "Lewy tyl: ~r~~h~IIIIIIIIII";	
			case 1: str_dmg_opona[0] = "Lewy tyl: ~y~I~r~~h~IIIIIIIII";	
			case 2: str_dmg_opona[0] = "Lewy tyl: ~y~II~r~~h~IIIIIIII";	
			case 3: str_dmg_opona[0] = "Lewy tyl: ~y~III~r~~h~IIIIIII";	
			case 4: str_dmg_opona[0] = "Lewy tyl: ~y~IIII~r~~h~IIIIII";	
			case 5: str_dmg_opona[0] = "Lewy tyl: ~y~IIIII~r~~h~IIIII";	
			case 6: str_dmg_opona[0] = "Lewy tyl: ~y~IIIIII~r~~h~IIII";	
			case 7: str_dmg_opona[0] = "Lewy tyl: ~y~IIIIIII~r~~h~III";	
			case 8: str_dmg_opona[0] = "Lewy tyl: ~y~IIIIIIII~r~~h~II";	
			case 9: str_dmg_opona[0] = "Lewy tyl: ~y~IIIIIIIII~r~~h~I";	
			case 10: str_dmg_opona[0] = "Lewy tyl: ~y~IIIIIIIIII";	
		}
		switch(floatround(VehicleData[vehicleid][vOponaLP_DMG])) //Lewy przod
		{
			case 0: str_dmg_opona[1] = "Lewy przod: ~r~~h~IIIIIIIIII";	
			case 1: str_dmg_opona[1] = "Lewy przod: ~y~I~r~~h~IIIIIIIII";	
			case 2: str_dmg_opona[1] = "Lewy przod: ~y~II~r~~h~IIIIIIII";	
			case 3: str_dmg_opona[1] = "Lewy przod: ~y~III~r~~h~IIIIIII";	
			case 4: str_dmg_opona[1] = "Lewy przod: ~y~IIII~r~~h~IIIIII";	
			case 5: str_dmg_opona[1] = "Lewy przod: ~y~IIIII~r~~h~IIIII";	
			case 6: str_dmg_opona[1] = "Lewy przod: ~y~IIIIII~r~~h~IIII";	
			case 7: str_dmg_opona[1] = "Lewy przod: ~y~IIIIIII~r~~h~III";	
			case 8: str_dmg_opona[1] = "Lewy przod: ~y~IIIIIIII~r~~h~II";	
			case 9: str_dmg_opona[1] = "Lewy przod: ~y~IIIIIIIII~r~~h~I";	
			case 10: str_dmg_opona[1] = "Lewy przod: ~y~IIIIIIIIII";	
		}
		
		
		if(ToRower(vehicleid) || ToMotor(vehicleid))
		{
			switch(floatround(VehicleData[vehicleid][vOponaPP_DMG])) //Prawy przod
			{
				case 0: str_dmg_opona[2] = "Przednia: ~r~~h~IIIIIIIIII";	
				case 1: str_dmg_opona[2] = "Przednia: ~y~I~r~~h~IIIIIIIII";	
				case 2: str_dmg_opona[2] = "Przednia: ~y~II~r~~h~IIIIIIII";	
				case 3: str_dmg_opona[2] = "Przednia: ~y~III~r~~h~IIIIIII";	
				case 4: str_dmg_opona[2] = "Przednia: ~y~IIII~r~~h~IIIIII";	
				case 5: str_dmg_opona[2] = "Przednia: ~y~IIIII~r~~h~IIIII";	
				case 6: str_dmg_opona[2] = "Przednia: ~y~IIIIII~r~~h~IIII";	
				case 7: str_dmg_opona[2] = "Przednia: ~y~IIIIIII~r~~h~III";	
				case 8: str_dmg_opona[2] = "Przednia: ~y~IIIIIIII~r~~h~II";	
				case 9: str_dmg_opona[2] = "Przednia: ~y~IIIIIIIII~r~~h~I";	
				case 10: str_dmg_opona[2] = "Przednia: ~y~IIIIIIIIII";
			}
			switch(floatround(VehicleData[vehicleid][vOponaPT_DMG])) //Prawy tyl
			{
				case 0: str_dmg_opona[3] = "Tylnia: ~r~~h~IIIIIIIIII";	
				case 1: str_dmg_opona[3] = "Tylnia: ~y~I~r~~h~IIIIIIIII";	
				case 2: str_dmg_opona[3] = "Tylnia: ~y~II~r~~h~IIIIIIII";	
				case 3: str_dmg_opona[3] = "Tylnia: ~y~III~r~~h~IIIIIII";	
				case 4: str_dmg_opona[3] = "Tylnia: ~y~IIII~r~~h~IIIIII";	
				case 5: str_dmg_opona[3] = "Tylnia: ~y~IIIII~r~~h~IIIII";	
				case 6: str_dmg_opona[3] = "Tylnia: ~y~IIIIII~r~~h~IIII";	
				case 7: str_dmg_opona[3] = "Tylnia: ~y~IIIIIII~r~~h~III";	
				case 8: str_dmg_opona[3] = "Tylnia: ~y~IIIIIIII~r~~h~II";	
				case 9: str_dmg_opona[3] = "Tylnia: ~y~IIIIIIIII~r~~h~I";	
				case 10: str_dmg_opona[3] = "Tylnia: ~y~IIIIIIIIII";
			}
		}
		else 
		{
			switch(floatround(VehicleData[vehicleid][vOponaPP_DMG])) //Prawy przod
			{
				case 0: str_dmg_opona[2] = "Prawy przod: ~r~~h~IIIIIIIIII";	
				case 1: str_dmg_opona[2] = "Prawy przod: ~y~I~r~~h~IIIIIIIII";	
				case 2: str_dmg_opona[2] = "Prawy przod: ~y~II~r~~h~IIIIIIII";	
				case 3: str_dmg_opona[2] = "Prawy przod: ~y~III~r~~h~IIIIIII";	
				case 4: str_dmg_opona[2] = "Prawy przod: ~y~IIII~r~~h~IIIIII";	
				case 5: str_dmg_opona[2] = "Prawy przod: ~y~IIIII~r~~h~IIIII";	
				case 6: str_dmg_opona[2] = "Prawy przod: ~y~IIIIII~r~~h~IIII";	
				case 7: str_dmg_opona[2] = "Prawy przod: ~y~IIIIIII~r~~h~III";	
				case 8: str_dmg_opona[2] = "Prawy przod: ~y~IIIIIIII~r~~h~II";	
				case 9: str_dmg_opona[2] = "Prawy przod: ~y~IIIIIIIII~r~~h~I";	
				case 10: str_dmg_opona[2] = "Prawy przod: ~y~IIIIIIIIII";
			}
			switch(floatround(VehicleData[vehicleid][vOponaPT_DMG])) //Prawy tyl
			{
				case 0: str_dmg_opona[3] = "Prawy tyl: ~r~~h~IIIIIIIIII";	
				case 1: str_dmg_opona[3] = "Prawy tyl: ~y~I~r~~h~IIIIIIIII";	
				case 2: str_dmg_opona[3] = "Prawy tyl: ~y~II~r~~h~IIIIIIII";	
				case 3: str_dmg_opona[3] = "Prawy tyl: ~y~III~r~~h~IIIIIII";	
				case 4: str_dmg_opona[3] = "Prawy tyl: ~y~IIII~r~~h~IIIIII";	
				case 5: str_dmg_opona[3] = "Prawy tyl: ~y~IIIII~r~~h~IIIII";	
				case 6: str_dmg_opona[3] = "Prawy tyl: ~y~IIIIII~r~~h~IIII";	
				case 7: str_dmg_opona[3] = "Prawy tyl: ~y~IIIIIII~r~~h~III";	
				case 8: str_dmg_opona[3] = "Prawy tyl: ~y~IIIIIIII~r~~h~II";	
				case 9: str_dmg_opona[3] = "Prawy tyl: ~y~IIIIIIIII~r~~h~I";	
				case 10: str_dmg_opona[3] = "Prawy tyl: ~y~IIIIIIIIII";
			}
		}
		
		
		
		format(tdstring, sizeof(tdstring), "%s", str_dmg_opona[0]);
		PlayerTextDrawSetString(playerid, Txdraw_licznikv[playerid][13], tdstring);
		format(tdstring, sizeof(tdstring), "%s", str_dmg_opona[1]);
		PlayerTextDrawSetString(playerid, Txdraw_licznikv[playerid][10], tdstring);
		format(tdstring, sizeof(tdstring), "%s", str_dmg_opona[2]);
		PlayerTextDrawSetString(playerid, Txdraw_licznikv[playerid][12], tdstring);
		format(tdstring, sizeof(tdstring), "%s", str_dmg_opona[3]);
		PlayerTextDrawSetString(playerid, Txdraw_licznikv[playerid][14], tdstring);
		
	}
	return 1;
}


stock PlayerTextDrawGym(playerid, type = 0)
{
    if(type == 0)
    {
        Txdraw_Gym[playerid][0] = CreatePlayerTextDraw(playerid, 630.000000, 135.000000, "_");
        PlayerTextDrawFont(playerid, Txdraw_Gym[playerid][0], 1);
        PlayerTextDrawLetterSize(playerid, Txdraw_Gym[playerid][0], 0.600000, 3.800004);
        PlayerTextDrawTextSize(playerid, Txdraw_Gym[playerid][0], 492.000000, 37.500000);
        PlayerTextDrawSetOutline(playerid, Txdraw_Gym[playerid][0], 1);
        PlayerTextDrawSetShadow(playerid, Txdraw_Gym[playerid][0], 0);
        PlayerTextDrawAlignment(playerid, Txdraw_Gym[playerid][0], 1);
        PlayerTextDrawColor(playerid, Txdraw_Gym[playerid][0], -1);
        PlayerTextDrawBackgroundColor(playerid, Txdraw_Gym[playerid][0], 255);
        PlayerTextDrawBoxColor(playerid, Txdraw_Gym[playerid][0], 50);
        PlayerTextDrawUseBox(playerid, Txdraw_Gym[playerid][0], 1);
        PlayerTextDrawSetProportional(playerid, Txdraw_Gym[playerid][0], 1);
        PlayerTextDrawSetSelectable(playerid, Txdraw_Gym[playerid][0], 0);

        Txdraw_Gym[playerid][1] = CreatePlayerTextDraw(playerid, 595.000000, 154.000000, "_");
        PlayerTextDrawFont(playerid, Txdraw_Gym[playerid][1], 1);
        PlayerTextDrawLetterSize(playerid, Txdraw_Gym[playerid][1], 2.762501, -0.199999);
        PlayerTextDrawTextSize(playerid, Txdraw_Gym[playerid][1], 527.000000, 12.000000);
        PlayerTextDrawSetOutline(playerid, Txdraw_Gym[playerid][1], 1);
        PlayerTextDrawSetShadow(playerid, Txdraw_Gym[playerid][1], 0);
        PlayerTextDrawAlignment(playerid, Txdraw_Gym[playerid][1], 1);
        PlayerTextDrawColor(playerid, Txdraw_Gym[playerid][1], -1);
        PlayerTextDrawBackgroundColor(playerid, Txdraw_Gym[playerid][1], 255);
        PlayerTextDrawBoxColor(playerid, Txdraw_Gym[playerid][1], 9109554);
        PlayerTextDrawUseBox(playerid, Txdraw_Gym[playerid][1], 1);
        PlayerTextDrawSetProportional(playerid, Txdraw_Gym[playerid][1], 1);
        PlayerTextDrawSetSelectable(playerid, Txdraw_Gym[playerid][1], 0);

        Txdraw_Gym[playerid][2] = CreatePlayerTextDraw(playerid, 520.000000, 133.000000, "Silownia");
        PlayerTextDrawFont(playerid, Txdraw_Gym[playerid][2], 1);
        PlayerTextDrawLetterSize(playerid, Txdraw_Gym[playerid][2], 0.545832, 1.850000);
        PlayerTextDrawTextSize(playerid, Txdraw_Gym[playerid][2], 393.000000, 17.000000);
        PlayerTextDrawSetOutline(playerid, Txdraw_Gym[playerid][2], 1);
        PlayerTextDrawSetShadow(playerid, Txdraw_Gym[playerid][2], 0);
        PlayerTextDrawAlignment(playerid, Txdraw_Gym[playerid][2], 1);
        PlayerTextDrawColor(playerid, Txdraw_Gym[playerid][2], -1);
        PlayerTextDrawBackgroundColor(playerid, Txdraw_Gym[playerid][2], 255);
        PlayerTextDrawBoxColor(playerid, Txdraw_Gym[playerid][2], 50);
        PlayerTextDrawUseBox(playerid, Txdraw_Gym[playerid][2], 0);
        PlayerTextDrawSetProportional(playerid, Txdraw_Gym[playerid][2], 1);
        PlayerTextDrawSetSelectable(playerid, Txdraw_Gym[playerid][2], 0);

        Txdraw_Gym[playerid][3] = CreatePlayerTextDraw(playerid, 496.000000, 154.000000, "Dystans");
        PlayerTextDrawFont(playerid, Txdraw_Gym[playerid][3], 1);
        PlayerTextDrawLetterSize(playerid, Txdraw_Gym[playerid][3], 0.304165, 1.500000);
        PlayerTextDrawTextSize(playerid, Txdraw_Gym[playerid][3], 400.000000, 17.000000);
        PlayerTextDrawSetOutline(playerid, Txdraw_Gym[playerid][3], 1);
        PlayerTextDrawSetShadow(playerid, Txdraw_Gym[playerid][3], 0);
        PlayerTextDrawAlignment(playerid, Txdraw_Gym[playerid][3], 1);
        PlayerTextDrawColor(playerid, Txdraw_Gym[playerid][3], -1);
        PlayerTextDrawBackgroundColor(playerid, Txdraw_Gym[playerid][3], 255);
        PlayerTextDrawBoxColor(playerid, Txdraw_Gym[playerid][3], 50);
        PlayerTextDrawUseBox(playerid, Txdraw_Gym[playerid][3], 0);
        PlayerTextDrawSetProportional(playerid, Txdraw_Gym[playerid][3], 1);
        PlayerTextDrawSetSelectable(playerid, Txdraw_Gym[playerid][3], 0);

        Txdraw_Gym[playerid][4] = CreatePlayerTextDraw(playerid, 570.000000, 156.000000, "0");
        PlayerTextDrawFont(playerid, Txdraw_Gym[playerid][4], 1);
        PlayerTextDrawLetterSize(playerid, Txdraw_Gym[playerid][4], 0.349999, 1.299999);
        PlayerTextDrawTextSize(playerid, Txdraw_Gym[playerid][4], 400.000000, 17.000000);
        PlayerTextDrawSetOutline(playerid, Txdraw_Gym[playerid][4], 1);
        PlayerTextDrawSetShadow(playerid, Txdraw_Gym[playerid][4], 0);
        PlayerTextDrawAlignment(playerid, Txdraw_Gym[playerid][4], 1);
        PlayerTextDrawColor(playerid, Txdraw_Gym[playerid][4], -1);
        PlayerTextDrawBackgroundColor(playerid, Txdraw_Gym[playerid][4], 255);
        PlayerTextDrawBoxColor(playerid, Txdraw_Gym[playerid][4], 50);
        PlayerTextDrawUseBox(playerid, Txdraw_Gym[playerid][4], 0);
        PlayerTextDrawSetProportional(playerid, Txdraw_Gym[playerid][4], 1);
        PlayerTextDrawSetSelectable(playerid, Txdraw_Gym[playerid][4], 0);

        Txdraw_Gym[playerid][5] = CreatePlayerTextDraw(playerid, 597.000000, 157.000000, "_");
        PlayerTextDrawFont(playerid, Txdraw_Gym[playerid][5], 0);
        PlayerTextDrawLetterSize(playerid, Txdraw_Gym[playerid][5], 0.645833, 1.099987);
        PlayerTextDrawTextSize(playerid, Txdraw_Gym[playerid][5], 595.500000, 17.000000);
        PlayerTextDrawSetOutline(playerid, Txdraw_Gym[playerid][5], 1);
        PlayerTextDrawSetShadow(playerid, Txdraw_Gym[playerid][5], 0);
        PlayerTextDrawAlignment(playerid, Txdraw_Gym[playerid][5], 1);
        PlayerTextDrawColor(playerid, Txdraw_Gym[playerid][5], -1);
        PlayerTextDrawBackgroundColor(playerid, Txdraw_Gym[playerid][5], 255);
        PlayerTextDrawBoxColor(playerid, Txdraw_Gym[playerid][5], 9109554);
        PlayerTextDrawUseBox(playerid, Txdraw_Gym[playerid][5], 1);
        PlayerTextDrawSetProportional(playerid, Txdraw_Gym[playerid][5], 1);
        PlayerTextDrawSetSelectable(playerid, Txdraw_Gym[playerid][5], 0);

        Txdraw_Gym[playerid][6] = CreatePlayerTextDraw(playerid, 587.000000, 124.000000, "Nowy_TextDraw");
        PlayerTextDrawFont(playerid, Txdraw_Gym[playerid][6], 5);
        PlayerTextDrawLetterSize(playerid, Txdraw_Gym[playerid][6], 0.583333, 2.149998);
        PlayerTextDrawTextSize(playerid, Txdraw_Gym[playerid][6], 51.000000, 56.000000);
        PlayerTextDrawSetOutline(playerid, Txdraw_Gym[playerid][6], 1);
        PlayerTextDrawSetShadow(playerid, Txdraw_Gym[playerid][6], 0);
        PlayerTextDrawAlignment(playerid, Txdraw_Gym[playerid][6], 1);
        PlayerTextDrawColor(playerid, Txdraw_Gym[playerid][6], -1);
        PlayerTextDrawBackgroundColor(playerid, Txdraw_Gym[playerid][6], 0);
        PlayerTextDrawBoxColor(playerid, Txdraw_Gym[playerid][6], 50);
        PlayerTextDrawUseBox(playerid, Txdraw_Gym[playerid][6], 0);
        PlayerTextDrawSetProportional(playerid, Txdraw_Gym[playerid][6], 1);
        PlayerTextDrawSetSelectable(playerid, Txdraw_Gym[playerid][6], 0);
        PlayerTextDrawSetPreviewModel(playerid, Txdraw_Gym[playerid][6], 2627);
        PlayerTextDrawSetPreviewRot(playerid, Txdraw_Gym[playerid][6], -10.000000, -3.000000, -225.000000, 1.049998);
        
        for(new i = 0; i != 6; i++)
		{
			PlayerTextDrawShow(playerid, Txdraw_Gym[playerid][i]);
		}
    }
    else
	{
		for(new i = 0; i != 6; i++)
		{
			PlayerTextDrawHide(playerid, Txdraw_Gym[playerid][i]);
			PlayerTextDrawDestroy(playerid, Txdraw_Gym[playerid][i]);
		}
	}
    return 1;
}

stock PlayerTextDrawLogged(playerid, type = 0)
{
	if(type == 0)
	{
		//TEXTDRAWY
		Txdraw_Logged[playerid][0] = CreatePlayerTextDraw(playerid, 312.000000, 251.000000, "-");
		PlayerTextDrawFont(playerid, Txdraw_Logged[playerid][0], 2);
		PlayerTextDrawLetterSize(playerid, Txdraw_Logged[playerid][0], 7.924985, 14.850021);
		PlayerTextDrawTextSize(playerid, Txdraw_Logged[playerid][0], 298.500000, 75.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_Logged[playerid][0], 0);
		PlayerTextDrawSetShadow(playerid, Txdraw_Logged[playerid][0], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_Logged[playerid][0], 2);
		PlayerTextDrawColor(playerid, Txdraw_Logged[playerid][0], -1061109686);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_Logged[playerid][0], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_Logged[playerid][0], 135);
		PlayerTextDrawUseBox(playerid, Txdraw_Logged[playerid][0], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_Logged[playerid][0], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_Logged[playerid][0], 0);

		Txdraw_Logged[playerid][1] = CreatePlayerTextDraw(playerid, 318.000000, 2.000000, "_");
		PlayerTextDrawFont(playerid, Txdraw_Logged[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_Logged[playerid][1], 0.600000, 12.800004);
		PlayerTextDrawTextSize(playerid, Txdraw_Logged[playerid][1], 488.500000, 665.500000);
		PlayerTextDrawSetOutline(playerid, Txdraw_Logged[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_Logged[playerid][1], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_Logged[playerid][1], 2);
		PlayerTextDrawColor(playerid, Txdraw_Logged[playerid][1], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_Logged[playerid][1], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_Logged[playerid][1], 135);
		PlayerTextDrawUseBox(playerid, Txdraw_Logged[playerid][1], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_Logged[playerid][1], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_Logged[playerid][1], 0);

		Txdraw_Logged[playerid][2] = CreatePlayerTextDraw(playerid, 318.000000, 343.000000, "_");
		PlayerTextDrawFont(playerid, Txdraw_Logged[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_Logged[playerid][2], 0.600000, 12.800004);
		PlayerTextDrawTextSize(playerid, Txdraw_Logged[playerid][2], 488.500000, 665.500000);
		PlayerTextDrawSetOutline(playerid, Txdraw_Logged[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_Logged[playerid][2], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_Logged[playerid][2], 2);
		PlayerTextDrawColor(playerid, Txdraw_Logged[playerid][2], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_Logged[playerid][2], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_Logged[playerid][2], 135);
		PlayerTextDrawUseBox(playerid, Txdraw_Logged[playerid][2], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_Logged[playerid][2], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_Logged[playerid][2], 0);

		Txdraw_Logged[playerid][3] = CreatePlayerTextDraw(playerid, 238.000000, 251.000000, "-");
		PlayerTextDrawFont(playerid, Txdraw_Logged[playerid][3], 2);
		PlayerTextDrawLetterSize(playerid, Txdraw_Logged[playerid][3], 7.924985, 14.850021);
		PlayerTextDrawTextSize(playerid, Txdraw_Logged[playerid][3], 298.500000, 75.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_Logged[playerid][3], 0);
		PlayerTextDrawSetShadow(playerid, Txdraw_Logged[playerid][3], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_Logged[playerid][3], 2);
		PlayerTextDrawColor(playerid, Txdraw_Logged[playerid][3], -1061109678);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_Logged[playerid][3], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_Logged[playerid][3], 135);
		PlayerTextDrawUseBox(playerid, Txdraw_Logged[playerid][3], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_Logged[playerid][3], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_Logged[playerid][3], 0);

		Txdraw_Logged[playerid][4] = CreatePlayerTextDraw(playerid, 386.000000, 251.000000, "-");
		PlayerTextDrawFont(playerid, Txdraw_Logged[playerid][4], 2);
		PlayerTextDrawLetterSize(playerid, Txdraw_Logged[playerid][4], 7.924985, 14.850021);
		PlayerTextDrawTextSize(playerid, Txdraw_Logged[playerid][4], 298.500000, 75.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_Logged[playerid][4], 0);
		PlayerTextDrawSetShadow(playerid, Txdraw_Logged[playerid][4], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_Logged[playerid][4], 2);
		PlayerTextDrawColor(playerid, Txdraw_Logged[playerid][4], -1061109661);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_Logged[playerid][4], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_Logged[playerid][4], 135);
		PlayerTextDrawUseBox(playerid, Txdraw_Logged[playerid][4], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_Logged[playerid][4], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_Logged[playerid][4], 0);

		Txdraw_Logged[playerid][5] = CreatePlayerTextDraw(playerid, 597.000000, 362.000000, "NitrO");
		PlayerTextDrawFont(playerid, Txdraw_Logged[playerid][5], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_Logged[playerid][5], 0.183331, 1.449998);
		PlayerTextDrawTextSize(playerid, Txdraw_Logged[playerid][5], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_Logged[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_Logged[playerid][5], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_Logged[playerid][5], 1);
		PlayerTextDrawColor(playerid, Txdraw_Logged[playerid][5], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_Logged[playerid][5], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_Logged[playerid][5], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_Logged[playerid][5], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_Logged[playerid][5], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_Logged[playerid][5], 0);

		Txdraw_Logged[playerid][6] = CreatePlayerTextDraw(playerid, 312.000000, 21.000000, "~b~P~w~OLSKI ~b~T~w~RUCK ~b~R~w~OZRYWKI");
		PlayerTextDrawFont(playerid, Txdraw_Logged[playerid][6], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_Logged[playerid][6], 0.574998, 2.500000);
		PlayerTextDrawTextSize(playerid, Txdraw_Logged[playerid][6], 502.500000, 366.500000);
		PlayerTextDrawSetOutline(playerid, Txdraw_Logged[playerid][6], 4);
		PlayerTextDrawSetShadow(playerid, Txdraw_Logged[playerid][6], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_Logged[playerid][6], 2);
		PlayerTextDrawColor(playerid, Txdraw_Logged[playerid][6], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_Logged[playerid][6], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_Logged[playerid][6], -1061109744);
		PlayerTextDrawUseBox(playerid, Txdraw_Logged[playerid][6], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_Logged[playerid][6], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_Logged[playerid][6], 0);

		Txdraw_Logged[playerid][7] = CreatePlayerTextDraw(playerid, 399.000000, 52.000000, "~b~R~w~ole~b~P~w~lay");
		PlayerTextDrawFont(playerid, Txdraw_Logged[playerid][7], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_Logged[playerid][7], 0.341666, 0.799998);
		PlayerTextDrawTextSize(playerid, Txdraw_Logged[playerid][7], 502.500000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_Logged[playerid][7], 3);
		PlayerTextDrawSetShadow(playerid, Txdraw_Logged[playerid][7], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_Logged[playerid][7], 1);
		PlayerTextDrawColor(playerid, Txdraw_Logged[playerid][7], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_Logged[playerid][7], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_Logged[playerid][7], -1061109743);
		PlayerTextDrawUseBox(playerid, Txdraw_Logged[playerid][7], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_Logged[playerid][7], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_Logged[playerid][7], 0);

		Txdraw_Logged[playerid][8] = CreatePlayerTextDraw(playerid, 312.000000, 50.000000, "~b~O~w~d ~b~g~w~raczy~b~ d~w~o ~b~g~w~raczy");
		PlayerTextDrawFont(playerid, Txdraw_Logged[playerid][8], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_Logged[playerid][8], 0.233333, 1.250000);
		PlayerTextDrawTextSize(playerid, Txdraw_Logged[playerid][8], 432.500000, 366.500000);
		PlayerTextDrawSetOutline(playerid, Txdraw_Logged[playerid][8], 2);
		PlayerTextDrawSetShadow(playerid, Txdraw_Logged[playerid][8], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_Logged[playerid][8], 2);
		PlayerTextDrawColor(playerid, Txdraw_Logged[playerid][8], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_Logged[playerid][8], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_Logged[playerid][8], -1061109744);
		PlayerTextDrawUseBox(playerid, Txdraw_Logged[playerid][8], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_Logged[playerid][8], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_Logged[playerid][8], 0);

		Txdraw_Logged[playerid][9] = CreatePlayerTextDraw(playerid, 593.000000, 374.000000, "Hammel");
		PlayerTextDrawFont(playerid, Txdraw_Logged[playerid][9], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_Logged[playerid][9], 0.183331, 1.449998);
		PlayerTextDrawTextSize(playerid, Txdraw_Logged[playerid][9], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_Logged[playerid][9], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_Logged[playerid][9], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_Logged[playerid][9], 1);
		PlayerTextDrawColor(playerid, Txdraw_Logged[playerid][9], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_Logged[playerid][9], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_Logged[playerid][9], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_Logged[playerid][9], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_Logged[playerid][9], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_Logged[playerid][9], 0);

			
		Txdraw_Logged[playerid][10] = CreatePlayerTextDraw(playerid, 317.000000, 315.000000, "Wejdz");
		PlayerTextDrawFont(playerid, Txdraw_Logged[playerid][10], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_Logged[playerid][10], 0.195831, 1.950001);
		PlayerTextDrawTextSize(playerid, Txdraw_Logged[playerid][10], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_Logged[playerid][10], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_Logged[playerid][10], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_Logged[playerid][10], 2);
		PlayerTextDrawColor(playerid, Txdraw_Logged[playerid][10], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_Logged[playerid][10], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_Logged[playerid][10], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_Logged[playerid][10], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_Logged[playerid][10], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_Logged[playerid][10], 1);

		Txdraw_Logged[playerid][11] = CreatePlayerTextDraw(playerid, 385.000000, 315.000000, "Regulamin");
		PlayerTextDrawFont(playerid, Txdraw_Logged[playerid][11], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_Logged[playerid][11], 0.195831, 1.950001);
		PlayerTextDrawTextSize(playerid, Txdraw_Logged[playerid][11], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_Logged[playerid][11], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_Logged[playerid][11], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_Logged[playerid][11], 2);
		PlayerTextDrawColor(playerid, Txdraw_Logged[playerid][11], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_Logged[playerid][11], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_Logged[playerid][11], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_Logged[playerid][11], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_Logged[playerid][11], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_Logged[playerid][11], 1);

		Txdraw_Logged[playerid][12] = CreatePlayerTextDraw(playerid, 240.000000, 312.000000, "opinia");
		PlayerTextDrawFont(playerid, Txdraw_Logged[playerid][12], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_Logged[playerid][12], 0.191666, 2.450001);
		PlayerTextDrawTextSize(playerid, Txdraw_Logged[playerid][12], 400.000000, 67.500000);
		PlayerTextDrawSetOutline(playerid, Txdraw_Logged[playerid][12], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_Logged[playerid][12], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_Logged[playerid][12], 2);
		PlayerTextDrawColor(playerid, Txdraw_Logged[playerid][12], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_Logged[playerid][12], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_Logged[playerid][12], 19);
		PlayerTextDrawUseBox(playerid, Txdraw_Logged[playerid][12], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_Logged[playerid][12], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_Logged[playerid][12], 1);

		Txdraw_Logged[playerid][13] = CreatePlayerTextDraw(playerid, 313.000000, 125.000000, "~b~P~w~anel ~b~L~w~ogowania");
		PlayerTextDrawFont(playerid, Txdraw_Logged[playerid][13], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_Logged[playerid][13], 0.562500, 2.049999);
		PlayerTextDrawTextSize(playerid, Txdraw_Logged[playerid][13], 400.000000, 217.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_Logged[playerid][13], 3);
		PlayerTextDrawSetShadow(playerid, Txdraw_Logged[playerid][13], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_Logged[playerid][13], 2);
		PlayerTextDrawColor(playerid, Txdraw_Logged[playerid][13], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_Logged[playerid][13], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_Logged[playerid][13], -1061109662);
		PlayerTextDrawUseBox(playerid, Txdraw_Logged[playerid][13], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_Logged[playerid][13], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_Logged[playerid][13], 0);

		Txdraw_Logged[playerid][14] = CreatePlayerTextDraw(playerid, 576.000000, 345.000000, "Aktorzy gamemoda");
		PlayerTextDrawFont(playerid, Txdraw_Logged[playerid][14], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_Logged[playerid][14], 0.183331, 1.449998);
		PlayerTextDrawTextSize(playerid, Txdraw_Logged[playerid][14], 653.500000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_Logged[playerid][14], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_Logged[playerid][14], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_Logged[playerid][14], 1);
		PlayerTextDrawColor(playerid, Txdraw_Logged[playerid][14], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_Logged[playerid][14], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_Logged[playerid][14], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_Logged[playerid][14], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_Logged[playerid][14], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_Logged[playerid][14], 0);
				
		
		
		for(new i = 0; i != 15; i++)
		{
			PlayerTextDrawShow(playerid, Txdraw_Logged[playerid][i]);
		}
		SelectTextDraw(playerid, 0x00FF00FF);
		TogglePlayerControllable(playerid, false);
		SetPlayerPos(playerid, 2438.0369,2376.1670,10.8203);
	}
	else
	{
		TogglePlayerControllable(playerid, true);
		CancelSelectTextDraw(playerid);
		for(new i = 0; i != 15; i++)
		{
			PlayerTextDrawHide(playerid, Txdraw_Logged[playerid][i]);
			PlayerTextDrawDestroy(playerid, Txdraw_Logged[playerid][i]);
		}
	}
	return 1;
}

forward HideBuildInfo(playerid);
public HideBuildInfo(playerid)
{
	PlayerBuildInfo(playerid, 3);
	return 1;
}

//0 = stworz, 1 = pokaz 2 = hide 3 = refresh
stock PlayerStatyBox(playerid, type = 0)
{
	if(PlayerData[playerid][pLogged] == false) return 1;
	if(type == 0)
	{
		
		//TEXTDRAWY
		Txdraw_StatyBox[playerid][0] = CreatePlayerTextDraw(playerid, 320.000000, 436.000000, "_");
		PlayerTextDrawFont(playerid, Txdraw_StatyBox[playerid][0], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_StatyBox[playerid][0], 0.600000, 2.049998);
		PlayerTextDrawTextSize(playerid, Txdraw_StatyBox[playerid][0], 298.500000, 639.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_StatyBox[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StatyBox[playerid][0], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_StatyBox[playerid][0], 2);
		PlayerTextDrawColor(playerid, Txdraw_StatyBox[playerid][0], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StatyBox[playerid][0], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_StatyBox[playerid][0], 135);
		PlayerTextDrawUseBox(playerid, Txdraw_StatyBox[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_StatyBox[playerid][0], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_StatyBox[playerid][0], 0);

		Txdraw_StatyBox[playerid][1] = CreatePlayerTextDraw(playerid, 137.000000, 428.000000, "-");
		PlayerTextDrawFont(playerid, Txdraw_StatyBox[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_StatyBox[playerid][1], -20.329151, 0.999997);
		PlayerTextDrawTextSize(playerid, Txdraw_StatyBox[playerid][1], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_StatyBox[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StatyBox[playerid][1], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_StatyBox[playerid][1], 2);
		PlayerTextDrawColor(playerid, Txdraw_StatyBox[playerid][1], -1962934017);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StatyBox[playerid][1], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_StatyBox[playerid][1], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_StatyBox[playerid][1], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_StatyBox[playerid][1], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_StatyBox[playerid][1], 0);

		Txdraw_StatyBox[playerid][2] = CreatePlayerTextDraw(playerid, 486.000000, 427.000000, "-");
		PlayerTextDrawFont(playerid, Txdraw_StatyBox[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_StatyBox[playerid][2], -20.329151, 0.999997);
		PlayerTextDrawTextSize(playerid, Txdraw_StatyBox[playerid][2], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_StatyBox[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StatyBox[playerid][2], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_StatyBox[playerid][2], 2);
		PlayerTextDrawColor(playerid, Txdraw_StatyBox[playerid][2], -1962934017);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StatyBox[playerid][2], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_StatyBox[playerid][2], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_StatyBox[playerid][2], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_StatyBox[playerid][2], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_StatyBox[playerid][2], 0);

		Txdraw_StatyBox[playerid][3] = CreatePlayerTextDraw(playerid, 208.000000, 260.000000, "-");
		PlayerTextDrawFont(playerid, Txdraw_StatyBox[playerid][3], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_StatyBox[playerid][3], 15.424941, 28.950054);
		PlayerTextDrawTextSize(playerid, Txdraw_StatyBox[playerid][3], 474.000000, -423.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_StatyBox[playerid][3], 0);
		PlayerTextDrawSetShadow(playerid, Txdraw_StatyBox[playerid][3], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_StatyBox[playerid][3], 1);
		PlayerTextDrawColor(playerid, Txdraw_StatyBox[playerid][3], 156);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StatyBox[playerid][3], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_StatyBox[playerid][3], 0);
		PlayerTextDrawUseBox(playerid, Txdraw_StatyBox[playerid][3], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_StatyBox[playerid][3], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_StatyBox[playerid][3], 0);

		Txdraw_StatyBox[playerid][4] = CreatePlayerTextDraw(playerid, 241.000000, 395.000000, "-");
		PlayerTextDrawFont(playerid, Txdraw_StatyBox[playerid][4], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_StatyBox[playerid][4], 11.079169, 1.149999);
		PlayerTextDrawTextSize(playerid, Txdraw_StatyBox[playerid][4], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_StatyBox[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StatyBox[playerid][4], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_StatyBox[playerid][4], 1);
		PlayerTextDrawColor(playerid, Txdraw_StatyBox[playerid][4], -1962934017);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StatyBox[playerid][4], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_StatyBox[playerid][4], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_StatyBox[playerid][4], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_StatyBox[playerid][4], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_StatyBox[playerid][4], 0);

		Txdraw_StatyBox[playerid][5] = CreatePlayerTextDraw(playerid, 234.000000, 406.000000, ".");
		PlayerTextDrawFont(playerid, Txdraw_StatyBox[playerid][5], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_StatyBox[playerid][5], 0.600000, 2.000000);
		PlayerTextDrawTextSize(playerid, Txdraw_StatyBox[playerid][5], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_StatyBox[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StatyBox[playerid][5], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_StatyBox[playerid][5], 1);
		PlayerTextDrawColor(playerid, Txdraw_StatyBox[playerid][5], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StatyBox[playerid][5], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_StatyBox[playerid][5], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_StatyBox[playerid][5], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_StatyBox[playerid][5], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_StatyBox[playerid][5], 0);

		Txdraw_StatyBox[playerid][6] = CreatePlayerTextDraw(playerid, 395.000000, 406.000000, ".");
		PlayerTextDrawFont(playerid, Txdraw_StatyBox[playerid][6], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_StatyBox[playerid][6], 0.600000, 2.000000);
		PlayerTextDrawTextSize(playerid, Txdraw_StatyBox[playerid][6], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_StatyBox[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StatyBox[playerid][6], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_StatyBox[playerid][6], 1);
		PlayerTextDrawColor(playerid, Txdraw_StatyBox[playerid][6], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StatyBox[playerid][6], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_StatyBox[playerid][6], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_StatyBox[playerid][6], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_StatyBox[playerid][6], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_StatyBox[playerid][6], 0);

		Txdraw_StatyBox[playerid][7] = CreatePlayerTextDraw(playerid, 585.000000, 437.000000, "~y~Sila:");
		PlayerTextDrawFont(playerid, Txdraw_StatyBox[playerid][7], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_StatyBox[playerid][7], 0.233333, 1.049998);
		PlayerTextDrawTextSize(playerid, Txdraw_StatyBox[playerid][7], 594.000000, 72.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_StatyBox[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StatyBox[playerid][7], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_StatyBox[playerid][7], 2);
		PlayerTextDrawColor(playerid, Txdraw_StatyBox[playerid][7], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StatyBox[playerid][7], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_StatyBox[playerid][7], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_StatyBox[playerid][7], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_StatyBox[playerid][7], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_StatyBox[playerid][7], 0);

		Txdraw_StatyBox[playerid][8] = CreatePlayerTextDraw(playerid, 479.000000, 437.000000, "~g~Sen:");
		PlayerTextDrawFont(playerid, Txdraw_StatyBox[playerid][8], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_StatyBox[playerid][8], 0.233333, 1.049998);
		PlayerTextDrawTextSize(playerid, Txdraw_StatyBox[playerid][8], 594.000000, 72.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_StatyBox[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StatyBox[playerid][8], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_StatyBox[playerid][8], 2);
		PlayerTextDrawColor(playerid, Txdraw_StatyBox[playerid][8], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StatyBox[playerid][8], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_StatyBox[playerid][8], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_StatyBox[playerid][8], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_StatyBox[playerid][8], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_StatyBox[playerid][8], 0);

		Txdraw_StatyBox[playerid][9] = CreatePlayerTextDraw(playerid, 617.000000, 437.000000, "10000J");
		PlayerTextDrawFont(playerid, Txdraw_StatyBox[playerid][9], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_StatyBox[playerid][9], 0.233333, 1.049998);
		PlayerTextDrawTextSize(playerid, Txdraw_StatyBox[playerid][9], 594.000000, 72.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_StatyBox[playerid][9], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StatyBox[playerid][9], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_StatyBox[playerid][9], 2);
		PlayerTextDrawColor(playerid, Txdraw_StatyBox[playerid][9], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StatyBox[playerid][9], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_StatyBox[playerid][9], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_StatyBox[playerid][9], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_StatyBox[playerid][9], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_StatyBox[playerid][9], 0);

		Txdraw_StatyBox[playerid][10] = CreatePlayerTextDraw(playerid, 504.000000, 437.000000, "100%");
		PlayerTextDrawFont(playerid, Txdraw_StatyBox[playerid][10], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_StatyBox[playerid][10], 0.233333, 1.049998);
		PlayerTextDrawTextSize(playerid, Txdraw_StatyBox[playerid][10], 594.000000, 72.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_StatyBox[playerid][10], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StatyBox[playerid][10], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_StatyBox[playerid][10], 2);
		PlayerTextDrawColor(playerid, Txdraw_StatyBox[playerid][10], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StatyBox[playerid][10], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_StatyBox[playerid][10], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_StatyBox[playerid][10], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_StatyBox[playerid][10], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_StatyBox[playerid][10], 0);

		Txdraw_StatyBox[playerid][11] = CreatePlayerTextDraw(playerid, 532.000000, 437.000000, "~g~Glod:");
		PlayerTextDrawFont(playerid, Txdraw_StatyBox[playerid][11], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_StatyBox[playerid][11], 0.233333, 1.049998);
		PlayerTextDrawTextSize(playerid, Txdraw_StatyBox[playerid][11], 594.000000, 72.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_StatyBox[playerid][11], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StatyBox[playerid][11], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_StatyBox[playerid][11], 2);
		PlayerTextDrawColor(playerid, Txdraw_StatyBox[playerid][11], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StatyBox[playerid][11], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_StatyBox[playerid][11], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_StatyBox[playerid][11], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_StatyBox[playerid][11], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_StatyBox[playerid][11], 0);

		Txdraw_StatyBox[playerid][12] = CreatePlayerTextDraw(playerid, 559.000000, 437.000000, "100%");
		PlayerTextDrawFont(playerid, Txdraw_StatyBox[playerid][12], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_StatyBox[playerid][12], 0.233333, 1.049998);
		PlayerTextDrawTextSize(playerid, Txdraw_StatyBox[playerid][12], 594.000000, 72.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_StatyBox[playerid][12], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StatyBox[playerid][12], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_StatyBox[playerid][12], 2);
		PlayerTextDrawColor(playerid, Txdraw_StatyBox[playerid][12], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StatyBox[playerid][12], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_StatyBox[playerid][12], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_StatyBox[playerid][12], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_StatyBox[playerid][12], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_StatyBox[playerid][12], 0);

		Txdraw_StatyBox[playerid][13] = CreatePlayerTextDraw(playerid, 147.000000, 435.000000, "~b~www.~r~p~w~t~r~r~b~-serv.pl");
		PlayerTextDrawFont(playerid, Txdraw_StatyBox[playerid][13], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_StatyBox[playerid][13], 0.233333, 1.049998);
		PlayerTextDrawTextSize(playerid, Txdraw_StatyBox[playerid][13], 594.000000, 72.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_StatyBox[playerid][13], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StatyBox[playerid][13], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_StatyBox[playerid][13], 2);
		PlayerTextDrawColor(playerid, Txdraw_StatyBox[playerid][13], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StatyBox[playerid][13], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_StatyBox[playerid][13], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_StatyBox[playerid][13], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_StatyBox[playerid][13], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_StatyBox[playerid][13], 0);

		Txdraw_StatyBox[playerid][14] = CreatePlayerTextDraw(playerid, 411.000000, 437.000000, "~y~Score:");
		PlayerTextDrawFont(playerid, Txdraw_StatyBox[playerid][14], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_StatyBox[playerid][14], 0.233333, 1.049998);
		PlayerTextDrawTextSize(playerid, Txdraw_StatyBox[playerid][14], 594.000000, 72.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_StatyBox[playerid][14], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StatyBox[playerid][14], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_StatyBox[playerid][14], 2);
		PlayerTextDrawColor(playerid, Txdraw_StatyBox[playerid][14], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StatyBox[playerid][14], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_StatyBox[playerid][14], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_StatyBox[playerid][14], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_StatyBox[playerid][14], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_StatyBox[playerid][14], 0);

		Txdraw_StatyBox[playerid][15] = CreatePlayerTextDraw(playerid, 447.000000, 437.000000, "999999");
		PlayerTextDrawFont(playerid, Txdraw_StatyBox[playerid][15], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_StatyBox[playerid][15], 0.233333, 1.049998);
		PlayerTextDrawTextSize(playerid, Txdraw_StatyBox[playerid][15], 594.000000, 56.500000);
		PlayerTextDrawSetOutline(playerid, Txdraw_StatyBox[playerid][15], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StatyBox[playerid][15], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_StatyBox[playerid][15], 2);
		PlayerTextDrawColor(playerid, Txdraw_StatyBox[playerid][15], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StatyBox[playerid][15], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_StatyBox[playerid][15], 0);
		PlayerTextDrawUseBox(playerid, Txdraw_StatyBox[playerid][15], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_StatyBox[playerid][15], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_StatyBox[playerid][15], 0);

		Txdraw_StatyBox[playerid][16] = CreatePlayerTextDraw(playerid, 318.000000, 412.000000, "Luan_Martinezs");
		PlayerTextDrawFont(playerid, Txdraw_StatyBox[playerid][16], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_StatyBox[playerid][16], 0.233333, 1.049998);
		PlayerTextDrawTextSize(playerid, Txdraw_StatyBox[playerid][16], 594.000000, 72.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_StatyBox[playerid][16], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StatyBox[playerid][16], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_StatyBox[playerid][16], 2);
		PlayerTextDrawColor(playerid, Txdraw_StatyBox[playerid][16], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StatyBox[playerid][16], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_StatyBox[playerid][16], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_StatyBox[playerid][16], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_StatyBox[playerid][16], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_StatyBox[playerid][16], 0);

		Txdraw_StatyBox[playerid][17] = CreatePlayerTextDraw(playerid, 318.000000, 388.000000, "~y~Witamy na ~r~P~w~T~r~R");
		PlayerTextDrawFont(playerid, Txdraw_StatyBox[playerid][17], 3);
		PlayerTextDrawLetterSize(playerid, Txdraw_StatyBox[playerid][17], 0.233333, 1.049998);
		PlayerTextDrawTextSize(playerid, Txdraw_StatyBox[playerid][17], 594.000000, 72.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_StatyBox[playerid][17], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StatyBox[playerid][17], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_StatyBox[playerid][17], 2);
		PlayerTextDrawColor(playerid, Txdraw_StatyBox[playerid][17], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StatyBox[playerid][17], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_StatyBox[playerid][17], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_StatyBox[playerid][17], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_StatyBox[playerid][17], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_StatyBox[playerid][17], 0);

		Txdraw_StatyBox[playerid][18] = CreatePlayerTextDraw(playerid, 266.000000, 412.000000, "ID: 0");
		PlayerTextDrawFont(playerid, Txdraw_StatyBox[playerid][18], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_StatyBox[playerid][18], 0.233333, 1.049998);
		PlayerTextDrawTextSize(playerid, Txdraw_StatyBox[playerid][18], 594.000000, 72.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_StatyBox[playerid][18], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StatyBox[playerid][18], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_StatyBox[playerid][18], 2);
		PlayerTextDrawColor(playerid, Txdraw_StatyBox[playerid][18], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StatyBox[playerid][18], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_StatyBox[playerid][18], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_StatyBox[playerid][18], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_StatyBox[playerid][18], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_StatyBox[playerid][18], 0);

		Txdraw_StatyBox[playerid][19] = CreatePlayerTextDraw(playerid, 224.000000, 436.000000, "~y~Lvl:");
		PlayerTextDrawFont(playerid, Txdraw_StatyBox[playerid][19], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_StatyBox[playerid][19], 0.233333, 1.049998);
		PlayerTextDrawTextSize(playerid, Txdraw_StatyBox[playerid][19], 594.000000, 72.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_StatyBox[playerid][19], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StatyBox[playerid][19], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_StatyBox[playerid][19], 2);
		PlayerTextDrawColor(playerid, Txdraw_StatyBox[playerid][19], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StatyBox[playerid][19], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_StatyBox[playerid][19], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_StatyBox[playerid][19], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_StatyBox[playerid][19], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_StatyBox[playerid][19], 0);

		Txdraw_StatyBox[playerid][20] = CreatePlayerTextDraw(playerid, 240.000000, 436.000000, "25");
		PlayerTextDrawFont(playerid, Txdraw_StatyBox[playerid][20], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_StatyBox[playerid][20], 0.233333, 1.049998);
		PlayerTextDrawTextSize(playerid, Txdraw_StatyBox[playerid][20], 594.000000, 72.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_StatyBox[playerid][20], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StatyBox[playerid][20], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_StatyBox[playerid][20], 2);
		PlayerTextDrawColor(playerid, Txdraw_StatyBox[playerid][20], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StatyBox[playerid][20], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_StatyBox[playerid][20], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_StatyBox[playerid][20], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_StatyBox[playerid][20], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_StatyBox[playerid][20], 0);

		Txdraw_StatyBox[playerid][21] = CreatePlayerTextDraw(playerid, 54.000000, 435.000000, "Ping: 300(MS)");
		PlayerTextDrawFont(playerid, Txdraw_StatyBox[playerid][21], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_StatyBox[playerid][21], 0.233333, 1.049998);
		PlayerTextDrawTextSize(playerid, Txdraw_StatyBox[playerid][21], 594.000000, 72.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_StatyBox[playerid][21], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StatyBox[playerid][21], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_StatyBox[playerid][21], 3);
		PlayerTextDrawColor(playerid, Txdraw_StatyBox[playerid][21], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StatyBox[playerid][21], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_StatyBox[playerid][21], 50);
		PlayerTextDrawUseBox(playerid, Txdraw_StatyBox[playerid][21], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_StatyBox[playerid][21], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_StatyBox[playerid][21], 0);

		Txdraw_StatyBox[playerid][22] = CreatePlayerTextDraw(playerid, 321.000000, 435.000000, "~r~Polski ~w~Truck ~r~Rozrywki ~b~RP");
		PlayerTextDrawFont(playerid, Txdraw_StatyBox[playerid][22], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_StatyBox[playerid][22], 0.283333, 0.800000);
		PlayerTextDrawTextSize(playerid, Txdraw_StatyBox[playerid][22], 594.000000, 125.500000);
		PlayerTextDrawSetOutline(playerid, Txdraw_StatyBox[playerid][22], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StatyBox[playerid][22], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_StatyBox[playerid][22], 2);
		PlayerTextDrawColor(playerid, Txdraw_StatyBox[playerid][22], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StatyBox[playerid][22], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_StatyBox[playerid][22], 147);
		PlayerTextDrawUseBox(playerid, Txdraw_StatyBox[playerid][22], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_StatyBox[playerid][22], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_StatyBox[playerid][22], 0);

	}
	if(type == 1) //Pokazywanie textdrawow
	{
		for(new i = 0; i != 23; i++)
		{
			PlayerTextDrawShow(playerid, Txdraw_StatyBox[playerid][i]);
		}
	}
	if(type == 2) //Ukrywanie oraz usuwanie textdrawow.
	{
		for(new i = 0; i != 23; i++)
		{
			PlayerTextDrawHide(playerid, Txdraw_StatyBox[playerid][i]);
			PlayerTextDrawDestroy(playerid, Txdraw_StatyBox[playerid][i]);
		}
	}
	if(type == 3) //Odswiezenie wszystkich intow
	{
		 if(PlayerData[playerid][pGlod] > 100) PlayerData[playerid][pGlod] = 100;
		 if(PlayerData[playerid][pSen] > 100)  PlayerData[playerid][pSen] = 100;
		 new tdstring[100];
		 format(tdstring, sizeof(tdstring), "%d", PlayerData[playerid][pLevel]);
		 PlayerTextDrawSetString(playerid, Txdraw_StatyBox[playerid][20], tdstring);
		 format(tdstring, sizeof(tdstring), "%d", GetPlayerScore(playerid));
		 PlayerTextDrawSetString(playerid, Txdraw_StatyBox[playerid][15], tdstring);
		 format(tdstring, sizeof(tdstring), "%dJ", PlayerData[playerid][pSila]);
		 PlayerTextDrawSetString(playerid, Txdraw_StatyBox[playerid][9], tdstring);
		 format(tdstring, sizeof(tdstring), "%d%", PlayerData[playerid][pGlod]);
		 PlayerTextDrawSetString(playerid, Txdraw_StatyBox[playerid][12], tdstring);
		 format(tdstring, sizeof(tdstring), "%d%", PlayerData[playerid][pSen]);
		 PlayerTextDrawSetString(playerid, Txdraw_StatyBox[playerid][10], tdstring);
		 format(tdstring, sizeof(tdstring), "%s", PlayerData[playerid][pName]);
		 PlayerTextDrawSetString(playerid, Txdraw_StatyBox[playerid][16], tdstring);
		 format(tdstring, sizeof(tdstring), "~r~Polski ~w~Truck ~r~Rozrywki ~b~RP");
		 PlayerTextDrawSetString(playerid, Txdraw_StatyBox[playerid][22], tdstring);
		 format(tdstring, sizeof(tdstring), "ID: %d", playerid);
		 PlayerTextDrawSetString(playerid, Txdraw_StatyBox[playerid][18], tdstring);
		 format(tdstring, sizeof(tdstring), "Ping: %d(MS)", GetPlayerPing(playerid));
		 PlayerTextDrawSetString(playerid, Txdraw_StatyBox[playerid][21], tdstring);
	}
	return 1;
}



stock PlayerBuildInfo(playerid, type = 0, uid = 0)
{
	if(PlayerData[playerid][pLogged] == false) return 1;
	if(type == 0) //Wczytywanie textdrawow
	{
		
		Txdraw_BuildInfo[playerid][0] = CreatePlayerTextDraw(playerid, 218.000000, 327.000000, "_");
		PlayerTextDrawFont(playerid, Txdraw_BuildInfo[playerid][0], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_BuildInfo[playerid][0], 0.600000, 8.300004);
		PlayerTextDrawTextSize(playerid, Txdraw_BuildInfo[playerid][0], 298.500000, 145.500000);
		PlayerTextDrawSetOutline(playerid, Txdraw_BuildInfo[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_BuildInfo[playerid][0], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_BuildInfo[playerid][0], 2);
		PlayerTextDrawColor(playerid, Txdraw_BuildInfo[playerid][0], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_BuildInfo[playerid][0], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_BuildInfo[playerid][0], 135);
		PlayerTextDrawUseBox(playerid, Txdraw_BuildInfo[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_BuildInfo[playerid][0], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_BuildInfo[playerid][0], 0);

		Txdraw_BuildInfo[playerid][1] = CreatePlayerTextDraw(playerid, 218.000000, 330.000000, "Nazwa budynku");
		PlayerTextDrawFont(playerid, Txdraw_BuildInfo[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_BuildInfo[playerid][1], 0.224996, 1.250000);
		PlayerTextDrawTextSize(playerid, Txdraw_BuildInfo[playerid][1], 391.500000, 140.500000);
		PlayerTextDrawSetOutline(playerid, Txdraw_BuildInfo[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_BuildInfo[playerid][1], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_BuildInfo[playerid][1], 2);
		PlayerTextDrawColor(playerid, Txdraw_BuildInfo[playerid][1], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_BuildInfo[playerid][1], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_BuildInfo[playerid][1], 255);
		PlayerTextDrawUseBox(playerid, Txdraw_BuildInfo[playerid][1], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_BuildInfo[playerid][1], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_BuildInfo[playerid][1], 0);

		Txdraw_BuildInfo[playerid][2] = CreatePlayerTextDraw(playerid, 218.000000, 345.000000, "~n~Naciskajac klawisz PPM~n~mozesz wejsc do tego budynku~n~~n~~n~~n~0 osob w srodku");
		PlayerTextDrawFont(playerid, Txdraw_BuildInfo[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_BuildInfo[playerid][2], 0.208333, 0.750001);
		PlayerTextDrawTextSize(playerid, Txdraw_BuildInfo[playerid][2], 391.500000, 140.500000);
		PlayerTextDrawSetOutline(playerid, Txdraw_BuildInfo[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_BuildInfo[playerid][2], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_BuildInfo[playerid][2], 2);
		PlayerTextDrawColor(playerid, Txdraw_BuildInfo[playerid][2], -1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_BuildInfo[playerid][2], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_BuildInfo[playerid][2], 0);
		PlayerTextDrawUseBox(playerid, Txdraw_BuildInfo[playerid][2], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_BuildInfo[playerid][2], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_BuildInfo[playerid][2], 0);

		Txdraw_BuildInfo[playerid][3] = CreatePlayerTextDraw(playerid, 223.000000, 340.000000, "-");
		PlayerTextDrawFont(playerid, Txdraw_BuildInfo[playerid][3], 1);
		PlayerTextDrawLetterSize(playerid, Txdraw_BuildInfo[playerid][3], 8.949995, 0.699994);
		PlayerTextDrawTextSize(playerid, Txdraw_BuildInfo[playerid][3], 298.500000, 75.000000);
		PlayerTextDrawSetOutline(playerid, Txdraw_BuildInfo[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid, Txdraw_BuildInfo[playerid][3], 0);
		PlayerTextDrawAlignment(playerid, Txdraw_BuildInfo[playerid][3], 2);
		PlayerTextDrawColor(playerid, Txdraw_BuildInfo[playerid][3], 9109759);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_BuildInfo[playerid][3], 255);
		PlayerTextDrawBoxColor(playerid, Txdraw_BuildInfo[playerid][3], 0);
		PlayerTextDrawUseBox(playerid, Txdraw_BuildInfo[playerid][3], 0);
		PlayerTextDrawSetProportional(playerid, Txdraw_BuildInfo[playerid][3], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_BuildInfo[playerid][3], 0);

	}
	if(type == 1) //Zmiana nazwy budynku
	{
		 new tdstring[32];
		 format(tdstring, sizeof(tdstring), "%s", BudynekData[uid][bName]);
		 PlayerTextDrawSetString(playerid, Txdraw_BuildInfo[playerid][1], tdstring);
	}
	if(type == 2) //Pokazywanie textdrawow
	{
		new tdstring[128];
		format(tdstring, sizeof(tdstring), "~n~Naciskajac klawisz PPM~n~mozesz wejsc do tego budynku~n~~n~~n~~n~%d osob w srodku%s", BudynekData[uid][bEnterPeople], ((BudynekData[uid][bLocked] == 1) ? (", zamkniety.") : (", otwarty.")));
		PlayerTextDrawSetString(playerid, Txdraw_BuildInfo[playerid][2], tdstring);
		
		for(new i = 0; i != 3; i++)
		{
			PlayerTextDrawShow(playerid, Txdraw_Logged[playerid][i]);
		}
	}
	if(type == 3) //Ukrywanie textdrawow
	{
		for(new i = 0; i != 3; i++)
		{
			PlayerTextDrawHide(playerid, Txdraw_Logged[playerid][i]);
		}
	}
	if(type == 4) //Ukrywanie oraz usuwanie textdrawow.
	{
		for(new i = 0; i != 3; i++)
		{
			PlayerTextDrawHide(playerid, Txdraw_Logged[playerid][i]);
			PlayerTextDrawDestroy(playerid, Txdraw_Logged[playerid][i]);
		}
	}
	return 1;
}

//0 - tworz, 1 - refresh, 2 - show, 3 - hide, 4 - hide+ del, 5 - next vehicle, 6 - prev vehicle
stock PlayerSalonSamochodowy(playerid, type = 0, hide_van = 1, pojazd[] = "Brak", cena = 0, speed = 0, poziom = 0)
{
	if(PlayerData[playerid][pLogged] == false) return 1;
	if(type == 0) //tworzy
	{
		Txdraw_SalonInfo[playerid][0] = CreatePlayerTextDraw(playerid, 27.333335, 103.703613, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Txdraw_SalonInfo[playerid][0], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txdraw_SalonInfo[playerid][0], 139.333328, 24.059221);
		PlayerTextDrawAlignment(playerid, Txdraw_SalonInfo[playerid][0], 1);
		PlayerTextDrawColor(playerid, Txdraw_SalonInfo[playerid][0], 8388863);
		PlayerTextDrawSetShadow(playerid, Txdraw_SalonInfo[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, Txdraw_SalonInfo[playerid][0], 0);
		PlayerTextDrawFont(playerid, Txdraw_SalonInfo[playerid][0], 4);

		Txdraw_SalonInfo[playerid][1] = CreatePlayerTextDraw(playerid, 33.666641, 108.681404, "Salon samochodowy");
		PlayerTextDrawLetterSize(playerid, Txdraw_SalonInfo[playerid][1], 0.270666, 1.359408);
		PlayerTextDrawAlignment(playerid, Txdraw_SalonInfo[playerid][1], 1);
		PlayerTextDrawColor(playerid, Txdraw_SalonInfo[playerid][1], -1);
		PlayerTextDrawSetShadow(playerid, Txdraw_SalonInfo[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, Txdraw_SalonInfo[playerid][1], 1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_SalonInfo[playerid][1], 51);
		PlayerTextDrawFont(playerid, Txdraw_SalonInfo[playerid][1], 2);
		PlayerTextDrawSetProportional(playerid, Txdraw_SalonInfo[playerid][1], 1);

		Txdraw_SalonInfo[playerid][2] = CreatePlayerTextDraw(playerid, 168.000045, 105.777786, "Pojazdy Jednosladowe");
		PlayerTextDrawLetterSize(playerid, Txdraw_SalonInfo[playerid][2], 0.207333, 0.762073);
		PlayerTextDrawTextSize(playerid, Txdraw_SalonInfo[playerid][2], 252.997100, 8.844604);
		PlayerTextDrawAlignment(playerid, Txdraw_SalonInfo[playerid][2], 1);
		PlayerTextDrawColor(playerid, Txdraw_SalonInfo[playerid][2], -1);
		PlayerTextDrawUseBox(playerid, Txdraw_SalonInfo[playerid][2], true);
		PlayerTextDrawBoxColor(playerid, Txdraw_SalonInfo[playerid][2], 255);
		PlayerTextDrawSetShadow(playerid, Txdraw_SalonInfo[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, Txdraw_SalonInfo[playerid][2], 1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_SalonInfo[playerid][2], 51);
		PlayerTextDrawFont(playerid, Txdraw_SalonInfo[playerid][2], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_SalonInfo[playerid][2], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_SalonInfo[playerid][2], true);

		Txdraw_SalonInfo[playerid][3] = CreatePlayerTextDraw(playerid, 168.000045, 105.777786 + 15 * 1, "Pojazdy Sportowe");
		PlayerTextDrawLetterSize(playerid, Txdraw_SalonInfo[playerid][3], 0.207333, 0.762073);
		PlayerTextDrawTextSize(playerid, Txdraw_SalonInfo[playerid][3], 252.997100, 8.844604);
		PlayerTextDrawAlignment(playerid, Txdraw_SalonInfo[playerid][3], 1);
		PlayerTextDrawColor(playerid, Txdraw_SalonInfo[playerid][3], -1);
		PlayerTextDrawUseBox(playerid, Txdraw_SalonInfo[playerid][3], true);
		PlayerTextDrawBoxColor(playerid, Txdraw_SalonInfo[playerid][3], 255);
		PlayerTextDrawSetShadow(playerid, Txdraw_SalonInfo[playerid][3], 0);
		PlayerTextDrawSetOutline(playerid, Txdraw_SalonInfo[playerid][3], 1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_SalonInfo[playerid][3], 51);
		PlayerTextDrawFont(playerid, Txdraw_SalonInfo[playerid][3], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_SalonInfo[playerid][3], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_SalonInfo[playerid][3], true);

		Txdraw_SalonInfo[playerid][4] = CreatePlayerTextDraw(playerid, 168.000045, 105.777786 + 15 * 2, "Pojazdy Osobowe");
		PlayerTextDrawLetterSize(playerid, Txdraw_SalonInfo[playerid][4], 0.207333, 0.762073);
		PlayerTextDrawTextSize(playerid, Txdraw_SalonInfo[playerid][4], 252.997100, 8.844604);
		PlayerTextDrawAlignment(playerid, Txdraw_SalonInfo[playerid][4], 1);
		PlayerTextDrawColor(playerid, Txdraw_SalonInfo[playerid][4], -1);
		PlayerTextDrawUseBox(playerid, Txdraw_SalonInfo[playerid][4], true);
		PlayerTextDrawBoxColor(playerid, Txdraw_SalonInfo[playerid][4], 255);
		PlayerTextDrawSetShadow(playerid, Txdraw_SalonInfo[playerid][4], 0);
		PlayerTextDrawSetOutline(playerid, Txdraw_SalonInfo[playerid][4], 1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_SalonInfo[playerid][4], 51);
		PlayerTextDrawFont(playerid, Txdraw_SalonInfo[playerid][4], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_SalonInfo[playerid][4], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_SalonInfo[playerid][4], true);

		Txdraw_SalonInfo[playerid][5] = CreatePlayerTextDraw(playerid, 168.000045, 105.777786  + 15 * 3, "Pojazdy Dostawcze");
		PlayerTextDrawLetterSize(playerid, Txdraw_SalonInfo[playerid][5], 0.207333, 0.762073);
		PlayerTextDrawTextSize(playerid, Txdraw_SalonInfo[playerid][5], 252.997100, 8.844604);
		PlayerTextDrawAlignment(playerid, Txdraw_SalonInfo[playerid][5], 1);
		PlayerTextDrawColor(playerid, Txdraw_SalonInfo[playerid][5], -1);
		PlayerTextDrawUseBox(playerid, Txdraw_SalonInfo[playerid][5], true);
		PlayerTextDrawBoxColor(playerid, Txdraw_SalonInfo[playerid][5], 255);
		PlayerTextDrawSetShadow(playerid, Txdraw_SalonInfo[playerid][5], 0);
		PlayerTextDrawSetOutline(playerid, Txdraw_SalonInfo[playerid][5], 1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_SalonInfo[playerid][5], 51);
		PlayerTextDrawFont(playerid, Txdraw_SalonInfo[playerid][5], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_SalonInfo[playerid][5], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_SalonInfo[playerid][5], true);

		Txdraw_SalonInfo[playerid][6] = CreatePlayerTextDraw(playerid, 166.999938, 183.762939, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Txdraw_SalonInfo[playerid][6], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txdraw_SalonInfo[playerid][6], -139.666656, -56.000041);
		PlayerTextDrawAlignment(playerid, Txdraw_SalonInfo[playerid][6], 1);
		PlayerTextDrawColor(playerid, Txdraw_SalonInfo[playerid][6], 14901087);
		PlayerTextDrawSetShadow(playerid, Txdraw_SalonInfo[playerid][6], 0);
		PlayerTextDrawSetOutline(playerid, Txdraw_SalonInfo[playerid][6], 0);
		PlayerTextDrawFont(playerid, Txdraw_SalonInfo[playerid][6], 4);

		Txdraw_SalonInfo[playerid][7] = CreatePlayerTextDraw(playerid, 31.333339, 139.377716, "Pojazd: Infernus~n~Cena: $9999~n~Poziom: 15~n~Maksymalna predkosc: 999km/h");
		PlayerTextDrawLetterSize(playerid, Txdraw_SalonInfo[playerid][7], 0.232666, 0.886518);
		PlayerTextDrawAlignment(playerid, Txdraw_SalonInfo[playerid][7], 1);
		PlayerTextDrawColor(playerid, Txdraw_SalonInfo[playerid][7], -1);
		PlayerTextDrawSetShadow(playerid, Txdraw_SalonInfo[playerid][7], 0);
		PlayerTextDrawSetOutline(playerid, Txdraw_SalonInfo[playerid][7], 1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_SalonInfo[playerid][7], 51);
		PlayerTextDrawFont(playerid, Txdraw_SalonInfo[playerid][7], 3);
		PlayerTextDrawSetProportional(playerid, Txdraw_SalonInfo[playerid][7], 1);

		Txdraw_SalonInfo[playerid][8] = CreatePlayerTextDraw(playerid, 27.333339, 206.992630, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Txdraw_SalonInfo[playerid][8], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txdraw_SalonInfo[playerid][8], 140.000030, -23.229656);
		PlayerTextDrawAlignment(playerid, Txdraw_SalonInfo[playerid][8], 1);
		PlayerTextDrawColor(playerid, Txdraw_SalonInfo[playerid][8], -16776961);
		PlayerTextDrawSetShadow(playerid, Txdraw_SalonInfo[playerid][8], 0);
		PlayerTextDrawSetOutline(playerid, Txdraw_SalonInfo[playerid][8], 0);
		PlayerTextDrawFont(playerid, Txdraw_SalonInfo[playerid][8], 4);

		Txdraw_SalonInfo[playerid][9] = CreatePlayerTextDraw(playerid, 66.333358, 188.326034, "WYJDZ");
		PlayerTextDrawLetterSize(playerid, Txdraw_SalonInfo[playerid][9], 0.449999, 1.600000);
		PlayerTextDrawTextSize(playerid, Txdraw_SalonInfo[playerid][9], 130.000152, 15.955612);
		PlayerTextDrawAlignment(playerid, Txdraw_SalonInfo[playerid][9], 1);
		PlayerTextDrawColor(playerid, Txdraw_SalonInfo[playerid][9], -1);
		//PlayerTextDrawUseBox(playerid, Txdraw_SalonInfo[playerid][9], true);
		PlayerTextDrawBoxColor(playerid, Txdraw_SalonInfo[playerid][9], 255);
		PlayerTextDrawSetShadow(playerid, Txdraw_SalonInfo[playerid][9], 0);
		PlayerTextDrawSetOutline(playerid, Txdraw_SalonInfo[playerid][9], 1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_SalonInfo[playerid][9], 51);
		PlayerTextDrawFont(playerid, Txdraw_SalonInfo[playerid][9], 2);
		PlayerTextDrawSetProportional(playerid, Txdraw_SalonInfo[playerid][9], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_SalonInfo[playerid][9], true);

		Txdraw_SalonInfo[playerid][10] = CreatePlayerTextDraw(playerid, 167.333358, 206.992416, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Txdraw_SalonInfo[playerid][10], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txdraw_SalonInfo[playerid][10], -139.999984, 19.496315);
		PlayerTextDrawAlignment(playerid, Txdraw_SalonInfo[playerid][10], 1);
		PlayerTextDrawColor(playerid, Txdraw_SalonInfo[playerid][10], -5963521);
		PlayerTextDrawSetShadow(playerid, Txdraw_SalonInfo[playerid][10], 0);
		PlayerTextDrawSetOutline(playerid, Txdraw_SalonInfo[playerid][10], 0);
		PlayerTextDrawFont(playerid, Txdraw_SalonInfo[playerid][10], 4);

		Txdraw_SalonInfo[playerid][11] = CreatePlayerTextDraw(playerid, 65.999969, 209.896331, "KUP");
		PlayerTextDrawLetterSize(playerid, Txdraw_SalonInfo[playerid][11], 0.449999, 1.600000);
		PlayerTextDrawTextSize(playerid, Txdraw_SalonInfo[playerid][11], 130.036880, 18.577828);
		PlayerTextDrawAlignment(playerid, Txdraw_SalonInfo[playerid][11], 1);
		PlayerTextDrawColor(playerid, Txdraw_SalonInfo[playerid][11], -1);
		//PlayerTextDrawUseBox(playerid, Txdraw_SalonInfo[playerid][11], true);
		PlayerTextDrawBoxColor(playerid, Txdraw_SalonInfo[playerid][11], 255);
		PlayerTextDrawSetShadow(playerid, Txdraw_SalonInfo[playerid][11], 0);
		PlayerTextDrawSetOutline(playerid, Txdraw_SalonInfo[playerid][11], 1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_SalonInfo[playerid][11], 51);
		PlayerTextDrawFont(playerid, Txdraw_SalonInfo[playerid][11], 2);
		PlayerTextDrawSetProportional(playerid, Txdraw_SalonInfo[playerid][11], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_SalonInfo[playerid][11], true);

		Txdraw_SalonInfo[playerid][12] = CreatePlayerTextDraw(playerid, 27.333332, 226.488861, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Txdraw_SalonInfo[playerid][12], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txdraw_SalonInfo[playerid][12], 140.000030, 17.837047);
		PlayerTextDrawAlignment(playerid, Txdraw_SalonInfo[playerid][12], 1);
		PlayerTextDrawColor(playerid, Txdraw_SalonInfo[playerid][12], -2139094785);
		PlayerTextDrawSetShadow(playerid, Txdraw_SalonInfo[playerid][12], 0);
		PlayerTextDrawSetOutline(playerid, Txdraw_SalonInfo[playerid][12], 0);
		PlayerTextDrawFont(playerid, Txdraw_SalonInfo[playerid][12], 4);

		Txdraw_SalonInfo[playerid][13] = CreatePlayerTextDraw(playerid, 28.666677, 230.637023, "<<<<<");
		PlayerTextDrawLetterSize(playerid, Txdraw_SalonInfo[playerid][13], 0.444998, 1.313777);
		PlayerTextDrawTextSize(playerid, Txdraw_SalonInfo[playerid][13], 91.333358, 17.422229);
		PlayerTextDrawAlignment(playerid, Txdraw_SalonInfo[playerid][13], 1);
		PlayerTextDrawColor(playerid, Txdraw_SalonInfo[playerid][13], -1);
		//PlayerTextDrawUseBox(playerid, Txdraw_SalonInfo[playerid][13], true);
		PlayerTextDrawBoxColor(playerid, Txdraw_SalonInfo[playerid][13], 255);
		PlayerTextDrawSetShadow(playerid, Txdraw_SalonInfo[playerid][13], 0);
		PlayerTextDrawSetOutline(playerid, Txdraw_SalonInfo[playerid][13], 1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_SalonInfo[playerid][13], 51);
		PlayerTextDrawFont(playerid, Txdraw_SalonInfo[playerid][13], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_SalonInfo[playerid][13], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_SalonInfo[playerid][13], true);

		Txdraw_SalonInfo[playerid][14] = CreatePlayerTextDraw(playerid, 112.333312, 230.222290, ">>>>>");
		PlayerTextDrawLetterSize(playerid, Txdraw_SalonInfo[playerid][14], 0.444998, 1.313777);
		PlayerTextDrawTextSize(playerid, Txdraw_SalonInfo[playerid][14], 165.999938, 17.222218);
		PlayerTextDrawAlignment(playerid, Txdraw_SalonInfo[playerid][14], 1);
		PlayerTextDrawColor(playerid, Txdraw_SalonInfo[playerid][14], -1);
		//PlayerTextDrawUseBox(playerid, Txdraw_SalonInfo[playerid][14], true);
		PlayerTextDrawBoxColor(playerid, Txdraw_SalonInfo[playerid][14], 255);
		PlayerTextDrawSetShadow(playerid, Txdraw_SalonInfo[playerid][14], 0);
		PlayerTextDrawSetOutline(playerid, Txdraw_SalonInfo[playerid][14], 1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_SalonInfo[playerid][14], 51);
		PlayerTextDrawFont(playerid, Txdraw_SalonInfo[playerid][14], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_SalonInfo[playerid][14], 1);
		PlayerTextDrawSetSelectable(playerid, Txdraw_SalonInfo[playerid][14], true);

	}
	if(type == 1) //refresh txd
	{
		 new tdstring[128];
		 format(tdstring, sizeof(tdstring), "Pojazd: %s~n~Cena: $%d~n~Poziom: %d~n~Maksymalna predkosc: %dkm/h", pojazd, cena, poziom, speed);
		 PlayerTextDrawSetString(playerid, Txdraw_SalonInfo[playerid][7], tdstring);
	}
	if(type == 2) //Pokazywanie textdrawow
	{
		for(new i = 0; i != 15; i++)
		{
			if(hide_van == 1) //Salon samochodowy
			{
				if(i == 2 || i == 3 || i == 4) continue;
			}
			if(hide_van == 0) //Salon van/truck
			{
				if(i == 5) continue;
			}
			PlayerTextDrawShow(playerid, Txdraw_SalonInfo[playerid][i]);
		}
		if(PlayerData[playerid][pSalonVehicleType] == 4)
		{
			PlayerTextDrawSetString(playerid, Txdraw_SalonInfo[playerid][1], "Salon van/truck");
		}
		else
		{
			PlayerTextDrawSetString(playerid, Txdraw_SalonInfo[playerid][1], "Salon samochodowy");
		}
		
		SelectTextDraw(playerid, 0x00FF00FF);
		GetPlayerPos(playerid, 	PlayerData[playerid][pPos][0],PlayerData[playerid][pPos][1],PlayerData[playerid][pPos][2] );
		PlayerData[playerid][pVW] = 0;
		PlayerData[playerid][pInt] = 0;
		
		TogglePlayerControllable(playerid, false);
	}
	if(type == 3) //Ukrywanie textdrawow
	{
		for(new i = 0; i != 15; i++)
		{
			if(hide_van == 1) //Salon samochodowy
			{
				if(i == 2 || i == 3 || i == 4) continue;
			}
			if(hide_van == 0) //Salon van/truck
			{
				if(i == 5) continue;
			}
			PlayerTextDrawHide(playerid, Txdraw_SalonInfo[playerid][i]);
		}
		
		if(IsValidVehicle(PlayerData[playerid][pSalonVehicle])) DestroyVehicle(PlayerData[playerid][pSalonVehicle]);
		CancelSelectTextDraw(playerid);
		//SetPlayerPos(playerid, 	PlayerData[playerid][pPos][0],PlayerData[playerid][pPos][1],PlayerData[playerid][pPos][2] );
		SetPlayerVirtualWorldEx(playerid, 0);
		SetPlayerInteriorEx(playerid, 0);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, true);
	}
	if(type == 4) //Ukrywanie oraz usuwanie textdrawow.
	{
		for(new i = 0; i != 15; i++)
		{
			PlayerTextDrawHide(playerid, Txdraw_SalonInfo[playerid][i]);
			PlayerTextDrawDestroy(playerid, Txdraw_SalonInfo[playerid][i]);
		}
	}
	if(type == 5) //next vehicle
	{
		CheckNextVehicle(playerid, PlayerData[playerid][pSalonVehicleType]);
	}
	if(type == 6) //prev vehicle
	{
		CheckPrevVehicle(playerid, PlayerData[playerid][pSalonVehicleType]);
	}
	return 1;
}

stock UnBanNick(playerid, pnick[])
{
	new data[128];
	format(data, sizeof(data), "SELECT * FROM `data_bans` WHERE `Nick`='%s'", pnick);
	mysql_query(data);
	mysql_store_result();
	mysql_fetch_row(data, "|");
	
	if(mysql_num_rows()!=0) //Gdy znaleziono
	{
		format(data, sizeof(data), "DELETE FROM `data_bans` WHERE `Nick` = '%s'", pnick);
		mysql_query(data);
		format(data,sizeof(data),"UPDATE `data_players` SET `block` = '0' WHERE `nick` = '%s'", pnick);
		mysql_query(data);
		format(data, sizeof(data), "{a4a4a4}Odbanowales gracza  %s", pnick);
		SendClientMessage(playerid, -1, data);
	}
	else
	{
		SendClientMessage(playerid, -1, "{a4a4a4}Nie odnaleziono tego gracza na liscie zbanowanych!");
	}
	mysql_free_result();
	return 1;
}

stock UnBanIP(playerid, IP[])
{
	new data[128];
	format(data, sizeof(data), "SELECT * FROM `data_bans` WHERE `IP`='%s'", IP);
	mysql_query(data);
	mysql_store_result();
	mysql_fetch_row(data, "|");
	
	if(mysql_num_rows()!=0) 
	{
		format(data, sizeof(data), "DELETE FROM `data_bans` WHERE `IP` = '%s'", IP);
		mysql_query(data);
		format(data, sizeof(data), "{a4a4a4}Odbanowales IP %s", IP);
		SendClientMessage(playerid, -1, data);
		
	}
	else
	{
		SendClientMessage(playerid, -1, "{a4a4a4}Nie odnaleziono tego IP na liscie zbanowanych!");
	}
	mysql_free_result();
	return 1;
}
	


stock CheckBanned(playerid)
{
	new get_uid, get_powod[40], get_admin[24], get_nick[24], get_data[40], data[500], get_time, get_gpci[40], get_ip[18];

	format(data, sizeof(data), "SELECT * FROM `data_bans` WHERE `IP`= '%s' OR `GPCI` = '%s' OR `Nick` = '%s'", PlayerData[playerid][pIP], PlayerData[playerid][pGPCI], PlayerData[playerid][pName]);
	mysql_query(data);
    mysql_store_result();
	mysql_fetch_row(data, "|");

	if(mysql_num_rows()!=0) 
	{
		mysql_free_result();

		format(data, sizeof(data), "SELECT * FROM `data_bans` WHERE `IP`= '%s' OR `GPCI` = '%s' OR `Nick` = '%s'", PlayerData[playerid][pIP], PlayerData[playerid][pGPCI], PlayerData[playerid][pName]);
	    mysql_query(data);
	    mysql_store_result();
		mysql_fetch_row(data, "|");
		if(!mysql_num_rows()) return 1;
		sscanf(data, "p<|>is[24]s[24]s[40]s[40]s[18]s[40]i", get_uid, get_nick, get_admin, get_powod, get_data, get_ip, get_gpci, get_time);
		mysql_free_result();
		
		new Dni, Godzin, Minut, Time1 = get_time;
		ConvertSec(get_time - gettime(), Dni, Godzin, Minut);
			
			
		if(gettime() <= Time1 && Time1 != 0)
		{
			format(data,sizeof(data),"\
													Twoje konto jest zbanowane.\n\
													UID BAN: %d\n\
													Zbanowany nick: %s\n\
													Banujacy: %s\n\
													Zbanowane IP: %s\n\
													Data zbanowania: %s\n\
													Pozostalo: Dni: %d Godzin: %d Minut: %d",
													get_uid,
													get_nick,
													get_admin,
													PlayerData[playerid][pIP],
													get_data,
													Dni,Godzin,Minut);
	
			ShowPlayerDialog(playerid,9999,DIALOG_STYLE_MSGBOX,"Aktywny ban:",data,"Zamknij","");
		}
		else if(gettime() >= Time1 && Time1 != 0)
		{
			format(data,sizeof(data),"UPDATE `data_players` SET `block` = '0' WHERE `nick` = '%s'", get_nick);
			mysql_query(data);
			format(data, sizeof(data), "DELETE FROM `data_bans` WHERE `Nick` = '%s'", get_nick);
			mysql_query(data);
			return -1;
		}
		else if(Time1 == 0)
		{
			format(data,sizeof(data),"\
													Twoje konto jest zbanowane.\n\
													BAN UID: %d\n\
													Zbanowany nick: %s\n\
													Banujacy: %s\n\
													Zbanowane IP: %s\n\
													Data zbanowania: %s",
													get_uid,
													get_nick,
													get_admin,
													PlayerData[playerid][pIP],
													get_data);
													
			ShowPlayerDialog(playerid,9999,DIALOG_STYLE_MSGBOX,"Aktywny ban:",data,"Zamknij","");
		}

		return 1;
	}
	
	/*
	new block;
	format(data,sizeof(data), "SELECT `block` FROM `data_players` WHERE `nick` = '%s'", PlayerData[playerid][pName]);
	mysql_query(data);
	mysql_store_result();
	while(mysql_fetch_row(data, "|"))
	{
		sscanf(data, "p<|>i", block);
		if(block == 1)
		{
			ShowPlayerDialog(playerid,9999,DIALOG_STYLE_MSGBOX,"Aktywna blokada:","Twoja konto zostalo zablokowane przez administracje.\n\nJezeli trafiles tu poraz pierwszy mozesz zalozyc u nas konto jednakze pod innym nickiem, bo ten jest zajety.","Zamknij","");
			return 1;
		}
	}
	*/
	return -1;
}


stock GetPlayerVehicleRange(playerid, Float: range)
{
	if(GetPlayerVehicleID(playerid) != 0)
	{
		return GetPlayerVehicleID(playerid);
	}
	if(GetPlayerVehicleID(playerid) == 0)
	{
		new vehicle_watch = GetPlayerCameraTargetVehicle(playerid);
		if(vehicle_watch != INVALID_VEHICLE_ID)
		{
			new Float:pozycja[3];
			GetVehiclePos(vehicle_watch, pozycja[0], pozycja[1], pozycja[2]);
			if(IsPlayerInRangeOfPoint(playerid, range, pozycja[0], pozycja[1], pozycja[2]))
			{
				return vehicle_watch;
			}
		}
	}
	new Float: x, Float: y, Float: z;
	for(new v = 1, j = GetVehiclePoolSize(); v <= j; v++)
	{
		GetVehiclePos(v, x,y,z);
		if(IsPlayerInRangeOfPoint(playerid, range, x,y,z))
		{
			return v;
		}
	}
	return -1;
}

forward BENCH_START(playerid);
public BENCH_START(playerid)
{
	BAR_CAN_BE_USED[playerid]=true;
	//SET ATATCH OBJECTS
	//SHOW PROGRESS BAR

	SetPlayerAttachedObject(playerid, BENCH_PRESS_INDEX, 2913, 6);
	PLAYER_BENCH_TIMER[playerid]=SetTimerEx( "GYM_CHECK", 1000,true,"i", playerid );
	return 1;
}

forward TREAM_START(playerid);
public TREAM_START(playerid)
{

BAR_CAN_BE_USED[playerid]=true;
//Make Player Run
ApplyAnimation( playerid, "GYMNASIUM", "gym_tread_sprint", 1, 1, 0, 0, 1, 0, 1);

PLAYER_TREAD_TIMER[playerid]=SetTimerEx( "GYM_CHECK", 500, 1, "i", playerid );

}

forward GYM_CHECK(playerid);
public GYM_CHECK(playerid)
{
    if(PLAYER_INBENCH[playerid]==true)
	{
        BENCH_CHECK(playerid);
        return 1;
	}
    if(PLAYER_INTREAM[playerid]==true)
	{
        TREAM_CHECK(playerid);

	}
    return 1;
}

TREAM_CHECK(playerid)
{
	SetProgressBarValue( PlayerData[playerid][pSilowniaBar], GetProgressBarValue( PlayerData[playerid][pSilowniaBar] ) - 8 );
	UpdateProgressBar( PlayerData[playerid][pSilowniaBar], playerid );
	if(GetProgressBarValue( PlayerData[playerid][pSilowniaBar] ) <=0)
	{
        KillTimer(PLAYER_TREAD_TIMER[playerid]);
        FallOffTread(playerid);
	}

}

FallOffTread(playerid)
{
	BAR_CAN_BE_USED[playerid]=false;
	ApplyAnimation( playerid, "GYMNASIUM", "gym_tread_falloff", 1, 0, 0, 0, 1, 0, 1 );
	HideProgressBarForPlayer( playerid,PlayerData[playerid][pSilowniaBar]);
	SetTimerEx( "REST_PLAYER", 2000, false, "i", playerid);
}

GetOffTread(playerid)
{
	BAR_CAN_BE_USED[playerid]=false;
	ApplyAnimation( playerid, "GYMNASIUM", "gym_tread_getoff", 1, 0, 0, 0, 1, 0, 1 );
	HideProgressBarForPlayer( playerid,PlayerData[playerid][pSilowniaBar]);
	SetTimerEx( "REST_PLAYER", 3500, false, "i", playerid);
}

forward REST_PLAYER(playerid);
public REST_PLAYER(playerid)
{

	//Rest Staus
	ClearAnimations( playerid, 1 );
	SetCameraBehindPlayer( playerid );
	TogglePlayerControllable( playerid, 1 );
	HideProgressBarForPlayer(playerid, PlayerData[playerid][pSilowniaBar]);
	BAR_CAN_BE_USED[playerid]=false;
	//Reset Bool
	
	if(PLAYER_INTREAM[playerid]==true)
	{
		PLAYER_INTREAM[playerid]=false;
 		TREAM_IN_USE[PLAYER_CURRECT_TREAD[playerid]]=false;
 	}
  	if(PLAYER_INBENCH[playerid]==true)
  	{
  		PLAYER_INBENCH[playerid]=false;
  		BENCH_IN_USE[PLAYER_CURRECT_BENCH[playerid]]=false;
    	RemovePlayerAttachedObject( playerid, BENCH_PRESS_INDEX );
  	}
}

GetOffBENCH(playerid)
{
	BAR_CAN_BE_USED[playerid]=false;
	ApplyAnimation(playerid, "benchpress", "gym_bp_getoff", 1, 0, 0, 0, 1, 0, 1 );
    HideProgressBarForPlayer(playerid, PlayerData[playerid][pSilowniaBar]);
    SetTimerEx( "REST_PLAYER", 3000, false, "i", playerid);
   
}

BENCH_CHECK(playerid)
{
	SetProgressBarValue(PlayerData[playerid][pSilowniaBar], GetProgressBarValue(PlayerData[playerid][pSilowniaBar] ) - 2 );
	UpdateProgressBar( PlayerData[playerid][pSilowniaBar], playerid );
    SetPlayerAttachedObject(playerid, BENCH_PRESS_INDEX, 2913, 6);
    ShowProgressBarForPlayer(playerid,PlayerData[playerid][pSilowniaBar]);

	if(GetProgressBarValue( PlayerData[playerid][pSilowniaBar] ) >= 90)
	{

		//random select a amation for player
		switch( random( 2 ) )
		{
			case 0: ApplyAnimation( playerid, "benchpress", "gym_bp_up_A", 1, 0, 0, 0, 1, 0, 1 );
  			case 1: ApplyAnimation( playerid, "benchpress", "gym_bp_up_B", 1, 0, 0, 0, 1, 0, 1 );
		}
		new LocalLabel[50];
		PLAYER_BENCH_COUNT[playerid]++;
        PlayerData[playerid][pSila]++;
        PlayerStatyBox(playerid, 3);
		format(LocalLabel,sizeof(LocalLabel),"%d",PLAYER_BENCH_COUNT[playerid]);
		PlayerTextDrawSetString(playerid, Txdraw_Gym[playerid][4], LocalLabel);
		SetProgressBarValue(PlayerData[playerid][pSilowniaBar],0);
		SetTimerEx( "BENCH_SET_AIMSTOP",2000, false, "i", playerid);
		return 1;
	}
	return 1;
}

forward BENCH_SET_AIMSTOP(playerid);
public BENCH_SET_AIMSTOP(playerid)
{
	//Apply Player pull down aim
	ApplyAnimation( playerid, "benchpress", "gym_bp_down", 1, 0, 0, 0, 1, 0, 1 );
	//Reset the progress bar values
	UpdateProgressBar(PlayerData[playerid][pSilowniaBar],playerid);
	return 1;
}
forward TimerStacjaBenzynowa(playerid);
public TimerStacjaBenzynowa(playerid)
{
	new Float:wartosc = GetProgressBarValue(PlayerData[playerid][pStacjaBar]), vehicleid = GetPlayerVehicleRange(playerid, 3), puid = PlayerData[playerid][pLastPickupUID];
	

	if(!IsPlayerConnected(playerid))
	{
		PlayerData[playerid][pStacjaOpen] = false;
		HideProgressBarForPlayer(playerid, PlayerData[playerid][pStacjaBar]);
		DestroyProgressBar(PlayerData[playerid][pStacjaBar]);
		PlayerStacjaBenzynowa(playerid, 2); //usuwa txd
		KillTimer(PlayerData[playerid][pStacjaTimer]);
		return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 40, PickupData[puid][pPos][0], PickupData[puid][pPos][1], PickupData[puid][pPos][2]))
	{
		PlayerData[playerid][pStacjaOpen] = false;
		HideProgressBarForPlayer(playerid, PlayerData[playerid][pStacjaBar]);
		DestroyProgressBar(PlayerData[playerid][pStacjaBar]);
		PlayerStacjaBenzynowa(playerid, 2); //usuwa txd
		KillTimer(PlayerData[playerid][pStacjaTimer]);
		GameTextForPlayer(playerid, "~g~TANKOWANIE ANULOWANE", 1500, 3);
		return 1;
	}
	if(GetPlayerVehicleID(playerid) != 0)
	{
		GameTextForPlayer(playerid, "~r~Wyjdz z pojazdu", 999, 3);
		return 1;
	}
	if(vehicleid == -1)
	{
		GameTextForPlayer(playerid, "~r~Podejdz do pojazdu.", 999, 3);
		return 1;
	}
	if(VehicleData[vehicleid][vEngine] == 1)
	{
		PlayerStacjaBenzynowa(playerid, 3);
		GameTextForPlayer(playerid, "~r~Zgas silnik w pojezdzie.", 999, 3);
		return 1;
	}
	
	
	if(wartosc == 100)
	{
		new koszt = VehicleData[vehicleid][vPaliwoMax] - floatround(VehicleData[vehicleid][vPaliwo]);
		if(koszt * PickupData[puid][pCena] > GetPlayerCash(playerid)) return GameTextForPlayer(playerid, "~r~Brak pieniedzy na zaplate.", 999, 3);
		
		VehicleData[vehicleid][vPaliwo] = VehicleData[vehicleid][vPaliwoMax];
		PlayerData[playerid][pStacjaOpen] = false;
		KillTimer(PlayerData[playerid][pStacjaTimer]);
		
		GameTextForPlayer(playerid, "~g~TANKOWANIE ZAKONCZONE SUKCESEM", 2500, 3);
		
		HideProgressBarForPlayer(playerid, PlayerData[playerid][pStacjaBar]);
		DestroyProgressBar(PlayerData[playerid][pStacjaBar]);
		GivePlayerCash(playerid, - koszt * PickupData[puid][pCena]);
		
		PlayerStacjaBenzynowa(playerid, 2);
	}
	else
	{
		SetProgressBarValue(PlayerData[playerid][pStacjaBar], wartosc + 5);
		UpdateProgressBar(PlayerData[playerid][pStacjaBar], playerid);
		PlayerStacjaBenzynowa(playerid, 3);
	}
	return 1;
}


stock PlayerStacjaBenzynowa(playerid, type)
{
	if(PlayerData[playerid][pLogged] == false) return 1;
	if(type == 0) //dodaje
	{
		Txdraw_StacjaBenzInfo[playerid][0] = CreatePlayerTextDraw(playerid, 442.666656, 309.037048, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Txdraw_StacjaBenzInfo[playerid][0], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txdraw_StacjaBenzInfo[playerid][0], 198.000000, 69.273979);
		PlayerTextDrawAlignment(playerid, Txdraw_StacjaBenzInfo[playerid][0], 1);
		PlayerTextDrawColor(playerid, Txdraw_StacjaBenzInfo[playerid][0], -2139062017);
		PlayerTextDrawSetShadow(playerid, Txdraw_StacjaBenzInfo[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, Txdraw_StacjaBenzInfo[playerid][0], 0);
		PlayerTextDrawFont(playerid, Txdraw_StacjaBenzInfo[playerid][0], 4);

		Txdraw_StacjaBenzInfo[playerid][1] = CreatePlayerTextDraw(playerid, 476.333648, 309.866546, "STACJA BENZYNOWA");
		PlayerTextDrawLetterSize(playerid, Txdraw_StacjaBenzInfo[playerid][1], 0.376332, 1.483850);
		PlayerTextDrawAlignment(playerid, Txdraw_StacjaBenzInfo[playerid][1], 1);
		PlayerTextDrawColor(playerid, Txdraw_StacjaBenzInfo[playerid][1], -1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StacjaBenzInfo[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, Txdraw_StacjaBenzInfo[playerid][1], 1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StacjaBenzInfo[playerid][1], 51);
		PlayerTextDrawFont(playerid, Txdraw_StacjaBenzInfo[playerid][1], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_StacjaBenzInfo[playerid][1], 1);

		Txdraw_StacjaBenzInfo[playerid][2] = CreatePlayerTextDraw(playerid, 446.666656, 326.873992, "Pojazd: -----~n~Paliwo: ---/100~n~Typ paliwa: -----~n~Koszt tankowania do pelna: $---~n~Silnik: ----");
		PlayerTextDrawLetterSize(playerid, Txdraw_StacjaBenzInfo[playerid][2], 0.201665, 1.039999);
		PlayerTextDrawAlignment(playerid, Txdraw_StacjaBenzInfo[playerid][2], 1);
		PlayerTextDrawColor(playerid, Txdraw_StacjaBenzInfo[playerid][2], -1);
		PlayerTextDrawSetShadow(playerid, Txdraw_StacjaBenzInfo[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, Txdraw_StacjaBenzInfo[playerid][2], 1);
		PlayerTextDrawBackgroundColor(playerid, Txdraw_StacjaBenzInfo[playerid][2], 51);
		PlayerTextDrawFont(playerid, Txdraw_StacjaBenzInfo[playerid][2], 1);
		PlayerTextDrawSetProportional(playerid, Txdraw_StacjaBenzInfo[playerid][2], 1);

	}
	if(type == 1) //pokaz
	{
		for(new i = 0; i != 3; i++)
		{
			PlayerTextDrawShow(playerid, Txdraw_StacjaBenzInfo[playerid][i]);
		}
	}
	if(type == 2) //hide
	{
		for(new i = 0; i != 3; i++)
		{
			PlayerTextDrawHide(playerid, Txdraw_StacjaBenzInfo[playerid][i]);
		}
	}
	if(type == 3) //Odswiezenie
	{
		new tdstring[128], stan0[15], stan1[15], stan2[15], stan3[15], stan4[15], stan5[30], vehicleid = GetPlayerVehicleRange(playerid, 5), puid = PlayerData[playerid][pLastPickupUID];
		
		if(vehicleid == -1) return 1;
		
		new koszt = 100 - floatround(VehicleData[vehicleid][vPaliwo]);
		
		//new data[128];
		//format(data,sizeof(data), "koszt (%d) cena (%d) vehicleid (%d) paliwo (FR: %d, NOR: %f)",  koszt, koszt * PickupData[puid][pCena], vehicleid, floatround(VehicleData[vehicleid][vPaliwo]), VehicleData[vehicleid][vPaliwo]);
		//SendClientMessage(playerid, -1, data);
		
		
		switch(VehicleData[vehicleid][vPaliwoTyp])
		{
			case 0: stan5 = "Benzyna";				
			case 1: stan5 = "Gaz (LPG)";			
			case 2: stan5 = "ON (Olej napedowy)";
			case 3: stan5 = "Gazy ziemne (NVG)";
			case 4: stan5 = "Uniwersalna 95";
			case 5: stan5 = "Bezolowiowa 95";
			case 6: stan5 = "Bezolowiowa 98";
		}
	
		format(stan0,sizeof(stan0), "%s", CarList[GetVehicleModel(vehicleid)-400]);
		format(stan1,sizeof(stan1), "%d/%d", floatround(VehicleData[vehicleid][vPaliwo]), VehicleData[vehicleid][vPaliwoMax]);
		format(stan2,sizeof(stan2), "%d", VehicleData[vehicleid][vPaliwoMax] - floatround(VehicleData[vehicleid][vPaliwo]));
		format(stan3,sizeof(stan3), "%d", koszt * PickupData[puid][pCena]);
		format(stan4,sizeof(stan4), "%s", ((VehicleData[vehicleid][vEngine] == 1) ? ("Wlaczony") : ("Wylaczony")));
	
		format(tdstring, sizeof(tdstring), "\
											Pojazd: %s\
											~n~Paliwo: %s (%s brak)\
											~n~Typ paliwa: %s\
											~n~Koszt tankowania: $%s\
											~n~Silnik: %s", 
											stan0, stan1, stan2, stan5, stan3, stan4);
		PlayerTextDrawSetString(playerid, Txdraw_StacjaBenzInfo[playerid][2], tdstring);
	}
	if(type == 4) //hide + del
	{
		for(new i = 0; i != 3; i++)
		{
			PlayerTextDrawHide(playerid, Txdraw_StacjaBenzInfo[playerid][i]);
			PlayerTextDrawDestroy(playerid, Txdraw_StacjaBenzInfo[playerid][i]);
		}
	}
	return 1;
}


/*
stock GetVehicleSpeed(vehicleid)
{
    new Float:X, Float:Y, Float:Z, Float:SPEED;
    GetVehicleVelocity(vehicleid, X, Y, Z);
    SPEED = ((floatsqroot((X*X) + (Y*Y))*10) / 1.69) * 30;
    return floatround(SPEED, floatround_round);
}

*/
forward TimerPaliwo();
public TimerPaliwo()
{
	for(new i = 1, j = GetVehiclePoolSize(); i <= j; i++)
	{
		new engine, lights, alarm, doors, bonnet, boot, objective;
		if(GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective))
		{
			if(engine == 1)
			{
				if(VehicleData[i][vPaliwo] > 0)
				{
					new mid = GetVehicleModel(i);
					if(mid == 509 || mid == 481 || mid == 510) continue; //to sa rowery
					new vPredkosc = GetVehicleSpeed(i);
					if(vPredkosc <= 5){ VehicleData[i][vPaliwo] = VehicleData[i][vPaliwo] - 0.4; }
					if(vPredkosc > 5 && vPredkosc <= 10){ VehicleData[i][vPaliwo] = VehicleData[i][vPaliwo] - 0.5; }
					if(vPredkosc > 10 && vPredkosc <= 30){ VehicleData[i][vPaliwo] = VehicleData[i][vPaliwo] - 0.6; }
					if(vPredkosc > 30 && vPredkosc <= 50){ VehicleData[i][vPaliwo] = VehicleData[i][vPaliwo]- 0.8; }
					if(vPredkosc > 50 && vPredkosc <= 70){ VehicleData[i][vPaliwo] = VehicleData[i][vPaliwo] - 1.0; }
					if(vPredkosc > 70 && vPredkosc <= 90){ VehicleData[i][vPaliwo] = VehicleData[i][vPaliwo] - 1.2; }
					if(vPredkosc > 90 && vPredkosc <= 100){ VehicleData[i][vPaliwo] = VehicleData[i][vPaliwo] - 1.5; }
					if(vPredkosc > 100){ VehicleData[i][vPaliwo] = VehicleData[i][vPaliwo] - 1.6; }
					
					if(vPredkosc > 50)  //Niszczymy stan opon
					{
						if(VehicleData[i][vOponaLT_DMG] > 0)
						{
							VehicleData[i][vOponaLT_DMG] -= 0.4;
						}
						else
						{
							VehicleData[i][vOponaLT_DMG] = 0;
						}
						if(VehicleData[i][vOponaLP_DMG] > 0)
						{
							VehicleData[i][vOponaLP_DMG] -= 0.4;
						}
						else
						{
							VehicleData[i][vOponaLP_DMG] = 0;
						}
						if(VehicleData[i][vOponaPP_DMG] > 0)
						{
							VehicleData[i][vOponaPP_DMG] -= 0.2;
						}
						else
						{
							VehicleData[i][vOponaPP_DMG] = 0;
						}
						if(VehicleData[i][vOponaPT_DMG] > 0)
						{
							VehicleData[i][vOponaPT_DMG] -= 0.2;
						}
						else
						{
							VehicleData[i][vOponaPT_DMG] = 0;
						}
					}
				}
			}
		}
	}
	return 1;
}

stock SCMToFirma(firma, color, string[])
{
	for(new x = 0, j = GetPlayerPoolSize(); x <= j; x++)
	{
		if(!IsPlayerConnected(x)) continue;
		if(PlayerData[x][pFirma] != firma) continue;
		SendClientMessage(x, color, string);
	}
	return 1;
}
		
stock SCMToFrakcja(frakcja, color, string[])
{
	for(new x = 0, j = GetPlayerPoolSize(); x <= j; x++)
	{
		if(!IsPlayerConnected(x)) continue;
		
		if(PlayerData[x][pFrakcja] == frakcja)
		{
			SendClientMessage(x, color, string);
		}
		
		if(GetPlayerFrakcja(x, frakcja) == 0) //Policja
		{
			for(new i=0; i<sizeof(SkinyPolicji); i++)
			{
				if(GetPlayerSkin(x) == SkinyPolicji[i])
				{
					SendClientMessage(x, color, string);
				}
			}
		}
		if(GetPlayerFrakcja(x, frakcja) == 0) //Pogotowie
		{
			for(new i=0; i<sizeof(SkinyPogotowie); i++)
			{
				if(GetPlayerSkin(x) == SkinyPogotowie[i])
				{
					SendClientMessage(x, color, string);
				}
			}
		}
		if(GetPlayerFrakcja(x, frakcja) == 0) //Straz miejska
		{
			for(new i=0; i<sizeof(SkinyStrazMiejska); i++)
			{
				if(GetPlayerSkin(x) == SkinyStrazMiejska[i])
				{
					SendClientMessage(x, color, string);
				}
			}
		}
		if(GetPlayerFrakcja(x, frakcja) == 0) //Straz graniczna
		{
			for(new i=0; i<sizeof(SkinyStrazGraniczna); i++)
			{
				if(GetPlayerSkin(x) == SkinyStrazGraniczna[i])
				{
					SendClientMessage(x, color, string);
				}
			}
		}
		if(GetPlayerFrakcja(x, frakcja) == 0) //Straz pozarna
		{
			for(new i=0; i<sizeof(SkinyStrazPozarna); i++)
			{
				if(GetPlayerSkin(x) == SkinyStrazPozarna[i])
				{
					SendClientMessage(x, color, string);
				}
			}
		}
		if(GetPlayerFrakcja(x, frakcja) == 0) //Pomoc drogowa
		{
			for(new i=0; i<sizeof(SkinyPomocDrogowa); i++)
			{
				if(GetPlayerSkin(x) == SkinyPomocDrogowa[i])
				{
					SendClientMessage(x, color, string);
				}
			}
		}
		if(GetPlayerFrakcja(x, frakcja) == 0) //San news
		{
			for(new i=0; i<sizeof(SkinySanNews); i++)
			{
				if(GetPlayerSkin(x) == SkinySanNews[i])
				{
					SendClientMessage(x, color, string);
				}
			}
		}
		if(GetPlayerFrakcja(x, frakcja) == 0) //Taxi
		{
			for(new i=0; i<sizeof(SkinyTaxi); i++)
			{
				if(GetPlayerSkin(x) == SkinyTaxi[i])
				{
					SendClientMessage(x, color, string);
				}
			}
		}
		if(GetPlayerFrakcja(x, frakcja) == 0) //Skiny wultan clan
		{
			for(new i=0; i<sizeof(SkinyWultanClan); i++)
			{
				if(GetPlayerSkin(x) == SkinyWultanClan[i])
				{
					SendClientMessage(x, color, string);
				}
			}
		}
		if(GetPlayerFrakcja(x, frakcja) == 0) //Skiny Makaveli
		{
			for(new i=0; i<sizeof(SkinyMakaveli); i++)
			{
				if(GetPlayerSkin(x) == SkinyMakaveli[i])
				{
					SendClientMessage(x, color, string);
				}
			}
		}
		
	}
	return 1;
}




		
//  uid,  frakcja,  cena,  ammo,  bronid,  nazwa
new ZbrojowniaFrakcyjna[][] = {

//Policja
	{0, 1, 0, 100, 24, "Desert Deagle"},
	{1, 1, 0, 100, 3,  "Palka policyjna"},
	{2, 1, 0, 30,  25, "Shotgun"},
	{3, 1, 0, 800, 41, "Spray"},
	{4, 1, 0, 50,  23,  "Paralizator"},
	{5, 1, 0, 100, 69,  "Kamizelka"},
	
//Pogotowie
	{6, 2, 0, 1, 4,  "Noz"},
	
//Straz miejska
	{7, 3, 0, 100, 3,    "Palka policyjna"},
	{8, 3, 0, 30,  25,   "Shotgun"},
	{9, 3, 0, 300, 29,   "Mp5"},
	{10, 3, 0, 100, 69,  "Kamizelka"},
	
//Straz graniczna
	{11, 4, 0, 100,  3,  "Palka policyjna"},
	{12, 4, 0, 30,  25,  "Shotgun"},
	{13, 4, 0, 300, 29,  "Mp5"},
	{14, 4, 0, 100, 69,  "Kamizelka"},

//Straz pozarna
	{15, 5, 0, 1, 9,  "Pila mechaniczna"},
	
//Pomoc drogowa
	{16, 6, 0, 800, 41, "Spray"},
	
//San news
	{17, 7, 0, 999, 43, "Aparat [Hasselblad H4D-60]"}
};

stock ShowMenuZbrojownia(playerid)
{	
	if(PlayerData[playerid][pFrakcja] == 0) return SendClientMessage(playerid, -1, "{a4a4a4}W zbrojowni nie ma zadnych broni dla ciebie.");
	new x = 0, data[300];
	
	data = "Nazwa Broni\tCena\n";
	
	for(new j=0; j<sizeof(ZbrojowniaFrakcyjna); j++)
	{
		if(ZbrojowniaFrakcyjna[j][1] != PlayerData[playerid][pFrakcja]) continue;
						
		PlayerData[playerid][pCheckZbrojniaUID][x] = ZbrojowniaFrakcyjna[j][0];
		x++;
						
		format(data,sizeof(data),"%s\
								%s\t$%d\n\
		", data, ZbrojowniaFrakcyjna[j][5], ZbrojowniaFrakcyjna[j][2]);
	}
	ShowPlayerDialog(playerid, DIALOG_ZBROJOWNIA, DIALOG_STYLE_TABLIST_HEADERS, "Zbrojownia (frakcji):", data, "Wez", "Zamknij");
	return 1;
}

stock TakeGunZbrojownia(playerid, wybral)
{
	new data[128];
	if(GetPlayerCash(playerid) < ZbrojowniaFrakcyjna[wybral][2]) return SendClientMessage(playerid, -1, "{a4a4a4}Nie stac Cie na zakup tej broni.");
	if(GetValuePlayerItems(PlayerData[playerid][pUID]) >= SETTINGS_PLAYER_MAX_ITEMS) return SendClientMessage(playerid, -1, "{a4a4a4}Przekroczono maksymalny limit przedmiotow, posiadasz juz "#SETTINGS_PLAYER_MAX_ITEMS" lub wiecej.");
	
	GivePlayerCash(playerid, -ZbrojowniaFrakcyjna[wybral][2]);
	GiveFrakcjaCash(PlayerData[playerid][pFrakcja], ZbrojowniaFrakcyjna[wybral][2]);
	
	if(ZbrojowniaFrakcyjna[wybral][4] == 69) // Kamizelka
	{
		//CreatePlayerItem(playerid, przedmiot[], var1 = 0, var2 = 0, var3 = 0, var4 = 0, var5 = 0, var6 = 0)
		CreatePlayerItem(playerid, ZbrojowniaFrakcyjna[wybral][5], TYPE_ITEM_KAMIZELKA, ZbrojowniaFrakcyjna[wybral][4], ZbrojowniaFrakcyjna[wybral][3], ZbrojowniaFrakcyjna[wybral][1]);
	}
	else
	{
		CreatePlayerItem(playerid, ZbrojowniaFrakcyjna[wybral][5], TYPE_ITEM_BRON, ZbrojowniaFrakcyjna[wybral][4], ZbrojowniaFrakcyjna[wybral][3], ZbrojowniaFrakcyjna[wybral][1]);
	}		
	format(data,sizeof(data),"{a4a4a4}Przedmiot %s (id: %d) (ammo: %d) (f: %d) (c: %d) trafia do twojego ekwipunku. Pod komenda /p znajdziesz ten przedmiot.", ZbrojowniaFrakcyjna[wybral][5], ZbrojowniaFrakcyjna[wybral][4], ZbrojowniaFrakcyjna[wybral][3], ZbrojowniaFrakcyjna[wybral][1], ZbrojowniaFrakcyjna[wybral][2]);
	SendClientMessage(playerid, -1, data);
	return 1;
}




//  uid,  url,  nazwa

enum e_StacjeRadiowe
{
	s_nazwa[70],
	s_url[100]
};

new StacjeRadiowe[][e_StacjeRadiowe] = {

	{"RMF MAXXX", "http://www.miastomuzyki.pl/n/rmfmaxxx.pls"}, //RMF MAXXX
	{"HOT 100", "http://www.polskastacja.pl/play/aac_hot100.pls"},
	{"RADIO PARTY", "http://www.polskastacja.pl/play/aac_party.pls"},
	{"ESKA ROCK", "http://www.odsluchane.eu/pls/eska_rock.pls"},
	{"POLSKI HIP HOP", "http://polskastacja.pl/play/aac_electrohouse.pls"},
	{"RMF FM", "http://files.kusmierz.be/rmf/rmffm.pls"}
};

stock PlayerMusicDiscman(playerid, listitem)
{
	PlayAudioStreamForPlayer(playerid, StacjeRadiowe[listitem][s_url]);
	return 1;
}


stock ShowMenuStacjeRadiowe(playerid)
{
	new data[300];
	data = "#\t#\n";
					
	for(new j=0; j<sizeof(StacjeRadiowe); j++)
	{		
		format(data,sizeof(data),"%s\
								%d\t\
								%s\n\
					", data, j, StacjeRadiowe[j][s_nazwa]);
	}
	ShowPlayerDialog(playerid, DIALOG_DISCMAN_STACJE, DIALOG_STYLE_TABLIST_HEADERS, "Discman (stacje):", data, "Wlacz", "Anuluj");
	return 1;
}		
		


		



stock CheckNextVehicle(playerid, type)
{
	if(PlayerData[playerid][pSalonVehicleType] != type)
	{
		PlayerData[playerid][pSalonVehicleNumer] = 0;
	}
	
	for(new x=0; x<sizeof(SalonInfo); x++)
	{
		if(type != SalonInfo[x][0]) continue; //To nie jest pojazd tego typu = out
		if(PlayerData[playerid][pSalonVehicleNumer] > GetVehicleModelIdByName(SalonInfo[x][3])) continue;  //Przechodzimy do kolejnego pojazdu z listy
		
		if(PlayerData[playerid][pSalonVehicleNumer] == GetVehicleModelIdByName(SalonInfo[x][3]))
		{
			PlayerData[playerid][pSalonVehicleNumer] = 0;
			continue;
		}
		
		
			
		PlayerData[playerid][pSalonVehicleNumer] = GetVehicleModelIdByName(SalonInfo[x][3]);
		PlayerData[playerid][pSalonVehicleType] = type;
		
		
		if(IsValidVehicle(PlayerData[playerid][pSalonVehicle])) DestroyVehicle(PlayerData[playerid][pSalonVehicle]);
		SetCameraBehindPlayer(playerid);
		SetPlayerCameraPos(playerid, 2748.46, -1754.82, 43.85);
		SetPlayerCameraLookAt(playerid, 2737.76, -1760.29, 44.15);
		SetPlayerVirtualWorldEx(playerid, playerid);
		SetPlayerPos(playerid, 	2737.76, -1760.29, 44.15 - 20);
		PlayerData[playerid][pSalonVehicle] = CreateVehicleEx(PlayerData[playerid][pSalonVehicleNumer], 2737.76, -1760.29, 44.15 + 1, 0, 0, 1, 9999999999999999999999999);
		SetVehicleVirtualWorld(PlayerData[playerid][pSalonVehicle], playerid);
		PlayerData[playerid][pSalonVehicleCena] = SalonInfo[x][1];
		PlayerData[playerid][pSalonVehicleLevel] = SalonInfo[x][2];
		
		PlayerSalonSamochodowy(playerid, 1, 1, SalonInfo[x][3], SalonInfo[x][1], 999, SalonInfo[x][2]);
		break;
	}
	return 1;
}


stock CheckPrevVehicle(playerid, type)
{
	if(PlayerData[playerid][pSalonVehicleType] != type)
	{
		PlayerData[playerid][pSalonVehicleNumer] = 0;
	}
	
	for(new x=0; x<sizeof(SalonInfo); x++)
	{
		if(type != SalonInfo[x][0]) continue; //To nie jest pojazd tego typu = out
		
		
		if(PlayerData[playerid][pSalonVehicleNumer] < GetVehicleModelIdByName(SalonInfo[x][3])) 
		{
		
		}
		
		if(PlayerData[playerid][pSalonVehicleNumer] <= 411 || PlayerData[playerid][pSalonVehicleNumer] <= 611)
		{
			PlayerData[playerid][pSalonVehicleNumer] = 0;
			continue;
		}
		
		
			
		PlayerData[playerid][pSalonVehicleNumer] = GetVehicleModelIdByName(SalonInfo[x][3]);
		PlayerData[playerid][pSalonVehicleType] = type;
		
		
		if(IsValidVehicle(PlayerData[playerid][pSalonVehicle])) DestroyVehicle(PlayerData[playerid][pSalonVehicle]);
		SetCameraBehindPlayer(playerid);
		SetPlayerCameraPos(playerid, 2748.46, -1754.82, 43.85);
		SetPlayerCameraLookAt(playerid, 2737.76, -1760.29, 44.15);
		SetPlayerVirtualWorldEx(playerid, playerid);
		SetPlayerPos(playerid, 	2737.76, -1760.29, 44.15 - 20);
		PlayerData[playerid][pSalonVehicle] = CreateVehicleEx(PlayerData[playerid][pSalonVehicleNumer], 2737.76, -1760.29, 44.15 + 1, 0, 0, 1, 9999999999999999999999999);
		SetVehicleVirtualWorld(PlayerData[playerid][pSalonVehicle], playerid);
		PlayerData[playerid][pSalonVehicleCena] = SalonInfo[x][1];
		PlayerData[playerid][pSalonVehicleLevel] = SalonInfo[x][2];
		
		PlayerSalonSamochodowy(playerid, 1, 1, SalonInfo[x][3], SalonInfo[x][1], 999, SalonInfo[x][2]);
		break;
	}
	return 1;
}





stock SaveTowar(uid)
{
	if(uid == 0) return 1;
	if(uid == -1) return 1;		
	
	new data[200];
	format(data,sizeof(data), "UPDATE `data_towary` set `name` = '%s' where `uid` = '%d'", 				TowarData[uid][tNazwa],         		  	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_towary` set `stan` = '%d' where `uid` = '%d'", 				TowarData[uid][tTowarStan],         		  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_towary` set `dla` = '%d' where `uid` = '%d'", 				TowarData[uid][tTowarRequiste],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_towary` set `score_player` = '%d' where `uid` = '%d'", 		TowarData[uid][tScorePlayer],         		  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_towary` set `score_vip` = '%d' where `uid` = '%d'", 		TowarData[uid][tScoreVip],         		  	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_towary` set `kasa_player` = '%d' where `uid` = '%d'", 		TowarData[uid][tKasaPlayer],         		  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_towary` set `kasa_vip` = '%d' where `uid` = '%d'", 			TowarData[uid][tKasaVip],         		  	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_towary` set `z_x` = '%f' where `uid` = '%d'", 				TowarData[uid][tZaladunek][0],         		  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_towary` set `z_y` = '%f' where `uid` = '%d'", 				TowarData[uid][tZaladunek][1],         		  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_towary` set `z_z` = '%f' where `uid` = '%d'", 				TowarData[uid][tZaladunek][2],         		  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_towary` set `r_x` = '%f' where `uid` = '%d'", 				TowarData[uid][tRozladunek][0],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_towary` set `r_y` = '%f' where `uid` = '%d'", 				TowarData[uid][tRozladunek][1],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_towary` set `r_z` = '%f' where `uid` = '%d'", 				TowarData[uid][tRozladunek][2],         	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_towary` set `z_w` = '%s' where `uid` = '%d'", 				TowarData[uid][tZaladunekW],         	 	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_towary` set `z_r` = '%s' where `uid` = '%d'", 				TowarData[uid][tRozladunekW],         	 	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_towary` set `adr` = '%d' where `uid` = '%d'", 				TowarData[uid][tADR],         	 	  		  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_towary` set `exp` = '%d' where `uid` = '%d'", 				TowarData[uid][tExp],         	 	  		  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_towary` set `kasa_firma` = '%d' where `uid` = '%d'", 		TowarData[uid][tKasaFirma],         	 	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_towary` set `legal` = '%d' where `uid` = '%d'", 			TowarData[uid][tLegalny],         	 	 	  uid), mysql_query(data);
	
	format(data,sizeof(data), "UPDATE `data_towary` set `odgodz` = '%d' where `uid` = '%d'", 			TowarData[uid][tOdGodz],         	 	 	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_towary` set `dogodz` = '%d' where `uid` = '%d'", 			TowarData[uid][tDoGodz],         	 	 	  uid), mysql_query(data);
	
	ReloadTowary();
	return 1;
}
	
stock ReloadTowary()
{
	for(new uid = 0; uid < towar_value; uid++)
	{
        Delete3DTextLabel(TowarData[uid][tText3D]);
        DestroyDynamicPickup(TowarData[uid][tPickup]);
		DestroyDynamicMapIcon(TowarData[uid][tMapIcon]);
	}
	LoadTowary();
}	


stock LoadTowary()
{
	towar_value = 1;
	new i = 1, data[500];
	mysql_query("SELECT * FROM `data_towary` ORDER BY `uid` ASC");
	mysql_store_result();

	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>is[30]iiiiiiffffffs[30]s[30]iiiiii",
		TowarData[i][tTowarUID],
		TowarData[i][tNazwa],
		TowarData[i][tTowarStan],
		TowarData[i][tTowarRequiste],
		TowarData[i][tScorePlayer],
		TowarData[i][tScoreVip],
		TowarData[i][tKasaPlayer],
		TowarData[i][tKasaVip],
		TowarData[i][tZaladunek][0],
		TowarData[i][tZaladunek][1],
		TowarData[i][tZaladunek][2],
		TowarData[i][tRozladunek][0],
		TowarData[i][tRozladunek][1],
		TowarData[i][tRozladunek][2],
		TowarData[i][tZaladunekW],
		TowarData[i][tRozladunekW],
		TowarData[i][tADR],
		TowarData[i][tExp],
		TowarData[i][tKasaFirma],
		TowarData[i][tLegalny],
		TowarData[i][tOdGodz],
		TowarData[i][tDoGodz]
		);
		
		printf("[TOWARY] uid %d towar %s stan %d wymog %d ", i, TowarData[i][tNazwa], TowarData[i][tTowarStan], TowarData[i][tTowarRequiste]);
		
		new text[512];
		format(text, sizeof(text), "Punkt zaladunkowy\n"C_SZARY"Aby zaladowac towar wpisz "C_TURKUSOWY"/towary!\n{a4a4a4}UID: {ffffff}%d", TowarData[i][tTowarUID]);
		
		TowarData[i][tText3D] = CreateDynamic3DTextLabel(text, 0x15de00FF, TowarData[i][tZaladunek][0], TowarData[i][tZaladunek][1], TowarData[i][tZaladunek][2], 20.0);
		TowarData[i][tPickup] = CreateDynamicPickup(19132, 23, TowarData[i][tZaladunek][0], TowarData[i][tZaladunek][1], TowarData[i][tZaladunek][2]);
		TowarData[i][tMapIcon] = CreateDynamicMapIcon(TowarData[i][tZaladunek][0], TowarData[i][tZaladunek][1], TowarData[i][tZaladunek][2], 51, COLOR_GREY, 0, -1, -1, 100000000.0, MAPICON_LOCAL);
		
		i++;
		towar_value++;
	}
	mysql_free_result();
	return 1;
}
	
stock PlayerZlecenieInfo(playerid, type = 0, towar[] = "xxx", zal[] = "xxx", roz[] = "xxx")
{
	if(PlayerData[playerid][pLogged] == false) return 1;
	if(type == 0) ///tworz
	{
		Txd_infozlecenie[playerid][0] = CreatePlayerTextDraw(playerid, 449.000000, 104.000000, "HUD:radar_truck");
		PlayerTextDrawFont(playerid, Txd_infozlecenie[playerid][0], 4);
		PlayerTextDrawLetterSize(playerid, Txd_infozlecenie[playerid][0], 0.600000, 2.000000);
		PlayerTextDrawTextSize(playerid, Txd_infozlecenie[playerid][0], 13.500000, 11.000000);
		PlayerTextDrawSetOutline(playerid, Txd_infozlecenie[playerid][0], 0);
		PlayerTextDrawSetShadow(playerid, Txd_infozlecenie[playerid][0], 0);
		PlayerTextDrawAlignment(playerid, Txd_infozlecenie[playerid][0], 1);
		PlayerTextDrawColor(playerid, Txd_infozlecenie[playerid][0], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_infozlecenie[playerid][0], 125);
		PlayerTextDrawBoxColor(playerid, Txd_infozlecenie[playerid][0], 255);
		PlayerTextDrawUseBox(playerid, Txd_infozlecenie[playerid][0], 0);
		PlayerTextDrawSetProportional(playerid, Txd_infozlecenie[playerid][0], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_infozlecenie[playerid][0], 0);

		Txd_infozlecenie[playerid][1] = CreatePlayerTextDraw(playerid, 548.000000, 98.000000, "_");
		PlayerTextDrawFont(playerid, Txd_infozlecenie[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid, Txd_infozlecenie[playerid][1], 0.600000, 2.399980);
		PlayerTextDrawTextSize(playerid, Txd_infozlecenie[playerid][1], 287.500000, 197.000000);
		PlayerTextDrawSetOutline(playerid, Txd_infozlecenie[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid, Txd_infozlecenie[playerid][1], 0);
		PlayerTextDrawAlignment(playerid, Txd_infozlecenie[playerid][1], 2);
		PlayerTextDrawColor(playerid, Txd_infozlecenie[playerid][1], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_infozlecenie[playerid][1], 255);
		PlayerTextDrawBoxColor(playerid, Txd_infozlecenie[playerid][1], 135);
		PlayerTextDrawUseBox(playerid, Txd_infozlecenie[playerid][1], 1);
		PlayerTextDrawSetProportional(playerid, Txd_infozlecenie[playerid][1], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_infozlecenie[playerid][1], 0);

		Txd_infozlecenie[playerid][2] = CreatePlayerTextDraw(playerid, 471.000000, 102.000000, "~y~Gracz Victor_Aim dostarczyl towar Mleko z Szpital LV do Szpital SF");
		PlayerTextDrawFont(playerid, Txd_infozlecenie[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid, Txd_infozlecenie[playerid][2], 0.145833, 0.699999);
		PlayerTextDrawTextSize(playerid, Txd_infozlecenie[playerid][2], 640.500000, 18.500000);
		PlayerTextDrawSetOutline(playerid, Txd_infozlecenie[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid, Txd_infozlecenie[playerid][2], 0);
		PlayerTextDrawAlignment(playerid, Txd_infozlecenie[playerid][2], 1);
		PlayerTextDrawColor(playerid, Txd_infozlecenie[playerid][2], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_infozlecenie[playerid][2], 255);
		PlayerTextDrawBoxColor(playerid, Txd_infozlecenie[playerid][2], 0);
		PlayerTextDrawUseBox(playerid, Txd_infozlecenie[playerid][2], 1);
		PlayerTextDrawSetProportional(playerid, Txd_infozlecenie[playerid][2], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_infozlecenie[playerid][2], 0);

		Txd_infozlecenie[playerid][3] = CreatePlayerTextDraw(playerid, 467.000000, 98.000000, "_");
		PlayerTextDrawFont(playerid, Txd_infozlecenie[playerid][3], 1);
		PlayerTextDrawLetterSize(playerid, Txd_infozlecenie[playerid][3], 0.600000, 2.399980);
		PlayerTextDrawTextSize(playerid, Txd_infozlecenie[playerid][3], 287.500000, -2.500000);
		PlayerTextDrawSetOutline(playerid, Txd_infozlecenie[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid, Txd_infozlecenie[playerid][3], 0);
		PlayerTextDrawAlignment(playerid, Txd_infozlecenie[playerid][3], 2);
		PlayerTextDrawColor(playerid, Txd_infozlecenie[playerid][3], -1);
		PlayerTextDrawBackgroundColor(playerid, Txd_infozlecenie[playerid][3], 255);
		PlayerTextDrawBoxColor(playerid, Txd_infozlecenie[playerid][3], 135);
		PlayerTextDrawUseBox(playerid, Txd_infozlecenie[playerid][3], 1);
		PlayerTextDrawSetProportional(playerid, Txd_infozlecenie[playerid][3], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_infozlecenie[playerid][3], 0);
	}
	if(type == 1) //hide
	{
		for(new i = 0; i != 4; i++)
		{
			PlayerTextDrawHide(playerid, Txd_infozlecenie[playerid][i]);
		}
	}
	if(type == 2) //hide + del
	{
		for(new i = 0; i != 4; i++)
		{
			PlayerTextDrawHide(playerid, Txd_infozlecenie[playerid][i]);
			PlayerTextDrawDestroy(playerid, Txd_infozlecenie[playerid][i]);
		}
	}
	if(type == 3) //show all
	{
		new tdstring[128];
		format(tdstring, sizeof(tdstring), "Gracz %s dostarczyl towar %s z %s do %s", PlayerData[playerid][pName], towar, zal, roz);
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(PlayerData[i][pLogged] == false) continue;
			for(new ii = 0; ii != 4; ii++)
			{	
				PlayerTextDrawShow(i, Txd_infozlecenie[i][ii]);
			}
			PlayerTextDrawSetString(i, Txd_infozlecenie[i][2], tdstring);
			KillTimer(PlayerData[i][pTimerZlecenieInfo]);
			PlayerData[i][pTimerZlecenieInfo] = SetTimerEx("HideZlecenieInfo", 10000, false, "d", i);
			
		}
		
	}
	return 1;
}

forward HideZlecenieInfo(playerid);
public HideZlecenieInfo(playerid)
{
	PlayerZlecenieInfo(playerid, 1);
	return 1;
}



forward TimerPlayerSkuty(playerid, player);
public TimerPlayerSkuty(playerid, player)
{
	if(IsPlayerConnected(playerid) == 0 || IsPlayerConnected(player) == 0 || PlayerData[player][pSkuty] == 0)
	{
		KillTimer(PlayerData[player][pTimerSkuty]);
		return 1;
	}
	new Float:xxx[3], vw, inte, seat;
	GetPlayerPos(playerid, xxx[0],xxx[1],xxx[2]);
	inte = GetPlayerInterior(playerid);
	vw = GetPlayerVirtualWorld(playerid);
	seat = GetPlayerVehicleSeat(playerid);
		
	if(IsPlayerInAnyVehicle(playerid)==0) 
	{
		SetPlayerPos(player, xxx[0],xxx[1]+0.5,xxx[2]);
		SetPlayerInteriorEx(player, inte);
		SetPlayerVirtualWorldEx(player, vw);
	}
	else if(IsPlayerInAnyVehicle(playerid)==1 && GetPlayerVehicleID(playerid) != GetPlayerVehicleID(player))  
	{
		PutPlayerInVehicleEx(player, GetPlayerVehicleID(playerid), seat+1);
		SetPlayerInteriorEx(player, inte);
		SetPlayerVirtualWorldEx(player, vw);
	}
	return 1;
}


forward UnFreeze(playerid);
public UnFreeze(playerid)
{
	if(PlayerData[playerid][pDeath] == true) return 1;
	TogglePlayerControllable(playerid, true);
	ClearAnimations(playerid);
	
	return 1;
}



stock SetVehicleKierunek(vehicleid, leftindicator=0, rightindicator=0)
{
	if(!leftindicator & !rightindicator) return false;
	new Float:_vX[2], Float:_vY[2], Float:_vZ[2];
	if(rightindicator)
	{
		if(IsTrailerAttachedToVehicle(vehicleid))
		{
			new omg = GetVehicleModel(GetVehicleTrailer(vehicleid));
			GetVehicleModelInfo(omg, VEHICLE_MODEL_INFO_SIZE, _vX[0], _vY[0], _vZ[0]);
			VehKierunki[vehicleid][4] = CreateDynamicObject(19294, 0, 0, 0,0,0,0);
			AttachDynamicObjectToVehicle(VehKierunki[vehicleid][4], GetVehicleTrailer(vehicleid),  _vX[0]/2.4, -_vY[0]/3.35, -1.0 ,0,0,0);
		}
		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, _vX[0], _vY[0], _vZ[0]);
		VehKierunki[vehicleid][0] = CreateDynamicObject(19294, 0, 0, 0,0,0,0);
		AttachDynamicObjectToVehicle(VehKierunki[vehicleid][0], vehicleid,  _vX[0]/2.23, _vY[0]/2.23, 0.1 ,0,0,0);
		VehKierunki[vehicleid][1] = CreateDynamicObject(19294, 0, 0, 0,0,0,0);
		AttachDynamicObjectToVehicle(VehKierunki[vehicleid][1], vehicleid,  _vX[0]/2.23, -_vY[0]/2.23, 0.1 ,0,0,0);
	}
	if(leftindicator)
	{
		if(IsTrailerAttachedToVehicle(vehicleid))
		{
			new omg = GetVehicleModel(GetVehicleTrailer(vehicleid));
			GetVehicleModelInfo(omg, VEHICLE_MODEL_INFO_SIZE, _vX[0], _vY[0], _vZ[0]);
			VehKierunki[vehicleid][5] = CreateDynamicObject(19294, 0, 0, 0,0,0,0);
			AttachDynamicObjectToVehicle(VehKierunki[vehicleid][5], GetVehicleTrailer(vehicleid),  -_vX[0]/2.4, -_vY[0]/3.35, -1.0 ,0,0,0);
		}
		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, _vX[0], _vY[0], _vZ[0]);
		VehKierunki[vehicleid][2] = CreateDynamicObject(19294, 0, 0, 0,0,0,0);
		AttachDynamicObjectToVehicle(VehKierunki[vehicleid][2], vehicleid,  -_vX[0]/2.23, _vY[0]/2.23, 0.1 ,0,0,0);
		VehKierunki[vehicleid][3] = CreateDynamicObject(19294, 0, 0, 0,0,0,0);
		AttachDynamicObjectToVehicle(VehKierunki[vehicleid][3], vehicleid,  -_vX[0]/2.23, -_vY[0]/2.23, 0.1 ,0,0,0);
	}
	return 1;
}




stock PlayerVehicles(playerid, type)
{
	new dataa[500], get_uid, get_sampid, x, i[20][3];
	format(dataa,sizeof(dataa),"SELECT `uid`, `sampid` FROM `data_vehicles` where `owneruid` = '%d' and `private` = '1' and `zlom` = '0'", PlayerData[playerid][pUID]);
    mysql_query(dataa);
	mysql_store_result();
	
	while(mysql_fetch_row(dataa))
	{
		sscanf(dataa, "p<|>ii", get_uid, get_sampid);
		

		i[x][1] = get_uid;
		i[x][2] = get_sampid;
		
		x++;
	}
	mysql_free_result();
	
	
	for(new j = 0; j != x; j++)
	{
		if(type == 1)
		{
			SpawnVehicle(i[j][1]);
		}
		if(type == 2)
		{
			SaveVehicle(i[j][2]);
		}
	}
	return 1;
}

stock SaveVehicle(vehicleid, respawn = 1)
{
	if(vehicleid == -1) return 1;
	if(vehicleid == 0) return 1;
	if(VehicleData[vehicleid][vUID] == 0) return 1;
	if(VehicleData[vehicleid][vUID] == -1) return 1;
	
	new data[300];

	if(VehicleData[vehicleid][vFrakcjiCar] == 0 || VehicleData[vehicleid][vFirmyCar] == 0) {

		GetVehicleHealth(vehicleid, VehicleData[vehicleid][vHP]);
    	GetVehicleDamageStatus(vehicleid, VehicleData[vehicleid][vPanel], VehicleData[vehicleid][vDoors], VehicleData[vehicleid][vLights], VehicleData[vehicleid][vTires]);
				
				
		format(data,sizeof(data), "UPDATE `data_vehicles` set `private` = '%d' where `uid` = '%d'", 		VehicleData[vehicleid][vPrivateCar], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `owneruid` = '%d' where `uid` = '%d'", 		VehicleData[vehicleid][vOwnerUID], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `owner` = '%s' where `uid` = '%d'", 			VehicleData[vehicleid][vOwner], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `model` = '%d' where `uid` = '%d'", 			VehicleData[vehicleid][vModel], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `hp` = '%f' where `uid` = '%d'", 				VehicleData[vehicleid][vHP], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `register` = '%s' where `uid` = '%d'", 		VehicleData[vehicleid][vRegister], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `paliwo` = '%f' where `uid` = '%d'", 			VehicleData[vehicleid][vPaliwo], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `paliwotyp` = '%d' where `uid` = '%d'", 		VehicleData[vehicleid][vPaliwoTyp], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `przebieg` = '%f' where `uid` = '%d'", 		VehicleData[vehicleid][vPrzebieg], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `kolor1` = '%d' where `uid` = '%d'", 			VehicleData[vehicleid][vColor1], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `kolor2` = '%d' where `uid` = '%d'", 			VehicleData[vehicleid][vColor2], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `panel` = '%d' where `uid` = '%d'", 			VehicleData[vehicleid][vPanel], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `lights` = '%d' where `uid` = '%d'", 			VehicleData[vehicleid][vLights], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `tires` = '%d' where `uid` = '%d'", 			VehicleData[vehicleid][vTires], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `doors` = '%d' where `uid` = '%d'", 			VehicleData[vehicleid][vDoors], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `locked` = '%d' where `uid` = '%d'", 			VehicleData[vehicleid][vLocked], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `wheelsblocked` = '%d' where `uid` = '%d'", 	VehicleData[vehicleid][vWheelsBlock], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `x` = '%f' where `uid` = '%d'", 				VehicleData[vehicleid][vPos][0], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `y` = '%f' where `uid` = '%d'", 				VehicleData[vehicleid][vPos][1], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `z` = '%f' where `uid` = '%d'", 				VehicleData[vehicleid][vPos][2], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `a` = '%f' where `uid` = '%d'", 				VehicleData[vehicleid][vPos][3], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `naprawy` = '%f' where `uid` = '%d'", 		VehicleData[vehicleid][vNaprawy], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `cb` = '%d' where `uid` = '%d'", 				VehicleData[vehicleid][vCBRadio], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `firmy` = '%d' where `uid` = '%d'", 			VehicleData[vehicleid][vFirmyCar], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `frakcji` = '%d' where `uid` = '%d'", 		VehicleData[vehicleid][vFrakcjiCar], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `zlom` = '%d' where `uid` = '%d'", 			VehicleData[vehicleid][vZlom], VehicleData[vehicleid][vUID] ), mysql_query(data);
		format(data,sizeof(data), "UPDATE `data_vehicles` set `type` = '%d' where `uid` = '%d'", 			VehicleData[vehicleid][vType], VehicleData[vehicleid][vUID] ), mysql_query(data);
	
	}		


	if(respawn == 1)
	{
		format(data,sizeof(data), "UPDATE `data_vehicles` set `sampid` = '%d' where `uid` = '%d'", 			-1, VehicleData[vehicleid][vUID] ), mysql_query(data);
		VehicleData[vehicleid][vPrivateCar] = 0;
		VehicleData[vehicleid][vFirmyCar] = 0;
		VehicleData[vehicleid][vFrakcjiCar] = 0;
		VehicleData[vehicleid][vNaukaJazdy] = 0;
		VehicleData[vehicleid][vAdminCar]  = false;
		VehicleData[vehicleid][vMapperCar]  = false;
		VehicleData[vehicleid][vEventCar]  = false;
		VehicleData[vehicleid][vUID] = 0;
		DestroyVehicle(vehicleid);
	}
	if(respawn == 2)
	{
		new last_uid = VehicleData[vehicleid][vUID];
		format(data,sizeof(data), "UPDATE `data_vehicles` set `sampid` = '%d' where `uid` = '%d'", 			-1, VehicleData[vehicleid][vUID] ), mysql_query(data);
		VehicleData[vehicleid][vPrivateCar] = 0;
		VehicleData[vehicleid][vFirmyCar] = 0;
		VehicleData[vehicleid][vFrakcjiCar] = 0;
		VehicleData[vehicleid][vNaukaJazdy] = 0;
		VehicleData[vehicleid][vAdminCar]  = false;
		VehicleData[vehicleid][vMapperCar]  = false;		
		VehicleData[vehicleid][vEventCar]  = false;
		VehicleData[vehicleid][vUID] = 0;
		DestroyVehicle(vehicleid);
		if(VehicleData[vehicleid][vAAttachObject] > 0)
		{
			DestroyObject(VehicleData[vehicleid][vAAttachObject]);
		}
		SpawnVehicle(last_uid);
	}
	return 1;
}

stock SpawnVehicle(uid)
{
	new data[512],
	v,
	get_uid,
	get_aktywny,
	get_sampid,
	get_private,
	get_owneruid,
	get_owner[MAX_PLAYER_NAME],
	get_model,
	Float:get_hp,
	get_register[31],
	Float:get_paliwo,
	get_paliwotyp,
	Float:get_przebieg,
	get_kolor1,
	get_kolor2,
	get_panel,
	get_lights,
	get_tires,
	get_doors,
	get_locked,
	get_wheelsblocked,
	Float:get_x,
	Float:get_y,
	Float:get_z,
	Float:get_a,
	Float:get_naprawy,
	get_cb,
	get_firmacar,
	get_frakcjacar,
	get_zlom,
	get_type,
	get_objectid;
	

	format(data,sizeof(data),"SELECT * FROM `data_vehicles` WHERE `uid` = '%d'", uid);
	mysql_query(data);
	mysql_store_result();
		
	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>iiiiis[24]ifs[30]fifiiiiiiiifffffiiiiii",
		get_uid,
		get_sampid,
		get_aktywny,
		get_private,
		get_owneruid,
		get_owner,
		get_model,
		get_hp,
		get_register,
		get_paliwo,
		get_paliwotyp,
		get_przebieg,
		get_kolor1,
		get_kolor2,
		get_panel,
		get_lights,
		get_tires,
		get_doors,
		get_locked,
		get_wheelsblocked,
		get_x,
		get_y,
		get_z,
		get_a,
		get_naprawy,
		get_cb,
		get_firmacar,
		get_frakcjacar,
		get_zlom,
		get_type,
		get_objectid
		);
	}
	if(get_aktywny > 0)
	{
		if(get_x == 0.0 && get_y == 0.0 && get_z == 0.0)
		{
			v = CreateVehicleEx(get_model, 2147.91, -1136.79, 25.13, 0, get_kolor1, get_kolor2, 9999999999999999999999999999999999999999999999999);
			SetVehicleHealth(v, 1000);
				
			VehicleData[v][vUID] = get_uid;
			VehicleData[v][vModel] = get_model;
			VehicleData[v][vPrivateCar] = get_private;
			VehicleData[v][vFirmyCar] = get_firmacar;
			VehicleData[v][vFrakcjiCar] = get_frakcjacar;
			VehicleData[v][vType] = get_type;
			VehicleData[v][vNaukaJazdy] = 0;
			VehicleData[v][vWheelsBlock] = 0;
			VehicleData[v][vLocked] = 0;
			VehicleData[v][vHP] = 1000;
			VehicleData[v][vPrzebieg] = 0;
			VehicleData[v][vPos][0] = 2131.10;
			VehicleData[v][vPos][1] = -1134.02;
			VehicleData[v][vPos][2] = 25.67;
			VehicleData[v][vPos][3] = 0;
			VehicleData[v][vNaprawy] = 0;
			VehicleData[v][vCBRadio] = 0;
			VehicleData[v][vOwnerUID] = get_owneruid;
			format(VehicleData[v][vOwner], 24, "%s", get_owner);	
			VehicleData[v][vFirmyCar] = get_firmacar;
			VehicleData[v][vFrakcjiCar] = get_frakcjacar;
			VehicleData[v][vPaliwoTyp] = get_paliwotyp;
		}
		else
		{
			v = CreateVehicleEx(get_model, get_x, get_y, get_z , get_a, get_kolor1, get_kolor2, 9999999999999999999999999999999999999999999999999);
			SetVehicleNumberPlate(v, get_register);
			ChangeVehicleColor(v, get_kolor1, get_kolor2);
				
			if(get_hp<270)
			{
				SetVehicleHealth(v, 500);
			}
			else
			{
				SetVehicleHealth(v, get_hp);
			}
			
			if(get_owneruid == -1 && get_private == 0) //pojazd ogolnodostepny wiec dajemy mu 1000hp zawsze
			{
				SetVehicleHealth(v, 1000);
			}
			
			SetVehicleParamsEx(v, 0, 0, 0, get_locked, 0, 0, 0);
			UpdateVehicleDamageStatus(v, get_panel, get_doors, get_lights, get_tires);
				
			VehicleData[v][vUID] = get_uid;
			VehicleData[v][vPrivateCar] = get_private;
			VehicleData[v][vModel] = get_model;
			VehicleData[v][vLocked] = get_locked;
			VehicleData[v][vPaliwo] = get_paliwo;
			VehicleData[v][vHP] = get_hp;
			VehicleData[v][vPrzebieg] = get_przebieg;
			VehicleData[v][vPos][0] = get_x;
			VehicleData[v][vPos][1] = get_y;
			VehicleData[v][vPos][2] = get_z;
			VehicleData[v][vPos][3] = get_a;
			VehicleData[v][vColor1] = get_kolor1;
			VehicleData[v][vColor2] = get_kolor2;
			VehicleData[v][vPanel] = get_panel;
			VehicleData[v][vDoors] = get_doors;
			VehicleData[v][vLights] = get_lights;
			VehicleData[v][vTires] = get_tires;
			VehicleData[v][vWheelsBlock] = get_wheelsblocked;
			VehicleData[v][vNaprawy] = get_naprawy;
			VehicleData[v][vCBRadio] = get_cb;
			VehicleData[v][vOwnerUID] = get_owneruid;
			VehicleData[v][vType] = get_type;
			VehicleData[v][vNaukaJazdy] = 0;
			format(VehicleData[v][vOwner], 24, "%s", get_owner);
			VehicleData[v][vFirmyCar] = get_firmacar;
			VehicleData[v][vFrakcjiCar] = get_frakcjacar;
			VehicleData[v][vPaliwoTyp] = get_paliwotyp;
			VehicleData[v][vZlom] = 0;
			VehicleData[v][vAObjectid]	=	get_objectid;

			mysql_free_result();
			if(get_objectid != 0)
			{	
				new query[512], Float: x, Float: y, Float: z, Float: rx, Float: ry, Float:rz, atype;
				format(query, sizeof(query), "SELECT `atype`, `ax`, `ay`, `az`, `arx`, `ary`, `arz` FROM `data_vehicles` WHERE `uid` = '%d'", VehicleData[v][vUID]); mysql_query(query);
				mysql_store_result();
				while(mysql_fetch_row(query))
				{
					sscanf(query, "p<|>iffffff",
					atype,
					x,
					y,
					z,
					rx,
					ry,
					rz
					);	
				}		
				VehicleData[v][vAObject] = get_objectid;
				VehicleData[v][vAType] = atype;
				VehicleData[v][vAPos][0] = x;
				VehicleData[v][vAPos][1] = y;
				VehicleData[v][vAPos][2] = z;
				VehicleData[v][vAPos][3] = rx;
				VehicleData[v][vAPos][4] = ry;
				VehicleData[v][vAPos][5] = rz;
				SetVehicleAddition(v, get_objectid, atype, x, y, z, rx, ry, rz);
				mysql_free_result();
			}
				
		}
		format(data,sizeof(data),"update `data_vehicles` set `sampid` = '%d' where `uid` = '%d'", v, uid);
		mysql_query(data);
		return 1;
	}
	
	return v;
}

stock RemovePlayerWeapon(playerid, weapon)
{
	new weapons[13], ammo[13];
	for(new i = 0; i < 13; i++) GetPlayerWeaponData(playerid, i, weapons[i], ammo[i]);
	ResetPlayerWeaponsEx(playerid);
	for(new i = 0; i < 13; i++)
	{
		if(weapons[i] == weapon) continue;
	    GivePlayerWeaponEx(playerid, weapons[i], ammo[i]);
	}
	return 1;
}


stock GetPlayerTelefon(playerid)
{
	new data[200], uidddddd = 0;
	format(data,sizeof(data), "SELECT `uid` FROM `data_przedmioty` WHERE `owneruid` = '%d' and `var1` = '%d' or `var1` = '%d' and `uid` = '%d'", PlayerData[playerid][pUID], TYPE_ITEM_TELEFON, TYPE_ITEM_TELEFON_VIP, PlayerData[playerid][pSelectItemUID]);
	mysql_query(data);
	mysql_store_result();
	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>i", uidddddd);
		return uidddddd;
	}
	return 0;
}

stock CreatePlayerItem(playerid, przedmiot[], var1 = 0, var2 = 0, var3 = 0, var4 = 0, var5 = 0, var6 = 0)
{
	new data[300];
	format(data,sizeof(data),"INSERT INTO `data_przedmioty` SET `owneruid`='%d', `przedmiot`='%s', `var1`='%d', `var2`='%d', `var3`='%d', `var4`='%d', `var5`='%d', `var6`='%d'",
    PlayerData[playerid][pUID],
	przedmiot,
	var1,
	var2,
	var3,
	var4,
	var5,
	var6
	);
	mysql_query(data);
	return 1;
}

stock UsePlayerItem(playerid, uid)
{
	new data[300], get_uid, get_owneruid, get_przedmiot[30], get_use, get_var1, get_var2, get_var3, get_var4, get_var5, get_var6;
	format(data,sizeof(data),"SELECT * FROM `data_przedmioty` where `uid` = '%d' ORDER BY `uid` ASC", uid);
    mysql_query(data);
	mysql_store_result();

	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>iis[30]iiiiiii", get_uid, get_owneruid, get_przedmiot, get_use, get_var1, get_var2, get_var3, get_var4, get_var5, get_var6);
		
		//format(data,sizeof(data),"data uid: %d, uid: %d, var1: %d", PlayerData[playerid][pSelectItemUID], get_uid, get_var1);
		//SendClientMessage(playerid, -1, data);
		
		
		switch(get_var1)
		{
			case TYPE_ITEM_TELEFON:
			{
				if(get_use == 0) PlayerTelefon1(playerid, 2);
				//if(get_use != 0) PlayerTelefon1(playerid, 3);
			}
			case TYPE_ITEM_TELEFON_VIP:
			{
				if(get_use == 0) PlayerTelefon1(playerid, 2);
				//if(get_use != 0) PlayerTelefon1(playerid, 3);
			}
			case TYPE_ITEM_DOLADOWANIE_150:
			{
				new uuid = -1, varr1 = -1;
				format(data,sizeof(data), "SELECT `uid`, `var1` FROM `data_przedmioty` WHERE `owneruid` = '%d' and `var1` = '%d' or `var1` = '%d'", PlayerData[playerid][pUID], TYPE_ITEM_TELEFON, TYPE_ITEM_TELEFON_VIP);
				mysql_query(data);
				mysql_store_result();
				while(mysql_fetch_row(data))
				{
					sscanf(data, "p<|>ii", uuid, varr1);
				}
				if(varr1 != -1 && uuid != -1)
				{
					format(data,sizeof(data), "UPDATE `data_przedmioty` set `var3` = `var3` + '%d' where `uid` = '%d'", 150, uuid );
					mysql_query(data);
					DestroyPlayerItem(uid);
					SendClientMessage(playerid, -1, "{a4a4a4}Telefon zostal doladowany wartoscia $150.");
				}
				else
				{
					SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz telefonu, nie mozesz tego zrobic.");
				}
			}
			case TYPE_ITEM_DOLADOWANIE_25:
			{
				new uuid = -1, varr1 = -1;
				format(data,sizeof(data), "SELECT `uid`, `var1` FROM `data_przedmioty` WHERE `owneruid` = '%d' and `var1` = '%d' or `var1` = '%d'", PlayerData[playerid][pUID], TYPE_ITEM_TELEFON, TYPE_ITEM_TELEFON_VIP);
				mysql_query(data);
				mysql_store_result();
				while(mysql_fetch_row(data))
				{
					sscanf(data, "p<|>ii", uuid, varr1);
				}
				if(varr1 != -1 && uuid != -1)
				{
					format(data,sizeof(data), "UPDATE `data_przedmioty` set `var3` = `var3` + '%d' where `uid` = '%d'", 25, uuid );
					mysql_query(data);
					DestroyPlayerItem(uid);
					SendClientMessage(playerid, -1, "{a4a4a4}Telefon zostal doladowany wartoscia $25.");
				}
				else
				{
					SendClientMessage(playerid, -1, "{a4a4a4}Nie posiadasz telefonu, nie mozesz tego zrobic.");
				}
			}
			case TYPE_ITEM_DISCMAN:
			{
				if(get_use == 0)
				{
					ShowMenuStacjeRadiowe(playerid);
				}
				else
				{
					StopAudioStreamForPlayer(playerid);
					UpdateUsePlayerItem(uid, 0);
				}
			}
			case TYPE_ITEM_CBRADIO:
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(vehicleid == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Musisz byc w pojezdzie do ktorego chcesz zamontowac cbradio.");
				if(VehicleData[vehicleid][vCBRadio] != 0) return SendClientMessage(playerid, -1, "{a4a4a4}Pojazd ten ma juz zamontowane cb radio.");
				VehicleData[vehicleid][vCBRadio] = 1;
				format(data,sizeof(data),"{C2A2DA}*%s wyciaga cbradio i zaczyna montowac je w pojezdzie %s.", PlayerData[playerid][pName], CarList[GetVehicleModel(vehicleid)-400]);
				SCMIC(playerid, 10, -1, data);
				DestroyPlayerItem(uid);
			}
			case TYPE_ITEM_JEDZENIE:
			{
				if(get_var2 != 0)
				{
					PlayerData[playerid][pGlod] += get_var2;
					format(data,sizeof(data),"{C2A2DA}*%s spozywa %s", PlayerData[playerid][pName], get_przedmiot);
					SCMIC(playerid, 10, -1, data);
				}
				if(get_var3 != 0)
				{
					PlayerData[playerid][pSen] += get_var3;
					format(data,sizeof(data),"{C2A2DA}*%s wypija %s", PlayerData[playerid][pName], get_przedmiot);
					SCMIC(playerid, 10, -1, data);
				}
				SetPlayerDrunkLevel(playerid, 0);
				DestroyPlayerItem(uid);
			}
			case TYPE_ITEM_NAPRAWCZY:
			{
				new vehicleid = GetPlayerVehicleID(playerid), Float:hp;
				GetVehicleHealth(vehicleid, hp);
							
				if(vehicleid == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Musisz byc w pojezdzie, aby uzyc zestawu.");
				if(hp > 350) return SendClientMessage(playerid, -1, "{a4a4a4}Pojazd ktory chcesz naprawic ma ponad 350hp.");

				VehicleData[vehicleid][vNaprawy] += 1000-hp;
				SetVehicleHealth(vehicleid, 1000);
				DestroyPlayerItem(uid);
			}
			case TYPE_ITEM_NARKOTYK:
			{
				switch(get_var2)
				{
					case 1: // Marihuana
					{
						SendClientMessage(playerid, -1, "{a4a4a4}Jestes pod wplywem narkotyku marihuany, wten wsposob masz zawroty glowy.");
						SetPlayerSpecialAction(playerid, 21);
						SetPlayerWeather(playerid, 200);
						SetPlayerDrunkLevel(playerid, 10000);
					}
					case 2: // Haszysz
					{
						SendClientMessage(playerid, -1, "{a4a4a4}Jestes pod wplywem narkotyku haszysz, wten wsposob masz zawroty glowy.");
						SetPlayerSpecialAction(playerid, 21);
						SetPlayerWeather(playerid, 356);
						SetPlayerDrunkLevel(playerid, 10000);
					}
					case 3: //Kokaina
					{
						SendClientMessage(playerid, -1, "{a4a4a4}Jestes pod wplywem narkotyku kokainy, wten wsposob masz zawroty glowy.");
						SetPlayerSpecialAction(playerid, 21);
						SetPlayerWeather(playerid, 247);
						SetPlayerDrunkLevel(playerid, 10000);
					}
				}
				PlayerData[playerid][pStanNarko]++;
				if(PlayerData[playerid][pStanNarko] >= 3)
				{
					new randoooom = random(3), str[128];
					if(randoooom == 2)
					{
						SetPlayerHealth(playerid, 0);
						format(str,sizeof(str),"{a4a4a4}Przedawkowales ilosc zazytych narkotykow (lacznie: %d) w ten sposob jestes nieprzytomny.", PlayerData[playerid][pStanNarko]);
						SendClientMessage(playerid, -1, data);
					}
				}
				DestroyPlayerItem(uid);
			}
			
			case TYPE_ITEM_OPONA:
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if(vehicleid == 0) return SendClientMessage(playerid, -1, "{a4a4a4}Musisz byc w pojezdzie, aby uzyc zestawu.");
				ShowPlayerDialog(playerid, DIALOG_NAPRAW_OPONE, DIALOG_STYLE_LIST, "Opcje:", "Przod lewy\nPrzod prawy (motor = przod)\nTyl lewy\nTyl prawy (motor = tylnia)", "Wybierz", "Zamknij");
			}
			case TYPE_ITEM_CZAPKA:
			{
				if(get_use == 0)
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
					SetPlayerAttachedObject(playerid, 1, 19065, 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
					UpdateUsePlayerItem(uid, 1);
				}
				else
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
					UpdateUsePlayerItem(uid, 0);
				}
			}
			case TYPE_ITEM_KASK:
			{
				if(get_use == 0)
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
					SetPlayerAttachedObject(playerid,1,18976+random(3),2,0.05,0.01,0.00,3.0,82.0,87.0,1.00,1.00,1.00);
					UpdateUsePlayerItem(uid, 1);
				}
				else
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
					UpdateUsePlayerItem(uid, 0);
				}
			}
			case TYPE_ITEM_SPADOCHRON:
			{
				if(get_use == 1)
				{
					RemovePlayerWeapon(playerid, 46);
					UpdateUsePlayerItem(uid, 0);
				}
				else
				{
					GivePlayerWeaponEx(playerid, 46, 1);
					UpdateUsePlayerItem(uid, 1);
				}
			}
			case TYPE_ITEM_KAMIZELKA:
			{
				if(PlayerData[playerid][pFrakcja] != get_var4 && get_var4 != -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz uzywac kamizelki dlatego, ze nie jestes w frakcji podpisanej pod ta kamizelke.");
				if(get_use == 0)
				{
					if(GetUsedItems(PlayerData[playerid][pUID], TYPE_ITEM_KAMIZELKA, -1)) return SendClientMessage(playerid, -1, "{a4a4a4}Uzywasz juz aktualnie kamizelki tego typu."); 
					
					
				
					SetPlayerArmour(playerid, get_var3);
					UpdateUsePlayerItem(uid, 1);
				}
				else
				{
					new Float:armour;
					GetPlayerArmour(playerid, armour);
					SetPlayerArmour(playerid, 0.0);
					
					UpdateUsePlayerItem(uid, 0, get_var2, floatround(armour));
				}
			}
			case TYPE_ITEM_BRON:
			{
				if(PlayerData[playerid][pFrakcja] != get_var4 && get_var4 != -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz uzywac broni dlatego, ze nie jestes w frakcji podpisanej pod ta bron.");
				if(get_use == 0)
				{
					if(GetUsedItems(PlayerData[playerid][pUID], TYPE_ITEM_BRON, get_var2)) return SendClientMessage(playerid, -1, "{a4a4a4}Uzywasz juz aktualnie broni tego typu."); 
					
					
					format(data,sizeof(data),"{C2A2DA}*%s wyciaga bron %s", PlayerData[playerid][pName],  get_przedmiot);
					SCMIC(playerid, 10, -1, data);
					GivePlayerWeaponEx(playerid, get_var2, get_var3);
					UpdateUsePlayerItem(uid, 1);
				}
				else
				{
					format(data,sizeof(data),"{C2A2DA}*%s chowa bron %s", PlayerData[playerid][pName],  get_przedmiot);
					SCMIC(playerid, 10, -1, data);
					
					new weapons[13], ammo[13];
					for(new i = 0; i < 13; i++) 
					{
						GetPlayerWeaponData(playerid, i, weapons[i], ammo[i]);
						if(weapons[i] == get_var2)
						{
							get_var3 = ammo[i];
						}
					}
					if(get_var3 <= 0) get_var3 = 1;
					RemovePlayerWeapon(playerid, get_var2);
					UpdateUsePlayerItem(uid, 0, get_var2, get_var3);
				}
			}
			case TYPE_ITEM_UBRANIE:
			{
				if(PlayerData[playerid][pFrakcja] != get_var3 && get_var3 != -1) return SendClientMessage(playerid, -1, "{a4a4a4}Nie mozesz przebrac sie w te ubranie, jest ono podpisano pod frakcje do ktorej nie nalezysz.");
				if(PlayerData[playerid][pSluzba] == true) return SendClientMessage(playerid, -1, "{A4a4a4}Nie mozesz sie teraz przebierac, gdyz prowadzic sluzbe frakcyjna.");
				
				if(get_use == 0)
				{
					if(GetUsedItems(PlayerData[playerid][pUID], TYPE_ITEM_UBRANIE, -1)) return SendClientMessage(playerid, -1, "{a4a4a4}Uzywasz juz jednego ubrania, sciagnij je najpierw.");
					
					
					
					SetPlayerSkin(playerid, get_var2);
					UpdateUsePlayerItem(uid, 1);
				}
				else
				{
					SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
					UpdateUsePlayerItem(uid, 0);
				}
			}
		}
	}
	return 1;
}


stock GetValuePlayerItems(owneruid)
{
	new licz = 0, data[200], any_shittttttttt;
	format(data,sizeof(data), "SELECT `uid` FROM `data_przedmioty` WHERE `owneruid` = '%d'", owneruid);
	mysql_query(data);
	mysql_store_result();
	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>i", any_shittttttttt);
		licz++;
	}
	return licz;
}


stock GetUsedItems(owneruid, type, var)
{
	new useeeeee, data[250];
	if(var != -1)
	{
		format(data,sizeof(data), "SELECT `use` FROM `data_przedmioty` WHERE `owneruid` = '%d' and `var1` = '%d' and `var2` = '%d'", owneruid, type, var);
		mysql_query(data);
		mysql_store_result();
		while(mysql_fetch_row(data))
		{
			sscanf(data, "p<|>i", useeeeee);
			if(useeeeee == 1) 
			{
				return 1;
			}
		}
	}
	else
	{
		format(data,sizeof(data), "SELECT `use` FROM `data_przedmioty` WHERE `owneruid` = '%d' and `var1` = '%d'", owneruid, type);
		mysql_query(data);
		mysql_store_result();
		while(mysql_fetch_row(data))
		{
			sscanf(data, "p<|>i", useeeeee);
			if(useeeeee == 1) 
			{
				return 1;
			}
		}
	}
	return 0;
}

stock CheckUsedItems(playerid)
{
	new data[300], get_uid, get_owneruid, get_przedmiot[30], get_use, get_var1, get_var2, get_var3, get_var4, get_var5, get_var6;
	format(data,sizeof(data),"SELECT * FROM `data_przedmioty` where `owneruid` = '%d' and `use` = '1' ORDER BY `uid` ASC", PlayerData[playerid][pUID]);
    mysql_query(data);
	mysql_store_result();

	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>iis[30]iiiiiii", get_uid, get_owneruid, get_przedmiot, get_use, get_var1, get_var2, get_var3, get_var4, get_var5, get_var6);
		
		switch(get_var1)
		{
			case TYPE_ITEM_CZAPKA:
			{
				if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
				SetPlayerAttachedObject(playerid, 1, 19065, 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
			}
			case TYPE_ITEM_KASK:
			{
				if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
				SetPlayerAttachedObject(playerid,1,18976+random(3),2,0.05,0.01,0.00,3.0,82.0,87.0,1.00,1.00,1.00);
			}
			case TYPE_ITEM_SPADOCHRON:
			{
				GivePlayerWeaponEx(playerid, 46, 1);
			}
			case TYPE_ITEM_BRON:
			{
				GivePlayerWeaponEx(playerid, get_var2, get_var3);
			}
			case TYPE_ITEM_UBRANIE:
			{
				SetPlayerSkin(playerid, get_var2);
			}
		}
	}
	return 1;
}


stock SaveUsedItemsGuns(playerid)
{
	new data[300], get_uid, get_owneruid, get_przedmiot[30], get_use, get_var1, get_var2, get_var3, get_var4, get_var5, get_var6;
	format(data,sizeof(data),"SELECT * FROM `data_przedmioty` where `owneruid` = '%d' and `use` = '%d' and `var1` = '%d' ORDER BY `uid` ASC", PlayerData[playerid][pUID], 1, TYPE_ITEM_BRON);
    mysql_query(data);
	mysql_store_result();

	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>iis[30]iiiiiii", get_uid, get_owneruid, get_przedmiot, get_use, get_var1, get_var2, get_var3, get_var4, get_var5, get_var6);
		
		new weapons[13], ammo[13];
		for(new i = 0; i < 13; i++) 
		{
			GetPlayerWeaponData(playerid, i, weapons[i], ammo[i]);
			if(weapons[i] == get_var2)
			{
				get_var3 = ammo[i];
			}
		}
		if(get_var3 <= 0) get_var3 = 1;
		RemovePlayerWeapon(playerid, get_var2);
		UpdateUsePlayerItem(get_uid, 1, get_var2, get_var3);
	}
	return 1;
}


stock DestroyPlayerItem(uid)
{
	new data[200];
	format(data, sizeof(data), "DELETE FROM `data_przedmioty` WHERE `uid` = '%d'", uid);
	mysql_query(data);
	return 1;
}
stock DestroyPlayerItems(playerid, typee)
{
	new data[200];
	format(data, sizeof(data), "DELETE FROM `data_przedmioty` WHERE `var1` = '%d' and `owneruid` = '%d'", typee, PlayerData[playerid][pUID]);
	mysql_query(data);
	return 1;
}

stock UpdateUsePlayerItem(uid, usee, vvar2 = 0, vvar3 = 0, vvar4 = 0, vvar5 = 0, vvar6 = 0)
{
	new data[200];
	format(data,sizeof(data), "UPDATE `data_przedmioty` set `use` = '%d' where `uid` = '%d'", usee, uid );
	mysql_query(data);
	
	if(vvar2 != 0)
	{
		format(data,sizeof(data), "UPDATE `data_przedmioty` set `var2` = '%d' where `uid` = '%d'", vvar2, uid );
		mysql_query(data);
	}
	if(vvar3 != 0)
	{
		format(data,sizeof(data), "UPDATE `data_przedmioty` set `var3` = '%d' where `uid` = '%d'", vvar3, uid );
		mysql_query(data);
	}
	if(vvar4 != 0)
	{
		format(data,sizeof(data), "UPDATE `data_przedmioty` set `var4` = '%d' where `uid` = '%d'", vvar4, uid );
		mysql_query(data);
	}
	if(vvar5 != 0)
	{
		format(data,sizeof(data), "UPDATE `data_przedmioty` set `var5` = '%d' where `uid` = '%d'", vvar5, uid );
		mysql_query(data);
	}
	if(vvar6 != 0)
	{
		format(data,sizeof(data), "UPDATE `data_przedmioty` set `var6` = '%d' where `uid` = '%d'", vvar6, uid );
		mysql_query(data);
	}
	return 1;
}

stock BlockCMD(playerid, komenda[], czas)
{
    PlayerData[playerid][pBlockCMD] = 666999666;
	if(GetPVarInt(playerid,komenda) > gettime())
	{
	    new trolo = GetPVarInt(playerid,komenda) - gettime(), data[128];
	    format(data,sizeof(data),"Musisz odczekac jeszcze %02d:%02d minut, aby uzyc tej komendy.", trolo/60, trolo);
		SendClientMessage(playerid, -1, data);
		return 1;
	}
	SetPVarInt(playerid,komenda,gettime()+czas);
	return PlayerData[playerid][pBlockCMD] = -1;
}


stock GetPlayerViatoll(playerid, Float:range)
{
	for(new i = 0; i != viatoll_value; i++)
	{
		if(ViatollData[i][vAktywny] == 1 && IsPlayerInRangeOfPoint(playerid, range, ViatollData[i][vPos][0], ViatollData[i][vPos][1], ViatollData[i][vPos][2]))
		{
			return i;
		}
	}
	return -1;
}

stock GetPlayerFotoradar(playerid, Float:range)
{
	for(new i = 0; i != foto_value; i++)
	{
		if(FotoData[i][fAktywny] == 1 && IsPlayerInRangeOfPoint(playerid, range, FotoData[i][fPos][0], FotoData[i][fPos][1], FotoData[i][fPos][2]))
		{
			return i;
		}
	}
	return -1;
}


stock GetPlayerGym(playerid, Float:range)
{
	for(new i = 0; i != gym_value; i++)
	{
        if(GymData[i][gAktywny] == 1)
        {
            if(IsPlayerInRangeOfPoint(playerid, range, GymData[i][gPos][0], GymData[i][gPos][1], GymData[i][gPos][2]))
            {
                return i;
            }
        }
	}
	return -1;
}

stock GetPlayerGateTerminal(playerid, Float:range)
{
	for(new i = 0; i < gates_value; i++)
	{
        if(GateData[i][gAktywny] == 1)
        {
            if(IsPlayerInRangeOfPoint(playerid, range, GateData[i][gPos][12], GateData[i][gPos][13], GateData[i][gPos][14]))
            {
                return i;
            }
        }
	}
	return -1;
}

stock GetPlayerGateTerminalVehicle(playerid, Float:range)
{
	if(IsPlayerInAnyVehicle(playerid)) {
		for(new i = 0; i < gates_value; i++) {
    	    if(GateData[i][gAktywny] == 1) {
    	        if(IsPlayerInRangeOfPoint(playerid, range, GateData[i][gPos][0], GateData[i][gPos][1], GateData[i][gPos][2])) {
    	            return i;
    	        }
    	    }
		}
	}
	return -1;
}


stock GPCTDJ(playerid)
	return Streamer_GetItemStreamerID(playerid, STREAMER_TYPE_OBJECT, GetPlayerCameraTargetObject(playerid));


stock GetPlayerObiekt(playerid, Float:range, objectid_have = 0)
{
	new get_objectid  = GPCTDJ(playerid), Float:ox, Float:oy, Float:oz;
	GetDynamicObjectPos(get_objectid, ox, oy, oz);
		
	if(objectid_have != 0) 
	{
		get_objectid = objectid_have;
		GetDynamicObjectPos(get_objectid, ox, oy, oz);
	}
	
	for(new b = 1; b < obiekt_value; b++)
	{
		if(ObjectData[b][bAktywny] == 0) continue;
		if(ObjectData[b][oObject] != get_objectid && get_objectid != 0) continue;
		if(!IsPlayerInRangeOfPoint(playerid, range, ox, oy, oz) && get_objectid != 0) continue;
		if(!IsPlayerInRangeOfPoint(playerid, range, ObjectData[b][bPos][0], ObjectData[b][bPos][1], ObjectData[b][bPos][2]) && get_objectid == 0) continue;
		if(ObjectData[b][bUID] == 0) continue;
		if(ObjectData[b][bAktywny] == 0) continue;
		if(ox != ObjectData[b][bPos][0] && get_objectid != 0) continue;
		if(oy != ObjectData[b][bPos][1] && get_objectid != 0) continue;
		if(oz != ObjectData[b][bPos][2] && get_objectid != 0) continue;

		return b;
	}	
	return -1;
}




stock LoadFirmy()
{
	new i = 1, data[500];
	
	
	mysql_query("SELECT * FROM `data_firmy` ORDER BY `uid` ASC");
	mysql_store_result();

	while(mysql_fetch_row(data))
	{
		sscanf(data, "p<|>is[30]iis[24]iiiii",
		FirmaData[i][fUID],
		FirmaData[i][fName],
		FirmaData[i][fAktywny],
		FirmaData[i][fOwnerUID],
		FirmaData[i][fOwner],
		FirmaData[i][fSaldo],
		FirmaData[i][fLevel],
		FirmaData[i][fExp],
		FirmaData[i][fTowary],
		FirmaData[i][fPeople]
		);
		
		printf("[FIRMY] uid %d nazwa %s aktywny %d owneruid %d owner %s saldo %d lvl %d exp %d towary %d pracownicy %d", 
		i,
		FirmaData[i][fName],
		FirmaData[i][fAktywny],
		FirmaData[i][fOwnerUID],
		FirmaData[i][fOwner],
		FirmaData[i][fSaldo],
		FirmaData[i][fLevel],
		FirmaData[i][fExp],
		FirmaData[i][fTowary],
		FirmaData[i][fPeople]
		);
		
		i++;
		firma_value++;
	}
	mysql_free_result();
	return 1;
}

stock SaveFirma(uid)
{
	if(uid == 0) return 1;
	if(uid == -1) return 1;
	
	new data[500];
	format(data,sizeof(data), "UPDATE `data_firmy` set `nazwa` = '%s' where `uid` = '%d'", 			FirmaData[uid][fName],        	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_firmy` set `aktywny` = '%d' where `uid` = '%d'", 		FirmaData[uid][fAktywny],         uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_firmy` set `owneruid` = '%d' where `uid` = '%d'", 		FirmaData[uid][fOwnerUID],        uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_firmy` set `owner` = '%s' where `uid` = '%d'", 			FirmaData[uid][fOwner],        	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_firmy` set `saldo` = '%d' where `uid` = '%d'", 			FirmaData[uid][fSaldo],        	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_firmy` set `level` = '%d' where `uid` = '%d'", 			FirmaData[uid][fLevel],        	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_firmy` set `exp` = '%d' where `uid` = '%d'", 			FirmaData[uid][fExp],        	  uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_firmy` set `towary` = '%d' where `uid` = '%d'", 		FirmaData[uid][fTowary],          uid), mysql_query(data);
	format(data,sizeof(data), "UPDATE `data_firmy` set `pracownikow` = '%d' where `uid` = '%d'", 	FirmaData[uid][fPeople],          uid), mysql_query(data);
	return 1;
}




new PoziomyFirm[MAX_FIRMA_LEVEL + 1] =
{
    0,
    100,
	200,
	300,
	400,
	500,
	600,
	700,
	800,
	900,
	1000,
	1100,
	1200,
	1300,
	1400,
	1500,
	1600,
	1700,
	1800,
	1900,
	2000,
	2100,
	2200,
	2300,
	2400
};


stock GiveFirmaExp(i, give)
{
	FirmaData[i][fExp] += give;
	SetLevelFirma(i);
	return 1;
}


stock GetNextExpToLevelFirma(uid)
{
	return FirmaData[uid][fLevel] == MAX_FIRMA_LEVEL ? PoziomyFirm[MAX_FIRMA_LEVEL]:PoziomyFirm[FirmaData[uid][fLevel]+1];
}

stock SetLevelFirma(i)
{
	if(FirmaData[i][fLevel] == MAX_FIRMA_LEVEL) return 1;

	new x=0, pp = FirmaData[i][fLevel];
	for(new p = 1; p <= MAX_FIRMA_LEVEL; p++)
	{
		if(FirmaData[i][fExp] >= PoziomyFirm[p] && FirmaData[i][fLevel] != p)
		{
			if(pp < p) x++;
			FirmaData[i][fLevel] = p;
			if(p == MAX_FIRMA_LEVEL)
			{
				FirmaData[i][fExp] = PoziomyFirm[MAX_FIRMA_LEVEL];
				break;
			}
			else
			{
				if(FirmaData[i][fExp] < PoziomyFirm[p+1])
				{
					break;
				}
			}
		}
	}
	return 1;
}



 stock ProcentKwoty(kwota, procent)
{
	return (kwota / 100) * procent;
}


stock GivePlayerWeaponEx(playerid, w, ammo)
{
	new gunname[32];
	GetWeaponName(w, gunname, sizeof(gunname));
	new kurwa = GetPVarInt(playerid, gunname) +ammo;
	if(w == 1 || w == 2 || w == 3 || w == 4 || w == 5 || w == 6 || w == 7 || w == 8 || w == 9)
	{
		SetPlayerAmmo(playerid, 1, 0);
		SetPlayerAmmo(playerid, 2, 0);
		SetPlayerAmmo(playerid, 3, 0);
		SetPlayerAmmo(playerid, 4, 0);
		SetPlayerAmmo(playerid, 5, 0);
		SetPlayerAmmo(playerid, 6, 0);
		SetPlayerAmmo(playerid, 7, 0);
		SetPlayerAmmo(playerid, 8, 0);
		SetPlayerAmmo(playerid, 9, 0);
		SetPVarInt(playerid, "Brass Knuckles", 0);
		SetPVarInt(playerid, "Golf Club", 0);
		SetPVarInt(playerid, "Nightstick", 0);
		SetPVarInt(playerid, "Knife", 0);
		SetPVarInt(playerid, "Baseball Bat", 0);
		SetPVarInt(playerid, "Shovel", 0);
		SetPVarInt(playerid, "Pool Cue", 0);
		SetPVarInt(playerid, "Katana", 0);
		SetPVarInt(playerid, "Chainsaw", 0);
	}
	if(w == 10 || w == 11 || w == 12 || w == 13 || w == 14 || w == 15)
	{
		SetPlayerAmmo(playerid, 10, 0);
		SetPlayerAmmo(playerid, 11, 0);
		SetPlayerAmmo(playerid, 12, 0);
		SetPlayerAmmo(playerid, 13, 0);
		SetPlayerAmmo(playerid, 14, 0);
		SetPlayerAmmo(playerid, 15, 0);
		SetPVarInt(playerid, "Purple Dildo", 0);
		SetPVarInt(playerid, "Dildo", 0);
		SetPVarInt(playerid, "Vibrator", 0);
		SetPVarInt(playerid, "Silver Vibrator", 0);
		SetPVarInt(playerid, "Flowers", 0);
		SetPVarInt(playerid, "Cane", 0);
	}
	if(w == 16 || w == 17 || w == 18)
	{
		SetPlayerAmmo(playerid, 16, 0);
		SetPlayerAmmo(playerid, 17, 0);
		SetPlayerAmmo(playerid, 18, 0);
		SetPVarInt(playerid, "Grenade", 0);
		SetPVarInt(playerid, "Tear Gas", 0);
		SetPVarInt(playerid, "Molotov Cocktail", 0);
	}
	if(w == 22 || w == 23 || w == 24)
	{
		SetPlayerAmmo(playerid, 22, 0);
		SetPlayerAmmo(playerid, 23, 0);
		SetPlayerAmmo(playerid, 24, 0);
		SetPVarInt(playerid, "9mm", 0);
		SetPVarInt(playerid, "Silenced 9mm", 0);
		SetPVarInt(playerid, "Desert Eagle", 0);
	}
	if(w == 25 || w == 26 || w == 27)
	{
		SetPlayerAmmo(playerid, 25, 0);
		SetPlayerAmmo(playerid, 26, 0);
		SetPlayerAmmo(playerid, 27, 0);
		SetPVarInt(playerid, "Shotgun", 0);
		SetPVarInt(playerid, "Sawnoff Shotgun", 0);
		SetPVarInt(playerid, "Combat Shotgun", 0);
	}
	if(w == 28 || w == 29 || w == 32)
	{
		SetPlayerAmmo(playerid, 28, 0);
		SetPlayerAmmo(playerid, 29, 0);
		SetPlayerAmmo(playerid, 32, 0);
		SetPVarInt(playerid, "UZI", 0);
		SetPVarInt(playerid, "MP5", 0);
		SetPVarInt(playerid, "Tec9", 0);
	}
	if(w == 30 || w == 31)
	{
		SetPlayerAmmo(playerid, 30, 0);
		SetPlayerAmmo(playerid, 31, 0);
		SetPVarInt(playerid, "AK47", 0);
		SetPVarInt(playerid, "M4", 0);
	}
	if(w == 33 || w == 34)
	{
		SetPlayerAmmo(playerid, 33, 0);
		SetPlayerAmmo(playerid, 34, 0);
		SetPVarInt(playerid, "Country Rifle", 0);
		SetPVarInt(playerid, "Sniper Rifle", 0);
	}
	if(w == 35 || w == 36 || w == 37 || w == 38)
	{
		SetPlayerAmmo(playerid, 35, 0);
		SetPlayerAmmo(playerid, 36, 0);
		SetPlayerAmmo(playerid, 37, 0);
		SetPlayerAmmo(playerid, 38, 0);
		SetPVarInt(playerid, "RPG", 0);
		SetPVarInt(playerid, "HS Rocket", 0);
		SetPVarInt(playerid, "Flamethrower", 0);
		SetPVarInt(playerid, "Minigun", 0);
	}
	if(w == 39 || w == 41 || w == 42 || w == 43)
	{
		SetPlayerAmmo(playerid, 39, 0);
		SetPlayerAmmo(playerid, 41, 0);
		SetPlayerAmmo(playerid, 42, 0);
		SetPlayerAmmo(playerid, 43, 0);
		SetPVarInt(playerid, "Satchel Charge", 0);
		SetPVarInt(playerid, "Bomb", 9999);
		SetPVarInt(playerid, "Spraycan", 0);
		SetPVarInt(playerid, "Fire Extinguisher", 0);
		SetPVarInt(playerid, "Camera", 0);
	}
	if(w == 44 || w == 45 || w == 46)
	{
		SetPlayerAmmo(playerid, 44, 0);
		SetPlayerAmmo(playerid, 45, 0);
		SetPlayerAmmo(playerid, 46, 0);
		SetPVarInt(playerid, "Night Vis Goggles", 0);
		SetPVarInt(playerid, "Thermal Goggles", 0);
		SetPVarInt(playerid, "Parachute", 0);
	}
	SetPVarInt(playerid, gunname, kurwa);
	GivePlayerWeapon(playerid, w, kurwa);
	
	return 1;
}



stock ResetPlayerWeaponsEx(playerid)
{
	ResetPlayerWeapons(playerid);
	SetPVarInt(playerid, "Brass Knuckles", 0);
	SetPVarInt(playerid, "Golf Club", 0);
	SetPVarInt(playerid, "Nite Stick", 0);
	SetPVarInt(playerid, "Knife", 0);
	SetPVarInt(playerid, "Baseball Bat", 0);
	SetPVarInt(playerid, "Shovel", 0);
	SetPVarInt(playerid, "Pool Cue", 0);
	SetPVarInt(playerid, "Katana", 0);
	SetPVarInt(playerid, "Chainsaw", 0);
	SetPVarInt(playerid, "Heat Seaker", 0);
	SetPVarInt(playerid, "Dildo", 0);
	SetPVarInt(playerid, "Vibrator", 0);
	SetPVarInt(playerid, "Flowers", 0);
	SetPVarInt(playerid, "Cane", 0);
	SetPVarInt(playerid, "Teargas", 0);
	SetPVarInt(playerid, "Bomb", 9999);
	SetPVarInt(playerid, "HS Rocket", 0);
	SetPVarInt(playerid, "Flamethrower", 0);
	SetPVarInt(playerid, "Satchel Explosives", 0);
	SetPVarInt(playerid, "Spray Can", 0);
	SetPVarInt(playerid, "Fire Extinguisher", 0);
	SetPVarInt(playerid, "Camera", 0);
	SetPVarInt(playerid, "Night Vis Goggles", 0);
	SetPVarInt(playerid, "Thermal Goggles", 0);
	SetPVarInt(playerid, "Grenade", 0);
	SetPVarInt(playerid, "Molotov Cocktail", 0);
	SetPVarInt(playerid, "Colt 45", 0);
	SetPVarInt(playerid, "Silenced Pistol", 0);
	SetPVarInt(playerid, "Desert Eagle", 0);
	SetPVarInt(playerid, "Shotgun", 0);
	SetPVarInt(playerid, "Sawn-off Shotgun", 0);
	SetPVarInt(playerid, "Combat Shotgun", 0);
	SetPVarInt(playerid, "UZI", 0);
	SetPVarInt(playerid, "MP5", 0);
	SetPVarInt(playerid, "AK47", 0);
	SetPVarInt(playerid, "M4", 0);
	SetPVarInt(playerid, "Tec9", 0);
	SetPVarInt(playerid, "Rifle", 0);
	SetPVarInt(playerid, "Sniper Rifle", 0);
	SetPVarInt(playerid, "Rocket Launcher", 0);
	SetPVarInt(playerid, "Minigun", 0);
	ResetPlayerWeapons(playerid);
	return 1;
}

stock CheckWeaponHack(playerid, weapon)
{
	new weap = GetPlayerWeapon(playerid);
	new ammo = GetPlayerAmmo(playerid);
	if(weap == 0) return 1; 
	
	new weapname[40];
	GetWeaponName(weapon, weapname, sizeof(weapname));
	if(GetPVarInt(playerid, weapname) <=0)
	{
		new l_str[50];
		format(l_str, sizeof(l_str), "Spawned weapon %s %d/%d/%d", weapname, weapon, ammo, GetPVarInt(playerid, weapname));
		Baned(playerid, -1, l_str, PlayerData[playerid][pIP], "0");
		return 1;
	}
	if(GetPVarInt(playerid, weapname)+4 < ammo)
	{
		new l_str[50];
		format(l_str, sizeof(l_str), "Spawned ammo %s %d/%d/%d", weapname, weapon, ammo, GetPVarInt(playerid, weapname));
		KickTimer(playerid, -1, l_str);
	}
	return 1;
}


stock LoadVeh()
{
    new query[512];
    new VehTemp[e_vehicles];
    new sampid;
	format(query, sizeof(query), "SELECT * FROM `data_vehicles`");
	mysql_query(query);
	
	mysql_store_result();
	
	while(mysql_fetch_row(query, "|"))
	{
		sscanf(query, "p<|>ddddds[24]dfs[31]fdfddddddddfffffddddd",
			VehTemp[vUID],	
			sampid,	
			VehTemp[vAktywny],	
			VehTemp[vPrivateCar],	
			VehTemp[vOwnerUID],	
			VehTemp[vOwner],		
			VehTemp[vModel],		
			VehTemp[vHP],			
			VehTemp[vRegister],	
			VehTemp[vPaliwo],		
			VehTemp[vPaliwoTyp],	
			VehTemp[vPrzebieg],	
			VehTemp[vColor1],		
			VehTemp[vColor2],		
			VehTemp[vPanel],		
			VehTemp[vLights],		
			VehTemp[vTires],		
			VehTemp[vDoors],	
			VehTemp[vLocked],		
			VehTemp[vWheelsBlock],
			VehTemp[vPos][0],		
			VehTemp[vPos][1],		
			VehTemp[vPos][2],		
			VehTemp[vPos][3],		
			VehTemp[vNaprawy],	
			VehTemp[vCBRadio],	
			VehTemp[vFirmyCar],	
			VehTemp[vFrakcjiCar],	
			VehTemp[vZlom],		
			VehTemp[vType]		
		);	
			new vehid = AddStaticVehicleEx(VehTemp[vModel], VehicleData[vehid][vPos][0], VehicleData[vehid][vPos][1], VehicleData[vehid][vPos][2], VehicleData[vehid][vPos][3], VehTemp[vColor1], VehTemp[vColor2], 999999999999999999999, 0);
			VehicleData[vehid][vUID]					=						VehTemp[vUID];				 				
			VehicleData[vehid][vAktywny]				=						VehTemp[vAktywny];			
			VehicleData[vehid][vPrivateCar]				=						VehTemp[vPrivateCar];			
			VehicleData[vehid][vOwnerUID]				=						VehTemp[vOwnerUID];			
			VehicleData[vehid][vOwner]					=						VehTemp[vOwner];				
			VehicleData[vehid][vModel]					=						VehTemp[vModel];				
			VehicleData[vehid][vHP]						=						VehTemp[vHP];						
			VehicleData[vehid][vRegister]				=						VehTemp[vRegister];					
			VehicleData[vehid][vPaliwo]					=						VehTemp[vPaliwo];					
			VehicleData[vehid][vPaliwoTyp]				=						VehTemp[vPaliwoTyp];			
			VehicleData[vehid][vPrzebieg]				=						VehTemp[vPrzebieg];			
			VehicleData[vehid][vColor1]					=						VehTemp[vColor1];					
			VehicleData[vehid][vColor2]					=						VehTemp[vColor2];					
			VehicleData[vehid][vPanel]					=						VehTemp[vPanel];				
			VehicleData[vehid][vLights]					=						VehTemp[vLights];					
			VehicleData[vehid][vTires]					=						VehTemp[vTires];				
			VehicleData[vehid][vDoors]					=						VehTemp[vDoors];			
			VehicleData[vehid][vLocked]					=						VehTemp[vLocked];					
			VehicleData[vehid][vWheelsBlock]			=						VehTemp[vWheelsBlock];		
			VehicleData[vehid][vPos][0]					=						VehTemp[vPos][0];				
			VehicleData[vehid][vPos][1]					=						VehTemp[vPos][1];				
			VehicleData[vehid][vPos][2]					=						VehTemp[vPos][2];				
			VehicleData[vehid][vPos][3]					=						VehTemp[vPos][3];				
			VehicleData[vehid][vNaprawy]				=						VehTemp[vNaprawy];			
			VehicleData[vehid][vCBRadio]				=						VehTemp[vCBRadio];				
			VehicleData[vehid][vFirmyCar]				=						VehTemp[vFirmyCar];			
			VehicleData[vehid][vFrakcjiCar]				=						VehTemp[vFrakcjiCar];			
			VehicleData[vehid][vZlom]					=						VehTemp[vZlom];						
			VehicleData[vehid][vType]					=						VehTemp[vType];
	}
	
	mysql_free_result();
	return 1;
}

stock LoadVehicles(type, type2)  // type = 0 to spawn/unspawn/save ogolnodostepnych, type = 1 to spawn/unspawn/save wszystkich pojazdow   type = 2 to spawn/unspawn/save wszystkich prywatnych aut
{
	#pragma dynamic 16000
	new dataa[500], get_uid, get_sampid, x, i[MAX_VEHICLES][3];
	
	if(type == 0) //TYPE = 0 TYPE2 = 0  = SPAWN OGOLNO DOSTEPNYCH,  TYPE = 0, TYPE2 = 1  = ZAPIS I USUNIECIE OGOLNO DOSTEPNYCH   TYPE = 0, TYPE = 2  = ZAPIS I USUNIECIE OGOLNO DOSTEPNYCH
	{
		format(dataa,sizeof(dataa),"SELECT `uid`, `sampid` FROM `data_vehicles` where `owneruid` = '-1' and `private` = '0' and `zlom` = '0'");
		mysql_query(dataa);
		mysql_store_result();
		
		while(mysql_fetch_row(dataa))
		{
			sscanf(dataa, "p<|>ii", get_uid, get_sampid);
			

			i[x][1] = get_uid;
			i[x][2] = get_sampid;
			
			x++;
		}
		mysql_free_result();
		
		
		for(new j = 0; j != x; j++)
		{
			if(type2 == 0)
			{
				SpawnVehicle(i[j][1]);  //spawn wszystkich!
			}
			if(type2 == 1)
			{
				SaveVehicle(i[j][2], 1); //usuniecie + zapis
			}
			if(type2 == 2)
			{
				SaveVehicle(i[j][2], 0); //zapis
			}
		}
		return 1;
	}
	if(type == 1) // spawn/unspawn/save  = frakcyjne, firmowe, prywatne, ogolno dostepne
	{
		format(dataa,sizeof(dataa),"SELECT `uid`, `sampid` FROM `data_vehicles`");
		mysql_query(dataa);
		mysql_store_result();
		
		while(mysql_fetch_row(dataa))
		{
			sscanf(dataa, "p<|>ii", get_uid, get_sampid);
			

			i[x][1] = get_uid;
			i[x][2] = get_sampid;
			
			x++;
		}
		mysql_free_result();
		
		
		for(new j = 0; j != x; j++)
		{
			if(type2 == 0)
			{
				SpawnVehicle(i[j][1]);  //spawn
			}
			if(type2 == 1)
			{
				SaveVehicle(i[j][2], 1); //usuniecie + zapis
			}
			if(type2 == 2)
			{
				SaveVehicle(i[j][2], 0); //zapis
			}
		}
		return 1;
	}
	if(type == 2) //   spawn/unspawn/save = tylko prywatne pojazdy
	{
		format(dataa,sizeof(dataa),"SELECT `uid`, `sampid` FROM `data_vehicles` where `private` = '1'");
		mysql_query(dataa);
		mysql_store_result();
		
		while(mysql_fetch_row(dataa))
		{
			sscanf(dataa, "p<|>ii", get_uid, get_sampid);
			

			i[x][1] = get_uid;
			i[x][2] = get_sampid;
			
			x++;
		}
		mysql_free_result();
		
		
		for(new j = 0; j != x; j++)
		{
			if(type2 == 0)
			{
				SpawnVehicle(i[j][1]);  //spawn
			}
			if(type2 == 1)
			{
				SaveVehicle(i[j][2], 1); //usuniecie + zapis
			}
			if(type2 == 2)
			{
				SaveVehicle(i[j][2], 0); //zapis
			}
		}
		return 1;
	}
	return 1;
}

forward TimerTaxiLicznik(playerid,player,kwota,vehicleid);
public TimerTaxiLicznik(playerid,player,kwota,vehicleid)
{
	new Float:przejechal = VehicleData[vehicleid][vPrzebiegTaxi], calkowitykoszt = kwota * floatround(przejechal);
	if(PlayerData[player][pLogged]==false)
	{
		SendClientMessage(playerid,-1,"{a4a4a4}Klient wyszedl z serwera.");
		KillTimer(PlayerData[player][pTimerLicznikTaxi]);
		GivePlayerCash(player, -calkowitykoszt);
		GiveFrakcjaCash(PlayerData[playerid][pFrakcja], calkowitykoszt);
		PlayerLicznikTaxi(playerid, 2);
		PlayerLicznikTaxi(player,   2);
		return 1;
	}
	if(GetPlayerVehicleID(player) != vehicleid)
	{
		SendClientMessage(playerid,-1,"{a4a4a4}Klient opuscil pojazd.");
		KillTimer(PlayerData[player][pTimerLicznikTaxi]);
		GivePlayerCash(player, -calkowitykoszt);
		GiveFrakcjaCash(PlayerData[playerid][pFrakcja], calkowitykoszt);
		PlayerLicznikTaxi(playerid, 2);
		PlayerLicznikTaxi(player,   2);
		return 1;
	}
	if(GetPlayerCash(player)<kwota)
	{
		SendClientMessage(playerid,-1,"{a4a4a4}Klient nie posiada wiecej pieniedzy na zaplacenie za przejazd.");
		RemovePlayerFromVehicle(player);
		KillTimer(PlayerData[player][pTimerLicznikTaxi]);
		GivePlayerCash(player, -calkowitykoszt);
		GiveFrakcjaCash(PlayerData[playerid][pFrakcja], calkowitykoszt);
		PlayerLicznikTaxi(playerid, 2);
		PlayerLicznikTaxi(player,   2);
		return 1;
	}
	PlayerLicznikTaxi(playerid, 4, player,   kwota, przejechal, calkowitykoszt);
	PlayerLicznikTaxi(player, 4,   player, 	 kwota,	przejechal, calkowitykoszt);
	return 1;
}


forward SetVehiclePaliwo(vehicleid);
public SetVehiclePaliwo(vehicleid)
{
	if(ToRower(vehicleid)||ToPrzyczepa(vehicleid)||ToRC(vehicleid))
	{
		VehicleData[vehicleid][vPaliwo]=1;
		VehicleData[vehicleid][vPaliwoMax]=1;
		return 1;
	}
	if(ToAutobus(vehicleid))
	{
		VehicleData[vehicleid][vPaliwo]=60;
		VehicleData[vehicleid][vPaliwoMax]=60;
		return 1;
	}
	if(ToBus(vehicleid))
	{
		VehicleData[vehicleid][vPaliwo]=50;
		VehicleData[vehicleid][vPaliwoMax]=50;
		return 1;
	}
	if(ToCiezarowka(vehicleid))
	{
		VehicleData[vehicleid][vPaliwo]=100;
		VehicleData[vehicleid][vPaliwoMax]=100;
		return 1;
	}
	if(ToHelikopter(vehicleid))
	{
		VehicleData[vehicleid][vPaliwo]=70;
		VehicleData[vehicleid][vPaliwoMax]=70;
		return 1;
	}
	if(ToSamolot(vehicleid))
	{
		VehicleData[vehicleid][vPaliwo]=100;
		VehicleData[vehicleid][vPaliwoMax]=100;
		return 1;
	}
	if(ToLodz(vehicleid))
	{
		VehicleData[vehicleid][vPaliwo]=40;
		VehicleData[vehicleid][vPaliwoMax]=40;
		return 1;
	}
	if(ToMotor(vehicleid))
	{
		VehicleData[vehicleid][vPaliwo]=30;
		VehicleData[vehicleid][vPaliwoMax]=30;
		return 1;
	}
	if(ToOsobowy(vehicleid))
	{
		VehicleData[vehicleid][vPaliwo]=50;
		VehicleData[vehicleid][vPaliwoMax]=50;
		return 1;
	}
	return 1;
}

stock CreateVehicleEx(vehicletype, Float:x, Float:y, Float:z, Float:rotation, color1, color2, respawn_delay, addsiren=0)
{
	new vehicleid = CreateVehicle(vehicletype, x, y, z, rotation, color1, color2, respawn_delay, addsiren);
	
	if(GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 510)  //Odpalamy silniki dla rowerow
	{
		SetVehicleParamsEx(vehicleid, 1, false,false,false,false,false,false);
	}
	else
	{
		SetVehicleParamsEx(vehicleid,false,false,false,false,false,false,false);
	}
	
	if(VehKierunki[vehicleid][2] ) DestroyDynamicObject(VehKierunki[vehicleid][5]),DestroyDynamicObject(VehKierunki[vehicleid][2]), DestroyDynamicObject(VehKierunki[vehicleid][3]),VehKierunki[vehicleid][2]=0;
	if(VehKierunki[vehicleid][0]) DestroyDynamicObject(VehKierunki[vehicleid][4]),DestroyDynamicObject(VehKierunki[vehicleid][0]), DestroyDynamicObject(VehKierunki[vehicleid][1]),VehKierunki[vehicleid][0]=0;
				
	VehicleData[vehicleid][vAdminCar]  = false;
	VehicleData[vehicleid][vEventCar]  = false;
	VehicleData[vehicleid][vMapperCar]  = false;
	VehicleData[vehicleid][vPrivateCar] = 0;
	VehicleData[vehicleid][vFirmyCar] = 0;
	VehicleData[vehicleid][vFrakcjiCar] = 0;
	VehicleData[vehicleid][vNaukaJazdy] = 0;
	VehicleData[vehicleid][vUID] = 0;
	VehicleData[vehicleid][vKanalCB] = 19;
	VehicleData[vehicleid][vEngine] = 0;
	VehicleData[vehicleid][vLocked] = 0;
	VehicleData[vehicleid][vSwiatla] = 0;
	VehicleData[vehicleid][vLastDriver] = -1;
	VehicleData[vehicleid][vModel] = GetVehicleModel(vehicleid);
	VehicleData[vehicleid][vHP] = 1000;
	VehicleData[vehicleid][vWheelsBlock] = 0;
	VehicleData[vehicleid][vPaliwoTyp] = 0;
	VehicleData[vehicleid][vPaliwo] = VehicleData[vehicleid][vPaliwoMax];
	VehicleData[vehicleid][vOponaLT_DMG] = 10.0;
	VehicleData[vehicleid][vOponaLP_DMG] = 10.0;
	VehicleData[vehicleid][vOponaPP_DMG] = 10.0;
	VehicleData[vehicleid][vOponaPT_DMG] = 10.0;
	SetVehiclePaliwo(vehicleid);
	RepairVehicleEx(vehicleid);
	SetTimerEx("RefreshVehicle3DText", 1500, false, "d", vehicleid);
	return vehicleid;
}

forward RefreshVehicle3DText(vehicleid);
public RefreshVehicle3DText(vehicleid)
{
	new data[200], str_frakcja[64], Float: x, Float: y, Float: z;
	GetVehiclePos(vehicleid, x,y,z);
	switch(VehicleData[vehicleid][vFrakcjiCar])
	{
		case 1: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_1);
		case 2: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_2);
		case 3: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_3);
		case 4: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_4);
		case 5: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_5);
		case 6: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_6);
		case 7: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_7);
		case 8: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_8);
		case 9: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_9);
		case 10: format(str_frakcja, sizeof(str_frakcja), "%s", GRUPA_LEVEL_10);
	}
	
	if(VehicleData[vehicleid][vNaukaJazdy] != 0)
	{
		format(data,sizeof(data),"[Pojazd Nauki Jazdy]\n{FFEBC5}ID: %d | UID: %d", vehicleid, VehicleData[vehicleid][vUID]);
	}
	if(VehicleData[vehicleid][vFirmyCar] != 0)
	{
		format(data,sizeof(data),"[Pojazd Firmowy]\n%s\n{FFEBC5}ID: %d | UID: %d", FirmaData[VehicleData[vehicleid][vFirmyCar]][fName], vehicleid, VehicleData[vehicleid][vUID]);
	}
	else if(VehicleData[vehicleid][vFrakcjiCar] != 0)
	{
		format(data,sizeof(data),"[Pojazd Frakcji]\n%s\n{FFEBC5}ID: %d | UID: %d", str_frakcja, vehicleid, VehicleData[vehicleid][vUID]);
	}
	else if(VehicleData[vehicleid][vAdminCar] != false)
	{
		format(data,sizeof(data),"[Polski Truck Rozrywki]");
		format(data,sizeof(data),"[Pojazd Administracji]\n{FFEBC5}ID: %d | UID: %d", vehicleid, VehicleData[vehicleid][vUID]);
	}
	else if(VehicleData[vehicleid][vMapperCar] != false)
	{
		format(data,sizeof(data),"[Polski Truck Rozrywki]");
		format(data,sizeof(data),"[Pojazd Mappera]\n{FFEBC5}ID: %d | UID: %d", vehicleid, VehicleData[vehicleid][vUID]);
	}
	else if(VehicleData[vehicleid][vEventCar] != false)
	{
		format(data,sizeof(data),"[Polski Truck Rozrywki]");
		format(data,sizeof(data),"[Pojazd Eventowy]\n{FFEBC5}ID: %d | UID: %d", vehicleid, VehicleData[vehicleid][vUID]);
	}
	else if(VehicleData[vehicleid][vPrivateCar] != 0)
	{
		format(data,sizeof(data),"[Pojazd prywatny]\nMarka: %s\nWlasciciel: %s\n{FFEBC5}ID: %d | UID: %d", CarList[GetVehicleModel(vehicleid)-400], VehicleData[vehicleid][vOwner], vehicleid, VehicleData[vehicleid][vUID]);
	}
	else if(VehicleData[vehicleid][vPrivateCar] == 0 && VehicleData[vehicleid][vAdminCar] == false && VehicleData[vehicleid][vMapperCar] == false && VehicleData[vehicleid][vEventCar] == false && VehicleData[vehicleid][vFrakcjiCar] == 0 &&  VehicleData[vehicleid][vFirmyCar] == 0) 
	{
		format(data,sizeof(data),"[Polski Truck Rozrywki]");
		format(data,sizeof(data),"[[Pojazd Publiczny]\n{FFEBC5}ID: %d | UID: %d", vehicleid, VehicleData[vehicleid][vUID]);
	}
	
	//native STREAMER_TAG_3D_TEXT_LABEL CreateDynamic3DTextLabel(const text[], color, Float:x, Float:y, Float:z, Float:drawdistance, attachedplayer = INVALID_PLAYER_ID, attachedvehicle = INVALID_VEHICLE_ID, testlos = 0, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = STREAMER_3D_TEXT_LABEL_SD);
	
	if(IsValidDynamic3DTextLabel(VehicleData[vehicleid][vText3d])) DestroyDynamic3DTextLabel(VehicleData[vehicleid][vText3d]);
	VehicleData[vehicleid][vText3d] = CreateDynamic3DTextLabel(data, 0x82FA58EE, x, y, z, 4.0, INVALID_PLAYER_ID, vehicleid);
	Attach3DTextLabelToVehicle( VehicleData[vehicleid][vText3d] , vehicleid, 0.0, 0.0, 2.0);
	return 1;
}

stock RepairVehicleEx(vehicleid, bool:opony = true)
{
	if(opony == true)
	{
		VehicleData[vehicleid][vOponaLT_DMG] = 10.0;
		VehicleData[vehicleid][vOponaLP_DMG] = 10.0;
		VehicleData[vehicleid][vOponaPP_DMG] = 10.0;
		VehicleData[vehicleid][vOponaPT_DMG] = 10.0;
	}
	
	RepairVehicle(vehicleid);
	VehicleData[vehicleid][vHP] = 1000;
	return 1;
}


AntiDeAMX()
{
	new a[][] =
	{
		"Unarmed (Fist)",
		"Brass K"
	};
	#pragma unused a
}


stock PlayerTelefon1(playerid, type = 0, selecthide = 1)
{
	if(PlayerData[playerid][pLogged] == false) return 1;
	if(type == 0) //tworzy
	{
	
		Txd_ptelefon[playerid][0] = CreatePlayerTextDraw(playerid, 620.334106, 225.244461, "ld_poke:cdback");
		PlayerTextDrawLetterSize(playerid, Txd_ptelefon[playerid][0], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_ptelefon[playerid][0], -93.333404, 167.999938);
		PlayerTextDrawAlignment(playerid, Txd_ptelefon[playerid][0], 1);
		PlayerTextDrawColor(playerid, Txd_ptelefon[playerid][0], 255);
		PlayerTextDrawSetShadow(playerid, Txd_ptelefon[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, Txd_ptelefon[playerid][0], 0);
		PlayerTextDrawFont(playerid, Txd_ptelefon[playerid][0], 4);

		Txd_ptelefon[playerid][1] = CreatePlayerTextDraw(playerid, 527.666564, 233.955535, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Txd_ptelefon[playerid][1], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_ptelefon[playerid][1], -0.333344, 149.748107);
		PlayerTextDrawAlignment(playerid, Txd_ptelefon[playerid][1], 1);
		PlayerTextDrawColor(playerid, Txd_ptelefon[playerid][1], -1);
		PlayerTextDrawSetShadow(playerid, Txd_ptelefon[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, Txd_ptelefon[playerid][1], 0);
		PlayerTextDrawFont(playerid, Txd_ptelefon[playerid][1], 4);

		Txd_ptelefon[playerid][2] = CreatePlayerTextDraw(playerid, 619.999877, 233.955551, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Txd_ptelefon[playerid][2], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_ptelefon[playerid][2], -0.333393, 148.088912);
		PlayerTextDrawAlignment(playerid, Txd_ptelefon[playerid][2], 1);
		PlayerTextDrawColor(playerid, Txd_ptelefon[playerid][2], -1);
		PlayerTextDrawSetShadow(playerid, Txd_ptelefon[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, Txd_ptelefon[playerid][2], 0);
		PlayerTextDrawFont(playerid, Txd_ptelefon[playerid][2], 4);

		Txd_ptelefon[playerid][3] = CreatePlayerTextDraw(playerid, 555.999938, 375.407440, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Txd_ptelefon[playerid][3], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_ptelefon[playerid][3], 35.666748, 8.711116);
		PlayerTextDrawAlignment(playerid, Txd_ptelefon[playerid][3], 1);
		PlayerTextDrawColor(playerid, Txd_ptelefon[playerid][3], -2139062017);
		PlayerTextDrawUseBox(playerid, Txd_ptelefon[playerid][3], true);
		PlayerTextDrawBoxColor(playerid, Txd_ptelefon[playerid][3], 0);
		PlayerTextDrawSetShadow(playerid, Txd_ptelefon[playerid][3], 0);
		PlayerTextDrawSetOutline(playerid, Txd_ptelefon[playerid][3], 0);
		PlayerTextDrawFont(playerid, Txd_ptelefon[playerid][3], 4);
		PlayerTextDrawSetSelectable(playerid, Txd_ptelefon[playerid][3], true);

		Txd_ptelefon[playerid][4] = CreatePlayerTextDraw(playerid, 604.666320, 231.051895, "ld_pool:ball");
		PlayerTextDrawLetterSize(playerid, Txd_ptelefon[playerid][4], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_ptelefon[playerid][4], 4.999999, 5.392589);
		PlayerTextDrawAlignment(playerid, Txd_ptelefon[playerid][4], 1);
		PlayerTextDrawColor(playerid, Txd_ptelefon[playerid][4], -2139062017);
		PlayerTextDrawSetShadow(playerid, Txd_ptelefon[playerid][4], 0);
		PlayerTextDrawSetOutline(playerid, Txd_ptelefon[playerid][4], 0);
		PlayerTextDrawFont(playerid, Txd_ptelefon[playerid][4], 4);

		Txd_ptelefon[playerid][5] = CreatePlayerTextDraw(playerid, 594.000061, 226.488922, "ld_pool:ball");
		PlayerTextDrawLetterSize(playerid, Txd_ptelefon[playerid][5], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_ptelefon[playerid][5], -4.333116, 4.562942);
		PlayerTextDrawAlignment(playerid, Txd_ptelefon[playerid][5], 1);
		PlayerTextDrawColor(playerid, Txd_ptelefon[playerid][5], -2139062017);
		PlayerTextDrawSetShadow(playerid, Txd_ptelefon[playerid][5], 0);
		PlayerTextDrawSetOutline(playerid, Txd_ptelefon[playerid][5], 0);
		PlayerTextDrawFont(playerid, Txd_ptelefon[playerid][5], 4);

		Txd_ptelefon[playerid][6] = CreatePlayerTextDraw(playerid, 588.000000, 226.903701, "ld_spac:white");
		PlayerTextDrawLetterSize(playerid, Txd_ptelefon[playerid][6], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_ptelefon[playerid][6], -30.666687, 3.733319);
		PlayerTextDrawAlignment(playerid, Txd_ptelefon[playerid][6], 1);
		PlayerTextDrawColor(playerid, Txd_ptelefon[playerid][6], -1061109505);
		PlayerTextDrawSetShadow(playerid, Txd_ptelefon[playerid][6], 0);
		PlayerTextDrawSetOutline(playerid, Txd_ptelefon[playerid][6], 0);
		PlayerTextDrawFont(playerid, Txd_ptelefon[playerid][6], 4);
		PlayerTextDrawSetSelectable(playerid, Txd_ptelefon[playerid][6], true);

		Txd_ptelefon[playerid][7] = CreatePlayerTextDraw(playerid, 550.333312, 226.488891, "ld_pool:ball");
		PlayerTextDrawLetterSize(playerid, Txd_ptelefon[playerid][7], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_ptelefon[playerid][7], 4.148149, 4.148149);
		PlayerTextDrawAlignment(playerid, Txd_ptelefon[playerid][7], 1);
		PlayerTextDrawColor(playerid, Txd_ptelefon[playerid][7], -2139062017);
		PlayerTextDrawSetShadow(playerid, Txd_ptelefon[playerid][7], 0);
		PlayerTextDrawSetOutline(playerid, Txd_ptelefon[playerid][7], 0);
		PlayerTextDrawFont(playerid, Txd_ptelefon[playerid][7], 4);

		Txd_ptelefon[playerid][8] = CreatePlayerTextDraw(playerid, 529.333374, 241.422210, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Txd_ptelefon[playerid][8], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_ptelefon[playerid][8], 88.333312, 125.688919);
		PlayerTextDrawAlignment(playerid, Txd_ptelefon[playerid][8], 1);
		PlayerTextDrawColor(playerid, Txd_ptelefon[playerid][8], 8388863);
		PlayerTextDrawSetShadow(playerid, Txd_ptelefon[playerid][8], 0);
		PlayerTextDrawSetOutline(playerid, Txd_ptelefon[playerid][8], 0);
		PlayerTextDrawFont(playerid, Txd_ptelefon[playerid][8], 4);

		Txd_ptelefon[playerid][9] = CreatePlayerTextDraw(playerid, 530.000122, 241.837081, "Brak nowych powiadomien_____LTE 10:00");
		PlayerTextDrawLetterSize(playerid, Txd_ptelefon[playerid][9], 0.109999, 0.562961);
		PlayerTextDrawAlignment(playerid, Txd_ptelefon[playerid][9], 1);
		PlayerTextDrawColor(playerid, Txd_ptelefon[playerid][9], -1);
		PlayerTextDrawSetShadow(playerid, Txd_ptelefon[playerid][9], 0);
		PlayerTextDrawSetOutline(playerid, Txd_ptelefon[playerid][9], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_ptelefon[playerid][9], 51);
		PlayerTextDrawFont(playerid, Txd_ptelefon[playerid][9], 1);
		PlayerTextDrawSetProportional(playerid, Txd_ptelefon[playerid][9], 1);

		Txd_ptelefon[playerid][10] = CreatePlayerTextDraw(playerid, 529.666687, 247.644485, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Txd_ptelefon[playerid][10], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_ptelefon[playerid][10], 88.333312, -0.414824);
		PlayerTextDrawAlignment(playerid, Txd_ptelefon[playerid][10], 1);
		PlayerTextDrawColor(playerid, Txd_ptelefon[playerid][10], -1);
		PlayerTextDrawSetShadow(playerid, Txd_ptelefon[playerid][10], 0);
		PlayerTextDrawSetOutline(playerid, Txd_ptelefon[playerid][10], 0);
		PlayerTextDrawFont(playerid, Txd_ptelefon[playerid][10], 4);

		Txd_ptelefon[playerid][11] = CreatePlayerTextDraw(playerid, 536.666992, 265.896148, "hud:radar_cash");
		PlayerTextDrawLetterSize(playerid, Txd_ptelefon[playerid][11], 0.000000, -8.833331);
		PlayerTextDrawTextSize(playerid, Txd_ptelefon[playerid][11], 17.333295, 13.688873);
		PlayerTextDrawAlignment(playerid, Txd_ptelefon[playerid][11], 1);
		PlayerTextDrawColor(playerid, Txd_ptelefon[playerid][11], -1);
		PlayerTextDrawSetShadow(playerid, Txd_ptelefon[playerid][11], 0);
		PlayerTextDrawSetOutline(playerid, Txd_ptelefon[playerid][11], 0);
		PlayerTextDrawFont(playerid, Txd_ptelefon[playerid][11], 4);
		PlayerTextDrawSetSelectable(playerid, Txd_ptelefon[playerid][11], true);

		Txd_ptelefon[playerid][12] = CreatePlayerTextDraw(playerid, 565.000244, 265.896331, "hud:radar_hostpital");
		PlayerTextDrawLetterSize(playerid, Txd_ptelefon[playerid][12], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_ptelefon[playerid][12], 15.000000, 14.518512);
		PlayerTextDrawAlignment(playerid, Txd_ptelefon[playerid][12], 1);
		PlayerTextDrawColor(playerid, Txd_ptelefon[playerid][12], -1);
		PlayerTextDrawSetShadow(playerid, Txd_ptelefon[playerid][12], 0);
		PlayerTextDrawSetOutline(playerid, Txd_ptelefon[playerid][12], 0);
		PlayerTextDrawFont(playerid, Txd_ptelefon[playerid][12], 4);
		PlayerTextDrawSetSelectable(playerid, Txd_ptelefon[playerid][12], true);

		Txd_ptelefon[playerid][13] = CreatePlayerTextDraw(playerid, 592.333374, 263.407318, "hud:radar_impound");
		PlayerTextDrawLetterSize(playerid, Txd_ptelefon[playerid][13], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_ptelefon[playerid][13], 15.999979, 17.007423);
		PlayerTextDrawAlignment(playerid, Txd_ptelefon[playerid][13], 1);
		PlayerTextDrawColor(playerid, Txd_ptelefon[playerid][13], -1);
		PlayerTextDrawSetShadow(playerid, Txd_ptelefon[playerid][13], 0);
		PlayerTextDrawSetOutline(playerid, Txd_ptelefon[playerid][13], 0);
		PlayerTextDrawFont(playerid, Txd_ptelefon[playerid][13], 4);
		PlayerTextDrawSetSelectable(playerid, Txd_ptelefon[playerid][13], true);

		Txd_ptelefon[playerid][14] = CreatePlayerTextDraw(playerid, 537.666503, 297.422119, "hud:radar_police");
		PlayerTextDrawLetterSize(playerid, Txd_ptelefon[playerid][14], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_ptelefon[playerid][14], 14.666625, 15.762947);
		PlayerTextDrawAlignment(playerid, Txd_ptelefon[playerid][14], 1);
		PlayerTextDrawColor(playerid, Txd_ptelefon[playerid][14], -1);
		PlayerTextDrawSetShadow(playerid, Txd_ptelefon[playerid][14], 0);
		PlayerTextDrawSetOutline(playerid, Txd_ptelefon[playerid][14], 0);
		PlayerTextDrawFont(playerid, Txd_ptelefon[playerid][14], 4);
		PlayerTextDrawSetSelectable(playerid, Txd_ptelefon[playerid][14], true);

		Txd_ptelefon[playerid][15] = CreatePlayerTextDraw(playerid, 563.666748, 297.837036, "hud:radar_modGarage");
		PlayerTextDrawLetterSize(playerid, Txd_ptelefon[playerid][15], 0.000000, 3.499998);
		PlayerTextDrawTextSize(playerid, Txd_ptelefon[playerid][15], 16.000038, 16.592594);
		PlayerTextDrawAlignment(playerid, Txd_ptelefon[playerid][15], 1);
		PlayerTextDrawColor(playerid, Txd_ptelefon[playerid][15], -1);
		PlayerTextDrawUseBox(playerid, Txd_ptelefon[playerid][15], true);
		PlayerTextDrawBoxColor(playerid, Txd_ptelefon[playerid][15], 255);
		PlayerTextDrawSetShadow(playerid, Txd_ptelefon[playerid][15], 0);
		PlayerTextDrawSetOutline(playerid, Txd_ptelefon[playerid][15], 0);
		PlayerTextDrawFont(playerid, Txd_ptelefon[playerid][15], 4);
		PlayerTextDrawSetSelectable(playerid, Txd_ptelefon[playerid][15], true);

		Txd_ptelefon[playerid][16] = CreatePlayerTextDraw(playerid, 593.666625, 297.837005, "hud:radar_fire");
		PlayerTextDrawLetterSize(playerid, Txd_ptelefon[playerid][16], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_ptelefon[playerid][16], 15.666748, 15.348140);
		PlayerTextDrawAlignment(playerid, Txd_ptelefon[playerid][16], 1);
		PlayerTextDrawColor(playerid, Txd_ptelefon[playerid][16], -1);
		PlayerTextDrawUseBox(playerid, Txd_ptelefon[playerid][16], true);
		PlayerTextDrawBoxColor(playerid, Txd_ptelefon[playerid][16], 0);
		PlayerTextDrawSetShadow(playerid, Txd_ptelefon[playerid][16], 0);
		PlayerTextDrawSetOutline(playerid, Txd_ptelefon[playerid][16], 0);
		PlayerTextDrawFont(playerid, Txd_ptelefon[playerid][16], 4);
		PlayerTextDrawSetSelectable(playerid, Txd_ptelefon[playerid][16], true);

		Txd_ptelefon[playerid][17] = CreatePlayerTextDraw(playerid, 536.000000, 332.266601, "hud:radar_gangG");
		PlayerTextDrawLetterSize(playerid, Txd_ptelefon[playerid][17], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_ptelefon[playerid][17], 17.999958, 16.592590);
		PlayerTextDrawAlignment(playerid, Txd_ptelefon[playerid][17], 1);
		PlayerTextDrawColor(playerid, Txd_ptelefon[playerid][17], -1);
		PlayerTextDrawSetShadow(playerid, Txd_ptelefon[playerid][17], 0);
		PlayerTextDrawSetOutline(playerid, Txd_ptelefon[playerid][17], 0);
		PlayerTextDrawFont(playerid, Txd_ptelefon[playerid][17], 4);
		PlayerTextDrawSetSelectable(playerid, Txd_ptelefon[playerid][17], true);

		Txd_ptelefon[playerid][18] = CreatePlayerTextDraw(playerid, 563.666625, 331.022216, "hud:radar_WOOZIE");
		PlayerTextDrawLetterSize(playerid, Txd_ptelefon[playerid][18], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_ptelefon[playerid][18], 15.000000, 17.422241);
		PlayerTextDrawAlignment(playerid, Txd_ptelefon[playerid][18], 1);
		PlayerTextDrawColor(playerid, Txd_ptelefon[playerid][18], -1);
		PlayerTextDrawSetShadow(playerid, Txd_ptelefon[playerid][18], 0);
		PlayerTextDrawSetOutline(playerid, Txd_ptelefon[playerid][18], 0);
		PlayerTextDrawFont(playerid, Txd_ptelefon[playerid][18], 4);
		PlayerTextDrawSetSelectable(playerid, Txd_ptelefon[playerid][18], true);

		
		/*
		Txd_ptelefon[playerid][19] = CreatePlayerTextDraw(playerid, 593.666625, 331.851806, "hud:radar_WOOZIE");
		PlayerTextDrawLetterSize(playerid, Txd_ptelefon[playerid][19], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_ptelefon[playerid][19], 15.333374, 17.422241);
		PlayerTextDrawAlignment(playerid, Txd_ptelefon[playerid][19], 1);
		PlayerTextDrawColor(playerid, Txd_ptelefon[playerid][19], -1);
		PlayerTextDrawSetShadow(playerid, Txd_ptelefon[playerid][19], 0);
		PlayerTextDrawSetOutline(playerid, Txd_ptelefon[playerid][19], 0);
		PlayerTextDrawFont(playerid, Txd_ptelefon[playerid][19], 4);
		PlayerTextDrawSetSelectable(playerid, Txd_ptelefon[playerid][19], true);
		
		*/


	}
	if(type == 1) 
	{
		 
	}
	if(type == 2) //Pokazywanie textdrawow
	{
		for(new i = 0; i != 19; i++)
		{
			PlayerTextDrawShow(playerid, Txd_ptelefon[playerid][i]);
		}
		SelectTextDraw(playerid, 0x00FF00FF);
		
		new tdstring[128], times[3];
		gettime(times[0], times[1], times[2]);
		format(tdstring, sizeof tdstring, "Brak nowych powiadomien_____LTE %s%d:%s%d", (times[0] < 10) ? ("0") : (""), times[0], (times[1] < 10) ? ("0") : (""), times[1]);
		PlayerTextDrawSetString(playerid, Txd_ptelefon[playerid][9], tdstring);
	}
	if(type == 3) //Ukrywanie textdrawow
	{
		for(new i = 0; i != 19; i++)
		{
			PlayerTextDrawHide(playerid, Txd_ptelefon[playerid][i]);
		}
		
		if(selecthide == 1)
		{
			CancelSelectTextDraw(playerid);
		}
		PlayerData[playerid][pShowPanelTelefon] = false;
	}
	if(type == 4) //Ukrywanie oraz usuwanie textdrawow.
	{
		for(new i = 0; i != 19; i++)
		{
			PlayerTextDrawHide(playerid, Txd_ptelefon[playerid][i]);
			PlayerTextDrawDestroy(playerid, Txd_ptelefon[playerid][i]);
		}
	}
	return 1;
}
stock ConvertSec(seconds, &days ,&hours, &minutes)
{
	if(seconds <= 0) 
	{
		days = 0;
		hours = 0;
		minutes = 0;
		return 1;
	}
    days = seconds / 86400;
    seconds -= days * 86400;
    hours = seconds / 3600;
    seconds -= hours * 3600;
    minutes = seconds / 60;
	return 1;
}

stock ConvertSec2(secs, &hours, &minutes, &seconds)
{
  if (secs <= 0) return false;
  minutes = secs / 60;
  seconds = secs % 60;
  hours = minutes / 60;
  minutes = minutes % 60;
  return 1;
}

stock PlayerNapadPanel(playerid, type = 0)
{
	if(PlayerData[playerid][pLogged] == false) return 1;
	if(type == 0)
	{
	
		Txd_napadp[playerid][0] = CreatePlayerTextDraw(playerid, 101.666671, 303.229675, "ld_poke:cdback");
		PlayerTextDrawLetterSize(playerid, Txd_napadp[playerid][0], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_napadp[playerid][0], 139.666656, 88.770431);
		PlayerTextDrawAlignment(playerid, Txd_napadp[playerid][0], 1);
		PlayerTextDrawColor(playerid, Txd_napadp[playerid][0], 69905);
		PlayerTextDrawSetShadow(playerid, Txd_napadp[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, Txd_napadp[playerid][0], 0);
		PlayerTextDrawFont(playerid, Txd_napadp[playerid][0], 4);

		Txd_napadp[playerid][1] = CreatePlayerTextDraw(playerid, 135.000015, 364.622253, "LD_SPAC:white");
		PlayerTextDrawLetterSize(playerid, Txd_napadp[playerid][1], 0.000000, 0.000000);
		PlayerTextDrawTextSize(playerid, Txd_napadp[playerid][1], 75.000068, 21.570388);
		PlayerTextDrawAlignment(playerid, Txd_napadp[playerid][1], 1);
		PlayerTextDrawColor(playerid, Txd_napadp[playerid][1], 8388863);
		PlayerTextDrawSetShadow(playerid, Txd_napadp[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, Txd_napadp[playerid][1], 0);
		PlayerTextDrawFont(playerid, Txd_napadp[playerid][1], 4);
		PlayerTextDrawSetSelectable(playerid, Txd_napadp[playerid][1], true);

		Txd_napadp[playerid][2] = CreatePlayerTextDraw(playerid, 103.333251, 311.111450, "Organizacja: x~n~Napad na: x (999)~n~Liczba osob napadajacych: x~n~Liczba osob LSPD: x~n~Pozostaly czas: x minut, x sekund");
		PlayerTextDrawLetterSize(playerid, Txd_napadp[playerid][2], 0.187333, 1.019258);
		PlayerTextDrawTextSize(playerid, Txd_napadp[playerid][2], 240.001495, -3988.028808);
		PlayerTextDrawAlignment(playerid, Txd_napadp[playerid][2], 1);
		PlayerTextDrawColor(playerid, Txd_napadp[playerid][2], -1);
		PlayerTextDrawSetShadow(playerid, Txd_napadp[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, Txd_napadp[playerid][2], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_napadp[playerid][2], 51);
		PlayerTextDrawFont(playerid, Txd_napadp[playerid][2], 1);
		PlayerTextDrawSetProportional(playerid, Txd_napadp[playerid][2], 1);

		Txd_napadp[playerid][3] = CreatePlayerTextDraw(playerid, 145.666717, 369.185180, "DOLACZ");
		PlayerTextDrawLetterSize(playerid, Txd_napadp[playerid][3], 0.336666, 1.247407);
		PlayerTextDrawTextSize(playerid, Txd_napadp[playerid][3], 201.666595, 97.481475);
		PlayerTextDrawAlignment(playerid, Txd_napadp[playerid][3], 1);
		PlayerTextDrawColor(playerid, Txd_napadp[playerid][3], -1);
		//PlayerTextDrawUseBox(playerid, Txd_napadp[playerid][3], true);
		PlayerTextDrawBoxColor(playerid, Txd_napadp[playerid][3], 255);
		PlayerTextDrawSetShadow(playerid, Txd_napadp[playerid][3], 0);
		PlayerTextDrawSetOutline(playerid, Txd_napadp[playerid][3], 1);
		PlayerTextDrawBackgroundColor(playerid, Txd_napadp[playerid][3], 51);
		PlayerTextDrawFont(playerid, Txd_napadp[playerid][3], 2);
		PlayerTextDrawSetProportional(playerid, Txd_napadp[playerid][3], 1);
		PlayerTextDrawSetSelectable(playerid, Txd_napadp[playerid][3], true);


	}
	if(type == 1) //pokaz
	{
		for(new i = 0; i != 4; i++)
		{
			PlayerTextDrawShow(playerid, Txd_napadp[playerid][i]);
		}
	}
	if(type == 2) //ukryj
	{
		for(new i = 0; i != 4; i++)
		{
			PlayerTextDrawHide(playerid, Txd_napadp[playerid][i]);
		}
	}
	if(type == 3) //ukryj i usun
	{
		for(new i = 0; i != 4; i++)
		{
			PlayerTextDrawHide(playerid, Txd_napadp[playerid][i]);
			PlayerTextDrawDestroy(playerid, Txd_napadp[playerid][i]);
		}
	}
	if(type == 4) //show for org
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(GetPlayerFrakcja(i, NapadData[nFrakcja])) continue;
			SendClientMessage(i, -1, "{a4a4a4}Uzyj komendy /n aby uruchomic kursor.");
			for(new x = 0; x != 4; x++)
			{
				PlayerTextDrawShow(i, Txd_napadp[i][x]);
			}
		}
	}
	if(type == 6) //show for  lspd
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(GetPlayerFrakcja(i, FRAKCJA_POLICJI)) continue;
			for(new x = 0; x != 4; x++)
			{
				PlayerTextDrawShow(i, Txd_napadp[i][x]);
			}
		}
	}
	if(type == 7) //hide for org
	{
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(GetPlayerFrakcja(i, NapadData[nFrakcja])) continue;
			for(new x = 0; x != 4; x++)
			{
				PlayerTextDrawHide(i, Txd_napadp[i][x]);
			}
		}
	}
	if(type == 5) //refresh 
	{
		if(NapadData[nAktywny] == false) return 1;
		
		new Godzin, Minut, Sekund, l_str[200];
		ConvertSec2(NapadData[nCzas] - gettime(), Godzin, Minut, Sekund);
	
		format(l_str,sizeof(l_str),"\
		Organizacja: %s~n~\
		Napad na: %s (%d)~n~\
		Liczba osob napadajacych: %d~n~\
		Liczba osob LSPD: %d~n~\
		Pozostaly czas: %d minut, %d sekund", NapadData[nFrakcjaSTR], NapadData[nBudynek], NapadData[nBudynekUID], NapadData[nLudzieOrg], NapadData[nLudzieLSPD], Minut, Sekund);
		
		for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
		{
			if(PlayerData[i][pLogged] == false) continue;
			if(GetPlayerFrakcja(i, FRAKCJA_POLICJI) && GetPlayerFrakcja(i, NapadData[nFrakcja])) continue;
			
			for(new ii = 0; ii != 4; ii++)
			{
				PlayerTextDrawShow(i, Txd_napadp[i][ii]);
			}
			PlayerTextDrawSetString(i, Txd_napadp[i][2], l_str);
		}
		
		/*
		for(new ii = 0; ii != 4; ii++)
		{	
			PlayerTextDrawShow(playerid, Txd_napadp[playerid][ii]);
		}
		
		new Godzin, Minut, Sekund, l_str[200];
		ConvertSec2(NapadData[nCzas] - gettime(), Godzin, Minut, Sekund);
		

		format(l_str,sizeof(l_str),"\
										Organizacja: %s~n~\
										Napad na: %s (%d)~n~\
										Liczba osob napadajacych: %d~n~\
										Liczba osob LSPD: %d~n~\
										Pozostaly czas: %d minut, %d sekund", NapadData[nFrakcjaSTR], NapadData[nBudynek], NapadData[nBudynekUID], NapadData[nLudzieOrg], NapadData[nLudzieLSPD], Minut, Sekund);
		PlayerTextDrawSetString(playerid, Txd_napadp[playerid][2], l_str);
		*/

	}
	return 1;
}
/*public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z)
{
	if(handbrake[vehicleid] == true)
	{
		SetVehiclePos(vehicleid, handbrake_pos[vehicleid][0], handbrake_pos[vehicleid][1], handbrake_pos[vehicleid][2]);
		SetVehicleZAngle(vehicleid, handbrake_pos[vehicleid][3]);
	}
	return true;
}*/


/*
                                                                   
																   
																   
																   
           	@ Wszelkie prawa zastrzezone @
	             	2017 | 2018
		Oryginalny skrypt-gamemodes / zostal stworzony przez NitrO	i Hammel						
*/


